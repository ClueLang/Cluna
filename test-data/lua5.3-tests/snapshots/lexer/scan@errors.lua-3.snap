---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/errors.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing errors\"",
        ),
        line: 4,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 6,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 6,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        line: 6,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 9,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 9,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 9,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 9,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 9,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 9,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldmm",
        ),
        line: 10,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 10,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 11,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 11,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 11,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 11,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 13,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 13,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 13,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 13,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 13,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 13,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 14,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 14,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 14,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 14,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 14,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 14,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 15,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 15,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 15,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 15,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 15,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 15,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 16,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 19,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 20,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 20,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 21,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 21,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 21,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 21,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 21,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 21,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cond",
        ),
        line: 22,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 22,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 23,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cond",
        ),
        line: 23,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 23,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 24,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 27,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 27,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 28,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 29,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 30,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 32,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 32,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 32,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extra",
        ),
        line: 32,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 32,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 32,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 33,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 34,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 34,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 34,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 34,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^<%a\"",
        ),
        line: 34,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 34,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 34,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 34,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 34,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^char%(\"",
        ),
        line: 34,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 35,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 35,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'\"",
        ),
        line: 35,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 35,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 35,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'\"",
        ),
        line: 35,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 36,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 36,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 36,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%p)\"",
        ),
        line: 36,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%%%1\"",
        ),
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pt",
        ),
        line: 37,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 37,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[^%%[string \".*\"%%]:%d: .- near %s$]]",
        ),
        line: 37,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 39,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pt",
        ),
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 40,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 40,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 40,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error('hi', 0)\"",
        ),
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 45,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'hi'",
        ),
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 48,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 48,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error()\"",
        ),
        line: 48,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 48,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 48,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 52,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 52,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table.unpack({}, 1, n=2^30)\"",
        ),
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=math.sin()\"",
        ),
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring(1)\"",
        ),
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring()\"",
        ),
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 55,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 55,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber()\"",
        ),
        line: 55,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 56,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 56,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"repeat until 1; a\"",
        ),
        line: 56,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 57,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return;;\"",
        ),
        line: 57,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 58,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(false)\"",
        ),
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 59,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(nil)\"",
        ),
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function a (... , ...) end\"",
        ),
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function a (, ...) end\"",
        ),
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local t={}; t = t[#t] + 1\"",
        ),
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 64,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  local a = {4\n\n]]",
        ),
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'}' expected (to close '{' at line 1)\"",
        ),
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 72,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = {} + 1\"",
        ),
        line: 72,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"arithmetic\"",
        ),
        line: 72,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = {} | 1\"",
        ),
        line: 73,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bitwise operation\"",
        ),
        line: 73,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = {} < 1\"",
        ),
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to compare\"",
        ),
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = {} <= 1\"",
        ),
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 75,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to compare\"",
        ),
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=1; bbbb=2; a=math.sin(3)+bbbb(3)\"",
        ),
        line: 77,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'bbbb'\"",
        ),
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a={}; do local a=1 end a:bbbb(3)\"",
        ),
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"method 'bbbb'\"",
        ),
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a={}; a.bbbb(3)\"",
        ),
        line: 79,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 79,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'bbbb'\"",
        ),
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 80,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 80,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a={13}; local bbbb=1; a[bbbb](3)\"",
        ),
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'bbbb'\"",
        ),
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a={13}; local bbbb=1; a[bbbb](3)\"",
        ),
        line: 81,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=(1)..{}\"",
        ),
        line: 82,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 82,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a table value\"",
        ),
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 84,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = #print\"",
        ),
        line: 84,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"length of a function value\"",
        ),
        line: 84,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 85,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = #3\"",
        ),
        line: 85,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"length of a number value\"",
        ),
        line: 85,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aaa",
        ),
        line: 87,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 87,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa.bbb:ddd(9)\"",
        ),
        line: 88,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 88,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        line: 88,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local aaa={bbb=1}; aaa.bbb:ddd(9)\"",
        ),
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'bbb'\"",
        ),
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 90,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local aaa={bbb={}}; aaa.bbb:ddd(9)\"",
        ),
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"method 'ddd'\"",
        ),
        line: 90,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 91,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,c; (function () a = b+1 end)()\"",
        ),
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"upvalue 'b'\"",
        ),
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 92,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local aaa={bbb={ddd=next}}; aaa.bbb:ddd(nil)\"",
        ),
        line: 92,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,cc; (function () a = cc[1] end)()\"",
        ),
        line: 95,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"upvalue 'cc'\"",
        ),
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,cc; (function () a.x = 1 end)()\"",
        ),
        line: 96,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"upvalue 'a'\"",
        ),
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 98,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local _ENV = {x={}}; a = a + 1\"",
        ),
        line: 98,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'a'\"",
        ),
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 100,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b=1; local aaa='a'; x=aaa+b\"",
        ),
        line: 100,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'aaa'\"",
        ),
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; x=3/aaa\"",
        ),
        line: 101,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        line: 101,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 102,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa='2'; b=nil;x=aaa*b\"",
        ),
        line: 102,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'b'\"",
        ),
        line: 102,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 103,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; x=-aaa\"",
        ),
        line: 103,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 103,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        line: 103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=1; local a,bbbb=2,3; a = math.sin(1) and bbbb(3)\"",
        ),
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'bbbb'\"",
        ),
        line: 107,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=1; local a,bbbb=2,3; a = bbbb(1) or a(3)\"",
        ),
        line: 108,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 108,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'bbbb'\"",
        ),
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,c,f = 1,1,1; f((a and b) or c)\"",
        ),
        line: 109,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 109,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'f'\"",
        ),
        line: 109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 110,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,c = 1,1,1; ((a and b) or c)()\"",
        ),
        line: 110,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 110,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call a number value\"",
        ),
        line: 110,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 111,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 111,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; x=(aaa or aaa)+(aaa and aaa)\"",
        ),
        line: 111,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aaa'\"",
        ),
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 112,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 112,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; (aaa or aaa)()\"",
        ),
        line: 112,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 112,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aaa'\"",
        ),
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(print < 10)\"",
        ),
        line: 114,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function with number\"",
        ),
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(print < print)\"",
        ),
        line: 115,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 115,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"two function values\"",
        ),
        line: 115,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 116,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print('10' < 10)\"",
        ),
        line: 116,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string with number\"",
        ),
        line: 116,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(10 < '23')\"",
        ),
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number with string\"",
        ),
        line: 117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 2.0^100; x = a << 2\"",
        ),
        line: 120,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a\"",
        ),
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 1 >> 2.0^100\"",
        ),
        line: 121,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 121,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = '10' << 2.0^100\"",
        ),
        line: 122,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 2.0^100 & 1\"",
        ),
        line: 123,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 123,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 2.0^100 & '1'\"",
        ),
        line: 124,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 2.0 | 1e40\"",
        ),
        line: 125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 2e100 ~ 1\"",
        ),
        line: 126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 127,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string.sub('a', 2.0^100)\"",
        ),
        line: 127,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 127,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 128,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string.rep('a', 3.3)\"",
        ),
        line: 128,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 128,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 6e40 & 7\"",
        ),
        line: 129,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 130,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 34 << 7e30\"",
        ),
        line: 130,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return ~-3e40\"",
        ),
        line: 131,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 131,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 132,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return ~-3.009\"",
        ),
        line: 132,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 132,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 3.009 & 1\"",
        ),
        line: 133,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 133,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 34 >> {}\"",
        ),
        line: 134,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table value\"",
        ),
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = 24 // 0\"",
        ),
        line: 135,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"divide by zero\"",
        ),
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = 1 % 0\"",
        ),
        line: 136,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'n%0'\"",
        ),
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 140,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 140,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  -- create light udata\n  local x = D.upvalueid(function () return debug end, 1)\n  D.setuservalue(x, {})\n]]",
        ),
        line: 145,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"light userdata\"",
        ),
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 146,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 146,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 146,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 146,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"math.sin(io.input())\"",
        ),
        line: 149,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(number expected, got FILE*)\"",
        ),
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 150,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        line: 150,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 150,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 150,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__name",
        ),
        line: 150,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 150,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"My Type\"",
        ),
        line: 150,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 151,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^My Type\"",
        ),
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"io.input(XX)\"",
        ),
        line: 152,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(FILE* expected, got My Type)\"",
        ),
        line: 152,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return XX + 1\"",
        ),
        line: 153,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"on a My Type value\"",
        ),
        line: 153,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return ~io.stdin\"",
        ),
        line: 154,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"on a FILE* value\"",
        ),
        line: 154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return XX < XX\"",
        ),
        line: 155,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"two My Type values\"",
        ),
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return {} < XX\"",
        ),
        line: 156,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table with My Type\"",
        ),
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 157,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 157,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return XX < io.stdin\"",
        ),
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"My Type with FILE*\"",
        ),
        line: 157,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 158,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        line: 158,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 158,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 158,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(io.write or print){}\"",
        ),
        line: 162,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 162,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"io.write\"",
        ),
        line: 162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(collectgarbage or print){}\"",
        ),
        line: 163,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 163,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"collectgarbage\"",
        ),
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 166,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 167,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 167,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 167,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 167,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 167,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 168,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 168,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 168,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 168,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 168,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 169,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 169,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%?:%-1:\"",
        ),
        line: 170,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 170,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 170,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 173,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 173,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 173,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 173,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 173,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 173,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 173,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 173,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 173,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 173,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 175,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 175,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 175,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 175,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%?:%-1:.*table value\"",
        ),
        line: 177,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 178,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 182,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 182,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 182,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 182,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 183,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 183,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 183,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 184,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 184,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 184,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 184,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = x\"",
        ),
        line: 184,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 184,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 185,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 186,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 186,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 186,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 186,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; \"",
        ),
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 187,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 187,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 188,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 188,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 188,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; a = bbb + 1\"",
        ),
        line: 188,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 188,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'bbb'\"",
        ),
        line: 188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 189,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local _ENV=_ENV;\"",
        ),
        line: 189,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 189,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 189,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; a = bbb + 1\"",
        ),
        line: 189,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 189,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'bbb'\"",
        ),
        line: 189,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 190,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 190,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; local t = {}; a = t.bbb + 1\"",
        ),
        line: 190,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'bbb'\"",
        ),
        line: 190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 191,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 191,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; local t = {}; t:bbb()\"",
        ),
        line: 191,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"method 'bbb'\"",
        ),
        line: 191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 193,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[aaa=9\nrepeat until 3==3\nlocal x=math.sin(math.cos(3))\nif math.sin(1) == x then return math.sin(1) end   -- tail call\nlocal a,b = 1, {\n  {x='a'..'b'..'c', y='b', z=x},\n  {1,2,3,4,5} or 3+3<=3+3,\n  3+1>3+1,\n  {d = x and aaa[x or y]}}\n]]",
        ),
        line: 202,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 202,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        line: 202,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal x,y = {},1\nif math.sin(1) == 0 then return 3 end    -- return\nx.a()]]",
        ),
        line: 207,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 207,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'a'\"",
        ),
        line: 207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 209,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nprefix = nil\ninsert = nil\nwhile 1 do\n  local a\n  if nil then break end\n  insert(prefix, a)\nend]]",
        ),
        line: 216,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'insert'\"",
        ),
        line: 216,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 218,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[  -- tail call\n  return math.sin(\"a\")\n]]",
        ),
        line: 220,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 220,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'sin'\"",
        ),
        line: 220,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[collectgarbage(\"nooption\")]]",
        ),
        line: 222,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 222,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid option\"",
        ),
        line: 222,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 224,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[x = print .. \"a\"]]",
        ),
        line: 224,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concatenate\"",
        ),
        line: 224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 225,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[x = \"a\" .. false]]",
        ),
        line: 225,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 225,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concatenate\"",
        ),
        line: 225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 226,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[x = {} .. 2]]",
        ),
        line: 226,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concatenate\"",
        ),
        line: 226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"getmetatable(io.stdin).__gc()\"",
        ),
        line: 228,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 228,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no value\"",
        ),
        line: 228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 230,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal Var\nlocal function main()\n  NoSuchName (function() Var=0 end)\nend\nmain()\n]]",
        ),
        line: 236,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 236,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'NoSuchName'\"",
        ),
        line: 236,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 237,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 239,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 239,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 239,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 239,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 239,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 239,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 239,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 239,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 239,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 239,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 240,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a:sub()\"",
        ),
        line: 240,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 240,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bad self\"",
        ),
        line: 240,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string.sub('a', {})\"",
        ),
        line: 241,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 241,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#2\"",
        ),
        line: 241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 242,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"('a'):sub{}\"",
        ),
        line: 242,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#1\"",
        ),
        line: 242,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 244,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table.sort({1,2,3}, table.sort)\"",
        ),
        line: 244,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 244,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'table.sort'\"",
        ),
        line: 244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string.gsub('s', 's', setmetatable)\"",
        ),
        line: 245,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'setmetatable'\"",
        ),
        line: 245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 249,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 249,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 250,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 250,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 250,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 251,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 251,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 251,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 251,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 251,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 252,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 254,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C stack overflow\"",
        ),
        line: 254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 256,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"coroutine.yield()\"",
        ),
        line: 256,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"outside a coroutine\"",
        ),
        line: 256,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 258,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 258,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 258,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 258,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 258,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        line: 258,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 258,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 258,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 258,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 259,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yield across\"",
        ),
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "idsize",
        ),
        line: 264,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 264,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 264,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 265,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksize",
        ),
        line: 265,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 265,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 267,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 267,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 267,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 267,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 268,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 268,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 268,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^([^:]*):\"",
        ),
        line: 268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 269,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "idsize",
        ),
        line: 269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 270,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 272,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 272,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 272,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 272,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 272,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 272,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 272,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 272,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 272,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksize",
        ),
        line: 273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@\"",
        ),
        line: 273,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 273,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 273,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksize",
        ),
        line: 274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 274,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 274,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 274,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 274,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksize",
        ),
        line: 275,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=\"",
        ),
        line: 275,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 275,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 275,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 275,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 275,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 276,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 281,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 281,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 282,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 282,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 282,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 283,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 283,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 283,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 283,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 283,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\":(%d+):\"",
        ),
        line: 283,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 284,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 284,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 284,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 284,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 284,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a\\n for i=1,'a' do \\n print(i) \\n end\"",
        ),
        line: 287,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 287,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 288,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n local a \\n for k,v in 3 \\n do \\n print(k) \\n end\"",
        ),
        line: 288,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 288,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 289,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\n for k,v in \\n 3 \\n do \\n print(k) \\n end\"",
        ),
        line: 289,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 289,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 289,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 290,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 290,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function a.x.y ()\\na=a+1\\nend\"",
        ),
        line: 290,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 290,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = \\na\\n+\\n{}\"",
        ),
        line: 292,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 292,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = \\n3\\n+\\n(\\n4\\n/\\nprint)\"",
        ),
        line: 293,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 293,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 294,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = \\nprint\\n+\\n(\\n4\\n/\\n7)\"",
        ),
        line: 294,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 294,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 296,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 296,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\\n=\\n-\\n\\nprint\\n;\"",
        ),
        line: 296,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 296,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 296,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 298,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\na\n(\n23)\n]]",
        ),
        line: 302,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 302,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 302,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal a = {x = 13}\na\n.\nx\n(\n23\n)\n]]",
        ),
        line: 312,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 312,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 314,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal a = {x = 13}\na\n.\nx\n(\n23 + a\n)\n]]",
        ),
        line: 322,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 322,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 322,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 324,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 324,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  function g() f() end\n  function f(x) error('a', X) end\ng()\n]]",
        ),
        line: 328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 329,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 329,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 329,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 329,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 329,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 329,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 330,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 330,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 330,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 330,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 330,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 331,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 331,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 331,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 331,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 331,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 331,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 331,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 332,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 332,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 332,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 332,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 335,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 335,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 337,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 338,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing stack overflow\"",
        ),
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 339,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 339,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 339,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 340,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 340,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 340,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 340,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 340,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 340,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 340,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 340,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 340,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 340,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 342,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 343,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 343,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 343,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^.-:%d+: stack overflow\"",
        ),
        line: 343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 346,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        line: 346,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 346,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y()'",
        ),
        line: 346,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 348,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        line: 348,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 348,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y()'",
        ),
        line: 348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 350,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        line: 350,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 350,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y()'",
        ),
        line: 350,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 355,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 355,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 355,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 356,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 357,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 357,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 357,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 358,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 358,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 358,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 358,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 358,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 358,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 358,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 359,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 360,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stackmsg",
        ),
        line: 360,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 360,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 360,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 360,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 360,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 361,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 361,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 361,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 362,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 362,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 362,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 362,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 363,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 363,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stackmsg",
        ),
        line: 363,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 363,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[^\\n]*\"",
        ),
        line: 363,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 363,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "curr",
        ),
        line: 364,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 364,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 364,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 364,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 364,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\":(%d+):\"",
        ),
        line: 364,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 364,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "curr",
        ),
        line: 365,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 365,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 365,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 365,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 365,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "curr",
        ),
        line: 365,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 365,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 366,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 367,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 367,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 367,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 368,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 368,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 368,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 368,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 369,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 369,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 369,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 369,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 370,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 370,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 370,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 370,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 372,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 372,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 376,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 376,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 376,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 377,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 377,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 378,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 378,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 378,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 378,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 380,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 380,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 380,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 381,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 381,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 381,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 381,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 381,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\n'",
        ),
        line: 381,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 381,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 382,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 383,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 383,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 383,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 383,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 383,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 383,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 383,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 384,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 384,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 384,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 384,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 384,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 385,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 385,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 386,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 388,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 388,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 388,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 390,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 390,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 390,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 390,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 390,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 390,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 390,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 390,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 392,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 392,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 392,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 392,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 392,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 392,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 392,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 393,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 393,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 393,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 393,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 393,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stack overflow\"",
        ),
        line: 393,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 394,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 394,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error handling\"",
        ),
        line: 394,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 394,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 395,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 395,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 395,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 395,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 398,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 398,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 398,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 400,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 400,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 400,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 401,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 401,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "999900",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 401,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000000",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 401,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 401,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 401,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 401,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 401,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 401,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 401,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 401,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 401,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 403,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 403,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many results\"",
        ),
        line: 403,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 403,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 403,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 405,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 408,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 410,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 410,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 410,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 410,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 411,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 411,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 412,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 412,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 412,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 414,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 414,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 414,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 414,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 414,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 414,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 414,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 415,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 415,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 415,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 415,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 415,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 415,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 415,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 417,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 417,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 417,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 417,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 417,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 417,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 417,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 418,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 418,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 418,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 418,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 418,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 418,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 418,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 418,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 418,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 418,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 418,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 418,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y'",
        ),
        line: 418,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 418,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 418,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 419,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 419,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 419,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 419,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xy'",
        ),
        line: 419,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 422,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 422,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 422,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 422,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        line: 422,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 422,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 423,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 423,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 423,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 423,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        line: 423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 426,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 426,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 427,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 427,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 427,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 427,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 427,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w+%.lua:(%d+): assertion failed!$\"",
        ),
        line: 427,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 428,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 428,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 428,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 428,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 428,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 431,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 431,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 431,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 431,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 431,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 431,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 432,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 432,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 434,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 434,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 434,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 434,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 435,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 435,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 435,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 435,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 435,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 435,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 438,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 438,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 438,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 438,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 439,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 439,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 439,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 439,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 439,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 439,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 439,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"value expected\"",
        ),
        line: 439,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 439,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 439,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 443,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 443,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 443,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 443,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 443,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"al\"",
        ),
        line: 443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 444,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 444,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 444,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 444,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 444,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 444,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 444,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 444,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 445,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 445,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 445,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 445,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 445,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 445,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 445,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 445,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 445,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 445,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 445,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 445,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 445,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 445,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 445,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 445,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 445,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"al\"",
        ),
        line: 445,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 446,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 446,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 446,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 446,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 446,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 446,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 446,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 446,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 446,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 446,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 446,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 449,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing tokens in error messages\"",
        ),
        line: 449,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"syntax error\"",
        ),
        line: 450,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 450,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 450,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 450,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error\"",
        ),
        line: 450,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 450,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 450,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1.000\"",
        ),
        line: 451,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 451,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 451,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 451,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1.000\"",
        ),
        line: 451,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 451,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 451,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 452,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[a]]\"",
        ),
        line: 452,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 452,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 452,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 452,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[a]]\"",
        ),
        line: 452,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 452,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 452,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 453,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 453,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aa'\"",
        ),
        line: 453,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 453,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 453,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 453,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aa'\"",
        ),
        line: 453,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 453,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 454,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"while << do end\"",
        ),
        line: 454,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 454,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 454,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 454,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<<\"",
        ),
        line: 454,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 454,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 454,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 455,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 455,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for >> do end\"",
        ),
        line: 455,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 455,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 455,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 455,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">>\"",
        ),
        line: 455,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 455,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 455,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 458,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 458,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\\1a = 1\"",
        ),
        line: 458,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 458,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 458,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 458,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<\\\\1>\"",
        ),
        line: 458,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 458,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 461,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\255a = 1\"",
        ),
        line: 461,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 461,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 461,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 461,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<\\\\255>\"",
        ),
        line: 461,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 461,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 461,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 463,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'I = load(\"a=9+\"); a=3'",
        ),
        line: 463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 464,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 464,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 464,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "I",
        ),
        line: 464,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 464,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 465,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 465,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 467,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 467,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 467,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 468,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 468,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 468,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 468,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 468,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 469,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 469,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 469,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 469,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 470,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a = '",
        ),
        line: 470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 471,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 471,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a = 4+nil'",
        ),
        line: 471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 471,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 472,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxClevel",
        ),
        line: 477,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 477,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 477,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 479,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "init",
        ),
        line: 479,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 479,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 479,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "repc",
        ),
        line: 479,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 479,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 480,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "init",
        ),
        line: 480,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 480,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 480,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 480,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxClevel",
        ),
        line: 480,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 480,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 480,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 480,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 481,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 481,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "repc",
        ),
        line: 481,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxClevel",
        ),
        line: 481,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 481,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 481,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 482,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 482,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 483,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "init",
        ),
        line: 483,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 483,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 483,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 483,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxClevel",
        ),
        line: 483,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 483,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 484,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 484,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 484,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many C levels\"",
        ),
        line: 484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 484,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 487,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 487,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; a\"",
        ),
        line: 487,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 487,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",a\"",
        ),
        line: 487,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 487,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"= 1\"",
        ),
        line: 487,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 487,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",1\"",
        ),
        line: 487,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 488,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 488,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; a=\"",
        ),
        line: 488,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 488,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"{\"",
        ),
        line: 488,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 488,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        line: 488,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 488,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"}\"",
        ),
        line: 488,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 489,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 489,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; a=\"",
        ),
        line: 489,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 489,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(\"",
        ),
        line: 489,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 489,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 489,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 489,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\")\"",
        ),
        line: 489,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 490,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 490,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; \"",
        ),
        line: 490,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 490,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a(\"",
        ),
        line: 490,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 490,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 490,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 490,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\")\"",
        ),
        line: 490,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 491,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 491,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 491,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"do \"",
        ),
        line: 491,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 491,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 491,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 491,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" end\"",
        ),
        line: 491,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 492,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 492,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 492,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 492,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"while a do \"",
        ),
        line: 492,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 492,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 492,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 492,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" end\"",
        ),
        line: 492,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 493,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 493,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; \"",
        ),
        line: 493,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 493,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"if a then else \"",
        ),
        line: 493,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 493,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 493,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 493,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" end\"",
        ),
        line: 493,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 494,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 494,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 494,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 494,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function foo () \"",
        ),
        line: 494,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 494,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 494,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 494,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" end\"",
        ),
        line: 494,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 495,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 495,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; a=\"",
        ),
        line: 495,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 495,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a..\"",
        ),
        line: 495,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 495,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 495,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 495,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 496,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; a=\"",
        ),
        line: 496,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 496,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a^\"",
        ),
        line: 496,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 496,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 496,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 496,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 498,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 498,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = f(x\"",
        ),
        line: 498,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 498,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 498,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 498,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",x\"",
        ),
        line: 498,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 498,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "260",
                    after_decimal: "",
                },
            ),
        ),
        line: 498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 498,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 498,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\")\"",
        ),
        line: 498,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 498,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many registers\"",
        ),
        line: 498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 498,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 504,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 504,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "127",
                    after_decimal: "",
                },
            ),
        ),
        line: 504,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 505,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 505,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local function fooA ()\\n  local \"",
        ),
        line: 505,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 506,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 506,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 506,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 506,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 507,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 507,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 507,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 507,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 507,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 507,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        line: 507,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 509,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 509,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 509,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b,c\\n\"",
        ),
        line: 509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 510,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 510,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 510,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local function fooB ()\\n  local \"",
        ),
        line: 510,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 511,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 511,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 511,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 511,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 512,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 512,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 512,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 512,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 512,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 512,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        line: 512,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 514,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 514,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 514,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\\n\"",
        ),
        line: 514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 515,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 515,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 515,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function fooC () return b+c\"",
        ),
        line: 515,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 516,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 516,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 516,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 516,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 516,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 517,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 517,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 517,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 517,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 518,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 518,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 518,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+a\"",
        ),
        line: 518,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 518,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 518,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+b\"",
        ),
        line: 518,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 519,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 519,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 519,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 519,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 521,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 521,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 521,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nend  end end\"",
        ),
        line: 521,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 522,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 522,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 522,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 522,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 523,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 523,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 523,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 523,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 523,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 523,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 523,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 523,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many upvalues\"",
        ),
        line: 523,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 523,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 524,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 524,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 524,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line 5\"",
        ),
        line: 524,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 524,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 527,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 527,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nfunction foo ()\\n  local \"",
        ),
        line: 527,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 528,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 528,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 528,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 528,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 528,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 529,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 529,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 529,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 529,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 529,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 529,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        line: 529,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 531,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 531,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 531,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\\n\"",
        ),
        line: 531,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 532,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 532,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 532,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 533,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 533,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 533,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line 2\"",
        ),
        line: 533,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 533,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 533,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 533,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many local variables\"",
        ),
        line: 533,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 535,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 535,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldmm",
        ),
        line: 535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 537,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 537,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 537,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 537,
    },
]
