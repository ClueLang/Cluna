---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/big.lua
---
[
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 4,
        column: 3,
        span: 98..100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 4,
        column: 9,
        span: 101..106,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 4,
        column: 0,
        span: 107..111,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 5,
        column: 9,
        span: 114..120,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 5,
        column: 13,
        span: 121..124,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 6,
        column: 0,
        span: 125..128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 8,
        column: 6,
        span: 130..135,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing large tables\"",
        ),
        line: 8,
        column: 29,
        span: 136..158,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 10,
        column: 6,
        span: 160..165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 10,
        column: 12,
        span: 166..171,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 10,
        column: 14,
        span: 172..173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 10,
        column: 22,
        span: 174..181,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        line: 10,
        column: 29,
        span: 181..188,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 12,
        column: 6,
        span: 191..196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 12,
        column: 10,
        span: 197..200,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 12,
        column: 12,
        span: 201..202,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 12,
        column: 14,
        span: 202..204,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 12,
        column: 15,
        span: 204..205,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "18",
                    after_decimal: "",
                },
            ),
        ),
        line: 12,
        column: 17,
        span: 204..207,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 12,
        column: 19,
        span: 208..209,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 12,
        column: 0,
        span: 209..214,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 13,
        column: 6,
        span: 215..220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 13,
        column: 11,
        span: 221..225,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 13,
        column: 13,
        span: 226..227,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 13,
        column: 15,
        span: 228..229,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local y = {0\"",
        ),
        line: 13,
        column: 30,
        span: 230..244,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 13,
        column: 32,
        span: 245..246,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 14,
        column: 4,
        span: 247..250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 14,
        column: 6,
        span: 251..252,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 14,
        column: 8,
        span: 253..254,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 14,
        column: 10,
        span: 254..256,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 14,
        column: 11,
        span: 256..257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 14,
        column: 15,
        span: 258..261,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 14,
        column: 18,
        span: 262..264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 14,
        column: 23,
        span: 265..269,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 14,
        column: 24,
        span: 269..270,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 14,
        column: 25,
        span: 270..271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 14,
        column: 29,
        span: 271..275,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 14,
        column: 31,
        span: 276..277,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 14,
        column: 33,
        span: 277..279,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 14,
        column: 34,
        span: 279..280,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 14,
        column: 36,
        span: 281..282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 14,
        column: 38,
        span: 283..284,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 14,
        column: 0,
        span: 286..289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 15,
        column: 5,
        span: 290..294,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 15,
        column: 6,
        span: 294..295,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 15,
        column: 7,
        span: 295..296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 15,
        column: 11,
        span: 296..300,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 15,
        column: 13,
        span: 301..302,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 15,
        column: 15,
        span: 302..304,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 15,
        column: 16,
        span: 304..305,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 15,
        column: 18,
        span: 306..307,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"}\\n\"",
        ),
        line: 15,
        column: 24,
        span: 308..313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 16,
        column: 5,
        span: 314..318,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 16,
        column: 6,
        span: 318..319,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 16,
        column: 7,
        span: 319..320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 16,
        column: 11,
        span: 320..324,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 16,
        column: 13,
        span: 325..326,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 16,
        column: 15,
        span: 326..328,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 16,
        column: 16,
        span: 328..329,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 16,
        column: 18,
        span: 330..331,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X = y\\n\"",
        ),
        line: 16,
        column: 28,
        span: 332..341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 17,
        column: 5,
        span: 342..346,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 17,
        column: 6,
        span: 346..347,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 17,
        column: 7,
        span: 347..348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 17,
        column: 11,
        span: 348..352,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 17,
        column: 13,
        span: 353..354,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 17,
        column: 15,
        span: 354..356,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 17,
        column: 16,
        span: 356..357,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 17,
        column: 18,
        span: 358..359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 20,
        span: 360..361,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(X[%d] == %d)\"",
        ),
        line: 17,
        column: 41,
        span: 361..382,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 42,
        span: 382..383,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 17,
        column: 43,
        span: 383..384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 17,
        column: 49,
        span: 384..390,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 50,
        span: 390..391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 17,
        column: 53,
        span: 391..394,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 17,
        column: 55,
        span: 395..396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 17,
        column: 57,
        span: 396..398,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 17,
        column: 58,
        span: 398..399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 17,
        column: 62,
        span: 400..403,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 17,
        column: 64,
        span: 404..405,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 17,
        column: 66,
        span: 405..407,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 67,
        span: 407..408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 18,
        column: 5,
        span: 409..413,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 18,
        column: 6,
        span: 413..414,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 18,
        column: 7,
        span: 414..415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 18,
        column: 11,
        span: 415..419,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 18,
        column: 13,
        span: 420..421,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 18,
        column: 15,
        span: 421..423,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 18,
        column: 16,
        span: 423..424,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 18,
        column: 18,
        span: 425..426,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 0\"",
        ),
        line: 18,
        column: 29,
        span: 427..437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 19,
        column: 5,
        span: 438..442,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 19,
        column: 7,
        span: 443..444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 19,
        column: 13,
        span: 445..450,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 19,
        column: 14,
        span: 450..451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 19,
        column: 20,
        span: 451..457,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 21,
        span: 457..458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 19,
        column: 25,
        span: 458..462,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
        column: 26,
        span: 462..463,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 19,
        column: 30,
        span: 464..467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 31,
        span: 467..468,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 21,
        column: 6,
        span: 470..475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "env",
        ),
        line: 21,
        column: 10,
        span: 476..479,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
        column: 12,
        span: 480..481,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 21,
        column: 14,
        span: 482..483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 21,
        column: 20,
        span: 483..489,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
        column: 22,
        span: 490..491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 21,
        column: 29,
        span: 492..498,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 30,
        span: 498..499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 21,
        column: 37,
        span: 500..506,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
        column: 39,
        span: 507..508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 21,
        column: 46,
        span: 509..515,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 21,
        column: 47,
        span: 515..516,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 22,
        column: 6,
        span: 517..522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 22,
        column: 8,
        span: 523..524,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 22,
        column: 10,
        span: 525..526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 22,
        column: 17,
        span: 527..533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 18,
        span: 533..534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 22,
        column: 22,
        span: 534..538,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 23,
        span: 538..539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 22,
        column: 27,
        span: 539..543,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 28,
        span: 543..544,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 22,
        column: 32,
        span: 545..548,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 33,
        span: 548..549,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 22,
        column: 37,
        span: 550..553,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 38,
        span: 553..554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "env",
        ),
        line: 22,
        column: 42,
        span: 555..558,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 43,
        span: 558..559,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 44,
        span: 559..560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 24,
        column: 2,
        span: 562..563,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 3,
        span: 563..564,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 4,
        span: 564..565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 25,
        column: 7,
        span: 566..572,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 8,
        span: 572..573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "env",
        ),
        line: 25,
        column: 11,
        span: 573..576,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 25,
        column: 12,
        span: 576..577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 25,
        column: 13,
        span: 577..578,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 25,
        column: 14,
        span: 578..579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 25,
        column: 17,
        span: 579..582,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 25,
        column: 18,
        span: 582..583,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 25,
        column: 21,
        span: 584..586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 25,
        column: 25,
        span: 587..590,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 25,
        column: 27,
        span: 591..592,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 29,
        span: 592..594,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 25,
        column: 33,
        span: 595..598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "env",
        ),
        line: 25,
        column: 37,
        span: 599..602,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 25,
        column: 38,
        span: 602..603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 25,
        column: 39,
        span: 603..604,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 25,
        column: 40,
        span: 604..605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 25,
        column: 43,
        span: 605..608,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 25,
        column: 45,
        span: 609..610,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 47,
        span: 610..612,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 25,
        column: 48,
        span: 612..613,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 25,
        column: 51,
        span: 614..616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 25,
        column: 55,
        span: 617..620,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 56,
        span: 620..621,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 26,
        column: 4,
        span: 622..625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 26,
        column: 6,
        span: 626..627,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 26,
        column: 9,
        span: 628..630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 26,
        column: 15,
        span: 631..636,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 16,
        span: 636..637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "env",
        ),
        line: 26,
        column: 19,
        span: 637..640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 20,
        span: 640..641,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 26,
        column: 23,
        span: 642..644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "env",
        ),
        line: 26,
        column: 27,
        span: 645..648,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 26,
        column: 28,
        span: 648..649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 26,
        column: 29,
        span: 649..650,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 26,
        column: 30,
        span: 650..651,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 26,
        column: 32,
        span: 652..653,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 26,
        column: 36,
        span: 654..657,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 26,
        column: 0,
        span: 658..661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 29,
        column: 13,
        span: 711..723,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 14,
        span: 723..724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "env",
        ),
        line: 29,
        column: 17,
        span: 724..727,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 18,
        span: 727..728,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 29,
        column: 20,
        span: 729..730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 30,
        column: 10,
        span: 733..740,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 30,
        column: 12,
        span: 741..742,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 30,
        column: 21,
        span: 743..751,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 23,
        span: 752..753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 30,
        column: 24,
        span: 753..754,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
        column: 25,
        span: 754..755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 30,
        column: 27,
        span: 756..757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 28,
        span: 757..758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 30,
        column: 38,
        span: 759..768,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 30,
        column: 39,
        span: 768..769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 30,
        column: 44,
        span: 769..774,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 45,
        span: 774..775,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'g'",
        ),
        line: 30,
        column: 48,
        span: 775..778,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 49,
        span: 778..779,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 30,
        column: 50,
        span: 779..780,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 30,
        column: 57,
        span: 781..787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 30,
        column: 60,
        span: 788..790,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 30,
        column: 61,
        span: 790..791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 30,
        column: 62,
        span: 791..792,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 30,
        column: 63,
        span: 792..793,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 30,
        column: 67,
        span: 794..797,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
        column: 68,
        span: 797..798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        line: 31,
        column: 13,
        span: 801..811,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 31,
        column: 15,
        span: 812..813,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 31,
        column: 24,
        span: 814..822,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 26,
        span: 823..824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 31,
        column: 27,
        span: 824..825,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
        column: 28,
        span: 825..826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 31,
        column: 30,
        span: 827..828,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
        column: 31,
        span: 828..829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 31,
        column: 33,
        span: 830..831,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 34,
        span: 831..832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 31,
        column: 44,
        span: 833..842,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 31,
        column: 45,
        span: 842..843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 31,
        column: 50,
        span: 843..848,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 51,
        span: 848..849,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'s'",
        ),
        line: 31,
        column: 54,
        span: 849..852,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 55,
        span: 852..853,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 31,
        column: 56,
        span: 853..854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 31,
        column: 59,
        span: 855..857,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 31,
        column: 60,
        span: 857..858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 31,
        column: 61,
        span: 858..859,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 31,
        column: 62,
        span: 859..860,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 31,
        column: 64,
        span: 861..862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 31,
        column: 66,
        span: 863..864,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 31,
        column: 70,
        span: 865..868,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
        column: 71,
        span: 868..869,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 32,
        column: 2,
        span: 870..871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 3,
        span: 871..872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 34,
        column: 2,
        span: 874..875,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 34,
        column: 4,
        span: 876..877,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 34,
        column: 0,
        span: 878..881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 35,
        column: 3,
        span: 882..884,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 35,
        column: 5,
        span: 885..886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 35,
        column: 15,
        span: 887..896,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 35,
        column: 16,
        span: 896..897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 35,
        column: 20,
        span: 897..901,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 21,
        span: 901..902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 35,
        column: 22,
        span: 902..903,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 23,
        span: 903..904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 36,
        column: 7,
        span: 905..911,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 8,
        span: 911..912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 36,
        column: 10,
        span: 912..914,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 11,
        span: 914..915,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 12,
        span: 915..916,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 36,
        column: 15,
        span: 917..919,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'s'",
        ),
        line: 36,
        column: 19,
        span: 920..923,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 20,
        span: 923..924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 37,
        column: 7,
        span: 925..931,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 8,
        span: 931..932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 37,
        column: 10,
        span: 932..934,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 11,
        span: 934..935,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 12,
        span: 935..936,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 37,
        column: 15,
        span: 937..939,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'g'",
        ),
        line: 37,
        column: 19,
        span: 940..943,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 20,
        span: 943..944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 38,
        column: 7,
        span: 945..951,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 8,
        span: 951..952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 38,
        column: 10,
        span: 952..954,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 11,
        span: 954..955,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 12,
        span: 955..956,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 38,
        column: 15,
        span: 957..959,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'g'",
        ),
        line: 38,
        column: 19,
        span: 960..963,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 20,
        span: 963..964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 39,
        column: 7,
        span: 965..971,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 8,
        span: 971..972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 39,
        column: 10,
        span: 972..974,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 11,
        span: 974..975,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 12,
        span: 975..976,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 39,
        column: 15,
        span: 977..979,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 17,
        span: 979..981,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 18,
        span: 981..982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 41,
        column: 7,
        span: 984..990,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 8,
        span: 990..991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 41,
        column: 9,
        span: 991..992,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 41,
        column: 10,
        span: 992..993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 41,
        column: 13,
        span: 993..996,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 41,
        column: 14,
        span: 996..997,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 17,
        span: 998..1000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 41,
        column: 21,
        span: 1001..1004,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 41,
        column: 23,
        span: 1005..1006,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
        column: 25,
        span: 1006..1008,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 41,
        column: 29,
        span: 1009..1012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 41,
        column: 31,
        span: 1013..1014,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 41,
        column: 32,
        span: 1014..1015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 41,
        column: 35,
        span: 1015..1018,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 41,
        column: 37,
        span: 1019..1020,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
        column: 39,
        span: 1020..1022,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 41,
        column: 40,
        span: 1022..1023,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 43,
        span: 1024..1026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 41,
        column: 47,
        span: 1027..1030,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 48,
        span: 1030..1031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 44,
        column: 13,
        span: 1077..1089,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 14,
        span: 1089..1090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "env",
        ),
        line: 44,
        column: 17,
        span: 1090..1093,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 18,
        span: 1093..1094,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
        column: 19,
        span: 1094..1095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 44,
        column: 26,
        span: 1095..1102,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 44,
        column: 28,
        span: 1103..1104,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 44,
        column: 37,
        span: 1105..1113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 39,
        span: 1114..1115,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 40,
        span: 1115..1116,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 44,
        column: 0,
        span: 1117..1120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 45,
        column: 13,
        span: 1121..1133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 14,
        span: 1133..1134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "env",
        ),
        line: 45,
        column: 17,
        span: 1134..1137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 18,
        span: 1137..1138,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
        column: 19,
        span: 1138..1139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        line: 45,
        column: 29,
        span: 1139..1149,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 45,
        column: 31,
        span: 1150..1151,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 45,
        column: 40,
        span: 1152..1160,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 42,
        span: 1161..1162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 43,
        span: 1162..1163,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 45,
        column: 0,
        span: 1164..1167,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 46,
        column: 6,
        span: 1168..1173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 46,
        column: 8,
        span: 1174..1175,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 9,
        span: 1175..1176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 46,
        column: 11,
        span: 1177..1178,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 46,
        column: 13,
        span: 1179..1180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 46,
        column: 19,
        span: 1181..1186,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 20,
        span: 1186..1187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 46,
        column: 21,
        span: 1187..1188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 22,
        span: 1188..1189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 47,
        column: 7,
        span: 1190..1196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 8,
        span: 1196..1197,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 47,
        column: 11,
        span: 1197..1200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 47,
        column: 13,
        span: 1201..1202,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 47,
        column: 17,
        span: 1203..1206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 47,
        column: 19,
        span: 1207..1208,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 47,
        column: 20,
        span: 1208..1209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 47,
        column: 24,
        span: 1209..1213,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 25,
        span: 1213..1214,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'X'\"",
        ),
        line: 47,
        column: 37,
        span: 1214..1226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 38,
        span: 1226..1227,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 39,
        span: 1227..1228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 50,
        column: 13,
        span: 1256..1268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 14,
        span: 1268..1269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "env",
        ),
        line: 50,
        column: 17,
        span: 1269..1272,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 18,
        span: 1272..1273,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 50,
        column: 19,
        span: 1273..1274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        line: 50,
        column: 29,
        span: 1274..1284,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 50,
        column: 31,
        span: 1285..1286,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 50,
        column: 40,
        span: 1287..1295,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 42,
        span: 1296..1297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 43,
        span: 1297..1298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 50,
        column: 49,
        span: 1299..1304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 50,
        span: 1304..1305,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 50,
        column: 54,
        span: 1305..1309,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 55,
        span: 1309..1310,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 50,
        column: 0,
        span: 1311..1314,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 51,
        column: 6,
        span: 1315..1320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 51,
        column: 8,
        span: 1321..1322,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 9,
        span: 1322..1323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 51,
        column: 11,
        span: 1324..1325,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 51,
        column: 13,
        span: 1326..1327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 51,
        column: 20,
        span: 1328..1334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 21,
        span: 1334..1335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 51,
        column: 22,
        span: 1335..1336,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 23,
        span: 1336..1337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 51,
        column: 29,
        span: 1338..1343,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 51,
        column: 30,
        span: 1343..1344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 51,
        column: 39,
        span: 1344..1353,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 40,
        span: 1353..1354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 52,
        column: 7,
        span: 1355..1361,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 8,
        span: 1361..1362,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 52,
        column: 11,
        span: 1362..1365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 52,
        column: 13,
        span: 1366..1367,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 52,
        column: 17,
        span: 1368..1371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 52,
        column: 19,
        span: 1372..1373,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 52,
        column: 20,
        span: 1373..1374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 52,
        column: 24,
        span: 1374..1378,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 25,
        span: 1378..1379,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'__newindex'\"",
        ),
        line: 52,
        column: 39,
        span: 1379..1393,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 40,
        span: 1393..1394,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 41,
        span: 1394..1395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 54,
        column: 2,
        span: 1397..1398,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 3,
        span: 1398..1399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 54,
        column: 5,
        span: 1400..1401,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 54,
        column: 7,
        span: 1402..1403,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 54,
        column: 0,
        span: 1404..1407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 56,
        column: 10,
        span: 1409..1418,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 56,
        column: 11,
        span: 1418..1419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 56,
        column: 16,
        span: 1419..1424,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 56,
        column: 19,
        span: 1424..1427,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 58,
        column: 3,
        span: 1429..1431,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 5,
        span: 1431..1433,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 58,
        column: 6,
        span: 1433..1434,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 8,
        span: 1433..1436,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 58,
        column: 11,
        span: 1437..1439,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 13,
        span: 1439..1441,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 58,
        column: 18,
        span: 1442..1446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 60,
        column: 6,
        span: 1475..1480,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing string length overflow\"",
        ),
        line: 60,
        column: 39,
        span: 1481..1513,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 62,
        column: 6,
        span: 1515..1520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "repstrings",
        ),
        line: 62,
        column: 17,
        span: 1521..1531,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 62,
        column: 19,
        span: 1532..1533,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "192",
                    after_decimal: "",
                },
            ),
        ),
        line: 62,
        column: 23,
        span: 1533..1537,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 63,
        column: 6,
        span: 1587..1592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ssize",
        ),
        line: 63,
        column: 12,
        span: 1593..1598,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 63,
        column: 14,
        span: 1599..1600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 63,
        column: 19,
        span: 1601..1605,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 63,
        column: 20,
        span: 1605..1606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 63,
        column: 24,
        span: 1606..1610,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 25,
        span: 1610..1611,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 63,
        column: 28,
        span: 1610..1614,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 63,
        column: 29,
        span: 1614..1615,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 63,
        column: 31,
        span: 1614..1617,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 63,
        column: 33,
        span: 1618..1619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "repstrings",
        ),
        line: 63,
        column: 44,
        span: 1620..1630,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 45,
        span: 1630..1631,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 63,
        column: 47,
        span: 1632..1633,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 63,
        column: 49,
        span: 1633..1635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 65,
        column: 7,
        span: 1662..1668,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 8,
        span: 1668..1669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "repstrings",
        ),
        line: 65,
        column: 18,
        span: 1669..1679,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 65,
        column: 20,
        span: 1680..1681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ssize",
        ),
        line: 65,
        column: 26,
        span: 1682..1687,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 65,
        column: 28,
        span: 1688..1689,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 65,
        column: 32,
        span: 1689..1693,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 65,
        column: 33,
        span: 1693..1694,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 35,
        span: 1693..1696,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 36,
        span: 1696..1697,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 67,
        column: 6,
        span: 1741..1746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "longs",
        ),
        line: 67,
        column: 12,
        span: 1747..1752,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 67,
        column: 14,
        span: 1753..1754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 67,
        column: 21,
        span: 1755..1761,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
        column: 22,
        span: 1761..1762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 67,
        column: 25,
        span: 1762..1765,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 26,
        span: 1765..1766,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        line: 67,
        column: 30,
        span: 1766..1770,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 31,
        span: 1770..1771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ssize",
        ),
        line: 67,
        column: 37,
        span: 1772..1777,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 38,
        span: 1777..1778,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 70,
        column: 6,
        span: 1879..1884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 70,
        column: 10,
        span: 1885..1888,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 70,
        column: 12,
        span: 1889..1890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 70,
        column: 19,
        span: 1891..1897,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 20,
        span: 1897..1898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 70,
        column: 24,
        span: 1898..1902,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 25,
        span: 1902..1903,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = ...; return \"",
        ),
        line: 71,
        column: 27,
        span: 1906..1930,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 71,
        column: 30,
        span: 1931..1933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 71,
        column: 37,
        span: 1934..1940,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
        column: 38,
        span: 1940..1941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 71,
        column: 41,
        span: 1941..1944,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 42,
        span: 1944..1945,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 71,
        column: 45,
        span: 1945..1948,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 46,
        span: 1948..1949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "repstrings",
        ),
        line: 71,
        column: 57,
        span: 1950..1960,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 58,
        span: 1960..1961,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"..\"",
        ),
        line: 71,
        column: 63,
        span: 1962..1966,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 64,
        span: 1966..1967,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 65,
        span: 1967..1968,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 66,
        span: 1968..1969,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 73,
        column: 6,
        span: 1971..1976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 73,
        column: 8,
        span: 1977..1978,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 9,
        span: 1978..1979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 73,
        column: 11,
        span: 1980..1981,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 73,
        column: 13,
        span: 1982..1983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 73,
        column: 19,
        span: 1984..1989,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 20,
        span: 1989..1990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 73,
        column: 23,
        span: 1990..1993,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 24,
        span: 1993..1994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "longs",
        ),
        line: 73,
        column: 30,
        span: 1995..2000,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 31,
        span: 2000..2001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 76,
        column: 7,
        span: 2097..2103,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 8,
        span: 2103..2104,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 76,
        column: 11,
        span: 2104..2107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 76,
        column: 13,
        span: 2108..2109,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 76,
        column: 17,
        span: 2110..2113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 76,
        column: 24,
        span: 2114..2120,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 76,
        column: 25,
        span: 2120..2121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 76,
        column: 29,
        span: 2121..2125,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 30,
        span: 2125..2126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 76,
        column: 31,
        span: 2126..2127,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
        column: 32,
        span: 2127..2128,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"overflow\"",
        ),
        line: 76,
        column: 43,
        span: 2129..2139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 44,
        span: 2139..2140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 45,
        span: 2140..2141,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 78,
        column: 4,
        span: 2143..2146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 80,
        column: 6,
        span: 2155..2160,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 80,
        column: 10,
        span: 2160..2164,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 82,
        column: 7,
        span: 2166..2172,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 82,
        column: 11,
        span: 2173..2176,
    },
]
