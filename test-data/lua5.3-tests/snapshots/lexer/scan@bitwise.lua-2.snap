---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/bitwise.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
        column: 6,
        span: 102..107,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
        column: 7,
        span: 107..108,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing bitwise operations\"",
        ),
        line: 4,
        column: 35,
        span: 108..136,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
        column: 36,
        span: 136..137,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 6,
        span: 139..144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numbits",
        ),
        line: 6,
        column: 14,
        span: 145..152,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 16,
        span: 153..154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 6,
        column: 23,
        span: 155..161,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 6,
        column: 24,
        span: 161..162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        line: 6,
        column: 32,
        span: 162..170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 33,
        span: 170..171,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'j'",
        ),
        line: 6,
        column: 36,
        span: 171..174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 37,
        span: 174..175,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 6,
        column: 39,
        span: 176..177,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 6,
        column: 0,
        span: 177..179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 8,
        column: 7,
        span: 181..187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 8,
        span: 187..188,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 8,
        column: 9,
        span: 188..189,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 8,
        column: 10,
        span: 188..190,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 8,
        column: 13,
        span: 191..193,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 8,
        column: 15,
        span: 194..195,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 8,
        column: 16,
        span: 194..196,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 17,
        span: 196..197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 10,
        column: 7,
        span: 199..205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 8,
        span: 205..206,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 9,
        span: 206..207,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 10,
        column: 10,
        span: 206..208,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 10,
        column: 13,
        span: 209..211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 15,
        span: 212..213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numbits",
        ),
        line: 10,
        column: 22,
        span: 213..220,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 10,
        column: 24,
        span: 221..222,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 10,
        column: 26,
        span: 222..224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 27,
        span: 224..225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 28,
        span: 225..226,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 10,
        column: 31,
        span: 227..229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 10,
        column: 36,
        span: 230..234,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 10,
        column: 37,
        span: 234..235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mininteger",
        ),
        line: 10,
        column: 47,
        span: 235..245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 48,
        span: 245..246,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 14,
        column: 6,
        span: 329..334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 14,
        column: 8,
        span: 335..336,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 14,
        column: 9,
        span: 336..337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 14,
        column: 11,
        span: 338..339,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 14,
        column: 12,
        span: 339..340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 14,
        column: 14,
        span: 341..342,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 14,
        column: 15,
        span: 342..343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 14,
        column: 0,
        span: 344..345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 15,
        column: 2,
        span: 346..347,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 15,
        column: 4,
        span: 348..349,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFFFFFFFFFF",
            ),
        ),
        line: 15,
        column: 0,
        span: 349..368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 16,
        column: 7,
        span: 369..375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 8,
        span: 375..376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 16,
        column: 9,
        span: 376..377,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 16,
        column: 12,
        span: 378..380,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 16,
        column: 14,
        span: 381..382,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 16,
        column: 15,
        span: 381..383,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 16,
        column: 19,
        span: 384..387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 16,
        column: 21,
        span: 388..389,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 16,
        column: 23,
        span: 390..391,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 16,
        column: 25,
        span: 392..393,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 16,
        column: 26,
        span: 392..394,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 16,
        column: 29,
        span: 395..397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 16,
        column: 31,
        span: 398..399,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 16,
        column: 35,
        span: 400..403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 16,
        column: 37,
        span: 404..405,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 16,
        column: 39,
        span: 406..407,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        line: 16,
        column: 42,
        span: 407..410,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 16,
        column: 45,
        span: 411..413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        line: 16,
        column: 48,
        span: 413..416,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 49,
        span: 416..417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 17,
        column: 2,
        span: 418..419,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 17,
        column: 4,
        span: 420..421,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xF0F0F0F0F0F0F0F0",
            ),
        ),
        line: 17,
        column: 0,
        span: 421..440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 18,
        column: 7,
        span: 441..447,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 8,
        span: 447..448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 18,
        column: 9,
        span: 448..449,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 18,
        column: 11,
        span: 450..451,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 18,
        column: 13,
        span: 452..453,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 18,
        column: 14,
        span: 452..454,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 18,
        column: 17,
        span: 455..457,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 18,
        column: 19,
        span: 458..459,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 18,
        column: 20,
        span: 458..460,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 21,
        span: 460..461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 19,
        column: 7,
        span: 462..468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 8,
        span: 468..469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 19,
        column: 9,
        span: 469..470,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 19,
        column: 11,
        span: 471..472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 19,
        column: 13,
        span: 473..474,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 19,
        column: 16,
        span: 475..477,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 19,
        column: 18,
        span: 477..479,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 19,
        column: 22,
        span: 480..483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 19,
        column: 24,
        span: 484..485,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 19,
        column: 26,
        span: 486..487,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 19,
        column: 28,
        span: 487..489,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 19,
        column: 31,
        span: 490..492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 19,
        column: 33,
        span: 493..494,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 19,
        column: 37,
        span: 495..498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 19,
        column: 39,
        span: 499..500,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 19,
        column: 41,
        span: 501..502,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 19,
        column: 43,
        span: 503..504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 19,
        column: 44,
        span: 504..505,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 19,
        column: 47,
        span: 506..508,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 19,
        column: 49,
        span: 509..510,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 19,
        column: 50,
        span: 509..511,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 51,
        span: 511..512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 20,
        column: 7,
        span: 513..519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 8,
        span: 519..520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 20,
        column: 9,
        span: 520..521,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 20,
        column: 12,
        span: 522..524,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 14,
        span: 524..526,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 20,
        column: 17,
        span: 527..529,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 20,
        column: 19,
        span: 530..531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 20,
        column: 20,
        span: 531..532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 21,
        span: 532..533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 21,
        column: 2,
        span: 534..535,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
        column: 4,
        span: 536..537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xF0",
            ),
        ),
        line: 21,
        column: 9,
        span: 537..542,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 21,
        column: 10,
        span: 542..543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 21,
        column: 12,
        span: 544..545,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
        column: 14,
        span: 546..547,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xCC",
            ),
        ),
        line: 21,
        column: 19,
        span: 547..552,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 21,
        column: 20,
        span: 552..553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 21,
        column: 22,
        span: 554..555,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
        column: 24,
        span: 556..557,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xAA",
            ),
        ),
        line: 21,
        column: 29,
        span: 557..562,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 21,
        column: 30,
        span: 562..563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 21,
        column: 32,
        span: 564..565,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
        column: 34,
        span: 566..567,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFD",
            ),
        ),
        line: 21,
        column: 0,
        span: 567..572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 22,
        column: 7,
        span: 573..579,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 8,
        span: 579..580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 22,
        column: 9,
        span: 580..581,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 22,
        column: 11,
        span: 582..583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 22,
        column: 13,
        span: 584..585,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 22,
        column: 15,
        span: 586..587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 22,
        column: 17,
        span: 588..589,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 22,
        column: 19,
        span: 590..591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 22,
        column: 21,
        span: 592..593,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 22,
        column: 24,
        span: 594..596,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xF4",
            ),
        ),
        line: 22,
        column: 29,
        span: 596..601,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 30,
        span: 601..602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 24,
        column: 2,
        span: 604..605,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 4,
        span: 606..607,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "F0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 24,
        column: 11,
        span: 607..614,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 24,
        column: 12,
        span: 614..615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 24,
        column: 14,
        span: 616..617,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 16,
        span: 618..619,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "CC",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 24,
        column: 23,
        span: 619..626,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 24,
        column: 24,
        span: 626..627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 24,
        column: 26,
        span: 628..629,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 28,
        span: 630..631,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0xAA.0\"",
        ),
        line: 24,
        column: 37,
        span: 632..640,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 24,
        column: 38,
        span: 640..641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 24,
        column: 40,
        span: 642..643,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 42,
        span: 644..645,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0xFD.0\"",
        ),
        line: 24,
        column: 51,
        span: 646..654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 25,
        column: 7,
        span: 655..661,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 8,
        span: 661..662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 25,
        column: 9,
        span: 662..663,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 25,
        column: 11,
        span: 664..665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 25,
        column: 13,
        span: 666..667,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 25,
        column: 15,
        span: 668..669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 25,
        column: 17,
        span: 670..671,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 25,
        column: 19,
        span: 672..673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 25,
        column: 21,
        span: 674..675,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 25,
        column: 24,
        span: 676..678,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xF4",
            ),
        ),
        line: 25,
        column: 29,
        span: 678..683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 30,
        span: 683..684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 27,
        column: 2,
        span: 686..687,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 27,
        column: 4,
        span: 688..689,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xF0000000",
            ),
        ),
        line: 27,
        column: 15,
        span: 689..700,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 27,
        column: 16,
        span: 700..701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 27,
        column: 18,
        span: 702..703,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 27,
        column: 20,
        span: 704..705,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xCC000000",
            ),
        ),
        line: 27,
        column: 31,
        span: 705..716,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 27,
        column: 32,
        span: 716..717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 28,
        column: 2,
        span: 718..719,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
        column: 4,
        span: 720..721,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xAA000000",
            ),
        ),
        line: 28,
        column: 15,
        span: 721..732,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 28,
        column: 16,
        span: 732..733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 28,
        column: 18,
        span: 734..735,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
        column: 20,
        span: 736..737,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFD000000",
            ),
        ),
        line: 28,
        column: 0,
        span: 737..748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
        column: 7,
        span: 749..755,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 8,
        span: 755..756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 29,
        column: 9,
        span: 756..757,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 29,
        column: 11,
        span: 758..759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 29,
        column: 13,
        span: 760..761,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 29,
        column: 15,
        span: 762..763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 29,
        column: 17,
        span: 764..765,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 29,
        column: 19,
        span: 766..767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 29,
        column: 21,
        span: 768..769,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 29,
        column: 24,
        span: 770..772,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xF4000000",
            ),
        ),
        line: 29,
        column: 35,
        span: 772..783,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 36,
        span: 783..784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 30,
        column: 7,
        span: 785..791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 8,
        span: 791..792,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 30,
        column: 9,
        span: 792..793,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 30,
        column: 10,
        span: 793..794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 30,
        column: 11,
        span: 794..795,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 30,
        column: 14,
        span: 796..798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 30,
        column: 16,
        span: 799..800,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 30,
        column: 20,
        span: 801..804,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 30,
        column: 22,
        span: 805..806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 30,
        column: 23,
        span: 806..807,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 30,
        column: 26,
        span: 808..810,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 30,
        column: 28,
        span: 811..812,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
        column: 29,
        span: 811..813,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 30,
        column: 31,
        span: 814..815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 30,
        column: 33,
        span: 816..817,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 30,
        column: 37,
        span: 818..821,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 30,
        column: 39,
        span: 822..823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 30,
        column: 40,
        span: 823..824,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 30,
        column: 43,
        span: 825..827,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 30,
        column: 45,
        span: 828..829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 30,
        column: 46,
        span: 829..830,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 30,
        column: 48,
        span: 831..832,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
        column: 50,
        span: 832..834,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 51,
        span: 834..835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 32,
        column: 2,
        span: 837..838,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 32,
        column: 4,
        span: 839..840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 32,
        column: 6,
        span: 841..842,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 32,
        column: 9,
        span: 843..845,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 0,
        span: 845..848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 33,
        column: 2,
        span: 849..850,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 33,
        column: 4,
        span: 851..852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 33,
        column: 6,
        span: 853..854,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 33,
        column: 9,
        span: 855..857,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 0,
        span: 857..860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 34,
        column: 2,
        span: 861..862,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 34,
        column: 4,
        span: 863..864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 34,
        column: 6,
        span: 865..866,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 34,
        column: 9,
        span: 867..869,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 0,
        span: 869..872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 35,
        column: 2,
        span: 873..874,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 35,
        column: 4,
        span: 875..876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 35,
        column: 6,
        span: 877..878,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 35,
        column: 9,
        span: 879..881,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 0,
        span: 881..884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 36,
        column: 7,
        span: 885..891,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 8,
        span: 891..892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 36,
        column: 9,
        span: 892..893,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 36,
        column: 11,
        span: 894..895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 36,
        column: 13,
        span: 896..897,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 36,
        column: 15,
        span: 898..899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 36,
        column: 17,
        span: 900..901,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 36,
        column: 19,
        span: 902..903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 36,
        column: 21,
        span: 904..905,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 36,
        column: 24,
        span: 906..908,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xF4000000",
            ),
        ),
        line: 36,
        column: 35,
        span: 908..919,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 36,
        column: 38,
        span: 920..922,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 41,
        span: 922..925,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 42,
        span: 925..926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 37,
        column: 7,
        span: 927..933,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 8,
        span: 933..934,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 37,
        column: 9,
        span: 934..935,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 37,
        column: 10,
        span: 935..936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 37,
        column: 11,
        span: 936..937,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 37,
        column: 14,
        span: 938..940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 37,
        column: 16,
        span: 941..942,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 37,
        column: 20,
        span: 943..946,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 37,
        column: 22,
        span: 947..948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 37,
        column: 23,
        span: 948..949,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 37,
        column: 26,
        span: 950..952,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 37,
        column: 28,
        span: 953..954,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 37,
        column: 29,
        span: 953..955,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 37,
        column: 31,
        span: 956..957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 37,
        column: 33,
        span: 958..959,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 37,
        column: 37,
        span: 960..963,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 37,
        column: 39,
        span: 964..965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 37,
        column: 40,
        span: 965..966,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 37,
        column: 43,
        span: 967..969,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 37,
        column: 45,
        span: 970..971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 37,
        column: 46,
        span: 971..972,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 37,
        column: 48,
        span: 973..974,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 37,
        column: 50,
        span: 974..976,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 51,
        span: 976..977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 39,
        column: 7,
        span: 979..985,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 8,
        span: 985..986,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 39,
        column: 9,
        span: 986..987,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 10,
        span: 986..988,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 39,
        column: 13,
        span: 989..991,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 15,
        span: 991..993,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 39,
        column: 18,
        span: 994..996,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 20,
        span: 997..998,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 21,
        span: 997..999,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 39,
        column: 24,
        span: 1000..1002,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 26,
        span: 1003..1004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numbits",
        ),
        line: 39,
        column: 33,
        span: 1004..1011,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 39,
        column: 35,
        span: 1012..1013,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 37,
        span: 1013..1015,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 38,
        span: 1015..1016,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 39,
        span: 1016..1017,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 39,
        column: 41,
        span: 1018..1019,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 43,
        span: 1019..1021,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 39,
        column: 47,
        span: 1022..1025,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 49,
        span: 1025..1027,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 39,
        column: 52,
        span: 1028..1030,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 55,
        span: 1030..1033,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 39,
        column: 58,
        span: 1034..1036,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x80000000",
            ),
        ),
        line: 39,
        column: 69,
        span: 1036..1047,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 70,
        span: 1047..1048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 40,
        column: 7,
        span: 1049..1055,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 8,
        span: 1055..1056,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 40,
        column: 9,
        span: 1056..1057,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 10,
        span: 1056..1058,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 40,
        column: 13,
        span: 1059..1061,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 15,
        span: 1062..1063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numbits",
        ),
        line: 40,
        column: 22,
        span: 1063..1070,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 40,
        column: 24,
        span: 1071..1072,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 26,
        span: 1072..1074,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 27,
        span: 1074..1075,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 40,
        column: 30,
        span: 1076..1078,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 32,
        span: 1078..1080,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 33,
        span: 1080..1081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 41,
        column: 7,
        span: 1082..1088,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 8,
        span: 1088..1089,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 41,
        column: 9,
        span: 1089..1090,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
        column: 10,
        span: 1089..1091,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 41,
        column: 13,
        span: 1092..1094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numbits",
        ),
        line: 41,
        column: 21,
        span: 1095..1102,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 24,
        span: 1103..1105,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
        column: 26,
        span: 1105..1107,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 41,
        column: 0,
        span: 1108..1111,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 42,
        column: 9,
        span: 1119..1120,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 42,
        column: 10,
        span: 1119..1121,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 42,
        column: 13,
        span: 1122..1124,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 42,
        column: 15,
        span: 1125..1126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numbits",
        ),
        line: 42,
        column: 22,
        span: 1126..1133,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 42,
        column: 25,
        span: 1134..1136,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 42,
        column: 27,
        span: 1136..1138,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 42,
        column: 0,
        span: 1139..1142,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 43,
        column: 9,
        span: 1150..1151,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 10,
        span: 1150..1152,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 43,
        column: 13,
        span: 1153..1155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numbits",
        ),
        line: 43,
        column: 21,
        span: 1156..1163,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 43,
        column: 24,
        span: 1164..1166,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 26,
        span: 1166..1168,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 43,
        column: 0,
        span: 1169..1172,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 44,
        column: 9,
        span: 1180..1181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 44,
        column: 10,
        span: 1180..1182,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 44,
        column: 13,
        span: 1183..1185,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 44,
        column: 15,
        span: 1186..1187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numbits",
        ),
        line: 44,
        column: 22,
        span: 1187..1194,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 44,
        column: 25,
        span: 1195..1197,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 44,
        column: 27,
        span: 1197..1199,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 28,
        span: 1199..1200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 46,
        column: 7,
        span: 1202..1208,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 8,
        span: 1208..1209,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 9,
        span: 1209..1210,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 10,
        span: 1209..1211,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 46,
        column: 11,
        span: 1211..1212,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 13,
        span: 1211..1214,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 46,
        column: 15,
        span: 1215..1216,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 17,
        span: 1216..1218,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 18,
        span: 1218..1219,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 46,
        column: 21,
        span: 1220..1222,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 23,
        span: 1222..1224,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 46,
        column: 24,
        span: 1224..1225,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 26,
        span: 1224..1227,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 46,
        column: 29,
        span: 1228..1230,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 31,
        span: 1230..1232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 32,
        span: 1232..1233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 47,
        column: 7,
        span: 1234..1240,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 8,
        span: 1240..1241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 9,
        span: 1241..1242,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 47,
        column: 10,
        span: 1241..1243,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 47,
        column: 11,
        span: 1243..1244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 47,
        column: 13,
        span: 1243..1246,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 47,
        column: 15,
        span: 1247..1248,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 47,
        column: 17,
        span: 1248..1250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 18,
        span: 1250..1251,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 47,
        column: 21,
        span: 1252..1254,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 47,
        column: 23,
        span: 1254..1256,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 47,
        column: 24,
        span: 1256..1257,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 47,
        column: 26,
        span: 1256..1259,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 47,
        column: 29,
        span: 1260..1262,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 47,
        column: 31,
        span: 1262..1264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 32,
        span: 1264..1265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 49,
        column: 7,
        span: 1267..1273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 8,
        span: 1273..1274,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 9,
        span: 1273..1275,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 49,
        column: 12,
        span: 1276..1278,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 49,
        column: 14,
        span: 1279..1280,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 15,
        span: 1279..1281,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 49,
        column: 18,
        span: 1282..1284,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 20,
        span: 1284..1286,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 49,
        column: 23,
        span: 1287..1289,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 25,
        span: 1289..1291,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 49,
        column: 29,
        span: 1292..1295,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 34,
        span: 1295..1300,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 49,
        column: 37,
        span: 1301..1303,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 39,
        span: 1303..1305,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 49,
        column: 42,
        span: 1306..1308,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 47,
        span: 1308..1313,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 49,
        column: 50,
        span: 1314..1316,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 49,
        column: 52,
        span: 1317..1318,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 53,
        span: 1317..1319,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 54,
        span: 1319..1320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 53,
        column: 7,
        span: 1360..1366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 8,
        span: 1366..1367,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0xffffffffffffffff\"",
        ),
        line: 53,
        column: 28,
        span: 1367..1387,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 53,
        column: 30,
        span: 1388..1389,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
        column: 32,
        span: 1389..1391,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 53,
        column: 35,
        span: 1392..1394,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 53,
        column: 37,
        span: 1395..1396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
        column: 38,
        span: 1395..1397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 39,
        span: 1397..1398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 54,
        column: 7,
        span: 1399..1405,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 8,
        span: 1405..1406,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0xfffffffffffffffe\"",
        ),
        line: 54,
        column: 28,
        span: 1406..1426,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 54,
        column: 30,
        span: 1427..1428,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-1\"",
        ),
        line: 54,
        column: 35,
        span: 1429..1433,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 54,
        column: 38,
        span: 1434..1436,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 54,
        column: 40,
        span: 1437..1438,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 54,
        column: 41,
        span: 1437..1439,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 42,
        span: 1439..1440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 55,
        column: 7,
        span: 1441..1447,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 8,
        span: 1447..1448,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" \\t-0xfffffffffffffffe\\n\\t\"",
        ),
        line: 55,
        column: 36,
        span: 1448..1476,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 55,
        column: 38,
        span: 1477..1478,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-1\"",
        ),
        line: 55,
        column: 43,
        span: 1479..1483,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 55,
        column: 46,
        span: 1484..1486,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 55,
        column: 48,
        span: 1486..1488,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 49,
        span: 1488..1489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 56,
        column: 7,
        span: 1490..1496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 8,
        span: 1496..1497,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"   \\n  -45  \\t \"",
        ),
        line: 56,
        column: 25,
        span: 1497..1514,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 56,
        column: 28,
        span: 1515..1517,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  -2  \"",
        ),
        line: 56,
        column: 37,
        span: 1518..1526,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 56,
        column: 40,
        span: 1527..1529,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 56,
        column: 42,
        span: 1530..1531,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 44,
        span: 1530..1533,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 56,
        column: 46,
        span: 1534..1535,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 48,
        span: 1535..1537,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 49,
        span: 1537..1538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 59,
        column: 7,
        span: 1563..1569,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 8,
        span: 1569..1570,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 59,
        column: 11,
        span: 1570..1573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 59,
        column: 17,
        span: 1574..1579,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 18,
        span: 1579..1580,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 59,
        column: 26,
        span: 1580..1588,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 28,
        span: 1589..1590,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 29,
        span: 1590..1591,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 59,
        column: 36,
        span: 1592..1598,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0xffffffffffffffff.0\"",
        ),
        line: 59,
        column: 59,
        span: 1599..1621,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 59,
        column: 61,
        span: 1622..1623,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 63,
        span: 1623..1625,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 59,
        column: 67,
        span: 1626..1629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 68,
        span: 1629..1630,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 69,
        span: 1630..1631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 62,
        column: 7,
        span: 1651..1657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 8,
        span: 1657..1658,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 62,
        column: 11,
        span: 1658..1661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 62,
        column: 17,
        span: 1662..1667,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 18,
        span: 1667..1668,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 62,
        column: 26,
        span: 1668..1676,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 28,
        span: 1677..1678,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 29,
        span: 1678..1679,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 62,
        column: 36,
        span: 1680..1686,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0xffffffffffffffff\\0\"",
        ),
        line: 62,
        column: 59,
        span: 1687..1709,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 62,
        column: 61,
        span: 1710..1711,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 62,
        column: 63,
        span: 1711..1713,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 62,
        column: 67,
        span: 1714..1717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 68,
        span: 1717..1718,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 69,
        span: 1718..1719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 64,
        column: 6,
        span: 1721..1726,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 64,
        column: 9,
        span: 1726..1729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 67,
        column: 8,
        span: 1732..1739,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
        column: 9,
        span: 1739..1740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "preload",
        ),
        line: 67,
        column: 16,
        span: 1740..1747,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
        column: 17,
        span: 1747..1748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 67,
        column: 22,
        span: 1748..1753,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 67,
        column: 24,
        span: 1754..1755,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 67,
        column: 33,
        span: 1756..1764,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 35,
        span: 1765..1766,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 36,
        span: 1766..1767,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 71,
        column: 6,
        span: 1847..1852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 71,
        column: 10,
        span: 1853..1856,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 71,
        column: 12,
        span: 1857..1858,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 71,
        column: 14,
        span: 1859..1860,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 71,
        column: 15,
        span: 1860..1861,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 73,
        column: 9,
        span: 1863..1871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 73,
        column: 13,
        span: 1872..1875,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 73,
        column: 14,
        span: 1875..1876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        line: 73,
        column: 18,
        span: 1876..1880,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 20,
        span: 1881..1882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 73,
        column: 21,
        span: 1882..1883,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 22,
        span: 1883..1884,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 74,
        column: 9,
        span: 1887..1893,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 74,
        column: 11,
        span: 1894..1895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 74,
        column: 12,
        span: 1895..1896,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 74,
        column: 14,
        span: 1897..1898,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 74,
        column: 0,
        span: 1898..1909,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 75,
        column: 0,
        span: 1910..1913,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 83,
        column: 9,
        span: 2060..2068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 83,
        column: 13,
        span: 2069..2072,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 83,
        column: 14,
        span: 2072..2073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 83,
        column: 18,
        span: 2073..2077,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 20,
        span: 2078..2079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 83,
        column: 21,
        span: 2079..2080,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 22,
        span: 2080..2081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 83,
        column: 24,
        span: 2082..2083,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 25,
        span: 2083..2084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 83,
        column: 27,
        span: 2085..2086,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 28,
        span: 2086..2087,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 83,
        column: 32,
        span: 2088..2091,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 33,
        span: 2091..2092,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 84,
        column: 5,
        span: 2095..2097,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 84,
        column: 9,
        span: 2098..2101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 84,
        column: 11,
        span: 2102..2103,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 84,
        column: 0,
        span: 2104..2108,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 85,
        column: 11,
        span: 2113..2119,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 13,
        span: 2120..2121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 14,
        span: 2121..2122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 85,
        column: 15,
        span: 2122..2123,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 85,
        column: 18,
        span: 2124..2126,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 85,
        column: 20,
        span: 2127..2128,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 21,
        span: 2127..2129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 22,
        span: 2129..2130,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 85,
        column: 24,
        span: 2131..2132,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 26,
        span: 2133..2134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 85,
        column: 27,
        span: 2134..2135,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 85,
        column: 30,
        span: 2136..2138,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 85,
        column: 32,
        span: 2139..2140,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 33,
        span: 2139..2141,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 34,
        span: 2141..2142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 35,
        span: 2142..2143,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 85,
        column: 37,
        span: 2144..2145,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 85,
        column: 0,
        span: 2145..2156,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 86,
        column: 0,
        span: 2159..2163,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 87,
        column: 10,
        span: 2168..2173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 87,
        column: 14,
        span: 2174..2177,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 87,
        column: 16,
        span: 2178..2179,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 87,
        column: 18,
        span: 2180..2181,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 87,
        column: 21,
        span: 2181..2184,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 87,
        column: 22,
        span: 2184..2185,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 88,
        column: 10,
        span: 2190..2195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 88,
        column: 14,
        span: 2196..2199,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 88,
        column: 16,
        span: 2200..2201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 88,
        column: 18,
        span: 2202..2203,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 88,
        column: 20,
        span: 2204..2205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 88,
        column: 22,
        span: 2206..2207,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 88,
        column: 24,
        span: 2208..2209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 88,
        column: 0,
        span: 2210..2211,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 89,
        column: 8,
        span: 2216..2219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 89,
        column: 10,
        span: 2220..2221,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 89,
        column: 12,
        span: 2222..2223,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
        column: 14,
        span: 2223..2225,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
        column: 15,
        span: 2225..2226,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 89,
        column: 17,
        span: 2227..2228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 89,
        column: 20,
        span: 2228..2231,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 89,
        column: 23,
        span: 2232..2234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 89,
        column: 27,
        span: 2235..2238,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 89,
        column: 29,
        span: 2239..2240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 89,
        column: 33,
        span: 2241..2244,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 89,
        column: 35,
        span: 2245..2246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 89,
        column: 39,
        span: 2247..2250,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 89,
        column: 40,
        span: 2250..2251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 89,
        column: 41,
        span: 2251..2252,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 89,
        column: 42,
        span: 2252..2253,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 89,
        column: 0,
        span: 2254..2257,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 90,
        column: 11,
        span: 2262..2268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 90,
        column: 15,
        span: 2269..2272,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 90,
        column: 17,
        span: 2273..2274,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 90,
        column: 0,
        span: 2274..2285,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 91,
        column: 0,
        span: 2288..2291,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 92,
        column: 0,
        span: 2292..2295,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 94,
        column: 9,
        span: 2297..2305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 94,
        column: 13,
        span: 2306..2309,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 94,
        column: 14,
        span: 2309..2310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bor",
        ),
        line: 94,
        column: 17,
        span: 2310..2313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 19,
        span: 2314..2315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 94,
        column: 20,
        span: 2315..2316,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 21,
        span: 2316..2317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 94,
        column: 23,
        span: 2318..2319,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 24,
        span: 2319..2320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 94,
        column: 26,
        span: 2321..2322,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 27,
        span: 2322..2323,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 94,
        column: 31,
        span: 2324..2327,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 32,
        span: 2327..2328,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 95,
        column: 5,
        span: 2331..2333,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 95,
        column: 9,
        span: 2334..2337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 95,
        column: 11,
        span: 2338..2339,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 95,
        column: 0,
        span: 2340..2344,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 96,
        column: 11,
        span: 2349..2355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 13,
        span: 2356..2357,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 14,
        span: 2357..2358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 96,
        column: 15,
        span: 2358..2359,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 96,
        column: 18,
        span: 2360..2362,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 96,
        column: 20,
        span: 2362..2364,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 21,
        span: 2364..2365,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 96,
        column: 23,
        span: 2366..2367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 25,
        span: 2368..2369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 96,
        column: 26,
        span: 2369..2370,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 96,
        column: 29,
        span: 2371..2373,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 96,
        column: 31,
        span: 2373..2375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 32,
        span: 2375..2376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 33,
        span: 2376..2377,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 96,
        column: 35,
        span: 2378..2379,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 96,
        column: 0,
        span: 2379..2390,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 97,
        column: 0,
        span: 2393..2397,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 98,
        column: 10,
        span: 2402..2407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 98,
        column: 14,
        span: 2408..2411,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 98,
        column: 16,
        span: 2412..2413,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 98,
        column: 18,
        span: 2414..2415,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 98,
        column: 21,
        span: 2415..2418,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 98,
        column: 22,
        span: 2418..2419,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 99,
        column: 10,
        span: 2424..2429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 99,
        column: 14,
        span: 2430..2433,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 99,
        column: 16,
        span: 2434..2435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 99,
        column: 18,
        span: 2436..2437,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 99,
        column: 20,
        span: 2438..2439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 99,
        column: 22,
        span: 2440..2441,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 99,
        column: 24,
        span: 2442..2443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 99,
        column: 0,
        span: 2444..2445,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 100,
        column: 8,
        span: 2450..2453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 100,
        column: 10,
        span: 2454..2455,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 100,
        column: 12,
        span: 2456..2457,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 14,
        span: 2457..2459,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
        column: 15,
        span: 2459..2460,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 100,
        column: 17,
        span: 2461..2462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 100,
        column: 20,
        span: 2462..2465,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 100,
        column: 23,
        span: 2466..2468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 100,
        column: 27,
        span: 2469..2472,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 100,
        column: 29,
        span: 2473..2474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 100,
        column: 33,
        span: 2475..2478,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 100,
        column: 35,
        span: 2479..2480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 100,
        column: 39,
        span: 2481..2484,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 100,
        column: 40,
        span: 2484..2485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 100,
        column: 41,
        span: 2485..2486,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 100,
        column: 42,
        span: 2486..2487,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 100,
        column: 0,
        span: 2488..2491,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 101,
        column: 11,
        span: 2496..2502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 101,
        column: 15,
        span: 2503..2506,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 101,
        column: 17,
        span: 2507..2508,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 101,
        column: 0,
        span: 2508..2519,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 102,
        column: 0,
        span: 2522..2525,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 103,
        column: 0,
        span: 2526..2529,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 105,
        column: 9,
        span: 2531..2539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 105,
        column: 13,
        span: 2540..2543,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 105,
        column: 14,
        span: 2543..2544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bxor",
        ),
        line: 105,
        column: 18,
        span: 2544..2548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 20,
        span: 2549..2550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 105,
        column: 21,
        span: 2550..2551,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 22,
        span: 2551..2552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 105,
        column: 24,
        span: 2553..2554,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 25,
        span: 2554..2555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 105,
        column: 27,
        span: 2556..2557,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 28,
        span: 2557..2558,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 105,
        column: 32,
        span: 2559..2562,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 33,
        span: 2562..2563,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 106,
        column: 5,
        span: 2566..2568,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 106,
        column: 9,
        span: 2569..2572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 106,
        column: 11,
        span: 2573..2574,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 106,
        column: 0,
        span: 2575..2579,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 107,
        column: 11,
        span: 2584..2590,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 13,
        span: 2591..2592,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 14,
        span: 2592..2593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 107,
        column: 15,
        span: 2593..2594,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 107,
        column: 18,
        span: 2595..2597,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
        column: 20,
        span: 2597..2599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 21,
        span: 2599..2600,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 107,
        column: 23,
        span: 2601..2602,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 25,
        span: 2603..2604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 107,
        column: 26,
        span: 2604..2605,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 107,
        column: 29,
        span: 2606..2608,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
        column: 31,
        span: 2608..2610,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 32,
        span: 2610..2611,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 33,
        span: 2611..2612,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 107,
        column: 35,
        span: 2613..2614,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 107,
        column: 0,
        span: 2614..2625,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 108,
        column: 0,
        span: 2628..2632,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 109,
        column: 10,
        span: 2637..2642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 109,
        column: 14,
        span: 2643..2646,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 109,
        column: 16,
        span: 2647..2648,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 109,
        column: 18,
        span: 2649..2650,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 109,
        column: 21,
        span: 2650..2653,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 109,
        column: 22,
        span: 2653..2654,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 110,
        column: 10,
        span: 2659..2664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 110,
        column: 14,
        span: 2665..2668,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 110,
        column: 16,
        span: 2669..2670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 110,
        column: 18,
        span: 2671..2672,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 110,
        column: 20,
        span: 2673..2674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 110,
        column: 22,
        span: 2675..2676,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 110,
        column: 24,
        span: 2677..2678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 110,
        column: 0,
        span: 2679..2680,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 111,
        column: 8,
        span: 2685..2688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 111,
        column: 10,
        span: 2689..2690,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 111,
        column: 12,
        span: 2691..2692,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 14,
        span: 2692..2694,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 15,
        span: 2694..2695,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 111,
        column: 17,
        span: 2696..2697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 111,
        column: 20,
        span: 2697..2700,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 111,
        column: 23,
        span: 2701..2703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 111,
        column: 27,
        span: 2704..2707,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 111,
        column: 29,
        span: 2708..2709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 111,
        column: 33,
        span: 2710..2713,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 111,
        column: 35,
        span: 2714..2715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 111,
        column: 39,
        span: 2716..2719,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 111,
        column: 40,
        span: 2719..2720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 111,
        column: 41,
        span: 2720..2721,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 111,
        column: 42,
        span: 2721..2722,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 111,
        column: 0,
        span: 2723..2726,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 112,
        column: 11,
        span: 2731..2737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 112,
        column: 15,
        span: 2738..2741,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 112,
        column: 17,
        span: 2742..2743,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 112,
        column: 0,
        span: 2743..2754,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 113,
        column: 0,
        span: 2757..2760,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 114,
        column: 0,
        span: 2761..2764,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 116,
        column: 9,
        span: 2766..2774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 116,
        column: 13,
        span: 2775..2778,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 116,
        column: 14,
        span: 2778..2779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "btest",
        ),
        line: 116,
        column: 19,
        span: 2779..2784,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 21,
        span: 2785..2786,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 116,
        column: 24,
        span: 2786..2789,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 25,
        span: 2789..2790,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 117,
        column: 9,
        span: 2793..2799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 117,
        column: 13,
        span: 2800..2803,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 117,
        column: 14,
        span: 2803..2804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 117,
        column: 18,
        span: 2804..2808,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 19,
        span: 2808..2809,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 117,
        column: 22,
        span: 2809..2812,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 23,
        span: 2812..2813,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 117,
        column: 26,
        span: 2814..2816,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 0,
        span: 2816..2818,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 118,
        column: 0,
        span: 2819..2822,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 120,
        column: 9,
        span: 2824..2832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 120,
        column: 13,
        span: 2833..2836,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 120,
        column: 14,
        span: 2836..2837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        line: 120,
        column: 20,
        span: 2837..2843,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 22,
        span: 2844..2845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 120,
        column: 23,
        span: 2845..2846,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 24,
        span: 2846..2847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 120,
        column: 26,
        span: 2848..2849,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 27,
        span: 2849..2850,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 121,
        column: 9,
        span: 2853..2859,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 11,
        span: 2860..2861,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 12,
        span: 2861..2862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 121,
        column: 13,
        span: 2862..2863,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 121,
        column: 15,
        span: 2864..2865,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 121,
        column: 26,
        span: 2865..2876,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 27,
        span: 2876..2877,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 121,
        column: 30,
        span: 2878..2880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 121,
        column: 32,
        span: 2881..2882,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 33,
        span: 2882..2883,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 121,
        column: 35,
        span: 2884..2885,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 121,
        column: 0,
        span: 2885..2896,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 122,
        column: 0,
        span: 2897..2900,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 124,
        column: 9,
        span: 2902..2910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 124,
        column: 13,
        span: 2911..2914,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 124,
        column: 14,
        span: 2914..2915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rshift",
        ),
        line: 124,
        column: 20,
        span: 2915..2921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 22,
        span: 2922..2923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 124,
        column: 23,
        span: 2923..2924,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
        column: 24,
        span: 2924..2925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 124,
        column: 26,
        span: 2926..2927,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 27,
        span: 2927..2928,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 125,
        column: 9,
        span: 2931..2937,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 11,
        span: 2938..2939,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 12,
        span: 2939..2940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 125,
        column: 13,
        span: 2940..2941,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 125,
        column: 15,
        span: 2942..2943,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 125,
        column: 26,
        span: 2943..2954,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 27,
        span: 2954..2955,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 125,
        column: 30,
        span: 2956..2958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 125,
        column: 32,
        span: 2959..2960,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 33,
        span: 2960..2961,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 125,
        column: 35,
        span: 2962..2963,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 125,
        column: 0,
        span: 2963..2974,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 126,
        column: 0,
        span: 2975..2978,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 128,
        column: 9,
        span: 2980..2988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 128,
        column: 13,
        span: 2989..2992,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 128,
        column: 14,
        span: 2992..2993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arshift",
        ),
        line: 128,
        column: 21,
        span: 2993..3000,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 23,
        span: 3001..3002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 128,
        column: 24,
        span: 3002..3003,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 25,
        span: 3003..3004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 128,
        column: 27,
        span: 3005..3006,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 28,
        span: 3006..3007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 129,
        column: 4,
        span: 3010..3011,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 129,
        column: 6,
        span: 3012..3013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 129,
        column: 8,
        span: 3014..3015,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 129,
        column: 10,
        span: 3016..3017,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 129,
        column: 0,
        span: 3017..3028,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 130,
        column: 5,
        span: 3031..3033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 130,
        column: 7,
        span: 3034..3035,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 130,
        column: 10,
        span: 3036..3038,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 12,
        span: 3038..3040,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 130,
        column: 15,
        span: 3041..3043,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 17,
        span: 3044..3045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 130,
        column: 18,
        span: 3045..3046,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 130,
        column: 20,
        span: 3047..3048,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x80000000",
            ),
        ),
        line: 130,
        column: 31,
        span: 3048..3059,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 32,
        span: 3059..3060,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 130,
        column: 35,
        span: 3061..3063,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 37,
        span: 3063..3065,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 130,
        column: 0,
        span: 3066..3070,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 131,
        column: 11,
        span: 3075..3081,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 13,
        span: 3082..3083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 131,
        column: 14,
        span: 3083..3084,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 131,
        column: 17,
        span: 3085..3087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 131,
        column: 19,
        span: 3088..3089,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 20,
        span: 3089..3090,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 131,
        column: 22,
        span: 3091..3092,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 131,
        column: 0,
        span: 3092..3103,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 132,
        column: 0,
        span: 3106..3110,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 133,
        column: 11,
        span: 3115..3121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 13,
        span: 3122..3123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 14,
        span: 3123..3124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 133,
        column: 15,
        span: 3124..3125,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 133,
        column: 18,
        span: 3126..3128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 133,
        column: 20,
        span: 3129..3130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 21,
        span: 3130..3131,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 133,
        column: 23,
        span: 3132..3133,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 133,
        column: 25,
        span: 3134..3135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 26,
        span: 3135..3136,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 133,
        column: 36,
        span: 3135..3146,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 133,
        column: 39,
        span: 3147..3149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 133,
        column: 41,
        span: 3150..3151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 42,
        span: 3151..3152,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 43,
        span: 3152..3153,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 133,
        column: 45,
        span: 3154..3155,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 133,
        column: 0,
        span: 3155..3166,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 134,
        column: 0,
        span: 3169..3172,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 135,
        column: 0,
        span: 3173..3176,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 137,
        column: 9,
        span: 3178..3186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 137,
        column: 13,
        span: 3187..3190,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 137,
        column: 14,
        span: 3190..3191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        line: 137,
        column: 21,
        span: 3191..3198,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 23,
        span: 3199..3200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 137,
        column: 24,
        span: 3200..3201,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 26,
        span: 3202..3203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 137,
        column: 27,
        span: 3203..3204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 28,
        span: 3204..3205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 138,
        column: 4,
        span: 3208..3209,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 138,
        column: 6,
        span: 3210..3211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 138,
        column: 8,
        span: 3212..3213,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 138,
        column: 10,
        span: 3214..3215,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 0,
        span: 3215..3218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 139,
        column: 4,
        span: 3221..3222,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 139,
        column: 6,
        span: 3223..3224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 139,
        column: 8,
        span: 3225..3226,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 139,
        column: 10,
        span: 3227..3228,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 139,
        column: 0,
        span: 3228..3239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 140,
        column: 4,
        span: 3242..3243,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 140,
        column: 6,
        span: 3244..3245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 8,
        span: 3246..3247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 140,
        column: 9,
        span: 3247..3248,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 140,
        column: 12,
        span: 3249..3251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 140,
        column: 14,
        span: 3252..3253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 15,
        span: 3253..3254,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 140,
        column: 17,
        span: 3255..3256,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 19,
        span: 3257..3258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 140,
        column: 20,
        span: 3258..3259,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 140,
        column: 23,
        span: 3260..3262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 25,
        span: 3263..3264,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 27,
        span: 3263..3266,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 140,
        column: 29,
        span: 3267..3268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 140,
        column: 31,
        span: 3269..3270,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 32,
        span: 3270..3271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 33,
        span: 3271..3272,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 141,
        column: 9,
        span: 3275..3281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 141,
        column: 11,
        span: 3282..3283,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 141,
        column: 13,
        span: 3284..3285,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 141,
        column: 0,
        span: 3285..3296,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 142,
        column: 0,
        span: 3297..3300,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 144,
        column: 9,
        span: 3302..3310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 144,
        column: 13,
        span: 3311..3314,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 144,
        column: 14,
        span: 3314..3315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rrotate",
        ),
        line: 144,
        column: 21,
        span: 3315..3322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 23,
        span: 3323..3324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 144,
        column: 24,
        span: 3324..3325,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 144,
        column: 25,
        span: 3325..3326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 144,
        column: 27,
        span: 3327..3328,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 28,
        span: 3328..3329,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 145,
        column: 9,
        span: 3332..3338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 145,
        column: 13,
        span: 3339..3342,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 145,
        column: 14,
        span: 3342..3343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        line: 145,
        column: 21,
        span: 3343..3350,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 22,
        span: 3350..3351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 145,
        column: 23,
        span: 3351..3352,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 24,
        span: 3352..3353,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 145,
        column: 26,
        span: 3354..3355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 145,
        column: 27,
        span: 3355..3356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 28,
        span: 3356..3357,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 146,
        column: 0,
        span: 3358..3361,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 148,
        column: 6,
        span: 3363..3368,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 148,
        column: 15,
        span: 3369..3377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkfield",
        ),
        line: 148,
        column: 26,
        span: 3378..3388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 28,
        span: 3389..3390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 148,
        column: 29,
        span: 3390..3391,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 30,
        span: 3391..3392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 148,
        column: 32,
        span: 3393..3394,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 33,
        span: 3394..3395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 149,
        column: 4,
        span: 3398..3399,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 149,
        column: 6,
        span: 3400..3401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 149,
        column: 8,
        span: 3402..3403,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 149,
        column: 11,
        span: 3404..3406,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 149,
        column: 0,
        span: 3406..3408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 150,
        column: 9,
        span: 3411..3417,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 10,
        span: 3417..3418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 150,
        column: 11,
        span: 3418..3419,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 150,
        column: 14,
        span: 3420..3422,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 16,
        span: 3422..3424,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
        column: 17,
        span: 3424..3425,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field cannot be negative\"",
        ),
        line: 150,
        column: 44,
        span: 3426..3452,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 45,
        span: 3452..3453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 151,
        column: 9,
        span: 3456..3462,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 10,
        span: 3462..3463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 151,
        column: 11,
        span: 3463..3464,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 151,
        column: 13,
        span: 3465..3466,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 151,
        column: 15,
        span: 3466..3468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
        column: 16,
        span: 3468..3469,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"width must be positive\"",
        ),
        line: 151,
        column: 41,
        span: 3470..3494,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 42,
        span: 3494..3495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 152,
        column: 9,
        span: 3498..3504,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 10,
        span: 3504..3505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 152,
        column: 11,
        span: 3505..3506,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 152,
        column: 13,
        span: 3507..3508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 152,
        column: 15,
        span: 3509..3510,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 152,
        column: 18,
        span: 3511..3513,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 152,
        column: 21,
        span: 3513..3516,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 22,
        span: 3516..3517,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"trying to access non-existent bits\"",
        ),
        line: 152,
        column: 59,
        span: 3518..3554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 60,
        span: 3554..3555,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 153,
        column: 9,
        span: 3558..3564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 153,
        column: 11,
        span: 3565..3566,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 12,
        span: 3566..3567,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 153,
        column: 14,
        span: 3568..3569,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 15,
        span: 3569..3570,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 153,
        column: 16,
        span: 3570..3571,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 17,
        span: 3570..3572,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 153,
        column: 20,
        span: 3573..3575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 153,
        column: 22,
        span: 3576..3577,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 23,
        span: 3577..3578,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 154,
        column: 0,
        span: 3579..3582,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 156,
        column: 9,
        span: 3584..3592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 156,
        column: 13,
        span: 3593..3596,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 156,
        column: 14,
        span: 3596..3597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extract",
        ),
        line: 156,
        column: 21,
        span: 3597..3604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 23,
        span: 3605..3606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 156,
        column: 24,
        span: 3606..3607,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
        column: 25,
        span: 3607..3608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 156,
        column: 27,
        span: 3609..3610,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
        column: 28,
        span: 3610..3611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 156,
        column: 30,
        span: 3612..3613,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 31,
        span: 3613..3614,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 157,
        column: 8,
        span: 3617..3622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 157,
        column: 10,
        span: 3623..3624,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 11,
        span: 3624..3625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mask",
        ),
        line: 157,
        column: 16,
        span: 3626..3630,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 157,
        column: 18,
        span: 3631..3632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkfield",
        ),
        line: 157,
        column: 29,
        span: 3633..3643,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 157,
        column: 30,
        span: 3643..3644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 157,
        column: 31,
        span: 3644..3645,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 32,
        span: 3645..3646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 157,
        column: 34,
        span: 3647..3648,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
        column: 35,
        span: 3648..3649,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 158,
        column: 9,
        span: 3652..3658,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 11,
        span: 3659..3660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 158,
        column: 12,
        span: 3660..3661,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 158,
        column: 15,
        span: 3662..3664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 158,
        column: 17,
        span: 3665..3666,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 18,
        span: 3666..3667,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 158,
        column: 20,
        span: 3668..3669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mask",
        ),
        line: 158,
        column: 0,
        span: 3670..3674,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 159,
        column: 0,
        span: 3675..3678,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 161,
        column: 9,
        span: 3680..3688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 161,
        column: 13,
        span: 3689..3692,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 161,
        column: 14,
        span: 3692..3693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "replace",
        ),
        line: 161,
        column: 21,
        span: 3693..3700,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 23,
        span: 3701..3702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 161,
        column: 24,
        span: 3702..3703,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 161,
        column: 25,
        span: 3703..3704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 161,
        column: 27,
        span: 3705..3706,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 161,
        column: 28,
        span: 3706..3707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 161,
        column: 30,
        span: 3708..3709,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 161,
        column: 31,
        span: 3709..3710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 161,
        column: 33,
        span: 3711..3712,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 34,
        span: 3712..3713,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 162,
        column: 8,
        span: 3716..3721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 162,
        column: 10,
        span: 3722..3723,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 162,
        column: 11,
        span: 3723..3724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mask",
        ),
        line: 162,
        column: 16,
        span: 3725..3729,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 162,
        column: 18,
        span: 3730..3731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkfield",
        ),
        line: 162,
        column: 29,
        span: 3732..3742,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 30,
        span: 3742..3743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 162,
        column: 31,
        span: 3743..3744,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 162,
        column: 32,
        span: 3744..3745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 162,
        column: 34,
        span: 3746..3747,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 35,
        span: 3747..3748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 163,
        column: 4,
        span: 3751..3752,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 163,
        column: 6,
        span: 3753..3754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 163,
        column: 8,
        span: 3755..3756,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 163,
        column: 10,
        span: 3757..3758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mask",
        ),
        line: 163,
        column: 0,
        span: 3759..3763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 164,
        column: 4,
        span: 3766..3767,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 164,
        column: 6,
        span: 3768..3769,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 8,
        span: 3770..3771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 164,
        column: 9,
        span: 3771..3772,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 164,
        column: 11,
        span: 3773..3774,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 164,
        column: 13,
        span: 3775..3776,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 14,
        span: 3776..3777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mask",
        ),
        line: 164,
        column: 18,
        span: 3777..3781,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 164,
        column: 21,
        span: 3782..3784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 164,
        column: 23,
        span: 3785..3786,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 24,
        span: 3786..3787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 25,
        span: 3787..3788,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 164,
        column: 27,
        span: 3789..3790,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 29,
        span: 3791..3792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 164,
        column: 30,
        span: 3792..3793,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 164,
        column: 33,
        span: 3794..3796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 164,
        column: 35,
        span: 3797..3798,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 36,
        span: 3798..3799,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 165,
        column: 9,
        span: 3802..3808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 165,
        column: 11,
        span: 3809..3810,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 165,
        column: 13,
        span: 3811..3812,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 165,
        column: 0,
        span: 3812..3823,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 166,
        column: 0,
        span: 3824..3827,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 168,
        column: 7,
        span: 3829..3835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit",
        ),
        line: 168,
        column: 0,
        span: 3836..3839,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 170,
        column: 4,
        span: 3841..3844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 173,
        column: 6,
        span: 3852..3857,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 7,
        span: 3857..3858,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing bitwise library\"",
        ),
        line: 173,
        column: 32,
        span: 3858..3883,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 33,
        span: 3883..3884,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 175,
        column: 6,
        span: 3886..3891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 175,
        column: 12,
        span: 3892..3897,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 175,
        column: 14,
        span: 3898..3899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 175,
        column: 22,
        span: 3900..3907,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'bit32'",
        ),
        line: 175,
        column: 29,
        span: 3907..3914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 177,
        column: 7,
        span: 3916..3922,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 8,
        span: 3922..3923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 177,
        column: 13,
        span: 3923..3928,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 177,
        column: 14,
        span: 3928..3929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 177,
        column: 18,
        span: 3929..3933,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 19,
        span: 3933..3934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 20,
        span: 3934..3935,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 177,
        column: 23,
        span: 3936..3938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 177,
        column: 29,
        span: 3939..3944,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 177,
        column: 30,
        span: 3944..3945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        line: 177,
        column: 34,
        span: 3945..3949,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 35,
        span: 3949..3950,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 177,
        column: 36,
        span: 3949..3951,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 37,
        span: 3951..3952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 38,
        span: 3952..3953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 178,
        column: 7,
        span: 3954..3960,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 8,
        span: 3960..3961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 178,
        column: 13,
        span: 3961..3966,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 178,
        column: 14,
        span: 3966..3967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "btest",
        ),
        line: 178,
        column: 19,
        span: 3967..3972,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 20,
        span: 3972..3973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 21,
        span: 3973..3974,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 178,
        column: 24,
        span: 3975..3977,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 178,
        column: 29,
        span: 3978..3982,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 30,
        span: 3982..3983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 179,
        column: 7,
        span: 3984..3990,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
        column: 8,
        span: 3990..3991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 179,
        column: 13,
        span: 3991..3996,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 179,
        column: 14,
        span: 3996..3997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bor",
        ),
        line: 179,
        column: 17,
        span: 3997..4000,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
        column: 18,
        span: 4000..4001,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
        column: 19,
        span: 4001..4002,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 179,
        column: 22,
        span: 4003..4005,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
        column: 24,
        span: 4005..4007,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
        column: 25,
        span: 4007..4008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 180,
        column: 7,
        span: 4009..4015,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 8,
        span: 4015..4016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 180,
        column: 13,
        span: 4016..4021,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 180,
        column: 14,
        span: 4021..4022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bxor",
        ),
        line: 180,
        column: 18,
        span: 4022..4026,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 19,
        span: 4026..4027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 20,
        span: 4027..4028,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 180,
        column: 23,
        span: 4029..4031,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 180,
        column: 25,
        span: 4031..4033,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 26,
        span: 4033..4034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 182,
        column: 7,
        span: 4036..4042,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 8,
        span: 4042..4043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 182,
        column: 13,
        span: 4043..4048,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 182,
        column: 14,
        span: 4048..4049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 182,
        column: 18,
        span: 4049..4053,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 19,
        span: 4053..4054,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 20,
        span: 4054..4055,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 182,
        column: 23,
        span: 4056..4058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 182,
        column: 29,
        span: 4059..4064,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 182,
        column: 30,
        span: 4064..4065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 182,
        column: 34,
        span: 4065..4069,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 35,
        span: 4069..4070,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        line: 182,
        column: 45,
        span: 4069..4080,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 46,
        span: 4080..4081,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 47,
        span: 4081..4082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 183,
        column: 7,
        span: 4083..4089,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 8,
        span: 4089..4090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 183,
        column: 13,
        span: 4090..4095,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 183,
        column: 14,
        span: 4095..4096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 183,
        column: 18,
        span: 4096..4100,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 19,
        span: 4100..4101,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 20,
        span: 4100..4102,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 183,
        column: 21,
        span: 4102..4103,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 22,
        span: 4102..4104,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 23,
        span: 4104..4105,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 183,
        column: 26,
        span: 4106..4108,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 28,
        span: 4108..4110,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 29,
        span: 4110..4111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 187,
        column: 7,
        span: 4138..4144,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 8,
        span: 4144..4145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 187,
        column: 13,
        span: 4145..4150,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 187,
        column: 14,
        span: 4150..4151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 187,
        column: 18,
        span: 4151..4155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 19,
        span: 4155..4156,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 187,
        column: 20,
        span: 4156..4157,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 21,
        span: 4156..4158,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 22,
        span: 4158..4159,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 187,
        column: 25,
        span: 4160..4162,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        line: 187,
        column: 36,
        span: 4162..4173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 37,
        span: 4173..4174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 188,
        column: 7,
        span: 4175..4181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 8,
        span: 4181..4182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 188,
        column: 13,
        span: 4182..4187,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 188,
        column: 14,
        span: 4187..4188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 188,
        column: 18,
        span: 4188..4192,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 19,
        span: 4192..4193,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 20,
        span: 4193..4194,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 188,
        column: 21,
        span: 4193..4195,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 188,
        column: 24,
        span: 4196..4198,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        line: 188,
        column: 27,
        span: 4198..4201,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 28,
        span: 4201..4202,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 188,
        column: 30,
        span: 4203..4204,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 188,
        column: 32,
        span: 4204..4206,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 33,
        span: 4206..4207,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 188,
        column: 36,
        span: 4208..4210,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        line: 188,
        column: 47,
        span: 4210..4221,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 48,
        span: 4221..4222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 189,
        column: 7,
        span: 4223..4229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 8,
        span: 4229..4230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 189,
        column: 13,
        span: 4230..4235,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 189,
        column: 14,
        span: 4235..4236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 189,
        column: 18,
        span: 4236..4240,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 19,
        span: 4240..4241,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 189,
        column: 20,
        span: 4241..4242,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 21,
        span: 4242..4243,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
        column: 22,
        span: 4242..4244,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 189,
        column: 25,
        span: 4245..4247,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
        column: 28,
        span: 4247..4250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 29,
        span: 4250..4251,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 189,
        column: 31,
        span: 4252..4253,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
        column: 33,
        span: 4253..4255,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 34,
        span: 4255..4256,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 189,
        column: 37,
        span: 4257..4259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        line: 189,
        column: 48,
        span: 4259..4270,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 49,
        span: 4270..4271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 190,
        column: 7,
        span: 4272..4278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 8,
        span: 4278..4279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 190,
        column: 13,
        span: 4279..4284,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 190,
        column: 14,
        span: 4284..4285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 190,
        column: 18,
        span: 4285..4289,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 19,
        span: 4289..4290,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 20,
        span: 4290..4291,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
        column: 21,
        span: 4290..4292,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 190,
        column: 24,
        span: 4293..4295,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
        column: 27,
        span: 4295..4298,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 28,
        span: 4298..4299,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 190,
        column: 30,
        span: 4300..4301,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
        column: 32,
        span: 4301..4303,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 33,
        span: 4303..4304,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 190,
        column: 36,
        span: 4305..4307,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
        column: 38,
        span: 4307..4309,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 39,
        span: 4309..4310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 191,
        column: 7,
        span: 4311..4317,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 8,
        span: 4317..4318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 191,
        column: 13,
        span: 4318..4323,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 191,
        column: 14,
        span: 4323..4324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 191,
        column: 18,
        span: 4324..4328,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 19,
        span: 4328..4329,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 191,
        column: 20,
        span: 4329..4330,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 21,
        span: 4330..4331,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 22,
        span: 4330..4332,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 191,
        column: 25,
        span: 4333..4335,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 28,
        span: 4335..4338,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 29,
        span: 4338..4339,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 191,
        column: 31,
        span: 4340..4341,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 33,
        span: 4341..4343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 34,
        span: 4343..4344,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 191,
        column: 37,
        span: 4345..4347,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 39,
        span: 4347..4349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 40,
        span: 4349..4350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 192,
        column: 7,
        span: 4351..4357,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 8,
        span: 4357..4358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 192,
        column: 13,
        span: 4358..4363,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 192,
        column: 14,
        span: 4363..4364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 192,
        column: 18,
        span: 4364..4368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 19,
        span: 4368..4369,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 192,
        column: 20,
        span: 4369..4370,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 21,
        span: 4370..4371,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 192,
        column: 22,
        span: 4370..4372,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 192,
        column: 25,
        span: 4373..4375,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 192,
        column: 28,
        span: 4375..4378,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 29,
        span: 4378..4379,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 30,
        span: 4379..4380,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 192,
        column: 33,
        span: 4381..4383,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 192,
        column: 35,
        span: 4383..4385,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 36,
        span: 4385..4386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 193,
        column: 7,
        span: 4387..4393,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 8,
        span: 4393..4394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 193,
        column: 13,
        span: 4394..4399,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 193,
        column: 14,
        span: 4399..4400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 193,
        column: 18,
        span: 4400..4404,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 19,
        span: 4404..4405,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 20,
        span: 4404..4406,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 193,
        column: 23,
        span: 4407..4409,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 26,
        span: 4409..4412,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 27,
        span: 4412..4413,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 193,
        column: 30,
        span: 4414..4416,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 32,
        span: 4416..4418,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 33,
        span: 4418..4419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 194,
        column: 7,
        span: 4420..4426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 8,
        span: 4426..4427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 194,
        column: 13,
        span: 4427..4432,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 194,
        column: 14,
        span: 4432..4433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 194,
        column: 18,
        span: 4433..4437,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 19,
        span: 4437..4438,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 194,
        column: 20,
        span: 4438..4439,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 21,
        span: 4439..4440,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 194,
        column: 22,
        span: 4439..4441,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 194,
        column: 25,
        span: 4442..4444,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 194,
        column: 28,
        span: 4444..4447,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 29,
        span: 4447..4448,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 194,
        column: 31,
        span: 4449..4450,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 194,
        column: 33,
        span: 4450..4452,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 34,
        span: 4452..4453,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 194,
        column: 37,
        span: 4454..4456,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xfffffffe",
            ),
        ),
        line: 194,
        column: 48,
        span: 4456..4467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 49,
        span: 4467..4468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 195,
        column: 7,
        span: 4469..4475,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 8,
        span: 4475..4476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 195,
        column: 13,
        span: 4476..4481,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 195,
        column: 14,
        span: 4481..4482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 195,
        column: 18,
        span: 4482..4486,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 19,
        span: 4486..4487,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 20,
        span: 4487..4488,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
        column: 21,
        span: 4487..4489,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 195,
        column: 24,
        span: 4490..4492,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
        column: 27,
        span: 4492..4495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 28,
        span: 4495..4496,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 195,
        column: 30,
        span: 4497..4498,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
        column: 32,
        span: 4498..4500,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 33,
        span: 4500..4501,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 195,
        column: 36,
        span: 4502..4504,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xfffffffc",
            ),
        ),
        line: 195,
        column: 47,
        span: 4504..4515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 48,
        span: 4515..4516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 197,
        column: 7,
        span: 4518..4524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 8,
        span: 4524..4525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 197,
        column: 13,
        span: 4525..4530,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 197,
        column: 14,
        span: 4530..4531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        line: 197,
        column: 21,
        span: 4531..4538,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 22,
        span: 4538..4539,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 197,
        column: 23,
        span: 4538..4540,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 197,
        column: 24,
        span: 4540..4541,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 197,
        column: 26,
        span: 4542..4543,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 197,
        column: 27,
        span: 4542..4544,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 28,
        span: 4544..4545,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 197,
        column: 31,
        span: 4546..4548,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 197,
        column: 33,
        span: 4548..4550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 34,
        span: 4550..4551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 198,
        column: 7,
        span: 4552..4558,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 8,
        span: 4558..4559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 198,
        column: 13,
        span: 4559..4564,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 198,
        column: 14,
        span: 4564..4565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        line: 198,
        column: 21,
        span: 4565..4572,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 22,
        span: 4572..4573,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 198,
        column: 23,
        span: 4572..4574,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 198,
        column: 24,
        span: 4574..4575,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 198,
        column: 26,
        span: 4575..4577,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 27,
        span: 4577..4578,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 198,
        column: 30,
        span: 4579..4581,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 198,
        column: 32,
        span: 4581..4583,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 33,
        span: 4583..4584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 199,
        column: 7,
        span: 4585..4591,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 8,
        span: 4591..4592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 199,
        column: 13,
        span: 4592..4597,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 199,
        column: 14,
        span: 4597..4598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        line: 199,
        column: 21,
        span: 4598..4605,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 22,
        span: 4605..4606,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 199,
        column: 32,
        span: 4605..4616,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
        column: 33,
        span: 4616..4617,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 199,
        column: 35,
        span: 4617..4619,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 36,
        span: 4619..4620,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 199,
        column: 39,
        span: 4621..4623,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 199,
        column: 50,
        span: 4623..4634,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 51,
        span: 4634..4635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 200,
        column: 7,
        span: 4636..4642,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 8,
        span: 4642..4643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 200,
        column: 13,
        span: 4643..4648,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 200,
        column: 14,
        span: 4648..4649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        line: 200,
        column: 21,
        span: 4649..4656,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 22,
        span: 4656..4657,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 200,
        column: 32,
        span: 4656..4667,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 200,
        column: 33,
        span: 4667..4668,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 200,
        column: 36,
        span: 4668..4671,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 37,
        span: 4671..4672,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 200,
        column: 40,
        span: 4673..4675,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 200,
        column: 51,
        span: 4675..4686,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 52,
        span: 4686..4687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 201,
        column: 7,
        span: 4688..4694,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 8,
        span: 4694..4695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 201,
        column: 13,
        span: 4695..4700,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 201,
        column: 14,
        span: 4700..4701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        line: 201,
        column: 21,
        span: 4701..4708,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 22,
        span: 4708..4709,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 201,
        column: 32,
        span: 4708..4719,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 201,
        column: 33,
        span: 4719..4720,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 201,
        column: 35,
        span: 4720..4722,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 36,
        span: 4722..4723,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 201,
        column: 39,
        span: 4724..4726,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x23456781",
            ),
        ),
        line: 201,
        column: 50,
        span: 4726..4737,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 51,
        span: 4737..4738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 202,
        column: 7,
        span: 4739..4745,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 8,
        span: 4745..4746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 202,
        column: 13,
        span: 4746..4751,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 202,
        column: 14,
        span: 4751..4752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rrotate",
        ),
        line: 202,
        column: 21,
        span: 4752..4759,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 22,
        span: 4759..4760,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 202,
        column: 32,
        span: 4759..4770,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 202,
        column: 33,
        span: 4770..4771,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 202,
        column: 35,
        span: 4772..4773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 202,
        column: 36,
        span: 4772..4774,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 37,
        span: 4774..4775,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 202,
        column: 40,
        span: 4776..4778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x23456781",
            ),
        ),
        line: 202,
        column: 51,
        span: 4778..4789,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 52,
        span: 4789..4790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 203,
        column: 7,
        span: 4791..4797,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 8,
        span: 4797..4798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 203,
        column: 13,
        span: 4798..4803,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 203,
        column: 14,
        span: 4803..4804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        line: 203,
        column: 21,
        span: 4804..4811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 22,
        span: 4811..4812,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 203,
        column: 32,
        span: 4811..4822,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 33,
        span: 4822..4823,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 203,
        column: 35,
        span: 4824..4825,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 203,
        column: 36,
        span: 4824..4826,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 37,
        span: 4826..4827,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 203,
        column: 40,
        span: 4828..4830,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x78123456",
            ),
        ),
        line: 203,
        column: 51,
        span: 4830..4841,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 52,
        span: 4841..4842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 204,
        column: 7,
        span: 4843..4849,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 8,
        span: 4849..4850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 204,
        column: 13,
        span: 4850..4855,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 204,
        column: 14,
        span: 4855..4856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rrotate",
        ),
        line: 204,
        column: 21,
        span: 4856..4863,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 22,
        span: 4863..4864,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 204,
        column: 32,
        span: 4863..4874,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 33,
        span: 4874..4875,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 35,
        span: 4875..4877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 36,
        span: 4877..4878,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 204,
        column: 39,
        span: 4879..4881,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x78123456",
            ),
        ),
        line: 204,
        column: 50,
        span: 4881..4892,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 51,
        span: 4892..4893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 205,
        column: 7,
        span: 4894..4900,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 8,
        span: 4900..4901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 205,
        column: 13,
        span: 4901..4906,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 205,
        column: 14,
        span: 4906..4907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        line: 205,
        column: 21,
        span: 4907..4914,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 22,
        span: 4914..4915,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xaaaaaaaa",
            ),
        ),
        line: 205,
        column: 32,
        span: 4914..4925,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
        column: 33,
        span: 4925..4926,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
        column: 35,
        span: 4926..4928,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 36,
        span: 4928..4929,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 205,
        column: 39,
        span: 4930..4932,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xaaaaaaaa",
            ),
        ),
        line: 205,
        column: 50,
        span: 4932..4943,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 51,
        span: 4943..4944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 206,
        column: 7,
        span: 4945..4951,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 8,
        span: 4951..4952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 206,
        column: 13,
        span: 4952..4957,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 206,
        column: 14,
        span: 4957..4958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        line: 206,
        column: 21,
        span: 4958..4965,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 22,
        span: 4965..4966,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xaaaaaaaa",
            ),
        ),
        line: 206,
        column: 32,
        span: 4965..4976,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 206,
        column: 33,
        span: 4976..4977,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 206,
        column: 35,
        span: 4978..4979,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 206,
        column: 36,
        span: 4978..4980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 37,
        span: 4980..4981,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 206,
        column: 40,
        span: 4982..4984,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xaaaaaaaa",
            ),
        ),
        line: 206,
        column: 51,
        span: 4984..4995,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 52,
        span: 4995..4996,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 207,
        column: 4,
        span: 4997..5000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 207,
        column: 6,
        span: 5001..5002,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 207,
        column: 8,
        span: 5003..5004,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 207,
        column: 10,
        span: 5005..5006,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 207,
        column: 12,
        span: 5005..5008,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 207,
        column: 13,
        span: 5008..5009,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 207,
        column: 16,
        span: 5009..5012,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 207,
        column: 0,
        span: 5013..5015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 208,
        column: 9,
        span: 5018..5024,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 10,
        span: 5024..5025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 208,
        column: 15,
        span: 5025..5030,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 208,
        column: 16,
        span: 5030..5031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        line: 208,
        column: 23,
        span: 5031..5038,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 24,
        span: 5038..5039,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x89abcdef",
            ),
        ),
        line: 208,
        column: 34,
        span: 5038..5049,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 208,
        column: 35,
        span: 5049..5050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 208,
        column: 37,
        span: 5051..5052,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 38,
        span: 5052..5053,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 208,
        column: 41,
        span: 5054..5056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 208,
        column: 47,
        span: 5057..5062,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 208,
        column: 48,
        span: 5062..5063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        line: 208,
        column: 55,
        span: 5063..5070,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 56,
        span: 5070..5071,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x89abcdef",
            ),
        ),
        line: 208,
        column: 66,
        span: 5070..5081,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 208,
        column: 67,
        span: 5081..5082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 208,
        column: 69,
        span: 5083..5084,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 208,
        column: 70,
        span: 5084..5085,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 72,
        span: 5084..5087,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 73,
        span: 5087..5088,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 74,
        span: 5088..5089,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 209,
        column: 0,
        span: 5090..5093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 211,
        column: 7,
        span: 5095..5101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 8,
        span: 5101..5102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 211,
        column: 13,
        span: 5102..5107,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 211,
        column: 14,
        span: 5107..5108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        line: 211,
        column: 20,
        span: 5108..5114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 21,
        span: 5114..5115,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 211,
        column: 31,
        span: 5114..5125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 211,
        column: 32,
        span: 5125..5126,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 211,
        column: 34,
        span: 5126..5128,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 35,
        span: 5128..5129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 211,
        column: 38,
        span: 5130..5132,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x23456780",
            ),
        ),
        line: 211,
        column: 49,
        span: 5132..5143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 50,
        span: 5143..5144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 212,
        column: 7,
        span: 5145..5151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 8,
        span: 5151..5152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 212,
        column: 13,
        span: 5152..5157,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 212,
        column: 14,
        span: 5157..5158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        line: 212,
        column: 20,
        span: 5158..5164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 21,
        span: 5164..5165,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 212,
        column: 31,
        span: 5164..5175,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 212,
        column: 32,
        span: 5175..5176,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 212,
        column: 34,
        span: 5176..5178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 35,
        span: 5178..5179,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 212,
        column: 38,
        span: 5180..5182,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x34567800",
            ),
        ),
        line: 212,
        column: 49,
        span: 5182..5193,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 50,
        span: 5193..5194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 213,
        column: 7,
        span: 5195..5201,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 8,
        span: 5201..5202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 213,
        column: 13,
        span: 5202..5207,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 213,
        column: 14,
        span: 5207..5208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        line: 213,
        column: 20,
        span: 5208..5214,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 21,
        span: 5214..5215,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 213,
        column: 31,
        span: 5214..5225,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 32,
        span: 5225..5226,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 213,
        column: 34,
        span: 5227..5228,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 213,
        column: 35,
        span: 5227..5229,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 36,
        span: 5229..5230,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 213,
        column: 39,
        span: 5231..5233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x01234567",
            ),
        ),
        line: 213,
        column: 50,
        span: 5233..5244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 51,
        span: 5244..5245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 214,
        column: 7,
        span: 5246..5252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 8,
        span: 5252..5253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 214,
        column: 13,
        span: 5253..5258,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 214,
        column: 14,
        span: 5258..5259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        line: 214,
        column: 20,
        span: 5259..5265,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 21,
        span: 5265..5266,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 214,
        column: 31,
        span: 5265..5276,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 214,
        column: 32,
        span: 5276..5277,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 214,
        column: 34,
        span: 5278..5279,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 35,
        span: 5278..5280,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 36,
        span: 5280..5281,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 214,
        column: 39,
        span: 5282..5284,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x00123456",
            ),
        ),
        line: 214,
        column: 50,
        span: 5284..5295,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 51,
        span: 5295..5296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 215,
        column: 7,
        span: 5297..5303,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 8,
        span: 5303..5304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 215,
        column: 13,
        span: 5304..5309,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 215,
        column: 14,
        span: 5309..5310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        line: 215,
        column: 20,
        span: 5310..5316,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 21,
        span: 5316..5317,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 215,
        column: 31,
        span: 5316..5327,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 215,
        column: 32,
        span: 5327..5328,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
        column: 35,
        span: 5328..5331,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 36,
        span: 5331..5332,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 215,
        column: 39,
        span: 5333..5335,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
        column: 41,
        span: 5335..5337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 42,
        span: 5337..5338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 216,
        column: 7,
        span: 5339..5345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 8,
        span: 5345..5346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 216,
        column: 13,
        span: 5346..5351,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 216,
        column: 14,
        span: 5351..5352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        line: 216,
        column: 20,
        span: 5352..5358,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 21,
        span: 5358..5359,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 216,
        column: 31,
        span: 5358..5369,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
        column: 32,
        span: 5369..5370,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 216,
        column: 34,
        span: 5371..5372,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 36,
        span: 5371..5374,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 37,
        span: 5374..5375,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 216,
        column: 40,
        span: 5376..5378,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 42,
        span: 5378..5380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 43,
        span: 5380..5381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 217,
        column: 7,
        span: 5382..5388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 8,
        span: 5388..5389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 217,
        column: 13,
        span: 5389..5394,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 217,
        column: 14,
        span: 5394..5395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rshift",
        ),
        line: 217,
        column: 20,
        span: 5395..5401,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 21,
        span: 5401..5402,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 217,
        column: 31,
        span: 5401..5412,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 217,
        column: 32,
        span: 5412..5413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
        column: 34,
        span: 5413..5415,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 35,
        span: 5415..5416,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 217,
        column: 38,
        span: 5417..5419,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x01234567",
            ),
        ),
        line: 217,
        column: 49,
        span: 5419..5430,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 50,
        span: 5430..5431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 218,
        column: 7,
        span: 5432..5438,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 8,
        span: 5438..5439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 218,
        column: 13,
        span: 5439..5444,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 218,
        column: 14,
        span: 5444..5445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rshift",
        ),
        line: 218,
        column: 20,
        span: 5445..5451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 21,
        span: 5451..5452,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 218,
        column: 31,
        span: 5451..5462,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 218,
        column: 32,
        span: 5462..5463,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 218,
        column: 34,
        span: 5463..5465,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 35,
        span: 5465..5466,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 218,
        column: 38,
        span: 5467..5469,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x00123456",
            ),
        ),
        line: 218,
        column: 49,
        span: 5469..5480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 50,
        span: 5480..5481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 219,
        column: 7,
        span: 5482..5488,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 8,
        span: 5488..5489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 219,
        column: 13,
        span: 5489..5494,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 219,
        column: 14,
        span: 5494..5495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rshift",
        ),
        line: 219,
        column: 20,
        span: 5495..5501,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 21,
        span: 5501..5502,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 219,
        column: 31,
        span: 5501..5512,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 219,
        column: 32,
        span: 5512..5513,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 219,
        column: 35,
        span: 5513..5516,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 36,
        span: 5516..5517,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 219,
        column: 39,
        span: 5518..5520,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 219,
        column: 41,
        span: 5520..5522,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 42,
        span: 5522..5523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 220,
        column: 7,
        span: 5524..5530,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 8,
        span: 5530..5531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 220,
        column: 13,
        span: 5531..5536,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 220,
        column: 14,
        span: 5536..5537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rshift",
        ),
        line: 220,
        column: 20,
        span: 5537..5543,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 21,
        span: 5543..5544,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 220,
        column: 31,
        span: 5543..5554,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 220,
        column: 32,
        span: 5554..5555,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 220,
        column: 34,
        span: 5556..5557,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 220,
        column: 36,
        span: 5556..5559,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 37,
        span: 5559..5560,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 220,
        column: 40,
        span: 5561..5563,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 220,
        column: 42,
        span: 5563..5565,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 43,
        span: 5565..5566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 221,
        column: 7,
        span: 5567..5573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 8,
        span: 5573..5574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 221,
        column: 13,
        span: 5574..5579,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 221,
        column: 14,
        span: 5579..5580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arshift",
        ),
        line: 221,
        column: 21,
        span: 5580..5587,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 22,
        span: 5587..5588,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 221,
        column: 32,
        span: 5587..5598,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 221,
        column: 33,
        span: 5598..5599,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
        column: 35,
        span: 5599..5601,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 36,
        span: 5601..5602,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 221,
        column: 39,
        span: 5603..5605,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 221,
        column: 50,
        span: 5605..5616,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 51,
        span: 5616..5617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 222,
        column: 7,
        span: 5618..5624,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 8,
        span: 5624..5625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 222,
        column: 13,
        span: 5625..5630,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 222,
        column: 14,
        span: 5630..5631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arshift",
        ),
        line: 222,
        column: 21,
        span: 5631..5638,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 22,
        span: 5638..5639,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 222,
        column: 32,
        span: 5638..5649,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 222,
        column: 33,
        span: 5649..5650,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 222,
        column: 35,
        span: 5650..5652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 36,
        span: 5652..5653,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 222,
        column: 39,
        span: 5654..5656,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 222,
        column: 50,
        span: 5656..5667,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 222,
        column: 53,
        span: 5668..5670,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 222,
        column: 55,
        span: 5670..5672,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 56,
        span: 5672..5673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 223,
        column: 7,
        span: 5674..5680,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 8,
        span: 5680..5681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 223,
        column: 13,
        span: 5681..5686,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 223,
        column: 14,
        span: 5686..5687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arshift",
        ),
        line: 223,
        column: 21,
        span: 5687..5694,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 22,
        span: 5694..5695,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 223,
        column: 32,
        span: 5694..5705,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 33,
        span: 5705..5706,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 223,
        column: 35,
        span: 5707..5708,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 36,
        span: 5707..5709,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 37,
        span: 5709..5710,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 223,
        column: 40,
        span: 5711..5713,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 223,
        column: 51,
        span: 5713..5724,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 223,
        column: 53,
        span: 5725..5726,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 55,
        span: 5726..5728,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 56,
        span: 5728..5729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 224,
        column: 7,
        span: 5730..5736,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 8,
        span: 5736..5737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 224,
        column: 13,
        span: 5737..5742,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 224,
        column: 14,
        span: 5742..5743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arshift",
        ),
        line: 224,
        column: 21,
        span: 5743..5750,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 22,
        span: 5750..5751,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 224,
        column: 23,
        span: 5751..5752,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 224,
        column: 24,
        span: 5751..5753,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
        column: 25,
        span: 5753..5754,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 224,
        column: 27,
        span: 5754..5756,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 28,
        span: 5756..5757,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 224,
        column: 31,
        span: 5758..5760,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        line: 224,
        column: 42,
        span: 5760..5771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 43,
        span: 5771..5772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 225,
        column: 7,
        span: 5773..5779,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 8,
        span: 5779..5780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 225,
        column: 13,
        span: 5780..5785,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 225,
        column: 14,
        span: 5785..5786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arshift",
        ),
        line: 225,
        column: 21,
        span: 5786..5793,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 22,
        span: 5793..5794,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 225,
        column: 23,
        span: 5794..5795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 225,
        column: 24,
        span: 5794..5796,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 225,
        column: 25,
        span: 5796..5797,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        line: 225,
        column: 28,
        span: 5797..5800,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 29,
        span: 5800..5801,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 225,
        column: 32,
        span: 5802..5804,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        line: 225,
        column: 43,
        span: 5804..5815,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 44,
        span: 5815..5816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 226,
        column: 7,
        span: 5817..5823,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 8,
        span: 5823..5824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 226,
        column: 13,
        span: 5824..5829,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 226,
        column: 14,
        span: 5829..5830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arshift",
        ),
        line: 226,
        column: 21,
        span: 5830..5837,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 22,
        span: 5837..5838,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 226,
        column: 23,
        span: 5838..5839,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
        column: 24,
        span: 5838..5840,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
        column: 25,
        span: 5840..5841,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
        column: 28,
        span: 5841..5844,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 29,
        span: 5844..5845,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 226,
        column: 32,
        span: 5846..5848,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        line: 226,
        column: 43,
        span: 5848..5859,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 44,
        span: 5859..5860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 227,
        column: 7,
        span: 5861..5867,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 8,
        span: 5867..5868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 227,
        column: 13,
        span: 5868..5873,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 227,
        column: 14,
        span: 5873..5874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arshift",
        ),
        line: 227,
        column: 21,
        span: 5874..5881,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 22,
        span: 5881..5882,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 227,
        column: 23,
        span: 5882..5883,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
        column: 24,
        span: 5882..5884,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
        column: 25,
        span: 5884..5885,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 227,
        column: 27,
        span: 5886..5887,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
        column: 28,
        span: 5886..5888,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 29,
        span: 5888..5889,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 227,
        column: 32,
        span: 5890..5892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 227,
        column: 38,
        span: 5893..5898,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 227,
        column: 39,
        span: 5898..5899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 227,
        column: 43,
        span: 5899..5903,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 44,
        span: 5903..5904,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 227,
        column: 45,
        span: 5904..5905,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
        column: 46,
        span: 5904..5906,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 227,
        column: 48,
        span: 5907..5908,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
        column: 50,
        span: 5908..5910,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
        column: 51,
        span: 5910..5911,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        line: 227,
        column: 62,
        span: 5911..5922,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 63,
        span: 5922..5923,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 64,
        span: 5923..5924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 229,
        column: 7,
        span: 5926..5932,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
        column: 8,
        span: 5932..5933,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 229,
        column: 18,
        span: 5932..5943,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 229,
        column: 21,
        span: 5944..5946,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 229,
        column: 23,
        span: 5946..5948,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 229,
        column: 26,
        span: 5949..5951,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x123456780",
            ),
        ),
        line: 229,
        column: 38,
        span: 5951..5963,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
        column: 39,
        span: 5963..5964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 230,
        column: 7,
        span: 5965..5971,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 8,
        span: 5971..5972,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 230,
        column: 18,
        span: 5971..5982,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 230,
        column: 21,
        span: 5983..5985,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 230,
        column: 23,
        span: 5985..5987,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 230,
        column: 26,
        span: 5988..5990,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x1234567800",
            ),
        ),
        line: 230,
        column: 39,
        span: 5990..6003,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 40,
        span: 6003..6004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 231,
        column: 7,
        span: 6005..6011,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 8,
        span: 6011..6012,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 231,
        column: 18,
        span: 6011..6022,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 231,
        column: 21,
        span: 6023..6025,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 231,
        column: 23,
        span: 6026..6027,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 24,
        span: 6026..6028,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 231,
        column: 27,
        span: 6029..6031,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x01234567",
            ),
        ),
        line: 231,
        column: 38,
        span: 6031..6042,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 39,
        span: 6042..6043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 232,
        column: 7,
        span: 6044..6050,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
        column: 8,
        span: 6050..6051,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 232,
        column: 18,
        span: 6050..6061,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 232,
        column: 21,
        span: 6062..6064,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 232,
        column: 23,
        span: 6065..6066,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 232,
        column: 24,
        span: 6065..6067,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 232,
        column: 27,
        span: 6068..6070,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x00123456",
            ),
        ),
        line: 232,
        column: 38,
        span: 6070..6081,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
        column: 39,
        span: 6081..6082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 233,
        column: 7,
        span: 6083..6089,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 233,
        column: 8,
        span: 6089..6090,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 233,
        column: 18,
        span: 6089..6100,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 233,
        column: 21,
        span: 6101..6103,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 24,
        span: 6103..6106,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 233,
        column: 27,
        span: 6107..6109,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x1234567800000000",
            ),
        ),
        line: 233,
        column: 46,
        span: 6109..6128,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 233,
        column: 47,
        span: 6128..6129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 234,
        column: 7,
        span: 6130..6136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 8,
        span: 6136..6137,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 234,
        column: 18,
        span: 6136..6147,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 234,
        column: 21,
        span: 6148..6150,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 234,
        column: 23,
        span: 6151..6152,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 234,
        column: 25,
        span: 6151..6154,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 234,
        column: 28,
        span: 6155..6157,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 234,
        column: 30,
        span: 6157..6159,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 31,
        span: 6159..6160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 235,
        column: 7,
        span: 6161..6167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 8,
        span: 6167..6168,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 235,
        column: 18,
        span: 6167..6178,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 235,
        column: 21,
        span: 6179..6181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 235,
        column: 23,
        span: 6181..6183,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 235,
        column: 26,
        span: 6184..6186,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x01234567",
            ),
        ),
        line: 235,
        column: 37,
        span: 6186..6197,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 38,
        span: 6197..6198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 236,
        column: 7,
        span: 6199..6205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 8,
        span: 6205..6206,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 236,
        column: 18,
        span: 6205..6216,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 236,
        column: 21,
        span: 6217..6219,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 236,
        column: 23,
        span: 6219..6221,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 236,
        column: 26,
        span: 6222..6224,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x00123456",
            ),
        ),
        line: 236,
        column: 37,
        span: 6224..6235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 38,
        span: 6235..6236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 237,
        column: 7,
        span: 6237..6243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 8,
        span: 6243..6244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 237,
        column: 18,
        span: 6243..6254,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 237,
        column: 21,
        span: 6255..6257,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 237,
        column: 24,
        span: 6257..6260,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 237,
        column: 27,
        span: 6261..6263,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 237,
        column: 29,
        span: 6263..6265,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 30,
        span: 6265..6266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 238,
        column: 7,
        span: 6267..6273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 8,
        span: 6273..6274,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 238,
        column: 18,
        span: 6273..6284,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 238,
        column: 21,
        span: 6285..6287,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 238,
        column: 23,
        span: 6288..6289,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 238,
        column: 25,
        span: 6288..6291,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 238,
        column: 28,
        span: 6292..6294,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x1234567800000000",
            ),
        ),
        line: 238,
        column: 47,
        span: 6294..6313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 48,
        span: 6313..6314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 240,
        column: 6,
        span: 6316..6321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 7,
        span: 6321..6322,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 240,
        column: 10,
        span: 6322..6325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 11,
        span: 6325..6326,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 242,
        column: 6,
        span: 6349..6354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 242,
        column: 8,
        span: 6355..6356,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 242,
        column: 10,
        span: 6357..6358,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 242,
        column: 12,
        span: 6359..6360,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 242,
        column: 13,
        span: 6359..6361,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 14,
        span: 6361..6362,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 242,
        column: 16,
        span: 6362..6364,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 17,
        span: 6364..6365,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 242,
        column: 19,
        span: 6365..6367,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 20,
        span: 6367..6368,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 242,
        column: 22,
        span: 6368..6370,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 23,
        span: 6370..6371,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 242,
        column: 26,
        span: 6371..6374,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 27,
        span: 6374..6375,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x80000000",
            ),
        ),
        line: 242,
        column: 38,
        span: 6375..6386,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 39,
        span: 6386..6387,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xaaaaaaaa",
            ),
        ),
        line: 242,
        column: 50,
        span: 6387..6398,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 51,
        span: 6398..6399,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x55555555",
            ),
        ),
        line: 242,
        column: 62,
        span: 6399..6410,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 63,
        span: 6410..6411,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        line: 243,
        column: 22,
        span: 6422..6433,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
        column: 23,
        span: 6433..6434,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7fffffff",
            ),
        ),
        line: 243,
        column: 34,
        span: 6434..6445,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 243,
        column: 35,
        span: 6445..6446,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 245,
        column: 4,
        span: 6448..6451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 245,
        column: 6,
        span: 6452..6453,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 7,
        span: 6453..6454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 245,
        column: 9,
        span: 6455..6456,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 245,
        column: 12,
        span: 6457..6459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 245,
        column: 18,
        span: 6460..6465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 19,
        span: 6465..6466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 245,
        column: 20,
        span: 6466..6467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 21,
        span: 6467..6468,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 245,
        column: 0,
        span: 6469..6471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 246,
        column: 9,
        span: 6474..6480,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 10,
        span: 6480..6481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 246,
        column: 15,
        span: 6481..6486,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 246,
        column: 16,
        span: 6486..6487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 246,
        column: 20,
        span: 6487..6491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 21,
        span: 6491..6492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 246,
        column: 22,
        span: 6492..6493,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 23,
        span: 6493..6494,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 246,
        column: 26,
        span: 6495..6497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 246,
        column: 28,
        span: 6498..6499,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 29,
        span: 6499..6500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 247,
        column: 9,
        span: 6503..6509,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 10,
        span: 6509..6510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 247,
        column: 15,
        span: 6510..6515,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 247,
        column: 16,
        span: 6515..6516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 247,
        column: 20,
        span: 6516..6520,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 21,
        span: 6520..6521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 247,
        column: 22,
        span: 6521..6522,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
        column: 23,
        span: 6522..6523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 247,
        column: 25,
        span: 6524..6525,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 26,
        span: 6525..6526,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 247,
        column: 29,
        span: 6527..6529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 247,
        column: 31,
        span: 6530..6531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 32,
        span: 6531..6532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 248,
        column: 9,
        span: 6535..6541,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
        column: 10,
        span: 6541..6542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 248,
        column: 15,
        span: 6542..6547,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 248,
        column: 16,
        span: 6547..6548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 248,
        column: 20,
        span: 6548..6552,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
        column: 21,
        span: 6552..6553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 248,
        column: 22,
        span: 6553..6554,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 248,
        column: 23,
        span: 6554..6555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 248,
        column: 25,
        span: 6556..6557,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 248,
        column: 26,
        span: 6557..6558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 248,
        column: 28,
        span: 6559..6560,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 248,
        column: 29,
        span: 6560..6561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 248,
        column: 31,
        span: 6562..6563,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
        column: 32,
        span: 6563..6564,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 248,
        column: 35,
        span: 6565..6567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 248,
        column: 37,
        span: 6568..6569,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
        column: 38,
        span: 6569..6570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 249,
        column: 9,
        span: 6573..6579,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 10,
        span: 6579..6580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 249,
        column: 15,
        span: 6580..6585,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 249,
        column: 16,
        span: 6585..6586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "btest",
        ),
        line: 249,
        column: 21,
        span: 6586..6591,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 22,
        span: 6591..6592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 249,
        column: 23,
        span: 6592..6593,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 24,
        span: 6593..6594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 249,
        column: 26,
        span: 6595..6596,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 27,
        span: 6596..6597,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 249,
        column: 30,
        span: 6598..6600,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 32,
        span: 6601..6602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 249,
        column: 33,
        span: 6602..6603,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 249,
        column: 36,
        span: 6604..6606,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 249,
        column: 38,
        span: 6606..6608,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 39,
        span: 6608..6609,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 40,
        span: 6609..6610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 250,
        column: 9,
        span: 6613..6619,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 10,
        span: 6619..6620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 250,
        column: 15,
        span: 6620..6625,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 250,
        column: 16,
        span: 6625..6626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 250,
        column: 20,
        span: 6626..6630,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 21,
        span: 6630..6631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 250,
        column: 22,
        span: 6631..6632,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 250,
        column: 23,
        span: 6632..6633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 250,
        column: 25,
        span: 6634..6635,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 250,
        column: 26,
        span: 6635..6636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 250,
        column: 28,
        span: 6637..6638,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 29,
        span: 6638..6639,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 250,
        column: 32,
        span: 6640..6642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 250,
        column: 34,
        span: 6643..6644,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 35,
        span: 6644..6645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 251,
        column: 9,
        span: 6648..6654,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 10,
        span: 6654..6655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 251,
        column: 15,
        span: 6655..6660,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 251,
        column: 16,
        span: 6660..6661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 251,
        column: 20,
        span: 6661..6665,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 21,
        span: 6665..6666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 251,
        column: 22,
        span: 6666..6667,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 251,
        column: 23,
        span: 6667..6668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 251,
        column: 25,
        span: 6669..6670,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 251,
        column: 26,
        span: 6670..6671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 251,
        column: 28,
        span: 6672..6673,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 251,
        column: 29,
        span: 6673..6674,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 251,
        column: 31,
        span: 6675..6676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 251,
        column: 32,
        span: 6676..6677,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 33,
        span: 6677..6678,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 251,
        column: 36,
        span: 6679..6681,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 251,
        column: 38,
        span: 6681..6683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 39,
        span: 6683..6684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 252,
        column: 9,
        span: 6687..6693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 10,
        span: 6693..6694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 252,
        column: 15,
        span: 6694..6699,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 252,
        column: 16,
        span: 6699..6700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "btest",
        ),
        line: 252,
        column: 21,
        span: 6700..6705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 22,
        span: 6705..6706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 252,
        column: 23,
        span: 6706..6707,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 252,
        column: 24,
        span: 6707..6708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 252,
        column: 26,
        span: 6709..6710,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 252,
        column: 27,
        span: 6710..6711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 252,
        column: 29,
        span: 6712..6713,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 30,
        span: 6713..6714,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 252,
        column: 33,
        span: 6715..6717,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 35,
        span: 6718..6719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 252,
        column: 36,
        span: 6719..6720,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 252,
        column: 39,
        span: 6721..6723,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 252,
        column: 41,
        span: 6723..6725,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 42,
        span: 6725..6726,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 43,
        span: 6726..6727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 253,
        column: 9,
        span: 6730..6736,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 10,
        span: 6736..6737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 253,
        column: 15,
        span: 6737..6742,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 253,
        column: 16,
        span: 6742..6743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 253,
        column: 20,
        span: 6743..6747,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 21,
        span: 6747..6748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 253,
        column: 22,
        span: 6748..6749,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 23,
        span: 6749..6750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 253,
        column: 29,
        span: 6751..6756,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 253,
        column: 30,
        span: 6756..6757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        line: 253,
        column: 34,
        span: 6757..6761,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 35,
        span: 6761..6762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 253,
        column: 36,
        span: 6762..6763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 37,
        span: 6763..6764,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 38,
        span: 6764..6765,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 253,
        column: 41,
        span: 6766..6768,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 43,
        span: 6768..6770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 44,
        span: 6770..6771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 254,
        column: 9,
        span: 6774..6780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 10,
        span: 6780..6781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 254,
        column: 15,
        span: 6781..6786,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 254,
        column: 16,
        span: 6786..6787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bor",
        ),
        line: 254,
        column: 19,
        span: 6787..6790,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 20,
        span: 6790..6791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 254,
        column: 21,
        span: 6791..6792,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
        column: 22,
        span: 6792..6793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 254,
        column: 28,
        span: 6794..6799,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 254,
        column: 29,
        span: 6799..6800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        line: 254,
        column: 33,
        span: 6800..6804,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 34,
        span: 6804..6805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 254,
        column: 35,
        span: 6805..6806,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 36,
        span: 6806..6807,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 37,
        span: 6807..6808,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 254,
        column: 40,
        span: 6809..6811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 254,
        column: 46,
        span: 6812..6817,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 254,
        column: 47,
        span: 6817..6818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        line: 254,
        column: 51,
        span: 6818..6822,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 52,
        span: 6822..6823,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 53,
        span: 6822..6824,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 54,
        span: 6824..6825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 55,
        span: 6825..6826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 255,
        column: 9,
        span: 6829..6835,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 10,
        span: 6835..6836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 255,
        column: 15,
        span: 6836..6841,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 255,
        column: 16,
        span: 6841..6842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bor",
        ),
        line: 255,
        column: 19,
        span: 6842..6845,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 20,
        span: 6845..6846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 255,
        column: 21,
        span: 6846..6847,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 22,
        span: 6847..6848,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 255,
        column: 25,
        span: 6849..6851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 255,
        column: 27,
        span: 6852..6853,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 28,
        span: 6853..6854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 256,
        column: 9,
        span: 6857..6863,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 10,
        span: 6863..6864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 256,
        column: 15,
        span: 6864..6869,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 256,
        column: 16,
        span: 6869..6870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bor",
        ),
        line: 256,
        column: 19,
        span: 6870..6873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 20,
        span: 6873..6874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 256,
        column: 21,
        span: 6874..6875,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 22,
        span: 6875..6876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 256,
        column: 24,
        span: 6877..6878,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 25,
        span: 6878..6879,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 256,
        column: 28,
        span: 6880..6882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 256,
        column: 30,
        span: 6883..6884,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 31,
        span: 6884..6885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 257,
        column: 9,
        span: 6888..6894,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 10,
        span: 6894..6895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 257,
        column: 15,
        span: 6895..6900,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 257,
        column: 16,
        span: 6900..6901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bor",
        ),
        line: 257,
        column: 19,
        span: 6901..6904,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 20,
        span: 6904..6905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 257,
        column: 21,
        span: 6905..6906,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 22,
        span: 6906..6907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 257,
        column: 24,
        span: 6908..6909,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 25,
        span: 6909..6910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 257,
        column: 27,
        span: 6911..6912,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 28,
        span: 6912..6913,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 257,
        column: 31,
        span: 6914..6916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 257,
        column: 33,
        span: 6917..6918,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 34,
        span: 6918..6919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 258,
        column: 9,
        span: 6922..6928,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 10,
        span: 6928..6929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 258,
        column: 15,
        span: 6929..6934,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 258,
        column: 16,
        span: 6934..6935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bor",
        ),
        line: 258,
        column: 19,
        span: 6935..6938,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 20,
        span: 6938..6939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 258,
        column: 21,
        span: 6939..6940,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 22,
        span: 6940..6941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 258,
        column: 24,
        span: 6942..6943,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 25,
        span: 6943..6944,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 27,
        span: 6944..6946,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 28,
        span: 6946..6947,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 258,
        column: 30,
        span: 6948..6949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 258,
        column: 31,
        span: 6949..6950,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 32,
        span: 6950..6951,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 258,
        column: 35,
        span: 6952..6954,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        line: 258,
        column: 46,
        span: 6954..6965,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 47,
        span: 6965..6966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 259,
        column: 9,
        span: 6969..6975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 10,
        span: 6975..6976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 259,
        column: 15,
        span: 6976..6981,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 259,
        column: 16,
        span: 6981..6982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bxor",
        ),
        line: 259,
        column: 20,
        span: 6982..6986,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 21,
        span: 6986..6987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 259,
        column: 22,
        span: 6987..6988,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 23,
        span: 6988..6989,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 259,
        column: 26,
        span: 6990..6992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 259,
        column: 28,
        span: 6993..6994,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 29,
        span: 6994..6995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 260,
        column: 9,
        span: 6998..7004,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
        column: 10,
        span: 7004..7005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 260,
        column: 15,
        span: 7005..7010,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 260,
        column: 16,
        span: 7010..7011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bxor",
        ),
        line: 260,
        column: 20,
        span: 7011..7015,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
        column: 21,
        span: 7015..7016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 260,
        column: 22,
        span: 7016..7017,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 260,
        column: 23,
        span: 7017..7018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 260,
        column: 25,
        span: 7019..7020,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
        column: 26,
        span: 7020..7021,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 260,
        column: 29,
        span: 7022..7024,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 260,
        column: 31,
        span: 7024..7026,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
        column: 32,
        span: 7026..7027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 261,
        column: 9,
        span: 7030..7036,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 261,
        column: 10,
        span: 7036..7037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 261,
        column: 15,
        span: 7037..7042,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 261,
        column: 16,
        span: 7042..7043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bxor",
        ),
        line: 261,
        column: 20,
        span: 7043..7047,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 261,
        column: 21,
        span: 7047..7048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 261,
        column: 22,
        span: 7048..7049,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 23,
        span: 7049..7050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 261,
        column: 25,
        span: 7051..7052,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 26,
        span: 7052..7053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 261,
        column: 28,
        span: 7054..7055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 261,
        column: 29,
        span: 7055..7056,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 261,
        column: 32,
        span: 7057..7059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 261,
        column: 34,
        span: 7060..7061,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 261,
        column: 35,
        span: 7061..7062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 262,
        column: 9,
        span: 7065..7071,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 10,
        span: 7071..7072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 262,
        column: 15,
        span: 7072..7077,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 262,
        column: 16,
        span: 7077..7078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bxor",
        ),
        line: 262,
        column: 20,
        span: 7078..7082,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 21,
        span: 7082..7083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 262,
        column: 22,
        span: 7083..7084,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
        column: 23,
        span: 7084..7085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 262,
        column: 25,
        span: 7086..7087,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
        column: 26,
        span: 7087..7088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 262,
        column: 28,
        span: 7089..7090,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
        column: 29,
        span: 7090..7091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 262,
        column: 31,
        span: 7092..7093,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 32,
        span: 7093..7094,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 262,
        column: 35,
        span: 7095..7097,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
        column: 37,
        span: 7097..7099,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 38,
        span: 7099..7100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 263,
        column: 9,
        span: 7103..7109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 10,
        span: 7109..7110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 263,
        column: 15,
        span: 7110..7115,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 263,
        column: 16,
        span: 7115..7116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bxor",
        ),
        line: 263,
        column: 20,
        span: 7116..7120,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 21,
        span: 7120..7121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 263,
        column: 22,
        span: 7121..7122,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 263,
        column: 23,
        span: 7122..7123,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 263,
        column: 25,
        span: 7123..7125,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 26,
        span: 7125..7126,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 263,
        column: 29,
        span: 7127..7129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 263,
        column: 31,
        span: 7130..7131,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 32,
        span: 7131..7132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 264,
        column: 9,
        span: 7135..7141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 10,
        span: 7141..7142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 264,
        column: 15,
        span: 7142..7147,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 264,
        column: 16,
        span: 7147..7148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        line: 264,
        column: 20,
        span: 7148..7152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 21,
        span: 7152..7153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 264,
        column: 22,
        span: 7153..7154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 23,
        span: 7154..7155,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 264,
        column: 26,
        span: 7156..7158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 264,
        column: 28,
        span: 7159..7160,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 29,
        span: 7160..7161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 265,
        column: 9,
        span: 7164..7170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 10,
        span: 7170..7171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 265,
        column: 15,
        span: 7171..7176,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 265,
        column: 16,
        span: 7176..7177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        line: 265,
        column: 20,
        span: 7177..7181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 21,
        span: 7181..7182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 265,
        column: 26,
        span: 7182..7187,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 265,
        column: 27,
        span: 7187..7188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        line: 265,
        column: 31,
        span: 7188..7192,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 32,
        span: 7192..7193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 265,
        column: 33,
        span: 7193..7194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 34,
        span: 7194..7195,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 35,
        span: 7195..7196,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 265,
        column: 38,
        span: 7197..7199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 265,
        column: 40,
        span: 7200..7201,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 41,
        span: 7201..7202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 266,
        column: 9,
        span: 7205..7211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 10,
        span: 7211..7212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 266,
        column: 15,
        span: 7212..7217,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 266,
        column: 16,
        span: 7217..7218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        line: 266,
        column: 20,
        span: 7218..7222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 21,
        span: 7222..7223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 266,
        column: 22,
        span: 7223..7224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 23,
        span: 7224..7225,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 266,
        column: 26,
        span: 7226..7228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 28,
        span: 7229..7230,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 266,
        column: 29,
        span: 7229..7231,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 266,
        column: 32,
        span: 7232..7234,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 266,
        column: 35,
        span: 7234..7237,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 36,
        span: 7237..7238,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 266,
        column: 38,
        span: 7239..7240,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 266,
        column: 40,
        span: 7240..7242,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 266,
        column: 42,
        span: 7243..7244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 266,
        column: 44,
        span: 7245..7246,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 45,
        span: 7246..7247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 267,
        column: 9,
        span: 7250..7256,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 10,
        span: 7256..7257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 267,
        column: 15,
        span: 7257..7262,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 267,
        column: 16,
        span: 7262..7263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        line: 267,
        column: 23,
        span: 7263..7270,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 24,
        span: 7270..7271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 267,
        column: 25,
        span: 7271..7272,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 267,
        column: 26,
        span: 7272..7273,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 267,
        column: 29,
        span: 7273..7276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 30,
        span: 7276..7277,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 267,
        column: 33,
        span: 7278..7280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 267,
        column: 35,
        span: 7281..7282,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 36,
        span: 7282..7283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 268,
        column: 9,
        span: 7286..7292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 10,
        span: 7292..7293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 268,
        column: 15,
        span: 7293..7298,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 268,
        column: 16,
        span: 7298..7299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rrotate",
        ),
        line: 268,
        column: 23,
        span: 7299..7306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 24,
        span: 7306..7307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 268,
        column: 25,
        span: 7307..7308,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
        column: 26,
        span: 7308..7309,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 268,
        column: 29,
        span: 7309..7312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 30,
        span: 7312..7313,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 268,
        column: 33,
        span: 7314..7316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 268,
        column: 35,
        span: 7317..7318,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 36,
        span: 7318..7319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 269,
        column: 9,
        span: 7322..7328,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 10,
        span: 7328..7329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 269,
        column: 15,
        span: 7329..7334,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 269,
        column: 16,
        span: 7334..7335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        line: 269,
        column: 22,
        span: 7335..7341,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 23,
        span: 7341..7342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 269,
        column: 28,
        span: 7342..7347,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 269,
        column: 29,
        span: 7347..7348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        line: 269,
        column: 35,
        span: 7348..7354,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 36,
        span: 7354..7355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 269,
        column: 37,
        span: 7355..7356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 38,
        span: 7356..7357,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 269,
        column: 40,
        span: 7358..7359,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
        column: 41,
        span: 7358..7360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 42,
        span: 7360..7361,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 43,
        span: 7361..7362,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
        column: 45,
        span: 7362..7364,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 46,
        span: 7364..7365,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 269,
        column: 49,
        span: 7366..7368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 269,
        column: 55,
        span: 7369..7374,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 269,
        column: 56,
        span: 7374..7375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 269,
        column: 60,
        span: 7375..7379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 61,
        span: 7379..7380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 269,
        column: 62,
        span: 7380..7381,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 63,
        span: 7381..7382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 269,
        column: 69,
        span: 7383..7388,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 269,
        column: 70,
        span: 7388..7389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        line: 269,
        column: 74,
        span: 7389..7393,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 75,
        span: 7393..7394,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xf",
            ),
        ),
        line: 269,
        column: 78,
        span: 7393..7397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 79,
        span: 7397..7398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 80,
        span: 7398..7399,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 81,
        span: 7399..7400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 270,
        column: 9,
        span: 7403..7409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 10,
        span: 7409..7410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 270,
        column: 15,
        span: 7410..7415,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 270,
        column: 16,
        span: 7415..7416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rshift",
        ),
        line: 270,
        column: 22,
        span: 7416..7422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 23,
        span: 7422..7423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 270,
        column: 28,
        span: 7423..7428,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 270,
        column: 29,
        span: 7428..7429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rshift",
        ),
        line: 270,
        column: 35,
        span: 7429..7435,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 36,
        span: 7435..7436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 270,
        column: 37,
        span: 7436..7437,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
        column: 38,
        span: 7437..7438,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
        column: 40,
        span: 7438..7440,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 41,
        span: 7440..7441,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
        column: 42,
        span: 7441..7442,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 270,
        column: 44,
        span: 7443..7444,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
        column: 45,
        span: 7443..7445,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 46,
        span: 7445..7446,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 270,
        column: 49,
        span: 7447..7449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 270,
        column: 55,
        span: 7450..7455,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 270,
        column: 56,
        span: 7455..7456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 270,
        column: 60,
        span: 7456..7460,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 61,
        span: 7460..7461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 270,
        column: 62,
        span: 7461..7462,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
        column: 63,
        span: 7462..7463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 270,
        column: 69,
        span: 7464..7469,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 270,
        column: 70,
        span: 7469..7470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        line: 270,
        column: 74,
        span: 7470..7474,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 75,
        span: 7474..7475,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xf",
            ),
        ),
        line: 270,
        column: 78,
        span: 7474..7478,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 79,
        span: 7478..7479,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 80,
        span: 7479..7480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 81,
        span: 7480..7481,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 271,
        column: 0,
        span: 7482..7485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 274,
        column: 2,
        span: 7554..7555,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 274,
        column: 4,
        span: 7556..7557,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 274,
        column: 6,
        span: 7558..7559,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
        column: 7,
        span: 7558..7560,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
        column: 8,
        span: 7560..7561,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
        column: 10,
        span: 7561..7563,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
        column: 11,
        span: 7563..7564,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
        column: 13,
        span: 7564..7566,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
        column: 14,
        span: 7566..7567,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
        column: 16,
        span: 7567..7569,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
        column: 17,
        span: 7569..7570,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
        column: 20,
        span: 7570..7573,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
        column: 21,
        span: 7573..7574,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x800000",
            ),
        ),
        line: 274,
        column: 30,
        span: 7574..7583,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
        column: 31,
        span: 7583..7584,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xaaaaaa",
            ),
        ),
        line: 274,
        column: 40,
        span: 7584..7593,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
        column: 41,
        span: 7593..7594,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x555555",
            ),
        ),
        line: 274,
        column: 50,
        span: 7594..7603,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
        column: 51,
        span: 7603..7604,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffff",
            ),
        ),
        line: 274,
        column: 60,
        span: 7604..7613,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
        column: 61,
        span: 7613..7614,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7fffff",
            ),
        ),
        line: 274,
        column: 70,
        span: 7614..7623,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 274,
        column: 71,
        span: 7623..7624,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 275,
        column: 4,
        span: 7625..7628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 275,
        column: 6,
        span: 7629..7630,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
        column: 7,
        span: 7630..7631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 275,
        column: 9,
        span: 7632..7633,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 275,
        column: 12,
        span: 7634..7636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 275,
        column: 18,
        span: 7637..7642,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 19,
        span: 7642..7643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 275,
        column: 20,
        span: 7643..7644,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 21,
        span: 7644..7645,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 275,
        column: 0,
        span: 7646..7648,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 276,
        column: 6,
        span: 7651..7654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 276,
        column: 8,
        span: 7655..7656,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 276,
        column: 10,
        span: 7657..7658,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 276,
        column: 12,
        span: 7659..7660,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
        column: 14,
        span: 7659..7662,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 276,
        column: 15,
        span: 7662..7663,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
        column: 18,
        span: 7663..7666,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 276,
        column: 0,
        span: 7667..7669,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 277,
        column: 10,
        span: 7674..7679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 277,
        column: 12,
        span: 7680..7681,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 277,
        column: 14,
        span: 7682..7683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 277,
        column: 20,
        span: 7684..7689,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 277,
        column: 21,
        span: 7689..7690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        line: 277,
        column: 27,
        span: 7690..7696,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 28,
        span: 7696..7697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 277,
        column: 29,
        span: 7697..7698,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 30,
        span: 7698..7699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 277,
        column: 32,
        span: 7700..7701,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 33,
        span: 7701..7702,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 278,
        column: 10,
        span: 7707..7712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 278,
        column: 12,
        span: 7713..7714,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 278,
        column: 14,
        span: 7715..7716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 278,
        column: 19,
        span: 7717..7721,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 278,
        column: 20,
        span: 7721..7722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 278,
        column: 25,
        span: 7722..7727,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 26,
        span: 7727..7728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 278,
        column: 30,
        span: 7728..7732,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 278,
        column: 31,
        span: 7732..7733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 278,
        column: 35,
        span: 7733..7737,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 36,
        span: 7737..7738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 278,
        column: 37,
        span: 7738..7739,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 278,
        column: 39,
        span: 7740..7741,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 278,
        column: 43,
        span: 7741..7745,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 278,
        column: 44,
        span: 7745..7746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 278,
        column: 45,
        span: 7746..7747,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 278,
        column: 46,
        span: 7747..7748,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 278,
        column: 50,
        span: 7748..7752,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 278,
        column: 51,
        span: 7752..7753,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 278,
        column: 53,
        span: 7752..7755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 54,
        span: 7755..7756,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 55,
        span: 7756..7757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 279,
        column: 11,
        span: 7762..7768,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 12,
        span: 7768..7769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 279,
        column: 16,
        span: 7769..7773,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 279,
        column: 17,
        span: 7773..7774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 279,
        column: 21,
        span: 7774..7778,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 22,
        span: 7778..7779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 279,
        column: 23,
        span: 7779..7780,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 279,
        column: 25,
        span: 7781..7782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 279,
        column: 27,
        span: 7783..7784,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 279,
        column: 28,
        span: 7784..7785,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 279,
        column: 32,
        span: 7785..7789,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 279,
        column: 33,
        span: 7789..7790,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 279,
        column: 35,
        span: 7789..7792,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 36,
        span: 7792..7793,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 279,
        column: 39,
        span: 7794..7796,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 279,
        column: 41,
        span: 7796..7798,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 42,
        span: 7798..7799,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 280,
        column: 0,
        span: 7802..7805,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 281,
        column: 0,
        span: 7806..7809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 283,
        column: 7,
        span: 7811..7817,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
        column: 8,
        span: 7817..7818,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 283,
        column: 11,
        span: 7818..7821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 283,
        column: 17,
        span: 7822..7827,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
        column: 18,
        span: 7827..7828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 283,
        column: 23,
        span: 7828..7833,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 283,
        column: 24,
        span: 7833..7834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        line: 283,
        column: 28,
        span: 7834..7838,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 283,
        column: 29,
        span: 7838..7839,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 283,
        column: 31,
        span: 7840..7841,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 283,
        column: 32,
        span: 7841..7842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
        column: 33,
        span: 7842..7843,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
        column: 34,
        span: 7843..7844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 284,
        column: 7,
        span: 7845..7851,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
        column: 8,
        span: 7851..7852,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 284,
        column: 11,
        span: 7852..7855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 284,
        column: 17,
        span: 7856..7861,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
        column: 18,
        span: 7861..7862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 284,
        column: 23,
        span: 7862..7867,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 284,
        column: 24,
        span: 7867..7868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        line: 284,
        column: 28,
        span: 7868..7872,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 284,
        column: 29,
        span: 7872..7873,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 284,
        column: 33,
        span: 7874..7877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
        column: 34,
        span: 7877..7878,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
        column: 35,
        span: 7878..7879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 285,
        column: 7,
        span: 7880..7886,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 285,
        column: 8,
        span: 7886..7887,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 285,
        column: 11,
        span: 7887..7890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 285,
        column: 17,
        span: 7891..7896,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 285,
        column: 18,
        span: 7896..7897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 285,
        column: 23,
        span: 7897..7902,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 285,
        column: 24,
        span: 7902..7903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        line: 285,
        column: 30,
        span: 7903..7909,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 285,
        column: 31,
        span: 7909..7910,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 285,
        column: 34,
        span: 7910..7913,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 285,
        column: 35,
        span: 7913..7914,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 285,
        column: 36,
        span: 7914..7915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 286,
        column: 7,
        span: 7916..7922,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 8,
        span: 7922..7923,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 286,
        column: 11,
        span: 7923..7926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 286,
        column: 17,
        span: 7927..7932,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 18,
        span: 7932..7933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 286,
        column: 23,
        span: 7933..7938,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 286,
        column: 24,
        span: 7938..7939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        line: 286,
        column: 30,
        span: 7939..7945,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
        column: 31,
        span: 7945..7946,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 34,
        span: 7946..7949,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
        column: 35,
        span: 7949..7950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 286,
        column: 41,
        span: 7951..7956,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 42,
        span: 7956..7957,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 43,
        span: 7957..7958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 287,
        column: 7,
        span: 7959..7965,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
        column: 8,
        span: 7965..7966,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 287,
        column: 11,
        span: 7966..7969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 287,
        column: 17,
        span: 7970..7975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
        column: 18,
        span: 7975..7976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 287,
        column: 23,
        span: 7976..7981,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 287,
        column: 24,
        span: 7981..7982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rshift",
        ),
        line: 287,
        column: 30,
        span: 7982..7988,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
        column: 31,
        span: 7988..7989,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 287,
        column: 34,
        span: 7989..7992,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
        column: 35,
        span: 7992..7993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 287,
        column: 41,
        span: 7994..7999,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
        column: 42,
        span: 7999..8000,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
        column: 43,
        span: 8000..8001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 289,
        column: 6,
        span: 8003..8008,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 7,
        span: 8008..8009,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 289,
        column: 10,
        span: 8009..8012,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 11,
        span: 8012..8013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 294,
        column: 7,
        span: 8044..8050,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 8,
        span: 8050..8051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 294,
        column: 13,
        span: 8051..8056,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 294,
        column: 14,
        span: 8056..8057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extract",
        ),
        line: 294,
        column: 21,
        span: 8057..8064,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 22,
        span: 8064..8065,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 294,
        column: 32,
        span: 8064..8075,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 294,
        column: 33,
        span: 8075..8076,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 294,
        column: 35,
        span: 8076..8078,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 294,
        column: 36,
        span: 8078..8079,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 294,
        column: 38,
        span: 8079..8081,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 39,
        span: 8081..8082,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 294,
        column: 42,
        span: 8083..8085,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 294,
        column: 44,
        span: 8085..8087,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 45,
        span: 8087..8088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 295,
        column: 7,
        span: 8089..8095,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
        column: 8,
        span: 8095..8096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 295,
        column: 13,
        span: 8096..8101,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 295,
        column: 14,
        span: 8101..8102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extract",
        ),
        line: 295,
        column: 21,
        span: 8102..8109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
        column: 22,
        span: 8109..8110,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 295,
        column: 32,
        span: 8109..8120,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 295,
        column: 33,
        span: 8120..8121,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 295,
        column: 35,
        span: 8121..8123,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 295,
        column: 36,
        span: 8123..8124,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 295,
        column: 38,
        span: 8124..8126,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
        column: 39,
        span: 8126..8127,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 295,
        column: 42,
        span: 8128..8130,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 295,
        column: 44,
        span: 8130..8132,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
        column: 45,
        span: 8132..8133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 296,
        column: 7,
        span: 8134..8140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 296,
        column: 8,
        span: 8140..8141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 296,
        column: 13,
        span: 8141..8146,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 296,
        column: 14,
        span: 8146..8147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extract",
        ),
        line: 296,
        column: 21,
        span: 8147..8154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 296,
        column: 22,
        span: 8154..8155,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xa0001111",
            ),
        ),
        line: 296,
        column: 32,
        span: 8154..8165,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 296,
        column: 33,
        span: 8165..8166,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "28",
                    after_decimal: "",
                },
            ),
        ),
        line: 296,
        column: 36,
        span: 8166..8169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 296,
        column: 37,
        span: 8169..8170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 296,
        column: 39,
        span: 8170..8172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 296,
        column: 40,
        span: 8172..8173,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 296,
        column: 43,
        span: 8174..8176,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xa",
            ),
        ),
        line: 296,
        column: 47,
        span: 8176..8180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 296,
        column: 48,
        span: 8180..8181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 297,
        column: 7,
        span: 8182..8188,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 8,
        span: 8188..8189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 297,
        column: 13,
        span: 8189..8194,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 297,
        column: 14,
        span: 8194..8195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extract",
        ),
        line: 297,
        column: 21,
        span: 8195..8202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 22,
        span: 8202..8203,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xa0001111",
            ),
        ),
        line: 297,
        column: 32,
        span: 8202..8213,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 297,
        column: 33,
        span: 8213..8214,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 297,
        column: 36,
        span: 8214..8217,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 297,
        column: 37,
        span: 8217..8218,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 297,
        column: 39,
        span: 8218..8220,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 40,
        span: 8220..8221,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 297,
        column: 43,
        span: 8222..8224,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 297,
        column: 45,
        span: 8224..8226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 46,
        span: 8226..8227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 298,
        column: 7,
        span: 8228..8234,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 8,
        span: 8234..8235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 298,
        column: 13,
        span: 8235..8240,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 298,
        column: 14,
        span: 8240..8241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extract",
        ),
        line: 298,
        column: 21,
        span: 8241..8248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 22,
        span: 8248..8249,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x50000111",
            ),
        ),
        line: 298,
        column: 32,
        span: 8248..8259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 298,
        column: 33,
        span: 8259..8260,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 298,
        column: 36,
        span: 8260..8263,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 298,
        column: 37,
        span: 8263..8264,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 298,
        column: 39,
        span: 8264..8266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 40,
        span: 8266..8267,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 298,
        column: 43,
        span: 8268..8270,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 298,
        column: 45,
        span: 8270..8272,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 46,
        span: 8272..8273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 299,
        column: 7,
        span: 8274..8280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 8,
        span: 8280..8281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 299,
        column: 13,
        span: 8281..8286,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 299,
        column: 14,
        span: 8286..8287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extract",
        ),
        line: 299,
        column: 21,
        span: 8287..8294,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 22,
        span: 8294..8295,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xf2345679",
            ),
        ),
        line: 299,
        column: 32,
        span: 8294..8305,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 299,
        column: 33,
        span: 8305..8306,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 299,
        column: 35,
        span: 8306..8308,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 299,
        column: 36,
        span: 8308..8309,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 299,
        column: 39,
        span: 8309..8312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 40,
        span: 8312..8313,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 299,
        column: 43,
        span: 8314..8316,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xf2345679",
            ),
        ),
        line: 299,
        column: 54,
        span: 8316..8327,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 55,
        span: 8327..8328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 301,
        column: 7,
        span: 8330..8336,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 8,
        span: 8336..8337,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 301,
        column: 11,
        span: 8337..8340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 301,
        column: 17,
        span: 8341..8346,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 18,
        span: 8346..8347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 301,
        column: 23,
        span: 8347..8352,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 301,
        column: 24,
        span: 8352..8353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extract",
        ),
        line: 301,
        column: 31,
        span: 8353..8360,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
        column: 32,
        span: 8360..8361,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 301,
        column: 34,
        span: 8361..8363,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
        column: 35,
        span: 8363..8364,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 301,
        column: 37,
        span: 8365..8366,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 301,
        column: 38,
        span: 8365..8367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 39,
        span: 8367..8368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 40,
        span: 8368..8369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 302,
        column: 7,
        span: 8370..8376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 8,
        span: 8376..8377,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 302,
        column: 11,
        span: 8377..8380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 302,
        column: 17,
        span: 8381..8386,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 18,
        span: 8386..8387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 302,
        column: 23,
        span: 8387..8392,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 302,
        column: 24,
        span: 8392..8393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extract",
        ),
        line: 302,
        column: 31,
        span: 8393..8400,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 302,
        column: 32,
        span: 8400..8401,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 302,
        column: 34,
        span: 8401..8403,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 302,
        column: 35,
        span: 8403..8404,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 302,
        column: 38,
        span: 8404..8407,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 39,
        span: 8407..8408,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 40,
        span: 8408..8409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 303,
        column: 7,
        span: 8410..8416,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 8,
        span: 8416..8417,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 303,
        column: 11,
        span: 8417..8420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 303,
        column: 17,
        span: 8421..8426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 18,
        span: 8426..8427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 303,
        column: 23,
        span: 8427..8432,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 303,
        column: 24,
        span: 8432..8433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extract",
        ),
        line: 303,
        column: 31,
        span: 8433..8440,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 303,
        column: 32,
        span: 8440..8441,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 303,
        column: 34,
        span: 8441..8443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 303,
        column: 35,
        span: 8443..8444,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 303,
        column: 37,
        span: 8444..8446,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 303,
        column: 38,
        span: 8446..8447,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        line: 303,
        column: 41,
        span: 8447..8450,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 42,
        span: 8450..8451,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 43,
        span: 8451..8452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 304,
        column: 7,
        span: 8453..8459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 8,
        span: 8459..8460,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 304,
        column: 11,
        span: 8460..8463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 304,
        column: 17,
        span: 8464..8469,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 18,
        span: 8469..8470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 304,
        column: 23,
        span: 8470..8475,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 304,
        column: 24,
        span: 8475..8476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extract",
        ),
        line: 304,
        column: 31,
        span: 8476..8483,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 304,
        column: 32,
        span: 8483..8484,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 304,
        column: 34,
        span: 8484..8486,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 304,
        column: 35,
        span: 8486..8487,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 304,
        column: 38,
        span: 8487..8490,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 304,
        column: 39,
        span: 8490..8491,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 304,
        column: 41,
        span: 8491..8493,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
        column: 42,
        span: 8493..8494,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
        column: 43,
        span: 8494..8495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 306,
        column: 7,
        span: 8497..8503,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
        column: 8,
        span: 8503..8504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 306,
        column: 13,
        span: 8504..8509,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 306,
        column: 14,
        span: 8509..8510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "replace",
        ),
        line: 306,
        column: 21,
        span: 8510..8517,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
        column: 22,
        span: 8517..8518,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 306,
        column: 32,
        span: 8517..8528,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 306,
        column: 33,
        span: 8528..8529,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 306,
        column: 35,
        span: 8529..8531,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 306,
        column: 36,
        span: 8531..8532,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "28",
                    after_decimal: "",
                },
            ),
        ),
        line: 306,
        column: 39,
        span: 8532..8535,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 306,
        column: 40,
        span: 8535..8536,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 306,
        column: 42,
        span: 8536..8538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
        column: 43,
        span: 8538..8539,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 306,
        column: 46,
        span: 8540..8542,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x52345678",
            ),
        ),
        line: 306,
        column: 57,
        span: 8542..8553,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
        column: 58,
        span: 8553..8554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 307,
        column: 7,
        span: 8555..8561,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
        column: 8,
        span: 8561..8562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 307,
        column: 13,
        span: 8562..8567,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 307,
        column: 14,
        span: 8567..8568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "replace",
        ),
        line: 307,
        column: 21,
        span: 8568..8575,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
        column: 22,
        span: 8575..8576,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        line: 307,
        column: 32,
        span: 8575..8586,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 307,
        column: 33,
        span: 8586..8587,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x87654321",
            ),
        ),
        line: 307,
        column: 44,
        span: 8587..8598,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 307,
        column: 45,
        span: 8598..8599,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 307,
        column: 47,
        span: 8599..8601,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 307,
        column: 48,
        span: 8601..8602,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 307,
        column: 51,
        span: 8602..8605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
        column: 52,
        span: 8605..8606,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 307,
        column: 55,
        span: 8607..8609,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x87654321",
            ),
        ),
        line: 307,
        column: 66,
        span: 8609..8620,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
        column: 67,
        span: 8620..8621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 308,
        column: 7,
        span: 8622..8628,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 8,
        span: 8628..8629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 308,
        column: 13,
        span: 8629..8634,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 308,
        column: 14,
        span: 8634..8635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "replace",
        ),
        line: 308,
        column: 21,
        span: 8635..8642,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 22,
        span: 8642..8643,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 308,
        column: 23,
        span: 8642..8644,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 308,
        column: 24,
        span: 8644..8645,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 308,
        column: 26,
        span: 8645..8647,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 308,
        column: 27,
        span: 8647..8648,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 308,
        column: 29,
        span: 8648..8650,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 30,
        span: 8650..8651,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 308,
        column: 33,
        span: 8652..8654,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 308,
        column: 35,
        span: 8654..8656,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 308,
        column: 36,
        span: 8656..8657,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 308,
        column: 37,
        span: 8656..8658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 38,
        span: 8658..8659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 309,
        column: 7,
        span: 8660..8666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 8,
        span: 8666..8667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 309,
        column: 13,
        span: 8667..8672,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 309,
        column: 14,
        span: 8672..8673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "replace",
        ),
        line: 309,
        column: 21,
        span: 8673..8680,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 22,
        span: 8680..8681,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
        column: 23,
        span: 8680..8682,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 309,
        column: 24,
        span: 8682..8683,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 309,
        column: 26,
        span: 8684..8685,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
        column: 27,
        span: 8684..8686,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 309,
        column: 28,
        span: 8686..8687,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
        column: 30,
        span: 8687..8689,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 31,
        span: 8689..8690,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 309,
        column: 34,
        span: 8691..8693,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
        column: 36,
        span: 8693..8695,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 309,
        column: 37,
        span: 8695..8696,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
        column: 38,
        span: 8695..8697,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 39,
        span: 8697..8698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 310,
        column: 7,
        span: 8699..8705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 8,
        span: 8705..8706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 310,
        column: 13,
        span: 8706..8711,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 310,
        column: 14,
        span: 8711..8712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "replace",
        ),
        line: 310,
        column: 21,
        span: 8712..8719,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 22,
        span: 8719..8720,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 310,
        column: 23,
        span: 8720..8721,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 310,
        column: 24,
        span: 8720..8722,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 310,
        column: 25,
        span: 8722..8723,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 310,
        column: 27,
        span: 8723..8725,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 310,
        column: 28,
        span: 8725..8726,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 310,
        column: 31,
        span: 8726..8729,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 32,
        span: 8729..8730,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 310,
        column: 35,
        span: 8731..8733,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 37,
        span: 8734..8735,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 310,
        column: 38,
        span: 8734..8736,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 310,
        column: 41,
        span: 8737..8739,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 310,
        column: 44,
        span: 8739..8742,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 45,
        span: 8742..8743,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 310,
        column: 47,
        span: 8744..8745,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 310,
        column: 49,
        span: 8745..8747,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 50,
        span: 8747..8748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 311,
        column: 7,
        span: 8749..8755,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 8,
        span: 8755..8756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 311,
        column: 13,
        span: 8756..8761,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 311,
        column: 14,
        span: 8761..8762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "replace",
        ),
        line: 311,
        column: 21,
        span: 8762..8769,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 22,
        span: 8769..8770,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 311,
        column: 23,
        span: 8770..8771,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 24,
        span: 8770..8772,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 25,
        span: 8772..8773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 27,
        span: 8773..8775,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 28,
        span: 8775..8776,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 30,
        span: 8776..8778,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 31,
        span: 8778..8779,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 33,
        span: 8779..8781,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 34,
        span: 8781..8782,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 311,
        column: 37,
        span: 8783..8785,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 39,
        span: 8786..8787,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 40,
        span: 8786..8788,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 311,
        column: 43,
        span: 8789..8791,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 46,
        span: 8791..8794,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 47,
        span: 8794..8795,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 311,
        column: 49,
        span: 8796..8797,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 51,
        span: 8797..8799,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 52,
        span: 8799..8800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 316,
        column: 7,
        span: 8836..8842,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 8,
        span: 8842..8843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 316,
        column: 13,
        span: 8843..8848,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 316,
        column: 14,
        span: 8848..8849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bor",
        ),
        line: 316,
        column: 17,
        span: 8849..8852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 18,
        span: 8852..8853,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 316,
        column: 21,
        span: 8852..8856,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 22,
        span: 8856..8857,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 316,
        column: 25,
        span: 8858..8860,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
        column: 27,
        span: 8860..8862,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 28,
        span: 8862..8863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 317,
        column: 7,
        span: 8864..8870,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 8,
        span: 8870..8871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 317,
        column: 13,
        span: 8871..8876,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 317,
        column: 14,
        span: 8876..8877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bor",
        ),
        line: 317,
        column: 17,
        span: 8877..8880,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 18,
        span: 8880..8881,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 317,
        column: 19,
        span: 8881..8882,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 317,
        column: 22,
        span: 8881..8885,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 23,
        span: 8885..8886,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 317,
        column: 26,
        span: 8887..8889,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xfffffffc",
            ),
        ),
        line: 317,
        column: 37,
        span: 8889..8900,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 38,
        span: 8900..8901,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 320,
        column: 3,
        span: 8946..8948,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 320,
        column: 7,
        span: 8948..8952,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 320,
        column: 8,
        span: 8952..8953,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 320,
        column: 10,
        span: 8952..8955,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 320,
        column: 12,
        span: 8956..8957,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 320,
        column: 16,
        span: 8957..8961,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 320,
        column: 17,
        span: 8961..8962,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 320,
        column: 19,
        span: 8961..8964,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 320,
        column: 21,
        span: 8965..8966,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 320,
        column: 25,
        span: 8966..8970,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 320,
        column: 29,
        span: 8971..8974,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 320,
        column: 33,
        span: 8974..8978,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 320,
        column: 34,
        span: 8978..8979,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 320,
        column: 36,
        span: 8978..8981,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 320,
        column: 38,
        span: 8982..8983,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
        column: 40,
        span: 8984..8985,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 320,
        column: 41,
        span: 8985..8986,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 320,
        column: 42,
        span: 8985..8987,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 320,
        column: 45,
        span: 8988..8990,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 320,
        column: 47,
        span: 8990..8992,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
        column: 48,
        span: 8992..8993,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 320,
        column: 0,
        span: 8994..8998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 321,
        column: 9,
        span: 9001..9007,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 10,
        span: 9007..9008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 321,
        column: 15,
        span: 9008..9013,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 321,
        column: 16,
        span: 9013..9014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bor",
        ),
        line: 321,
        column: 19,
        span: 9014..9017,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 20,
        span: 9017..9018,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 321,
        column: 23,
        span: 9017..9021,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 321,
        column: 24,
        span: 9021..9022,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 321,
        column: 26,
        span: 9021..9024,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 321,
        column: 28,
        span: 9025..9026,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 321,
        column: 32,
        span: 9026..9030,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 33,
        span: 9030..9031,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 321,
        column: 36,
        span: 9032..9034,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xfffffffb",
            ),
        ),
        line: 321,
        column: 47,
        span: 9034..9045,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 48,
        span: 9045..9046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 322,
        column: 9,
        span: 9049..9055,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 10,
        span: 9055..9056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 322,
        column: 15,
        span: 9056..9061,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 322,
        column: 16,
        span: 9061..9062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bor",
        ),
        line: 322,
        column: 19,
        span: 9062..9065,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 20,
        span: 9065..9066,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 322,
        column: 21,
        span: 9066..9067,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 322,
        column: 24,
        span: 9066..9070,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 322,
        column: 25,
        span: 9070..9071,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 322,
        column: 27,
        span: 9070..9073,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 322,
        column: 29,
        span: 9074..9075,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 322,
        column: 33,
        span: 9075..9079,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 34,
        span: 9079..9080,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 322,
        column: 37,
        span: 9081..9083,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xfffffffa",
            ),
        ),
        line: 322,
        column: 48,
        span: 9083..9094,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 49,
        span: 9094..9095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 323,
        column: 9,
        span: 9098..9104,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 323,
        column: 10,
        span: 9104..9105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 323,
        column: 15,
        span: 9105..9110,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 323,
        column: 16,
        span: 9110..9111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bor",
        ),
        line: 323,
        column: 19,
        span: 9111..9114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 323,
        column: 20,
        span: 9114..9115,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 323,
        column: 23,
        span: 9114..9118,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 323,
        column: 24,
        span: 9118..9119,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "48",
                    after_decimal: "",
                },
            ),
        ),
        line: 323,
        column: 26,
        span: 9118..9121,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 323,
        column: 28,
        span: 9122..9123,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 323,
        column: 32,
        span: 9123..9127,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 323,
        column: 33,
        span: 9127..9128,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 323,
        column: 36,
        span: 9129..9131,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xfffffffb",
            ),
        ),
        line: 323,
        column: 47,
        span: 9131..9142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 323,
        column: 48,
        span: 9142..9143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 324,
        column: 9,
        span: 9146..9152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 324,
        column: 10,
        span: 9152..9153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        line: 324,
        column: 15,
        span: 9153..9158,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 324,
        column: 16,
        span: 9158..9159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bor",
        ),
        line: 324,
        column: 19,
        span: 9159..9162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 324,
        column: 20,
        span: 9162..9163,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 324,
        column: 21,
        span: 9163..9164,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 324,
        column: 24,
        span: 9163..9167,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 324,
        column: 25,
        span: 9167..9168,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "48",
                    after_decimal: "",
                },
            ),
        ),
        line: 324,
        column: 27,
        span: 9167..9170,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 324,
        column: 29,
        span: 9171..9172,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 324,
        column: 33,
        span: 9172..9176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 324,
        column: 34,
        span: 9176..9177,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 324,
        column: 37,
        span: 9178..9180,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xfffffffa",
            ),
        ),
        line: 324,
        column: 48,
        span: 9180..9191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 324,
        column: 49,
        span: 9191..9192,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 325,
        column: 0,
        span: 9193..9196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 327,
        column: 6,
        span: 9198..9203,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 327,
        column: 10,
        span: 9203..9207,
    },
]
