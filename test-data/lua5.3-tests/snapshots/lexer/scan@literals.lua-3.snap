---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/literals.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 4,
            column: 6,
            span: 103..108,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 4,
            column: 7,
            span: 108..109,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing scanner'",
        ),
        position: Position {
            line: 4,
            column: 24,
            span: 109..126,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 4,
            column: 25,
            span: 126..127,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 6,
            column: 6,
            span: 129..134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 6,
            column: 12,
            span: 135..140,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 6,
            column: 14,
            span: 141..142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 6,
            column: 22,
            span: 143..150,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        position: Position {
            line: 6,
            column: 30,
            span: 151..158,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 9,
            column: 6,
            span: 161..166,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 9,
            column: 15,
            span: 167..175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 9,
            column: 24,
            span: 176..184,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 9,
            column: 26,
            span: 185..186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 9,
            column: 27,
            span: 186..187,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 9,
            column: 28,
            span: 187..188,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 9,
            column: 35,
            span: 189..195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 9,
            column: 42,
            span: 196..202,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 9,
            column: 43,
            span: 202..203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 9,
            column: 47,
            span: 203..207,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 9,
            column: 48,
            span: 207..208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 9,
            column: 49,
            span: 208..209,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 9,
            column: 50,
            span: 209..210,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 9,
            column: 51,
            span: 210..211,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 9,
            column: 54,
            span: 212..214,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 9,
            column: 55,
            span: 214..215,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 9,
            column: 56,
            span: 215..216,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 9,
            column: 57,
            span: 216..217,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 9,
            column: 0,
            span: 218..221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 11,
            column: 9,
            span: 223..231,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 11,
            column: 10,
            span: 231..232,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x \\v\\f = \\t\\r 'a\\0a' \\v\\f\\f\"",
        ),
        position: Position {
            line: 11,
            column: 39,
            span: 232..261,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 11,
            column: 40,
            span: 261..262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 12,
            column: 7,
            span: 263..269,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 12,
            column: 8,
            span: 269..270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 12,
            column: 9,
            span: 270..271,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 12,
            column: 12,
            span: 272..274,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0a'",
        ),
        position: Position {
            line: 12,
            column: 19,
            span: 275..281,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 12,
            column: 23,
            span: 282..285,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 12,
            column: 30,
            span: 286..292,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 12,
            column: 31,
            span: 292..293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 12,
            column: 34,
            span: 293..296,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 12,
            column: 35,
            span: 296..297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 12,
            column: 36,
            span: 297..298,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 12,
            column: 37,
            span: 298..299,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 12,
            column: 40,
            span: 300..302,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 12,
            column: 42,
            span: 302..304,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 12,
            column: 43,
            span: 304..305,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 15,
            column: 7,
            span: 327..333,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 15,
            column: 8,
            span: 333..334,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n\\\"\\'\\\\'",
        ),
        position: Position {
            line: 15,
            column: 18,
            span: 334..344,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 15,
            column: 21,
            span: 345..347,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n\n\"'\\]]",
        ),
        position: Position {
            line: 17,
            column: 6,
            span: 348..357,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 17,
            column: 7,
            span: 357..358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 19,
            column: 7,
            span: 360..366,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 19,
            column: 8,
            span: 366..367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 19,
            column: 14,
            span: 367..373,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 19,
            column: 15,
            span: 373..374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 19,
            column: 19,
            span: 374..378,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 19,
            column: 20,
            span: 378..379,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\a\\b\\f\\n\\r\\t\\v\"",
        ),
        position: Position {
            line: 19,
            column: 36,
            span: 379..395,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 19,
            column: 37,
            span: 395..396,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%c%c%c%c%c%c%c$\"",
        ),
        position: Position {
            line: 19,
            column: 56,
            span: 397..415,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 19,
            column: 57,
            span: 415..416,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 19,
            column: 58,
            span: 416..417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 22,
            column: 7,
            span: 451..457,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 22,
            column: 8,
            span: 457..458,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\09912\"",
        ),
        position: Position {
            line: 22,
            column: 16,
            span: 458..466,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 22,
            column: 19,
            span: 467..469,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'c12'",
        ),
        position: Position {
            line: 22,
            column: 25,
            span: 470..475,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 22,
            column: 26,
            span: 475..476,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 23,
            column: 7,
            span: 477..483,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 23,
            column: 8,
            span: 483..484,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\99ab\"",
        ),
        position: Position {
            line: 23,
            column: 15,
            span: 484..491,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 23,
            column: 18,
            span: 492..494,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'cab'",
        ),
        position: Position {
            line: 23,
            column: 24,
            span: 495..500,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 23,
            column: 25,
            span: 500..501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 24,
            column: 7,
            span: 502..508,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 24,
            column: 8,
            span: 508..509,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\099\"",
        ),
        position: Position {
            line: 24,
            column: 14,
            span: 509..515,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 24,
            column: 17,
            span: 516..518,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\99'",
        ),
        position: Position {
            line: 24,
            column: 23,
            span: 519..524,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 24,
            column: 24,
            span: 524..525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 25,
            column: 7,
            span: 526..532,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 25,
            column: 8,
            span: 532..533,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\099\\n\"",
        ),
        position: Position {
            line: 25,
            column: 16,
            span: 533..541,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 25,
            column: 19,
            span: 542..544,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'c\\10'",
        ),
        position: Position {
            line: 25,
            column: 26,
            span: 545..551,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 25,
            column: 27,
            span: 551..552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 26,
            column: 7,
            span: 553..559,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 26,
            column: 8,
            span: 559..560,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0alo'",
        ),
        position: Position {
            line: 26,
            column: 19,
            span: 560..571,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 26,
            column: 22,
            span: 572..574,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0'",
        ),
        position: Position {
            line: 26,
            column: 27,
            span: 575..579,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 26,
            column: 30,
            span: 580..582,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0'",
        ),
        position: Position {
            line: 26,
            column: 37,
            span: 583..589,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 26,
            column: 40,
            span: 590..592,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 26,
            column: 46,
            span: 593..598,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 26,
            column: 47,
            span: 598..599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 28,
            column: 7,
            span: 601..607,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 8,
            span: 607..608,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "010",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 28,
            column: 11,
            span: 607..611,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 28,
            column: 14,
            span: 612..614,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "020",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 28,
            column: 18,
            span: 614..618,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 28,
            column: 21,
            span: 619..621,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 28,
            column: 23,
            span: 622..623,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "030",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 28,
            column: 26,
            span: 622..626,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 28,
            column: 29,
            span: 627..629,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1020-30\"",
        ),
        position: Position {
            line: 28,
            column: 39,
            span: 630..639,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 40,
            span: 639..640,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 31,
            column: 7,
            span: 665..671,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 31,
            column: 8,
            span: 671..672,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\x00\\x05\\x10\\x1f\\x3C\\xfF\\xe8\"",
        ),
        position: Position {
            line: 31,
            column: 38,
            span: 672..702,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 31,
            column: 41,
            span: 703..705,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\5\\16\\31\\60\\255\\232\"",
        ),
        position: Position {
            line: 31,
            column: 65,
            span: 706..729,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 31,
            column: 66,
            span: 729..730,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 33,
            column: 6,
            span: 732..737,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 33,
            column: 15,
            span: 738..746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        position: Position {
            line: 33,
            column: 25,
            span: 747..756,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 27,
            span: 757..758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 33,
            column: 28,
            span: 758..759,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 33,
            column: 29,
            span: 759..760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 33,
            column: 31,
            span: 761..762,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 33,
            column: 32,
            span: 762..763,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 33,
            column: 34,
            span: 764..765,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 35,
            span: 765..766,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 34,
            column: 8,
            span: 769..774,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 34,
            column: 10,
            span: 775..776,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 34,
            column: 12,
            span: 777..778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 34,
            column: 19,
            span: 779..785,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 34,
            column: 20,
            span: 785..786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 34,
            column: 24,
            span: 786..790,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 34,
            column: 25,
            span: 790..791,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'return '",
        ),
        position: Position {
            line: 34,
            column: 34,
            span: 791..800,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 34,
            column: 37,
            span: 801..803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 34,
            column: 39,
            span: 804..805,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 34,
            column: 42,
            span: 806..808,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "', require\"debug\".getinfo(1).currentline'",
        ),
        position: Position {
            line: 35,
            column: 54,
            span: 821..862,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 35,
            column: 55,
            span: 862..863,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 35,
            column: 58,
            span: 864..866,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 35,
            column: 59,
            span: 866..867,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 35,
            column: 60,
            span: 867..868,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 36,
            column: 8,
            span: 871..876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 36,
            column: 10,
            span: 877..878,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 36,
            column: 11,
            span: 878..879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 36,
            column: 13,
            span: 880..881,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 36,
            column: 15,
            span: 882..883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 36,
            column: 17,
            span: 884..885,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 36,
            column: 18,
            span: 885..886,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 36,
            column: 19,
            span: 886..887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 37,
            column: 9,
            span: 890..896,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 37,
            column: 10,
            span: 896..897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 37,
            column: 11,
            span: 897..898,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 37,
            column: 14,
            span: 899..901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 37,
            column: 16,
            span: 902..903,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 37,
            column: 20,
            span: 904..907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 37,
            column: 22,
            span: 908..909,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 37,
            column: 25,
            span: 910..912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 37,
            column: 27,
            span: 913..914,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 37,
            column: 28,
            span: 914..915,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 38,
            column: 0,
            span: 916..919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        position: Position {
            line: 40,
            column: 10,
            span: 921..930,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 11,
            span: 930..931,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'abc\\\\z  \\n   efg'\"",
        ),
        position: Position {
            line: 40,
            column: 31,
            span: 931..951,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 32,
            span: 951..952,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcefg\"",
        ),
        position: Position {
            line: 40,
            column: 41,
            span: 953..961,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 42,
            span: 961..962,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 44,
            span: 962..964,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 45,
            span: 964..965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        position: Position {
            line: 41,
            column: 10,
            span: 966..975,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 11,
            span: 975..976,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'abc\\\\z  \\n\\n\\n'\"",
        ),
        position: Position {
            line: 41,
            column: 29,
            span: 976..994,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 41,
            column: 30,
            span: 994..995,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        position: Position {
            line: 41,
            column: 36,
            span: 996..1001,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 41,
            column: 37,
            span: 1001..1002,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 41,
            column: 39,
            span: 1002..1004,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 40,
            span: 1004..1005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        position: Position {
            line: 42,
            column: 10,
            span: 1006..1015,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 42,
            column: 11,
            span: 1015..1016,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'\\\\z  \\n\\t\\f\\v\\n'\"",
        ),
        position: Position {
            line: 42,
            column: 30,
            span: 1016..1035,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 42,
            column: 31,
            span: 1035..1036,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 42,
            column: 35,
            span: 1038..1040,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 42,
            column: 36,
            span: 1040..1041,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 42,
            column: 38,
            span: 1041..1043,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 42,
            column: 39,
            span: 1043..1044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        position: Position {
            line: 43,
            column: 10,
            span: 1045..1054,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 11,
            span: 1054..1055,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[\\nalo\\nalo\\n\\n]]\"",
        ),
        position: Position {
            line: 43,
            column: 31,
            span: 1055..1075,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 43,
            column: 32,
            span: 1075..1076,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\\nalo\\n\\n\"",
        ),
        position: Position {
            line: 43,
            column: 47,
            span: 1077..1091,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 43,
            column: 48,
            span: 1091..1092,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 43,
            column: 50,
            span: 1092..1094,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 51,
            span: 1094..1095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        position: Position {
            line: 44,
            column: 10,
            span: 1096..1105,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 44,
            column: 11,
            span: 1105..1106,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[\\nalo\\ralo\\n\\n]]\"",
        ),
        position: Position {
            line: 44,
            column: 31,
            span: 1106..1126,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 44,
            column: 32,
            span: 1126..1127,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\\nalo\\n\\n\"",
        ),
        position: Position {
            line: 44,
            column: 47,
            span: 1128..1142,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 44,
            column: 48,
            span: 1142..1143,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 44,
            column: 50,
            span: 1143..1145,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 44,
            column: 51,
            span: 1145..1146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        position: Position {
            line: 45,
            column: 10,
            span: 1147..1156,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 11,
            span: 1156..1157,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[\\nalo\\ralo\\r\\n]]\"",
        ),
        position: Position {
            line: 45,
            column: 31,
            span: 1157..1177,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 32,
            span: 1177..1178,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\\nalo\\n\"",
        ),
        position: Position {
            line: 45,
            column: 45,
            span: 1179..1191,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 46,
            span: 1191..1192,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 45,
            column: 48,
            span: 1192..1194,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 49,
            span: 1194..1195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        position: Position {
            line: 46,
            column: 10,
            span: 1196..1205,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 11,
            span: 1205..1206,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[\\ralo\\n\\ralo\\r\\n]]\"",
        ),
        position: Position {
            line: 46,
            column: 33,
            span: 1206..1228,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 34,
            span: 1228..1229,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\\nalo\\n\"",
        ),
        position: Position {
            line: 46,
            column: 47,
            span: 1230..1242,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 48,
            span: 1242..1243,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 46,
            column: 50,
            span: 1243..1245,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 51,
            span: 1245..1246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        position: Position {
            line: 47,
            column: 10,
            span: 1247..1256,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 11,
            span: 1256..1257,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[alo]\\n]alo]]\"",
        ),
        position: Position {
            line: 47,
            column: 27,
            span: 1257..1273,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 47,
            column: 28,
            span: 1273..1274,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo]\\n]alo\"",
        ),
        position: Position {
            line: 47,
            column: 41,
            span: 1275..1287,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 47,
            column: 42,
            span: 1287..1288,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 47,
            column: 44,
            span: 1288..1290,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 45,
            span: 1290..1291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 49,
            column: 7,
            span: 1293..1299,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 8,
            span: 1299..1300,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\\z\n        def\\z\n        ghi\\z\n       \"",
        ),
        position: Position {
            line: 52,
            column: 9,
            span: 1300..1343,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 52,
            column: 12,
            span: 1344..1346,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'abcdefghi'",
        ),
        position: Position {
            line: 52,
            column: 24,
            span: 1347..1358,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 52,
            column: 25,
            span: 1358..1359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 56,
            column: 7,
            span: 1381..1387,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 56,
            column: 8,
            span: 1387..1388,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{0}\\u{00000000}\\x00\\0\"",
        ),
        position: Position {
            line: 56,
            column: 33,
            span: 1388..1413,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 56,
            column: 36,
            span: 1414..1416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 56,
            column: 43,
            span: 1417..1423,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 56,
            column: 44,
            span: 1423..1424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        position: Position {
            line: 56,
            column: 48,
            span: 1424..1428,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 56,
            column: 49,
            span: 1428..1429,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 56,
            column: 50,
            span: 1428..1430,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 56,
            column: 51,
            span: 1430..1431,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 56,
            column: 53,
            span: 1431..1433,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 56,
            column: 54,
            span: 1433..1434,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 56,
            column: 56,
            span: 1434..1436,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 56,
            column: 57,
            span: 1436..1437,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 56,
            column: 59,
            span: 1437..1439,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 56,
            column: 60,
            span: 1439..1440,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 56,
            column: 61,
            span: 1440..1441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 59,
            column: 7,
            span: 1474..1480,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 59,
            column: 8,
            span: 1480..1481,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{0}\\u{7F}\"",
        ),
        position: Position {
            line: 59,
            column: 21,
            span: 1481..1494,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 59,
            column: 24,
            span: 1495..1497,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\x00\\z\\x7F\"",
        ),
        position: Position {
            line: 59,
            column: 37,
            span: 1498..1510,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 59,
            column: 38,
            span: 1510..1511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 62,
            column: 7,
            span: 1544..1550,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 8,
            span: 1550..1551,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{80}\\u{7FF}\"",
        ),
        position: Position {
            line: 62,
            column: 23,
            span: 1551..1566,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 62,
            column: 26,
            span: 1567..1569,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xC2\\x80\\z\\xDF\\xBF\"",
        ),
        position: Position {
            line: 62,
            column: 47,
            span: 1570..1590,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 48,
            span: 1590..1591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 65,
            column: 7,
            span: 1624..1630,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 8,
            span: 1630..1631,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{800}\\u{FFFF}\"",
        ),
        position: Position {
            line: 65,
            column: 25,
            span: 1631..1648,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 65,
            column: 28,
            span: 1649..1651,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xE0\\xA0\\x80\\z\\xEF\\xBF\\xBF\"",
        ),
        position: Position {
            line: 65,
            column: 59,
            span: 1654..1682,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 60,
            span: 1682..1683,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 68,
            column: 7,
            span: 1716..1722,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 8,
            span: 1722..1723,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\u{10000}\\u{10FFFF}\"",
        ),
        position: Position {
            line: 68,
            column: 29,
            span: 1723..1744,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 68,
            column: 32,
            span: 1745..1747,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xF0\\x90\\x80\\x80\\z\\xF4\\x8F\\xBF\\xBF\"",
        ),
        position: Position {
            line: 68,
            column: 69,
            span: 1748..1784,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 70,
            span: 1784..1785,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 72,
            column: 6,
            span: 1817..1822,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 72,
            column: 15,
            span: 1823..1831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 72,
            column: 24,
            span: 1832..1840,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 72,
            column: 26,
            span: 1841..1842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 72,
            column: 27,
            span: 1842..1843,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 72,
            column: 28,
            span: 1843..1844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 72,
            column: 32,
            span: 1845..1848,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 72,
            column: 33,
            span: 1848..1849,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 73,
            column: 8,
            span: 1852..1857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 73,
            column: 11,
            span: 1858..1860,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 73,
            column: 12,
            span: 1860..1861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 73,
            column: 16,
            span: 1862..1865,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 73,
            column: 18,
            span: 1866..1867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 73,
            column: 23,
            span: 1868..1872,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 24,
            span: 1872..1873,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'return '",
        ),
        position: Position {
            line: 73,
            column: 33,
            span: 1873..1882,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 73,
            column: 36,
            span: 1883..1885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 73,
            column: 38,
            span: 1886..1887,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 73,
            column: 39,
            span: 1887..1888,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 73,
            column: 42,
            span: 1889..1891,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 43,
            span: 1891..1892,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 74,
            column: 5,
            span: 1895..1897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 74,
            column: 9,
            span: 1898..1901,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 74,
            column: 12,
            span: 1902..1904,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'<eof>'",
        ),
        position: Position {
            line: 74,
            column: 20,
            span: 1905..1912,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 74,
            column: 25,
            span: 1913..1917,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 74,
            column: 29,
            span: 1918..1921,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 74,
            column: 31,
            span: 1922..1923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 74,
            column: 35,
            span: 1924..1927,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 74,
            column: 38,
            span: 1928..1930,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'\"",
        ),
        position: Position {
            line: 74,
            column: 42,
            span: 1931..1934,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 74,
            column: 0,
            span: 1935..1938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 75,
            column: 9,
            span: 1941..1947,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 10,
            span: 1947..1948,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 75,
            column: 13,
            span: 1948..1951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 75,
            column: 16,
            span: 1952..1954,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 75,
            column: 20,
            span: 1955..1958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 75,
            column: 27,
            span: 1959..1965,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 75,
            column: 28,
            span: 1965..1966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 75,
            column: 32,
            span: 1966..1970,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 33,
            span: 1970..1971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 75,
            column: 36,
            span: 1971..1974,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 37,
            span: 1974..1975,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"near .-\"",
        ),
        position: Position {
            line: 75,
            column: 47,
            span: 1976..1985,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 75,
            column: 50,
            span: 1986..1988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 75,
            column: 54,
            span: 1989..1992,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 55,
            span: 1992..1993,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 56,
            span: 1993..1994,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 76,
            column: 0,
            span: 1995..1998,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 78,
            column: 9,
            span: 2000..2008,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 10,
            span: 2008..2009,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"abc\\x\"]]",
        ),
        position: Position {
            line: 78,
            column: 21,
            span: 2009..2020,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 22,
            span: 2020..2021,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\x\"]]",
        ),
        position: Position {
            line: 78,
            column: 30,
            span: 2022..2029,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 31,
            span: 2029..2030,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 79,
            column: 9,
            span: 2031..2039,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 79,
            column: 10,
            span: 2039..2040,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"abc\\x]]",
        ),
        position: Position {
            line: 79,
            column: 20,
            span: 2040..2050,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 79,
            column: 21,
            span: 2050..2051,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\x]]",
        ),
        position: Position {
            line: 79,
            column: 28,
            span: 2052..2058,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 79,
            column: 29,
            span: 2058..2059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 80,
            column: 9,
            span: 2060..2068,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 10,
            span: 2068..2069,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\x]]",
        ),
        position: Position {
            line: 80,
            column: 17,
            span: 2069..2076,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 18,
            span: 2076..2077,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\x]]",
        ),
        position: Position {
            line: 80,
            column: 25,
            span: 2078..2084,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 26,
            span: 2084..2085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 81,
            column: 9,
            span: 2086..2094,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 10,
            span: 2094..2095,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\x5\"]]",
        ),
        position: Position {
            line: 81,
            column: 19,
            span: 2095..2104,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 81,
            column: 20,
            span: 2104..2105,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\x5\"]]",
        ),
        position: Position {
            line: 81,
            column: 29,
            span: 2106..2114,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 30,
            span: 2114..2115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 82,
            column: 9,
            span: 2116..2124,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 10,
            span: 2124..2125,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\x5]]",
        ),
        position: Position {
            line: 82,
            column: 18,
            span: 2125..2133,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 82,
            column: 19,
            span: 2133..2134,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\x5]]",
        ),
        position: Position {
            line: 82,
            column: 27,
            span: 2135..2142,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 28,
            span: 2142..2143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 83,
            column: 9,
            span: 2144..2152,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 83,
            column: 10,
            span: 2152..2153,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\xr\"]]",
        ),
        position: Position {
            line: 83,
            column: 19,
            span: 2153..2162,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 20,
            span: 2162..2163,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\xr]]",
        ),
        position: Position {
            line: 83,
            column: 28,
            span: 2164..2171,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 83,
            column: 29,
            span: 2171..2172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 84,
            column: 9,
            span: 2173..2181,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 10,
            span: 2181..2182,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\xr]]",
        ),
        position: Position {
            line: 84,
            column: 18,
            span: 2182..2190,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 84,
            column: 19,
            span: 2190..2191,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\xr]]",
        ),
        position: Position {
            line: 84,
            column: 27,
            span: 2192..2199,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 28,
            span: 2199..2200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 85,
            column: 9,
            span: 2201..2209,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 10,
            span: 2209..2210,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\x.]]",
        ),
        position: Position {
            line: 85,
            column: 18,
            span: 2210..2218,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 85,
            column: 19,
            span: 2218..2219,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\x.]]",
        ),
        position: Position {
            line: 85,
            column: 27,
            span: 2220..2227,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 28,
            span: 2227..2228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 86,
            column: 9,
            span: 2229..2237,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 10,
            span: 2237..2238,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\x8%\"]]",
        ),
        position: Position {
            line: 86,
            column: 20,
            span: 2238..2248,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 21,
            span: 2248..2249,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\x8%%]]",
        ),
        position: Position {
            line: 86,
            column: 31,
            span: 2250..2259,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 32,
            span: 2259..2260,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 87,
            column: 9,
            span: 2261..2269,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 87,
            column: 10,
            span: 2269..2270,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\xAG]]",
        ),
        position: Position {
            line: 87,
            column: 19,
            span: 2270..2279,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 87,
            column: 20,
            span: 2279..2280,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\xAG]]",
        ),
        position: Position {
            line: 87,
            column: 29,
            span: 2281..2289,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 87,
            column: 30,
            span: 2289..2290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 88,
            column: 9,
            span: 2291..2299,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 10,
            span: 2299..2300,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\g\"]]",
        ),
        position: Position {
            line: 88,
            column: 18,
            span: 2300..2308,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 19,
            span: 2308..2309,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\g]]",
        ),
        position: Position {
            line: 88,
            column: 26,
            span: 2310..2316,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 27,
            span: 2316..2317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 89,
            column: 9,
            span: 2318..2326,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 89,
            column: 10,
            span: 2326..2327,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\g]]",
        ),
        position: Position {
            line: 89,
            column: 17,
            span: 2327..2334,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 18,
            span: 2334..2335,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\g]]",
        ),
        position: Position {
            line: 89,
            column: 25,
            span: 2336..2342,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 89,
            column: 26,
            span: 2342..2343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 90,
            column: 9,
            span: 2344..2352,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 90,
            column: 10,
            span: 2352..2353,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\.\"]]",
        ),
        position: Position {
            line: 90,
            column: 18,
            span: 2353..2361,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 90,
            column: 19,
            span: 2361..2362,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\%.]]",
        ),
        position: Position {
            line: 90,
            column: 27,
            span: 2363..2370,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 90,
            column: 28,
            span: 2370..2371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 92,
            column: 9,
            span: 2373..2381,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 92,
            column: 10,
            span: 2381..2382,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\999\"]]",
        ),
        position: Position {
            line: 92,
            column: 20,
            span: 2382..2392,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 21,
            span: 2392..2393,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\999\"]]",
        ),
        position: Position {
            line: 92,
            column: 31,
            span: 2394..2403,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 92,
            column: 32,
            span: 2403..2404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 93,
            column: 9,
            span: 2405..2413,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 93,
            column: 10,
            span: 2413..2414,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"xyz\\300\"]]",
        ),
        position: Position {
            line: 93,
            column: 23,
            span: 2414..2427,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 93,
            column: 24,
            span: 2427..2428,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\300\"]]",
        ),
        position: Position {
            line: 93,
            column: 34,
            span: 2429..2438,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 93,
            column: 35,
            span: 2438..2439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 94,
            column: 9,
            span: 2440..2448,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 94,
            column: 10,
            span: 2448..2449,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"   \\256\"]]",
        ),
        position: Position {
            line: 94,
            column: 23,
            span: 2449..2462,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 94,
            column: 24,
            span: 2462..2463,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\256\"]]",
        ),
        position: Position {
            line: 94,
            column: 34,
            span: 2464..2473,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 94,
            column: 35,
            span: 2473..2474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 97,
            column: 9,
            span: 2505..2513,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 10,
            span: 2513..2514,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"abc\\u{110000}\"]]",
        ),
        position: Position {
            line: 97,
            column: 29,
            span: 2514..2533,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 97,
            column: 30,
            span: 2533..2534,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[abc\\u{110000]]",
        ),
        position: Position {
            line: 97,
            column: 47,
            span: 2535..2551,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 48,
            span: 2551..2552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 98,
            column: 9,
            span: 2568..2576,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 98,
            column: 10,
            span: 2576..2577,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"abc\\u11r\"]]",
        ),
        position: Position {
            line: 98,
            column: 24,
            span: 2577..2591,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 98,
            column: 25,
            span: 2591..2592,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[abc\\u1]]",
        ),
        position: Position {
            line: 98,
            column: 36,
            span: 2593..2603,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 98,
            column: 37,
            span: 2603..2604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 99,
            column: 9,
            span: 2623..2631,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 99,
            column: 10,
            span: 2631..2632,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"abc\\u\"]]",
        ),
        position: Position {
            line: 99,
            column: 21,
            span: 2632..2643,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 99,
            column: 22,
            span: 2643..2644,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[abc\\u\"]]",
        ),
        position: Position {
            line: 99,
            column: 33,
            span: 2645..2655,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 99,
            column: 34,
            span: 2655..2656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 100,
            column: 9,
            span: 2675..2683,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 10,
            span: 2683..2684,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"abc\\u{11r\"]]",
        ),
        position: Position {
            line: 100,
            column: 25,
            span: 2684..2699,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 100,
            column: 26,
            span: 2699..2700,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[abc\\u{11r]]",
        ),
        position: Position {
            line: 100,
            column: 40,
            span: 2701..2714,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 41,
            span: 2714..2715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 101,
            column: 9,
            span: 2734..2742,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 10,
            span: 2742..2743,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"abc\\u{11\"]]",
        ),
        position: Position {
            line: 101,
            column: 24,
            span: 2743..2757,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 101,
            column: 25,
            span: 2757..2758,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[abc\\u{11\"]]",
        ),
        position: Position {
            line: 101,
            column: 39,
            span: 2759..2772,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 101,
            column: 40,
            span: 2772..2773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 102,
            column: 9,
            span: 2792..2800,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 10,
            span: 2800..2801,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"abc\\u{11]]",
        ),
        position: Position {
            line: 102,
            column: 23,
            span: 2801..2814,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 102,
            column: 24,
            span: 2814..2815,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[abc\\u{11]]",
        ),
        position: Position {
            line: 102,
            column: 37,
            span: 2816..2828,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 38,
            span: 2828..2829,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 103,
            column: 9,
            span: 2848..2856,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 10,
            span: 2856..2857,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"abc\\u{r\"]]",
        ),
        position: Position {
            line: 103,
            column: 23,
            span: 2857..2870,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 24,
            span: 2870..2871,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[abc\\u{r]]",
        ),
        position: Position {
            line: 103,
            column: 36,
            span: 2872..2883,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 37,
            span: 2883..2884,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 106,
            column: 9,
            span: 2925..2933,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 106,
            column: 10,
            span: 2933..2934,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[=[alo]]\"",
        ),
        position: Position {
            line: 106,
            column: 20,
            span: 2934..2944,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 106,
            column: 21,
            span: 2944..2945,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        position: Position {
            line: 106,
            column: 29,
            span: 2946..2953,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 106,
            column: 30,
            span: 2953..2954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 107,
            column: 9,
            span: 2955..2963,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 107,
            column: 10,
            span: 2963..2964,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[=[alo]=\"",
        ),
        position: Position {
            line: 107,
            column: 20,
            span: 2964..2974,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 21,
            span: 2974..2975,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        position: Position {
            line: 107,
            column: 29,
            span: 2976..2983,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 107,
            column: 30,
            span: 2983..2984,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 108,
            column: 9,
            span: 2985..2993,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 10,
            span: 2993..2994,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[=[alo]\"",
        ),
        position: Position {
            line: 108,
            column: 19,
            span: 2994..3003,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 108,
            column: 20,
            span: 3003..3004,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        position: Position {
            line: 108,
            column: 28,
            span: 3005..3012,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 29,
            span: 3012..3013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 109,
            column: 9,
            span: 3014..3022,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 10,
            span: 3022..3023,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'alo\"",
        ),
        position: Position {
            line: 109,
            column: 16,
            span: 3023..3029,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 109,
            column: 17,
            span: 3029..3030,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        position: Position {
            line: 109,
            column: 25,
            span: 3031..3038,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 109,
            column: 26,
            span: 3038..3039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 110,
            column: 9,
            span: 3040..3048,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 110,
            column: 10,
            span: 3048..3049,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'alo \\\\z  \\n\\n\"",
        ),
        position: Position {
            line: 110,
            column: 26,
            span: 3049..3065,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 27,
            span: 3065..3066,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        position: Position {
            line: 110,
            column: 35,
            span: 3067..3074,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 36,
            span: 3074..3075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 111,
            column: 9,
            span: 3076..3084,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 10,
            span: 3084..3085,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'alo \\\\z\"",
        ),
        position: Position {
            line: 111,
            column: 20,
            span: 3085..3095,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 21,
            span: 3095..3096,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        position: Position {
            line: 111,
            column: 29,
            span: 3097..3104,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 30,
            span: 3104..3105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        position: Position {
            line: 112,
            column: 9,
            span: 3106..3114,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 112,
            column: 10,
            span: 3114..3115,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[['alo \\98]]",
        ),
        position: Position {
            line: 112,
            column: 22,
            span: 3115..3127,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 112,
            column: 23,
            span: 3127..3128,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        position: Position {
            line: 112,
            column: 31,
            span: 3129..3136,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 112,
            column: 32,
            span: 3136..3137,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 115,
            column: 4,
            span: 3177..3180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 115,
            column: 6,
            span: 3181..3182,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 115,
            column: 8,
            span: 3183..3184,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 115,
            column: 10,
            span: 3184..3186,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 115,
            column: 11,
            span: 3186..3187,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 115,
            column: 15,
            span: 3187..3191,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 115,
            column: 0,
            span: 3192..3194,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 116,
            column: 8,
            span: 3197..3202,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 116,
            column: 10,
            span: 3203..3204,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 116,
            column: 12,
            span: 3205..3206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 116,
            column: 19,
            span: 3207..3213,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 116,
            column: 20,
            span: 3213..3214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        position: Position {
            line: 116,
            column: 24,
            span: 3214..3218,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 116,
            column: 25,
            span: 3218..3219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 116,
            column: 26,
            span: 3219..3220,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 116,
            column: 27,
            span: 3220..3221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 117,
            column: 9,
            span: 3224..3230,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 117,
            column: 10,
            span: 3230..3231,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 117,
            column: 13,
            span: 3231..3234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 117,
            column: 20,
            span: 3235..3241,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 117,
            column: 21,
            span: 3241..3242,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 117,
            column: 25,
            span: 3242..3246,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 117,
            column: 26,
            span: 3246..3247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 117,
            column: 27,
            span: 3247..3248,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 117,
            column: 28,
            span: 3248..3249,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[a-zA-Z_]\"",
        ),
        position: Position {
            line: 117,
            column: 40,
            span: 3250..3261,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 117,
            column: 41,
            span: 3261..3262,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 117,
            column: 44,
            span: 3263..3265,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 117,
            column: 48,
            span: 3266..3269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 117,
            column: 53,
            span: 3270..3274,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 117,
            column: 54,
            span: 3274..3275,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 117,
            column: 55,
            span: 3275..3276,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 117,
            column: 58,
            span: 3277..3279,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=1\"",
        ),
        position: Position {
            line: 117,
            column: 63,
            span: 3280..3284,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 117,
            column: 64,
            span: 3284..3285,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 117,
            column: 67,
            span: 3286..3288,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 117,
            column: 68,
            span: 3288..3289,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 117,
            column: 69,
            span: 3289..3290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 118,
            column: 9,
            span: 3293..3299,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 118,
            column: 10,
            span: 3299..3300,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 118,
            column: 13,
            span: 3300..3303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 118,
            column: 20,
            span: 3304..3310,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 118,
            column: 21,
            span: 3310..3311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 118,
            column: 25,
            span: 3311..3315,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 118,
            column: 26,
            span: 3315..3316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 118,
            column: 27,
            span: 3316..3317,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 118,
            column: 28,
            span: 3317..3318,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[a-zA-Z_0-9]\"",
        ),
        position: Position {
            line: 118,
            column: 43,
            span: 3319..3333,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 118,
            column: 44,
            span: 3333..3334,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 118,
            column: 47,
            span: 3335..3337,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 119,
            column: 13,
            span: 3347..3350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 119,
            column: 18,
            span: 3351..3355,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 19,
            span: 3355..3356,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 119,
            column: 22,
            span: 3356..3359,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 119,
            column: 25,
            span: 3360..3362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 119,
            column: 27,
            span: 3363..3364,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 119,
            column: 30,
            span: 3365..3367,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1 = 1\"",
        ),
        position: Position {
            line: 119,
            column: 38,
            span: 3368..3375,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 119,
            column: 39,
            span: 3375..3376,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 119,
            column: 42,
            span: 3377..3379,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 43,
            span: 3379..3380,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 44,
            span: 3380..3381,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 120,
            column: 0,
            span: 3382..3385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var1",
        ),
        position: Position {
            line: 125,
            column: 5,
            span: 3412..3416,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 125,
            column: 7,
            span: 3417..3418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 125,
            column: 14,
            span: 3419..3425,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 125,
            column: 15,
            span: 3425..3426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 125,
            column: 18,
            span: 3426..3429,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 19,
            span: 3429..3430,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 125,
            column: 22,
            span: 3430..3433,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 23,
            span: 3433..3434,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 125,
            column: 29,
            span: 3434..3440,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 30,
            span: 3440..3441,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 125,
            column: 33,
            span: 3442..3444,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1'",
        ),
        position: Position {
            line: 125,
            column: 37,
            span: 3445..3448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var2",
        ),
        position: Position {
            line: 126,
            column: 5,
            span: 3449..3453,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 126,
            column: 7,
            span: 3454..3455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 126,
            column: 14,
            span: 3456..3462,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 126,
            column: 15,
            span: 3462..3463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 126,
            column: 18,
            span: 3463..3466,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 126,
            column: 19,
            span: 3466..3467,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 126,
            column: 22,
            span: 3467..3470,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 126,
            column: 23,
            span: 3470..3471,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 126,
            column: 29,
            span: 3471..3477,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 126,
            column: 30,
            span: 3477..3478,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 126,
            column: 33,
            span: 3479..3481,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'2'",
        ),
        position: Position {
            line: 126,
            column: 37,
            span: 3482..3485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 127,
            column: 5,
            span: 3486..3490,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 127,
            column: 7,
            span: 3491..3492,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 127,
            column: 14,
            span: 3493..3499,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 127,
            column: 15,
            span: 3499..3500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 127,
            column: 21,
            span: 3500..3506,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 22,
            span: 3506..3507,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  %s = 5\n  %s = %s + 1\n  return function () return %s - %s end\n]]",
        ),
        position: Position {
            line: 131,
            column: 3,
            span: 3507..3575,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 131,
            column: 4,
            span: 3575..3576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var1",
        ),
        position: Position {
            line: 131,
            column: 9,
            span: 3577..3581,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 131,
            column: 10,
            span: 3581..3582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var2",
        ),
        position: Position {
            line: 131,
            column: 15,
            span: 3583..3587,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 131,
            column: 16,
            span: 3587..3588,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var1",
        ),
        position: Position {
            line: 131,
            column: 21,
            span: 3589..3593,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 131,
            column: 22,
            span: 3593..3594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var1",
        ),
        position: Position {
            line: 131,
            column: 27,
            span: 3595..3599,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 131,
            column: 28,
            span: 3599..3600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var2",
        ),
        position: Position {
            line: 131,
            column: 33,
            span: 3601..3605,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 131,
            column: 34,
            span: 3605..3606,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 132,
            column: 6,
            span: 3607..3612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 132,
            column: 8,
            span: 3613..3614,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 132,
            column: 10,
            span: 3615..3616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 132,
            column: 19,
            span: 3617..3625,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 132,
            column: 20,
            span: 3625..3626,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 132,
            column: 24,
            span: 3626..3630,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 132,
            column: 25,
            span: 3630..3631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 133,
            column: 7,
            span: 3632..3638,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 133,
            column: 8,
            span: 3638..3639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 133,
            column: 10,
            span: 3639..3641,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 133,
            column: 11,
            span: 3641..3642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var1",
        ),
        position: Position {
            line: 133,
            column: 15,
            span: 3642..3646,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 133,
            column: 16,
            span: 3646..3647,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 133,
            column: 19,
            span: 3648..3650,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 133,
            column: 21,
            span: 3650..3652,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 133,
            column: 25,
            span: 3653..3656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 133,
            column: 28,
            span: 3657..3659,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 133,
            column: 29,
            span: 3659..3660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var2",
        ),
        position: Position {
            line: 133,
            column: 33,
            span: 3660..3664,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 133,
            column: 34,
            span: 3664..3665,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 133,
            column: 37,
            span: 3666..3668,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 133,
            column: 39,
            span: 3668..3670,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 133,
            column: 43,
            span: 3671..3674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 133,
            column: 45,
            span: 3675..3676,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 133,
            column: 46,
            span: 3676..3677,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 133,
            column: 47,
            span: 3677..3678,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 133,
            column: 50,
            span: 3679..3681,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 133,
            column: 52,
            span: 3682..3683,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 133,
            column: 53,
            span: 3682..3684,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 133,
            column: 54,
            span: 3684..3685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var1",
        ),
        position: Position {
            line: 134,
            column: 5,
            span: 3686..3690,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 134,
            column: 6,
            span: 3690..3691,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var2",
        ),
        position: Position {
            line: 134,
            column: 11,
            span: 3692..3696,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 134,
            column: 12,
            span: 3696..3697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 134,
            column: 14,
            span: 3698..3699,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 134,
            column: 16,
            span: 3700..3701,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 134,
            column: 0,
            span: 3702..3705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 135,
            column: 6,
            span: 3706..3711,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 7,
            span: 3711..3712,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 135,
            column: 10,
            span: 3712..3715,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 135,
            column: 11,
            span: 3715..3716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 138,
            column: 7,
            span: 3732..3738,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 138,
            column: 8,
            span: 3738..3739,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\t\"",
        ),
        position: Position {
            line: 138,
            column: 14,
            span: 3739..3745,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 138,
            column: 17,
            span: 3746..3748,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n\n\t]]",
        ),
        position: Position {
            line: 140,
            column: 4,
            span: 3749..3756,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 140,
            column: 5,
            span: 3756..3757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 141,
            column: 7,
            span: 3758..3764,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 141,
            column: 8,
            span: 3764..3765,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n\n $debug]]",
        ),
        position: Position {
            line: 143,
            column: 10,
            span: 3765..3778,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 143,
            column: 13,
            span: 3779..3781,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n $debug\"",
        ),
        position: Position {
            line: 143,
            column: 25,
            span: 3782..3793,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 143,
            column: 26,
            span: 3793..3794,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 144,
            column: 7,
            span: 3795..3801,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 8,
            span: 3801..3802,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ [ ]]",
        ),
        position: Position {
            line: 144,
            column: 15,
            span: 3802..3809,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 144,
            column: 18,
            span: 3810..3812,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ ] ]]",
        ),
        position: Position {
            line: 144,
            column: 26,
            span: 3813..3820,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 144,
            column: 27,
            span: 3820..3821,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 146,
            column: 2,
            span: 3841..3842,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 146,
            column: 4,
            span: 3843..3844,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(

        ),
        position: Position {
            line: 146,
            column: 967,
            span: 3845..4807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 147,
            column: 7,
            span: 4808..4814,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 147,
            column: 8,
            span: 4814..4815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 147,
            column: 14,
            span: 4815..4821,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 147,
            column: 15,
            span: 4821..4822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 147,
            column: 18,
            span: 4822..4825,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 147,
            column: 19,
            span: 4825..4826,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 147,
            column: 20,
            span: 4826..4827,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 147,
            column: 21,
            span: 4827..4828,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 147,
            column: 24,
            span: 4829..4831,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "960",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 147,
            column: 28,
            span: 4831..4835,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 147,
            column: 29,
            span: 4835..4836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 148,
            column: 5,
            span: 4837..4841,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 148,
            column: 7,
            span: 4842..4843,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[=[\nprint('+')\n\na1 = [[\"this is a 'string' with several 'quotes'\"]]\na2 = \"'quotes'\"\n\nassert(string.find(a1, a2) == 34)\nprint('+')\n\na1 = [==[temp = [[an arbitrary value]]; ]==]\nassert(load(a1))()\nassert(temp == 'an arbitrary value')\n-- long strings --\nb = \"001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789\"\nassert(string.len(b) == 960)\nprint('+')\n\na = [[00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n]]\nassert(string.len(a) == 1863)\nassert(string.sub(a, 1, 40) == string.sub(b, 1, 40))\nx = 1\n]=]",
        ),
        position: Position {
            line: 192,
            column: 4,
            span: 4844..8067,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 194,
            column: 6,
            span: 8069..8074,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 194,
            column: 7,
            span: 8074..8075,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 194,
            column: 10,
            span: 8075..8078,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 194,
            column: 11,
            span: 8078..8079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 195,
            column: 2,
            span: 8080..8081,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 195,
            column: 4,
            span: 8082..8083,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 195,
            column: 0,
            span: 8084..8087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 196,
            column: 9,
            span: 8088..8096,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 196,
            column: 10,
            span: 8096..8097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 196,
            column: 14,
            span: 8097..8101,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 196,
            column: 15,
            span: 8101..8102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 197,
            column: 7,
            span: 8103..8109,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 197,
            column: 8,
            span: 8109..8110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 197,
            column: 9,
            span: 8110..8111,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 197,
            column: 10,
            span: 8111..8112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 199,
            column: 5,
            span: 8114..8118,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 199,
            column: 7,
            span: 8119..8120,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 199,
            column: 0,
            span: 8121..8124,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 200,
            column: 2,
            span: 8125..8126,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 200,
            column: 4,
            span: 8127..8128,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 200,
            column: 0,
            span: 8129..8132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 201,
            column: 2,
            span: 8133..8134,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 201,
            column: 4,
            span: 8135..8136,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 201,
            column: 0,
            span: 8137..8140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 205,
            column: 5,
            span: 8164..8168,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 205,
            column: 7,
            span: 8169..8170,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\na = 1        -- a comment\nb = 2\n\n\nx = [=[\nhi\n]=]\ny = \"\\\nhello\\r\\n\\\n\"\nreturn require\"debug\".getinfo(1).currentline\n]]",
        ),
        position: Position {
            line: 217,
            column: 3,
            span: 8171..8290,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 219,
            column: 4,
            span: 8292..8295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 219,
            column: 6,
            span: 8296..8297,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 219,
            column: 7,
            span: 8297..8298,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 219,
            column: 9,
            span: 8299..8300,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 219,
            column: 12,
            span: 8301..8303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 219,
            column: 18,
            span: 8304..8309,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 219,
            column: 19,
            span: 8309..8310,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        position: Position {
            line: 219,
            column: 23,
            span: 8310..8314,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 219,
            column: 24,
            span: 8314..8315,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\r\"",
        ),
        position: Position {
            line: 219,
            column: 29,
            span: 8316..8320,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 219,
            column: 30,
            span: 8320..8321,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\r\"",
        ),
        position: Position {
            line: 219,
            column: 37,
            span: 8322..8328,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 219,
            column: 38,
            span: 8328..8329,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\r\\n\"",
        ),
        position: Position {
            line: 219,
            column: 45,
            span: 8330..8336,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 219,
            column: 46,
            span: 8336..8337,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 219,
            column: 0,
            span: 8338..8340,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 220,
            column: 8,
            span: 8343..8348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 220,
            column: 13,
            span: 8349..8353,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 220,
            column: 14,
            span: 8353..8354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nn",
        ),
        position: Position {
            line: 220,
            column: 17,
            span: 8355..8357,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 220,
            column: 19,
            span: 8358..8359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 220,
            column: 26,
            span: 8360..8366,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 220,
            column: 27,
            span: 8366..8367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 220,
            column: 31,
            span: 8367..8371,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 220,
            column: 32,
            span: 8371..8372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 220,
            column: 36,
            span: 8372..8376,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 220,
            column: 37,
            span: 8376..8377,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        position: Position {
            line: 220,
            column: 42,
            span: 8378..8382,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 220,
            column: 43,
            span: 8382..8383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 220,
            column: 45,
            span: 8384..8385,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 220,
            column: 46,
            span: 8385..8386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 221,
            column: 9,
            span: 8389..8395,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 221,
            column: 10,
            span: 8395..8396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 221,
            column: 18,
            span: 8396..8404,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 221,
            column: 19,
            span: 8404..8405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 221,
            column: 23,
            span: 8405..8409,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 221,
            column: 24,
            span: 8409..8410,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 221,
            column: 27,
            span: 8411..8413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nn",
        ),
        position: Position {
            line: 221,
            column: 30,
            span: 8414..8416,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 221,
            column: 31,
            span: 8416..8417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 222,
            column: 9,
            span: 8420..8426,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 222,
            column: 10,
            span: 8426..8427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 222,
            column: 12,
            span: 8427..8429,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 222,
            column: 13,
            span: 8429..8430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 222,
            column: 14,
            span: 8430..8431,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 222,
            column: 17,
            span: 8432..8434,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\\n\"",
        ),
        position: Position {
            line: 222,
            column: 24,
            span: 8435..8441,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 222,
            column: 28,
            span: 8442..8445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 222,
            column: 31,
            span: 8446..8448,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 222,
            column: 32,
            span: 8448..8449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 222,
            column: 33,
            span: 8449..8450,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 222,
            column: 36,
            span: 8451..8453,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nhello\\r\\n\\n\"",
        ),
        position: Position {
            line: 222,
            column: 52,
            span: 8454..8469,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 222,
            column: 53,
            span: 8469..8470,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 223,
            column: 0,
            span: 8471..8474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 227,
            column: 2,
            span: 8528..8529,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 227,
            column: 4,
            span: 8530..8531,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[==[]=]==]",
        ),
        position: Position {
            line: 227,
            column: 15,
            span: 8532..8542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 228,
            column: 7,
            span: 8543..8549,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 228,
            column: 8,
            span: 8549..8550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 228,
            column: 9,
            span: 8550..8551,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 228,
            column: 12,
            span: 8552..8554,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"]=\"",
        ),
        position: Position {
            line: 228,
            column: 17,
            span: 8555..8559,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 228,
            column: 18,
            span: 8559..8560,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 230,
            column: 2,
            span: 8562..8563,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 230,
            column: 4,
            span: 8564..8565,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[==[[===[[=[]]=][====[]]===]===]==]",
        ),
        position: Position {
            line: 230,
            column: 40,
            span: 8566..8601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 231,
            column: 7,
            span: 8602..8608,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 231,
            column: 8,
            span: 8608..8609,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 231,
            column: 9,
            span: 8609..8610,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 231,
            column: 12,
            span: 8611..8613,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[===[[=[]]=][====[]]===]===\"",
        ),
        position: Position {
            line: 231,
            column: 42,
            span: 8614..8643,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 231,
            column: 43,
            span: 8643..8644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 233,
            column: 2,
            span: 8646..8647,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 233,
            column: 4,
            span: 8648..8649,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[====[[===[[=[]]=][====[]]===]===]====]",
        ),
        position: Position {
            line: 233,
            column: 44,
            span: 8650..8689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 234,
            column: 7,
            span: 8690..8696,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 234,
            column: 8,
            span: 8696..8697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 234,
            column: 9,
            span: 8697..8698,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 234,
            column: 12,
            span: 8699..8701,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[===[[=[]]=][====[]]===]===\"",
        ),
        position: Position {
            line: 234,
            column: 42,
            span: 8702..8731,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 234,
            column: 43,
            span: 8731..8732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 236,
            column: 2,
            span: 8734..8735,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 236,
            column: 4,
            span: 8736..8737,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[=[]]]]]]]]]=]",
        ),
        position: Position {
            line: 236,
            column: 19,
            span: 8738..8752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 237,
            column: 7,
            span: 8753..8759,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 237,
            column: 8,
            span: 8759..8760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 237,
            column: 9,
            span: 8760..8761,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 237,
            column: 12,
            span: 8762..8764,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"]]]]]]]]\"",
        ),
        position: Position {
            line: 237,
            column: 23,
            span: 8765..8775,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 237,
            column: 24,
            span: 8775..8776,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 248,
            column: 6,
            span: 8886..8891,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 248,
            column: 8,
            span: 8892..8893,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 248,
            column: 10,
            span: 8894..8895,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 248,
            column: 12,
            span: 8896..8897,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=\"",
        ),
        position: Position {
            line: 248,
            column: 15,
            span: 8897..8900,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 248,
            column: 16,
            span: 8900..8901,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[\"",
        ),
        position: Position {
            line: 248,
            column: 20,
            span: 8902..8905,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 248,
            column: 21,
            span: 8905..8906,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"]\"",
        ),
        position: Position {
            line: 248,
            column: 25,
            span: 8907..8910,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 248,
            column: 26,
            span: 8910..8911,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        position: Position {
            line: 248,
            column: 31,
            span: 8912..8916,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 248,
            column: 32,
            span: 8916..8917,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 249,
            column: 6,
            span: 8918..8923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 249,
            column: 10,
            span: 8924..8927,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 249,
            column: 12,
            span: 8928..8929,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 249,
            column: 0,
            span: 8929..8931,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 250,
            column: 6,
            span: 8932..8937,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 250,
            column: 15,
            span: 8938..8946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gen",
        ),
        position: Position {
            line: 250,
            column: 19,
            span: 8947..8950,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 250,
            column: 21,
            span: 8951..8952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 250,
            column: 22,
            span: 8952..8953,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 250,
            column: 23,
            span: 8953..8954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 250,
            column: 25,
            span: 8955..8956,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 250,
            column: 26,
            span: 8956..8957,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 251,
            column: 5,
            span: 8960..8962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 251,
            column: 7,
            span: 8963..8964,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 251,
            column: 9,
            span: 8964..8966,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 251,
            column: 10,
            span: 8965..8967,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 251,
            column: 15,
            span: 8968..8972,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 251,
            column: 25,
            span: 8973..8982,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 251,
            column: 26,
            span: 8982..8983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 251,
            column: 31,
            span: 8983..8988,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 251,
            column: 32,
            span: 8988..8989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 251,
            column: 33,
            span: 8989..8990,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 251,
            column: 34,
            span: 8990..8991,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 252,
            column: 0,
            span: 8994..8998,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 253,
            column: 8,
            span: 9003..9006,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 253,
            column: 10,
            span: 9007..9008,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 253,
            column: 11,
            span: 9008..9009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 253,
            column: 13,
            span: 9010..9011,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 253,
            column: 16,
            span: 9012..9014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 253,
            column: 22,
            span: 9015..9020,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 253,
            column: 23,
            span: 9020..9021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 253,
            column: 24,
            span: 9021..9022,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 253,
            column: 25,
            span: 9022..9023,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 253,
            column: 0,
            span: 9024..9026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gen",
        ),
        position: Position {
            line: 254,
            column: 10,
            span: 9033..9036,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 254,
            column: 11,
            span: 9036..9037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 254,
            column: 12,
            span: 9037..9038,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 254,
            column: 14,
            span: 9038..9040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 254,
            column: 15,
            span: 9040..9041,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 254,
            column: 16,
            span: 9041..9042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 254,
            column: 18,
            span: 9043..9044,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 254,
            column: 19,
            span: 9044..9045,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 254,
            column: 20,
            span: 9044..9046,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 254,
            column: 21,
            span: 9046..9047,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 255,
            column: 0,
            span: 9052..9055,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 256,
            column: 0,
            span: 9058..9061,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 257,
            column: 0,
            span: 9062..9065,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 259,
            column: 4,
            span: 9067..9070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 259,
            column: 6,
            span: 9071..9072,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 259,
            column: 9,
            span: 9073..9075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 259,
            column: 19,
            span: 9076..9085,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 259,
            column: 20,
            span: 9085..9086,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 259,
            column: 24,
            span: 9086..9090,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 259,
            column: 25,
            span: 9090..9091,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 259,
            column: 33,
            span: 9091..9099,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 259,
            column: 35,
            span: 9100..9101,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 259,
            column: 36,
            span: 9101..9102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gen",
        ),
        position: Position {
            line: 259,
            column: 40,
            span: 9103..9106,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 259,
            column: 41,
            span: 9106..9107,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 259,
            column: 43,
            span: 9107..9109,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 259,
            column: 44,
            span: 9109..9110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 259,
            column: 48,
            span: 9111..9114,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 259,
            column: 49,
            span: 9114..9115,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 259,
            column: 53,
            span: 9116..9119,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 259,
            column: 54,
            span: 9119..9120,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 259,
            column: 0,
            span: 9121..9123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 260,
            column: 9,
            span: 9126..9132,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 260,
            column: 10,
            span: 9132..9133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 260,
            column: 11,
            span: 9133..9134,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 260,
            column: 14,
            span: 9135..9137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 260,
            column: 19,
            span: 9138..9142,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 260,
            column: 20,
            span: 9142..9143,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return [====[\\n\"",
        ),
        position: Position {
            line: 260,
            column: 37,
            span: 9143..9160,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 260,
            column: 39,
            span: 9160..9162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 260,
            column: 40,
            span: 9162..9163,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 260,
            column: 42,
            span: 9163..9165,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"]====]\"",
        ),
        position: Position {
            line: 260,
            column: 50,
            span: 9165..9173,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 260,
            column: 51,
            span: 9173..9174,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 260,
            column: 54,
            span: 9175..9177,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 260,
            column: 55,
            span: 9177..9178,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 260,
            column: 56,
            span: 9178..9179,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 260,
            column: 57,
            span: 9179..9180,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 260,
            column: 58,
            span: 9180..9181,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 261,
            column: 0,
            span: 9182..9185,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 265,
            column: 3,
            span: 9220..9222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 265,
            column: 6,
            span: 9223..9225,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 265,
            column: 7,
            span: 9225..9226,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        position: Position {
            line: 265,
            column: 16,
            span: 9226..9235,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 265,
            column: 17,
            span: 9235..9236,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pt_BR\"",
        ),
        position: Position {
            line: 265,
            column: 24,
            span: 9236..9243,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 265,
            column: 25,
            span: 9243..9244,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 265,
            column: 28,
            span: 9245..9247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 265,
            column: 31,
            span: 9248..9250,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 265,
            column: 32,
            span: 9250..9251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        position: Position {
            line: 265,
            column: 41,
            span: 9251..9260,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 265,
            column: 42,
            span: 9260..9261,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ptb\"",
        ),
        position: Position {
            line: 265,
            column: 47,
            span: 9261..9266,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 265,
            column: 48,
            span: 9266..9267,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 265,
            column: 0,
            span: 9268..9272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 266,
            column: 9,
            span: 9275..9281,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 266,
            column: 10,
            span: 9281..9282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 266,
            column: 18,
            span: 9282..9290,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 266,
            column: 19,
            span: 9290..9291,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3,4\"",
        ),
        position: Position {
            line: 266,
            column: 24,
            span: 9291..9296,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 266,
            column: 25,
            span: 9296..9297,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 266,
            column: 28,
            span: 9298..9300,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        position: Position {
            line: 266,
            column: 32,
            span: 9300..9304,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 266,
            column: 36,
            span: 9305..9308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 266,
            column: 45,
            span: 9309..9317,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3.4\"",
        ),
        position: Position {
            line: 266,
            column: 50,
            span: 9317..9322,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 266,
            column: 53,
            span: 9323..9325,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        position: Position {
            line: 266,
            column: 57,
            span: 9325..9329,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 266,
            column: 58,
            span: 9329..9330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 267,
            column: 9,
            span: 9333..9339,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 267,
            column: 10,
            span: 9339..9340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 267,
            column: 18,
            span: 9340..9348,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 267,
            column: 19,
            span: 9348..9349,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  -.4  \"",
        ),
        position: Position {
            line: 267,
            column: 28,
            span: 9349..9358,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 267,
            column: 29,
            span: 9358..9359,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 267,
            column: 32,
            span: 9360..9362,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 267,
            column: 34,
            span: 9363..9364,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".4",
                },
            ),
        ),
        position: Position {
            line: 267,
            column: 37,
            span: 9363..9367,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 267,
            column: 38,
            span: 9367..9368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 268,
            column: 9,
            span: 9371..9377,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 268,
            column: 10,
            span: 9377..9378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 268,
            column: 18,
            span: 9378..9386,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 268,
            column: 19,
            span: 9386..9387,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  +0x.41  \"",
        ),
        position: Position {
            line: 268,
            column: 31,
            span: 9387..9399,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 268,
            column: 32,
            span: 9399..9400,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 268,
            column: 35,
            span: 9401..9403,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "0",
                    after_decimal: ".41",
                },
            ),
        ),
        position: Position {
            line: 268,
            column: 42,
            span: 9403..9410,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 268,
            column: 43,
            span: 9410..9411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 269,
            column: 9,
            span: 9414..9420,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 269,
            column: 10,
            span: 9420..9421,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 269,
            column: 13,
            span: 9421..9424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 269,
            column: 18,
            span: 9425..9429,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 269,
            column: 19,
            span: 9429..9430,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = (3,4)\"",
        ),
        position: Position {
            line: 269,
            column: 30,
            span: 9430..9441,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 269,
            column: 31,
            span: 9441..9442,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 269,
            column: 32,
            span: 9442..9443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 270,
            column: 9,
            span: 9446..9452,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 10,
            span: 9452..9453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 270,
            column: 16,
            span: 9453..9459,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 17,
            span: 9459..9460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 270,
            column: 21,
            span: 9460..9464,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 22,
            span: 9464..9465,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 3.4\"",
        ),
        position: Position {
            line: 270,
            column: 34,
            span: 9465..9477,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 35,
            span: 9477..9478,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 36,
            span: 9478..9479,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 37,
            span: 9479..9480,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 38,
            span: 9480..9481,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 270,
            column: 41,
            span: 9482..9484,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        position: Position {
            line: 270,
            column: 45,
            span: 9484..9488,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 46,
            span: 9488..9489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 271,
            column: 9,
            span: 9492..9498,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 271,
            column: 10,
            span: 9498..9499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 271,
            column: 16,
            span: 9499..9505,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 271,
            column: 17,
            span: 9505..9506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 271,
            column: 21,
            span: 9506..9510,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 271,
            column: 22,
            span: 9510..9511,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return .4,3\"",
        ),
        position: Position {
            line: 271,
            column: 35,
            span: 9511..9524,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 271,
            column: 36,
            span: 9524..9525,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 271,
            column: 37,
            span: 9525..9526,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 271,
            column: 38,
            span: 9526..9527,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 271,
            column: 39,
            span: 9527..9528,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 271,
            column: 42,
            span: 9529..9531,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".4",
                },
            ),
        ),
        position: Position {
            line: 271,
            column: 46,
            span: 9531..9534,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 271,
            column: 47,
            span: 9534..9535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 272,
            column: 9,
            span: 9538..9544,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 272,
            column: 10,
            span: 9544..9545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 272,
            column: 16,
            span: 9545..9551,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 272,
            column: 17,
            span: 9551..9552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 272,
            column: 21,
            span: 9552..9556,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 272,
            column: 22,
            span: 9556..9557,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 4.\"",
        ),
        position: Position {
            line: 272,
            column: 33,
            span: 9557..9568,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 272,
            column: 34,
            span: 9568..9569,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 272,
            column: 35,
            span: 9569..9570,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 272,
            column: 36,
            span: 9570..9571,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 272,
            column: 37,
            span: 9571..9572,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 272,
            column: 40,
            span: 9573..9575,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 272,
            column: 43,
            span: 9575..9578,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 272,
            column: 44,
            span: 9578..9579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 273,
            column: 9,
            span: 9582..9588,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 273,
            column: 10,
            span: 9588..9589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 273,
            column: 16,
            span: 9589..9595,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 273,
            column: 17,
            span: 9595..9596,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 273,
            column: 21,
            span: 9596..9600,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 273,
            column: 22,
            span: 9600..9601,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 4.+.5\"",
        ),
        position: Position {
            line: 273,
            column: 36,
            span: 9601..9615,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 273,
            column: 37,
            span: 9615..9616,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 273,
            column: 38,
            span: 9616..9617,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 273,
            column: 39,
            span: 9617..9618,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 273,
            column: 40,
            span: 9618..9619,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 273,
            column: 43,
            span: 9620..9622,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".5",
                },
            ),
        ),
        position: Position {
            line: 273,
            column: 47,
            span: 9622..9626,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 273,
            column: 48,
            span: 9626..9627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 275,
            column: 9,
            span: 9631..9637,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 275,
            column: 10,
            span: 9637..9638,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 0x.1 \"",
        ),
        position: Position {
            line: 275,
            column: 18,
            span: 9638..9646,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 275,
            column: 20,
            span: 9647..9648,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 0x,1\"",
        ),
        position: Position {
            line: 275,
            column: 28,
            span: 9649..9656,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 275,
            column: 30,
            span: 9657..9658,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-0X.1\\t\"",
        ),
        position: Position {
            line: 275,
            column: 40,
            span: 9659..9668,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 275,
            column: 43,
            span: 9669..9671,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        position: Position {
            line: 275,
            column: 49,
            span: 9671..9677,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 275,
            column: 50,
            span: 9677..9678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 277,
            column: 9,
            span: 9682..9688,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 277,
            column: 10,
            span: 9688..9689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 277,
            column: 18,
            span: 9689..9697,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"inf\"",
        ),
        position: Position {
            line: 277,
            column: 23,
            span: 9697..9702,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 277,
            column: 26,
            span: 9703..9705,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 277,
            column: 30,
            span: 9706..9709,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 277,
            column: 34,
            span: 9710..9713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 277,
            column: 43,
            span: 9714..9722,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"NAN\"",
        ),
        position: Position {
            line: 277,
            column: 48,
            span: 9722..9727,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 277,
            column: 51,
            span: 9728..9730,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 277,
            column: 55,
            span: 9731..9734,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 277,
            column: 56,
            span: 9734..9735,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 279,
            column: 9,
            span: 9739..9745,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 279,
            column: 10,
            span: 9745..9746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 279,
            column: 16,
            span: 9746..9752,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 279,
            column: 17,
            span: 9752..9753,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 279,
            column: 21,
            span: 9753..9757,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 279,
            column: 22,
            span: 9757..9758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 279,
            column: 28,
            span: 9758..9764,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 279,
            column: 29,
            span: 9764..9765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 279,
            column: 35,
            span: 9765..9771,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 279,
            column: 36,
            span: 9771..9772,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return %q\"",
        ),
        position: Position {
            line: 279,
            column: 47,
            span: 9772..9783,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 279,
            column: 48,
            span: 9783..9784,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".51",
                },
            ),
        ),
        position: Position {
            line: 279,
            column: 53,
            span: 9784..9789,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 279,
            column: 54,
            span: 9789..9790,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 279,
            column: 55,
            span: 9790..9791,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 279,
            column: 56,
            span: 9791..9792,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 279,
            column: 57,
            span: 9792..9793,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 279,
            column: 58,
            span: 9793..9794,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 279,
            column: 61,
            span: 9795..9797,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".51",
                },
            ),
        ),
        position: Position {
            line: 279,
            column: 66,
            span: 9797..9802,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 279,
            column: 67,
            span: 9802..9803,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 281,
            column: 8,
            span: 9807..9812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 281,
            column: 10,
            span: 9813..9814,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 281,
            column: 11,
            span: 9814..9815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 281,
            column: 12,
            span: 9815..9816,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 281,
            column: 14,
            span: 9817..9818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 281,
            column: 19,
            span: 9819..9823,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 20,
            span: 9823..9824,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 4.5.\"",
        ),
        position: Position {
            line: 281,
            column: 33,
            span: 9824..9837,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 281,
            column: 34,
            span: 9837..9838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 282,
            column: 9,
            span: 9841..9847,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 282,
            column: 10,
            span: 9847..9848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 282,
            column: 16,
            span: 9848..9854,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 282,
            column: 17,
            span: 9854..9855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 282,
            column: 21,
            span: 9855..9859,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 282,
            column: 22,
            span: 9859..9860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 282,
            column: 23,
            span: 9860..9861,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 282,
            column: 24,
            span: 9861..9862,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'4%.5%.'\"",
        ),
        position: Position {
            line: 282,
            column: 35,
            span: 9863..9873,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 282,
            column: 36,
            span: 9873..9874,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 282,
            column: 37,
            span: 9874..9875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 284,
            column: 9,
            span: 9879..9885,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 284,
            column: 10,
            span: 9885..9886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 284,
            column: 12,
            span: 9886..9888,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 284,
            column: 13,
            span: 9888..9889,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        position: Position {
            line: 284,
            column: 22,
            span: 9889..9898,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 284,
            column: 23,
            span: 9898..9899,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        position: Position {
            line: 284,
            column: 26,
            span: 9899..9902,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 284,
            column: 27,
            span: 9902..9903,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 284,
            column: 28,
            span: 9903..9904,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 285,
            column: 0,
            span: 9905..9909,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 286,
            column: 4,
            span: 9912..9913,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        position: Position {
            line: 286,
            column: 11,
            span: 9913..9920,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 286,
            column: 14,
            span: 9921..9923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 286,
            column: 20,
            span: 9924..9929,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 286,
            column: 21,
            span: 9929..9930,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 286,
            column: 22,
            span: 9930..9931,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n >>> pt_BR locale not available: skipping decimal point tests <<<\\n'",
        ),
        position: Position {
            line: 287,
            column: 75,
            span: 9935..10006,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 287,
            column: 76,
            span: 10006..10007,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 288,
            column: 0,
            span: 10008..10011,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 292,
            column: 6,
            span: 10040..10045,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 292,
            column: 8,
            span: 10046..10047,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 292,
            column: 10,
            span: 10048..10049,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a string with \\r and \\n and \\r\\n and \\n\\r\"",
        ),
        position: Position {
            line: 292,
            column: 54,
            span: 10050..10093,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 293,
            column: 6,
            span: 10094..10099,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 293,
            column: 8,
            span: 10100..10101,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 293,
            column: 10,
            span: 10102..10103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 293,
            column: 17,
            span: 10104..10110,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 293,
            column: 18,
            span: 10110..10111,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 293,
            column: 24,
            span: 10111..10117,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 293,
            column: 25,
            span: 10117..10118,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return %q\"",
        ),
        position: Position {
            line: 293,
            column: 36,
            span: 10118..10129,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 293,
            column: 37,
            span: 10129..10130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 293,
            column: 39,
            span: 10131..10132,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 293,
            column: 40,
            span: 10132..10133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 294,
            column: 7,
            span: 10134..10140,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 294,
            column: 8,
            span: 10140..10141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 294,
            column: 14,
            span: 10141..10147,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 294,
            column: 15,
            span: 10147..10148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 294,
            column: 19,
            span: 10148..10152,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 294,
            column: 20,
            span: 10152..10153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 294,
            column: 21,
            span: 10153..10154,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 294,
            column: 22,
            span: 10154..10155,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 294,
            column: 23,
            span: 10155..10156,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 294,
            column: 24,
            span: 10156..10157,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 294,
            column: 25,
            span: 10157..10158,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 294,
            column: 28,
            span: 10159..10161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 294,
            column: 30,
            span: 10162..10163,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 294,
            column: 31,
            span: 10163..10164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 297,
            column: 7,
            span: 10184..10190,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 297,
            column: 8,
            span: 10190..10191,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 297,
            column: 11,
            span: 10191..10194,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 297,
            column: 16,
            span: 10195..10199,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = 'non-ending string\"",
        ),
        position: Position {
            line: 297,
            column: 40,
            span: 10199..10223,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 297,
            column: 41,
            span: 10223..10224,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 298,
            column: 7,
            span: 10225..10231,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 298,
            column: 8,
            span: 10231..10232,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 298,
            column: 11,
            span: 10232..10235,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 298,
            column: 16,
            span: 10236..10240,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = 'non-ending string\\n'\"",
        ),
        position: Position {
            line: 298,
            column: 43,
            span: 10240..10267,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 298,
            column: 44,
            span: 10267..10268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 299,
            column: 7,
            span: 10269..10275,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 299,
            column: 8,
            span: 10275..10276,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 299,
            column: 11,
            span: 10276..10279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 299,
            column: 16,
            span: 10280..10284,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = '\\\\345'\"",
        ),
        position: Position {
            line: 299,
            column: 29,
            span: 10284..10297,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 299,
            column: 30,
            span: 10297..10298,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 300,
            column: 7,
            span: 10299..10305,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 300,
            column: 8,
            span: 10305..10306,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 300,
            column: 11,
            span: 10306..10309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 300,
            column: 16,
            span: 10310..10314,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = [=x]\"",
        ),
        position: Position {
            line: 300,
            column: 26,
            span: 10314..10324,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 300,
            column: 27,
            span: 10324..10325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 302,
            column: 6,
            span: 10327..10332,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 302,
            column: 7,
            span: 10332..10333,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        position: Position {
            line: 302,
            column: 11,
            span: 10333..10337,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 302,
            column: 12,
            span: 10337..10338,
        },
    },
]
