---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/vararg.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
        column: 6,
        span: 101..106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
        column: 7,
        span: 106..107,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing vararg'",
        ),
        line: 4,
        column: 23,
        span: 107..123,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
        column: 24,
        span: 123..124,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 6,
        column: 9,
        span: 126..134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 6,
        column: 11,
        span: 135..136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 12,
        span: 136..137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 6,
        column: 13,
        span: 137..138,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 6,
        column: 14,
        span: 138..139,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 6,
        column: 18,
        span: 140..143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 19,
        span: 143..144,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 7,
        column: 8,
        span: 147..152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 7,
        column: 12,
        span: 153..156,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 7,
        column: 14,
        span: 157..158,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 7,
        column: 16,
        span: 159..160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 7,
        column: 17,
        span: 160..161,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 7,
        column: 19,
        span: 162..163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 7,
        column: 26,
        span: 164..170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 7,
        column: 27,
        span: 170..171,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'#'",
        ),
        line: 7,
        column: 30,
        span: 171..174,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 7,
        column: 31,
        span: 174..175,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 7,
        column: 35,
        span: 176..179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 7,
        column: 36,
        span: 179..180,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 7,
        column: 37,
        span: 180..181,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 7,
        column: 41,
        span: 182..185,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 7,
        column: 42,
        span: 185..186,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 8,
        column: 6,
        span: 189..192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 8,
        column: 8,
        span: 193..194,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 8,
        column: 9,
        span: 194..195,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 8,
        column: 10,
        span: 194..196,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 8,
        column: 11,
        span: 196..197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 8,
        column: 14,
        span: 197..200,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 8,
        column: 15,
        span: 200..201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 8,
        column: 16,
        span: 201..202,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 8,
        column: 19,
        span: 203..205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 8,
        column: 26,
        span: 206..212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 27,
        span: 212..213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 8,
        column: 28,
        span: 213..214,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 8,
        column: 29,
        span: 214..215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 8,
        column: 30,
        span: 215..216,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 8,
        column: 31,
        span: 216..217,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 8,
        column: 33,
        span: 217..219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 8,
        column: 36,
        span: 219..222,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 8,
        column: 37,
        span: 222..223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 8,
        column: 38,
        span: 223..224,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 8,
        column: 39,
        span: 224..225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 40,
        span: 225..226,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 8,
        column: 0,
        span: 227..230,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 9,
        column: 9,
        span: 233..239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 9,
        column: 13,
        span: 240..243,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 9,
        column: 14,
        span: 243..244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 9,
        column: 0,
        span: 244..245,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 10,
        column: 0,
        span: 246..249,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 12,
        column: 9,
        span: 251..259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c12",
        ),
        line: 12,
        column: 13,
        span: 260..263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 15,
        span: 264..265,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 12,
        column: 18,
        span: 265..268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 19,
        span: 268..269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 13,
        column: 9,
        span: 272..278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 10,
        span: 278..279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 13,
        column: 13,
        span: 279..282,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 13,
        column: 16,
        span: 283..285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 13,
        column: 19,
        span: 286..288,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 13,
        column: 20,
        span: 288..289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 13,
        column: 23,
        span: 289..292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 24,
        span: 292..293,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 14,
        column: 8,
        span: 317..322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 14,
        column: 10,
        span: 323..324,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 14,
        column: 12,
        span: 325..326,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 14,
        column: 14,
        span: 327..328,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 14,
        column: 17,
        span: 328..331,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 14,
        column: 18,
        span: 331..332,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 14,
        column: 19,
        span: 332..333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 14,
        column: 21,
        span: 334..335,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 14,
        column: 22,
        span: 335..336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 14,
        column: 23,
        span: 336..337,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 14,
        column: 25,
        span: 338..339,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 14,
        column: 27,
        span: 340..341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 14,
        column: 0,
        span: 341..342,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 15,
        column: 8,
        span: 345..350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 15,
        column: 12,
        span: 351..354,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 15,
        column: 14,
        span: 355..356,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 16,
        span: 357..358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 15,
        column: 17,
        span: 358..359,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 15,
        column: 18,
        span: 359..360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 15,
        column: 19,
        span: 360..361,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
        column: 21,
        span: 361..363,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 15,
        column: 22,
        span: 362..364,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 15,
        column: 26,
        span: 365..368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 15,
        column: 28,
        span: 369..370,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 15,
        column: 29,
        span: 370..371,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 15,
        column: 30,
        span: 370..372,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 15,
        column: 31,
        span: 372..373,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
        column: 34,
        span: 374..376,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 15,
        column: 36,
        span: 376..378,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 15,
        column: 40,
        span: 379..382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 15,
        column: 42,
        span: 383..384,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 15,
        column: 43,
        span: 384..385,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 15,
        column: 44,
        span: 384..386,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 15,
        column: 45,
        span: 386..387,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
        column: 48,
        span: 388..390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 15,
        column: 50,
        span: 390..392,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 51,
        span: 392..393,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 16,
        column: 5,
        span: 396..398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 16,
        column: 9,
        span: 399..402,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 16,
        column: 14,
        span: 403..407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 16,
        column: 18,
        span: 408..411,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 16,
        column: 20,
        span: 412..413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "55",
                    after_decimal: "",
                },
            ),
        ),
        line: 16,
        column: 23,
        span: 413..416,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 16,
        column: 0,
        span: 417..420,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 17,
        column: 9,
        span: 423..429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 17,
        column: 13,
        span: 430..433,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 17,
        column: 14,
        span: 433..434,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 17,
        column: 0,
        span: 434..436,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 18,
        column: 0,
        span: 437..440,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 20,
        column: 9,
        span: 442..450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "vararg",
        ),
        line: 20,
        column: 16,
        span: 451..457,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 18,
        span: 458..459,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 20,
        column: 21,
        span: 459..462,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 22,
        span: 462..463,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 20,
        column: 29,
        span: 464..470,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 20,
        column: 31,
        span: 471..472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 20,
        column: 32,
        span: 472..473,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 20,
        column: 34,
        span: 474..475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 20,
        column: 41,
        span: 476..482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 42,
        span: 482..483,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'#'",
        ),
        line: 20,
        column: 45,
        span: 483..486,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 46,
        span: 486..487,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 20,
        column: 50,
        span: 488..491,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 51,
        span: 491..492,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 52,
        span: 492..493,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 20,
        column: 56,
        span: 494..497,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 20,
        column: 57,
        span: 497..498,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 20,
        column: 0,
        span: 499..502,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 22,
        column: 6,
        span: 504..509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 22,
        column: 11,
        span: 510..514,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 22,
        column: 13,
        span: 515..516,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 22,
        column: 22,
        span: 517..525,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 24,
        span: 526..527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 22,
        column: 25,
        span: 527..528,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 26,
        span: 528..529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "args",
        ),
        line: 22,
        column: 31,
        span: 530..534,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 32,
        span: 534..535,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 22,
        column: 39,
        span: 536..542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 22,
        column: 41,
        span: 543..544,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 42,
        span: 544..545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 22,
        column: 47,
        span: 545..550,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 22,
        column: 48,
        span: 550..551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 22,
        column: 54,
        span: 551..557,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 55,
        span: 557..558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "args",
        ),
        line: 22,
        column: 59,
        span: 558..562,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 60,
        span: 562..563,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 22,
        column: 62,
        span: 563..565,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 63,
        span: 565..566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "args",
        ),
        line: 22,
        column: 68,
        span: 567..571,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 22,
        column: 69,
        span: 571..572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 22,
        column: 70,
        span: 572..573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 71,
        span: 573..574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 72,
        span: 574..575,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 22,
        column: 0,
        span: 576..579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 24,
        column: 7,
        span: 581..587,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 8,
        span: 587..588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 24,
        column: 9,
        span: 588..589,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 10,
        span: 589..590,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 11,
        span: 590..591,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 24,
        column: 14,
        span: 592..594,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 24,
        column: 16,
        span: 594..596,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 17,
        span: 596..597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 25,
        column: 7,
        span: 598..604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 8,
        span: 604..605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 25,
        column: 9,
        span: 605..606,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 10,
        span: 606..607,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 25,
        column: 11,
        span: 607..608,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 12,
        span: 607..609,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 13,
        span: 609..610,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 14,
        span: 609..611,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 15,
        span: 611..612,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 16,
        span: 611..613,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 25,
        column: 17,
        span: 613..614,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 18,
        span: 614..615,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 20,
        span: 615..617,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 21,
        span: 617..618,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 23,
        span: 618..620,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 24,
        span: 620..621,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 26,
        span: 621..623,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 27,
        span: 623..624,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 25,
        column: 30,
        span: 625..627,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 32,
        span: 627..629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 33,
        span: 629..630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 26,
        column: 7,
        span: 631..637,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 8,
        span: 637..638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 26,
        column: 9,
        span: 638..639,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 10,
        span: 639..640,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 26,
        column: 11,
        span: 640..641,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 26,
        column: 16,
        span: 641..646,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 17,
        span: 646..647,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 26,
        column: 21,
        span: 648..651,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 22,
        span: 651..652,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 25,
        span: 652..655,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 26,
        span: 655..656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 26,
        column: 28,
        span: 657..658,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 29,
        span: 658..659,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 26,
        column: 33,
        span: 660..663,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 26,
        column: 34,
        span: 663..664,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 35,
        span: 664..665,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 26,
        column: 41,
        span: 666..671,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 42,
        span: 671..672,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 26,
        column: 46,
        span: 673..676,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 47,
        span: 676..677,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 50,
        span: 677..680,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 51,
        span: 680..681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 26,
        column: 53,
        span: 682..683,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 54,
        span: 683..684,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 26,
        column: 58,
        span: 685..688,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 59,
        span: 688..689,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 26,
        column: 62,
        span: 690..692,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 64,
        span: 692..694,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 65,
        span: 694..695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 28,
        column: 7,
        span: 697..703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 8,
        span: 703..704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c12",
        ),
        line: 28,
        column: 11,
        span: 704..707,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 12,
        span: 707..708,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 13,
        span: 707..709,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 14,
        span: 709..710,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 15,
        span: 709..711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 16,
        span: 711..712,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 28,
        column: 18,
        span: 712..714,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "55",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 20,
        span: 713..716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 21,
        span: 716..717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 29,
        column: 2,
        span: 718..719,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 3,
        span: 719..720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 29,
        column: 4,
        span: 720..721,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 29,
        column: 6,
        span: 722..723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
        column: 13,
        span: 724..730,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 14,
        span: 730..731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 29,
        column: 18,
        span: 731..735,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 19,
        span: 735..736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c12",
        ),
        line: 29,
        column: 22,
        span: 736..739,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 23,
        span: 739..740,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 29,
        column: 25,
        span: 741..742,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
        column: 26,
        span: 741..743,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 27,
        span: 743..744,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
        column: 28,
        span: 743..745,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 29,
        column: 29,
        span: 745..746,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 30,
        span: 746..747,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 31,
        span: 747..748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 30,
        column: 7,
        span: 749..755,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 8,
        span: 755..756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 30,
        column: 9,
        span: 756..757,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 30,
        column: 12,
        span: 758..760,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "55",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
        column: 15,
        span: 760..763,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 30,
        column: 19,
        span: 764..767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 30,
        column: 21,
        span: 768..769,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 30,
        column: 24,
        span: 770..772,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
        column: 26,
        span: 772..774,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 27,
        span: 774..775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 31,
        column: 2,
        span: 776..777,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 31,
        column: 4,
        span: 778..779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 31,
        column: 9,
        span: 780..784,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 10,
        span: 784..785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c12",
        ),
        line: 31,
        column: 13,
        span: 785..788,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
        column: 14,
        span: 788..789,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 31,
        column: 16,
        span: 790..791,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 17,
        span: 790..792,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
        column: 18,
        span: 792..793,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 19,
        span: 792..794,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 31,
        column: 20,
        span: 794..795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 31,
        column: 21,
        span: 795..796,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 31,
        column: 22,
        span: 796..797,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 23,
        span: 796..798,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 31,
        column: 24,
        span: 798..799,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 25,
        span: 799..800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 32,
        column: 7,
        span: 801..807,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 8,
        span: 807..808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 32,
        column: 9,
        span: 808..809,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 32,
        column: 12,
        span: 810..812,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "55",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 15,
        span: 812..815,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 32,
        column: 19,
        span: 816..819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 32,
        column: 21,
        span: 820..821,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 32,
        column: 24,
        span: 822..824,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 26,
        span: 824..826,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 27,
        span: 826..827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 33,
        column: 2,
        span: 828..829,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 33,
        column: 4,
        span: 830..831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 33,
        column: 9,
        span: 832..836,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 10,
        span: 836..837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c12",
        ),
        line: 33,
        column: 13,
        span: 837..840,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 14,
        span: 840..841,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 33,
        column: 16,
        span: 842..843,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 17,
        span: 842..844,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 18,
        span: 844..845,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 19,
        span: 844..846,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 33,
        column: 20,
        span: 846..847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 33,
        column: 21,
        span: 847..848,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 33,
        column: 22,
        span: 848..849,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 23,
        span: 848..850,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 33,
        column: 24,
        span: 850..851,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 25,
        span: 851..852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 34,
        column: 7,
        span: 853..859,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 8,
        span: 859..860,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 34,
        column: 11,
        span: 860..863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 34,
        column: 13,
        span: 864..865,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 14,
        span: 865..866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
        column: 7,
        span: 867..873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 8,
        span: 873..874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c12",
        ),
        line: 35,
        column: 11,
        span: 874..877,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 12,
        span: 877..878,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 13,
        span: 877..879,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 35,
        column: 14,
        span: 879..880,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 15,
        span: 879..881,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 35,
        column: 16,
        span: 881..882,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 17,
        span: 881..883,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 18,
        span: 883..884,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 35,
        column: 21,
        span: 885..887,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 35,
        column: 27,
        span: 888..893,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 28,
        span: 893..894,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 36,
        column: 6,
        span: 895..900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 36,
        column: 8,
        span: 901..902,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 36,
        column: 10,
        span: 903..904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "vararg",
        ),
        line: 36,
        column: 17,
        span: 905..911,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 18,
        span: 911..912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 36,
        column: 22,
        span: 912..916,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 23,
        span: 916..917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 36,
        column: 27,
        span: 917..921,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 28,
        span: 921..922,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 36,
        column: 30,
        span: 923..924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 36,
        column: 32,
        span: 924..926,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 33,
        span: 926..927,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 36,
        column: 36,
        span: 927..930,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 36,
        column: 37,
        span: 930..931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 36,
        column: 38,
        span: 931..932,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 36,
        column: 39,
        span: 932..933,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 40,
        span: 932..934,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 36,
        column: 41,
        span: 934..935,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 42,
        span: 935..936,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 43,
        span: 936..937,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 37,
        column: 6,
        span: 938..943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 37,
        column: 8,
        span: 944..945,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 37,
        column: 9,
        span: 945..946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 37,
        column: 10,
        span: 946..947,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 37,
        column: 12,
        span: 948..949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 37,
        column: 17,
        span: 950..954,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 18,
        span: 954..955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 37,
        column: 20,
        span: 955..957,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 21,
        span: 957..958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 38,
        column: 7,
        span: 959..965,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 8,
        span: 965..966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
        column: 9,
        span: 966..967,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 38,
        column: 10,
        span: 967..968,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 11,
        span: 967..969,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 38,
        column: 12,
        span: 969..970,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 38,
        column: 15,
        span: 971..973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 38,
        column: 17,
        span: 974..975,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 38,
        column: 21,
        span: 976..979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
        column: 23,
        span: 980..981,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 38,
        column: 24,
        span: 981..982,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 25,
        span: 981..983,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 38,
        column: 26,
        span: 983..984,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 38,
        column: 29,
        span: 985..987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 38,
        column: 31,
        span: 988..989,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 38,
        column: 35,
        span: 990..993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
        column: 37,
        span: 994..995,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 38,
        span: 995..996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 38,
        column: 39,
        span: 996..997,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 38,
        column: 42,
        span: 998..1000,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 44,
        span: 1000..1002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 45,
        span: 1002..1003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 39,
        column: 2,
        span: 1004..1005,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 39,
        column: 4,
        span: 1006..1007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "vararg",
        ),
        line: 39,
        column: 11,
        span: 1008..1014,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 12,
        span: 1014..1015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 39,
        column: 16,
        span: 1015..1019,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 17,
        span: 1019..1020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 39,
        column: 21,
        span: 1020..1024,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 22,
        span: 1024..1025,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 39,
        column: 24,
        span: 1026..1027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c12",
        ),
        line: 39,
        column: 27,
        span: 1027..1030,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 28,
        span: 1030..1031,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 39,
        column: 30,
        span: 1032..1033,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 31,
        span: 1032..1034,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 32,
        span: 1034..1035,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 33,
        span: 1034..1036,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 39,
        column: 34,
        span: 1036..1037,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 39,
        column: 35,
        span: 1037..1038,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 36,
        span: 1038..1039,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 37,
        span: 1039..1040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 40,
        column: 7,
        span: 1041..1047,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 8,
        span: 1047..1048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 40,
        column: 9,
        span: 1048..1049,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 40,
        column: 10,
        span: 1049..1050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 40,
        column: 11,
        span: 1050..1051,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 40,
        column: 14,
        span: 1052..1054,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 16,
        span: 1054..1056,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 40,
        column: 20,
        span: 1057..1060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 40,
        column: 22,
        span: 1061..1062,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 40,
        column: 23,
        span: 1062..1063,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 24,
        span: 1062..1064,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 40,
        column: 25,
        span: 1064..1065,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 40,
        column: 28,
        span: 1066..1068,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "55",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 31,
        span: 1068..1071,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 40,
        column: 35,
        span: 1072..1075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 40,
        column: 37,
        span: 1076..1077,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 40,
        column: 38,
        span: 1077..1078,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 39,
        span: 1077..1079,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 40,
        column: 40,
        span: 1079..1080,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 40,
        column: 43,
        span: 1081..1083,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 45,
        span: 1083..1085,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 46,
        span: 1085..1086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 41,
        column: 2,
        span: 1087..1088,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 41,
        column: 4,
        span: 1089..1090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 41,
        column: 9,
        span: 1091..1095,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 10,
        span: 1095..1096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 41,
        column: 15,
        span: 1096..1101,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
        column: 16,
        span: 1101..1102,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 41,
        column: 18,
        span: 1103..1104,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 41,
        column: 21,
        span: 1104..1107,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 41,
        column: 22,
        span: 1107..1108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 23,
        span: 1108..1109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 42,
        column: 7,
        span: 1110..1116,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 8,
        span: 1116..1117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 42,
        column: 9,
        span: 1117..1118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 42,
        column: 12,
        span: 1119..1121,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 42,
        column: 16,
        span: 1122..1125,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 17,
        span: 1125..1126,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 44,
        column: 6,
        span: 1128..1133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 44,
        column: 8,
        span: 1134..1135,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 44,
        column: 10,
        span: 1136..1137,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 44,
        column: 12,
        span: 1138..1139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 44,
        column: 13,
        span: 1138..1140,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 14,
        span: 1140..1141,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 44,
        column: 17,
        span: 1141..1144,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 44,
        column: 18,
        span: 1144..1145,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 45,
        column: 9,
        span: 1146..1154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 45,
        column: 11,
        span: 1155..1156,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 45,
        column: 12,
        span: 1156..1157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 45,
        column: 13,
        span: 1157..1158,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 15,
        span: 1159..1160,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 45,
        column: 18,
        span: 1160..1163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 19,
        span: 1163..1164,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 45,
        column: 25,
        span: 1165..1170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 45,
        column: 29,
        span: 1171..1174,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 45,
        column: 31,
        span: 1175..1176,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 45,
        column: 33,
        span: 1177..1178,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 45,
        column: 36,
        span: 1178..1181,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 45,
        column: 37,
        span: 1181..1182,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 45,
        column: 38,
        span: 1182..1183,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 45,
        column: 45,
        span: 1184..1190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 45,
        column: 50,
        span: 1191..1195,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 45,
        column: 51,
        span: 1195..1196,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 45,
        column: 54,
        span: 1196..1199,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 45,
        column: 55,
        span: 1199..1200,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 45,
        column: 56,
        span: 1200..1201,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 45,
        column: 57,
        span: 1201..1202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 45,
        column: 60,
        span: 1202..1205,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 45,
        column: 0,
        span: 1206..1209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 46,
        column: 7,
        span: 1210..1216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 8,
        span: 1216..1217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 46,
        column: 9,
        span: 1217..1218,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 46,
        column: 10,
        span: 1218..1219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 46,
        column: 11,
        span: 1219..1220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 12,
        span: 1220..1221,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 13,
        span: 1220..1222,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 14,
        span: 1222..1223,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 15,
        span: 1222..1224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 16,
        span: 1224..1225,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 46,
        column: 19,
        span: 1226..1228,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 21,
        span: 1228..1230,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 46,
        column: 25,
        span: 1231..1234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 46,
        column: 27,
        span: 1235..1236,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 46,
        column: 28,
        span: 1236..1237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 46,
        column: 29,
        span: 1237..1238,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 30,
        span: 1238..1239,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 31,
        span: 1238..1240,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 32,
        span: 1240..1241,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 46,
        column: 35,
        span: 1242..1244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 38,
        span: 1244..1247,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 39,
        span: 1247..1248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 47,
        column: 6,
        span: 1249..1254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 7,
        span: 1254..1255,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 47,
        column: 10,
        span: 1255..1258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 11,
        span: 1258..1259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 49,
        column: 4,
        span: 1261..1264,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 49,
        column: 6,
        span: 1265..1266,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 0,
        span: 1266..1269,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 50,
        column: 6,
        span: 1270..1275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 50,
        column: 8,
        span: 1276..1277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 9,
        span: 1277..1278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 50,
        column: 11,
        span: 1279..1280,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 50,
        column: 13,
        span: 1281..1282,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 15,
        span: 1282..1284,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 16,
        span: 1284..1285,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 50,
        column: 18,
        span: 1286..1287,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 50,
        column: 19,
        span: 1287..1288,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 51,
        column: 6,
        span: 1289..1294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 51,
        column: 8,
        span: 1295..1296,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 51,
        column: 11,
        span: 1297..1299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 51,
        column: 15,
        span: 1300..1303,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 51,
        column: 18,
        span: 1304..1306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 51,
        column: 20,
        span: 1307..1308,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 51,
        column: 21,
        span: 1308..1309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 51,
        column: 22,
        span: 1309..1310,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 51,
        column: 23,
        span: 1310..1311,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 51,
        column: 25,
        span: 1312..1313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 51,
        column: 27,
        span: 1314..1315,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 51,
        column: 28,
        span: 1315..1316,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 51,
        column: 31,
        span: 1315..1319,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 51,
        column: 32,
        span: 1319..1320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 51,
        column: 34,
        span: 1321..1322,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 51,
        column: 35,
        span: 1322..1323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 51,
        column: 36,
        span: 1323..1324,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 51,
        column: 37,
        span: 1324..1325,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 38,
        span: 1324..1326,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 51,
        column: 0,
        span: 1327..1330,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 53,
        column: 9,
        span: 1332..1340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 53,
        column: 11,
        span: 1341..1342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 12,
        span: 1342..1343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
        column: 13,
        span: 1343..1344,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 14,
        span: 1344..1345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 53,
        column: 16,
        span: 1346..1347,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 17,
        span: 1347..1348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 53,
        column: 19,
        span: 1349..1350,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 20,
        span: 1350..1351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 53,
        column: 22,
        span: 1352..1353,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 23,
        span: 1353..1354,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 53,
        column: 27,
        span: 1355..1358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 28,
        span: 1358..1359,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 54,
        column: 8,
        span: 1362..1367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "more",
        ),
        line: 54,
        column: 13,
        span: 1368..1372,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 54,
        column: 15,
        span: 1373..1374,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 54,
        column: 17,
        span: 1375..1376,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 54,
        column: 20,
        span: 1376..1379,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 54,
        column: 21,
        span: 1379..1380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 55,
        column: 9,
        span: 1383..1389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 10,
        span: 1389..1390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 55,
        column: 11,
        span: 1390..1391,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 55,
        column: 14,
        span: 1392..1394,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 55,
        column: 18,
        span: 1394..1398,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 55,
        column: 22,
        span: 1399..1402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "more",
        ),
        line: 55,
        column: 27,
        span: 1403..1407,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 55,
        column: 28,
        span: 1407..1408,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 55,
        column: 29,
        span: 1407..1409,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 55,
        column: 30,
        span: 1409..1410,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 55,
        column: 33,
        span: 1411..1413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 55,
        column: 37,
        span: 1413..1417,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 55,
        column: 0,
        span: 1418..1421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "more",
        ),
        line: 56,
        column: 14,
        span: 1431..1435,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 56,
        column: 15,
        span: 1435..1436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 56,
        column: 18,
        span: 1436..1439,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 56,
        column: 19,
        span: 1439..1440,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 20,
        span: 1439..1441,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 56,
        column: 21,
        span: 1441..1442,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 56,
        column: 24,
        span: 1443..1445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 56,
        column: 28,
        span: 1446..1449,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 56,
        column: 29,
        span: 1449..1450,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 56,
        column: 32,
        span: 1449..1453,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 56,
        column: 36,
        span: 1454..1457,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 56,
        column: 40,
        span: 1458..1461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "more",
        ),
        line: 56,
        column: 45,
        span: 1462..1466,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 56,
        column: 46,
        span: 1466..1467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 56,
        column: 49,
        span: 1467..1470,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 56,
        column: 50,
        span: 1470..1471,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 51,
        span: 1470..1472,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 56,
        column: 52,
        span: 1472..1473,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 53,
        span: 1473..1474,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 57,
        column: 0,
        span: 1475..1478,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 59,
        column: 9,
        span: 1480..1488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 59,
        column: 11,
        span: 1489..1490,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 12,
        span: 1490..1491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 59,
        column: 13,
        span: 1491..1492,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 14,
        span: 1492..1493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 59,
        column: 15,
        span: 1493..1494,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 16,
        span: 1494..1495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 59,
        column: 17,
        span: 1495..1496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 18,
        span: 1496..1497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 60,
        column: 9,
        span: 1500..1506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 10,
        span: 1506..1507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 60,
        column: 11,
        span: 1507..1508,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 60,
        column: 14,
        span: 1509..1511,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 60,
        column: 18,
        span: 1511..1515,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 60,
        column: 22,
        span: 1516..1519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 60,
        column: 24,
        span: 1520..1521,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 60,
        column: 27,
        span: 1522..1524,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 60,
        column: 31,
        span: 1524..1528,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 60,
        column: 35,
        span: 1529..1532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 60,
        column: 37,
        span: 1533..1534,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 60,
        column: 40,
        span: 1535..1537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 60,
        column: 44,
        span: 1537..1541,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 45,
        span: 1541..1542,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 61,
        column: 0,
        span: 1543..1546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 63,
        column: 5,
        span: 1548..1552,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 6,
        span: 1552..1553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 63,
        column: 7,
        span: 1553..1554,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 8,
        span: 1554..1555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 63,
        column: 10,
        span: 1556..1557,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 11,
        span: 1557..1558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 64,
        column: 5,
        span: 1559..1563,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 6,
        span: 1563..1564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 64,
        column: 7,
        span: 1564..1565,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 8,
        span: 1565..1566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 64,
        column: 10,
        span: 1567..1568,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 11,
        span: 1568..1569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 66,
        column: 2,
        span: 1571..1572,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 66,
        column: 4,
        span: 1573..1574,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 66,
        column: 6,
        span: 1575..1576,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 66,
        column: 7,
        span: 1576..1577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 67,
        column: 2,
        span: 1578..1579,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 67,
        column: 4,
        span: 1580..1581,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 67,
        column: 0,
        span: 1581..1583,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 68,
        column: 6,
        span: 1584..1589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 68,
        column: 8,
        span: 1590..1591,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 68,
        column: 11,
        span: 1592..1594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 68,
        column: 15,
        span: 1595..1598,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 68,
        column: 18,
        span: 1599..1601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 68,
        column: 20,
        span: 1602..1603,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 68,
        column: 21,
        span: 1603..1604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 68,
        column: 22,
        span: 1604..1605,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 68,
        column: 23,
        span: 1605..1606,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 68,
        column: 25,
        span: 1607..1608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 68,
        column: 27,
        span: 1609..1610,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 68,
        column: 28,
        span: 1610..1611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 68,
        column: 30,
        span: 1612..1613,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 68,
        column: 31,
        span: 1613..1614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 68,
        column: 32,
        span: 1614..1615,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 68,
        column: 33,
        span: 1615..1616,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 34,
        span: 1615..1617,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 68,
        column: 0,
        span: 1618..1621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 69,
        column: 7,
        span: 1622..1628,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 8,
        span: 1628..1629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 69,
        column: 12,
        span: 1629..1633,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 13,
        span: 1633..1634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 69,
        column: 17,
        span: 1634..1638,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 69,
        column: 18,
        span: 1638..1639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 69,
        column: 21,
        span: 1639..1642,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 22,
        span: 1642..1643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 69,
        column: 24,
        span: 1644..1645,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 25,
        span: 1645..1646,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 69,
        column: 28,
        span: 1647..1649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 69,
        column: 32,
        span: 1650..1653,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 33,
        span: 1653..1654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 71,
        column: 6,
        span: 1656..1661,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 7,
        span: 1661..1662,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 71,
        column: 10,
        span: 1662..1665,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 11,
        span: 1665..1666,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 76,
        column: 9,
        span: 1691..1699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oneless",
        ),
        line: 76,
        column: 17,
        span: 1700..1707,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 19,
        span: 1708..1709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 76,
        column: 20,
        span: 1709..1710,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
        column: 21,
        span: 1710..1711,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 76,
        column: 25,
        span: 1712..1715,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 26,
        span: 1715..1716,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 76,
        column: 33,
        span: 1717..1723,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 76,
        column: 37,
        span: 1724..1727,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 76,
        column: 0,
        span: 1728..1731,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 78,
        column: 9,
        span: 1733..1741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 78,
        column: 11,
        span: 1742..1743,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 13,
        span: 1744..1745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 78,
        column: 14,
        span: 1745..1746,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 15,
        span: 1746..1747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 78,
        column: 17,
        span: 1748..1749,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 18,
        span: 1749..1750,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 78,
        column: 22,
        span: 1751..1754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 23,
        span: 1754..1755,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 79,
        column: 8,
        span: 1758..1763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 79,
        column: 0,
        span: 1764..1765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 80,
        column: 9,
        span: 1768..1774,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 10,
        span: 1774..1775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 80,
        column: 13,
        span: 1775..1778,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 80,
        column: 16,
        span: 1779..1781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 80,
        column: 19,
        span: 1782..1784,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 80,
        column: 20,
        span: 1784..1785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 80,
        column: 23,
        span: 1785..1788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 24,
        span: 1788..1789,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 81,
        column: 5,
        span: 1812..1814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 81,
        column: 7,
        span: 1815..1816,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 81,
        column: 10,
        span: 1817..1819,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
        column: 12,
        span: 1819..1821,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 81,
        column: 0,
        span: 1822..1826,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 82,
        column: 10,
        span: 1831..1836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 82,
        column: 12,
        span: 1837..1838,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 82,
        column: 13,
        span: 1838..1839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 82,
        column: 15,
        span: 1840..1841,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 82,
        column: 16,
        span: 1841..1842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 82,
        column: 18,
        span: 1843..1844,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 82,
        column: 20,
        span: 1845..1846,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 82,
        column: 24,
        span: 1847..1850,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 83,
        column: 11,
        span: 1855..1861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 83,
        column: 13,
        span: 1862..1863,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 14,
        span: 1863..1864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 83,
        column: 16,
        span: 1865..1866,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 17,
        span: 1866..1867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 83,
        column: 19,
        span: 1868..1869,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 20,
        span: 1869..1870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 83,
        column: 22,
        span: 1871..1872,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 23,
        span: 1872..1873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oneless",
        ),
        line: 83,
        column: 31,
        span: 1874..1881,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 32,
        span: 1881..1882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oneless",
        ),
        line: 83,
        column: 39,
        span: 1882..1889,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 40,
        span: 1889..1890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oneless",
        ),
        line: 83,
        column: 47,
        span: 1890..1897,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 48,
        span: 1897..1898,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 83,
        column: 51,
        span: 1898..1901,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 52,
        span: 1901..1902,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 53,
        span: 1902..1903,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 54,
        span: 1903..1904,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 84,
        column: 0,
        span: 1907..1911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 85,
        column: 6,
        span: 1916..1917,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 7,
        span: 1917..1918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 85,
        column: 9,
        span: 1919..1920,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 10,
        span: 1920..1921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 85,
        column: 12,
        span: 1922..1923,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 85,
        column: 14,
        span: 1924..1925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 85,
        column: 16,
        span: 1926..1927,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 85,
        column: 17,
        span: 1927..1928,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 18,
        span: 1927..1929,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 19,
        span: 1929..1930,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 85,
        column: 23,
        span: 1931..1934,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 24,
        span: 1934..1935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 85,
        column: 0,
        span: 1936..1937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 86,
        column: 11,
        span: 1942..1948,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 12,
        span: 1948..1949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 86,
        column: 13,
        span: 1949..1950,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 86,
        column: 16,
        span: 1951..1953,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 86,
        column: 20,
        span: 1954..1957,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 21,
        span: 1957..1958,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 87,
        column: 11,
        span: 1963..1969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 87,
        column: 13,
        span: 1970..1971,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 14,
        span: 1971..1972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 87,
        column: 15,
        span: 1972..1973,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 87,
        column: 16,
        span: 1973..1974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 87,
        column: 18,
        span: 1975..1976,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 87,
        column: 19,
        span: 1976..1977,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 87,
        column: 23,
        span: 1978..1981,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 24,
        span: 1981..1982,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 88,
        column: 0,
        span: 1985..1988,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 89,
        column: 0,
        span: 1989..1992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 91,
        column: 2,
        span: 1994..1995,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 3,
        span: 1995..1996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 91,
        column: 4,
        span: 1996..1997,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 5,
        span: 1997..1998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 91,
        column: 6,
        span: 1998..1999,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 7,
        span: 1999..2000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 91,
        column: 8,
        span: 2000..2001,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 9,
        span: 2001..2002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 91,
        column: 10,
        span: 2002..2003,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 91,
        column: 12,
        span: 2004..2005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 91,
        column: 19,
        span: 2006..2012,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 20,
        span: 2012..2013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 91,
        column: 21,
        span: 2013..2014,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 22,
        span: 2014..2015,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 91,
        column: 24,
        span: 2014..2017,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 25,
        span: 2017..2018,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 91,
        column: 26,
        span: 2017..2019,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 27,
        span: 2019..2020,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 91,
        column: 28,
        span: 2019..2021,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 29,
        span: 2021..2022,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 91,
        column: 30,
        span: 2021..2023,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 31,
        span: 2023..2024,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 91,
        column: 32,
        span: 2023..2025,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 33,
        span: 2025..2026,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 91,
        column: 34,
        span: 2025..2027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 35,
        span: 2027..2028,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 36,
        span: 2028..2029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 92,
        column: 7,
        span: 2030..2036,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 8,
        span: 2036..2037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 92,
        column: 9,
        span: 2037..2038,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 92,
        column: 11,
        span: 2038..2040,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 12,
        span: 2039..2041,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 92,
        column: 16,
        span: 2042..2045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 92,
        column: 18,
        span: 2046..2047,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 92,
        column: 20,
        span: 2047..2049,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 21,
        span: 2048..2050,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 92,
        column: 25,
        span: 2051..2054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 92,
        column: 27,
        span: 2055..2056,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 92,
        column: 29,
        span: 2056..2058,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 30,
        span: 2057..2059,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 92,
        column: 34,
        span: 2060..2063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 92,
        column: 36,
        span: 2064..2065,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 92,
        column: 38,
        span: 2065..2067,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 39,
        span: 2066..2068,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 92,
        column: 43,
        span: 2069..2072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 92,
        column: 45,
        span: 2073..2074,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 92,
        column: 47,
        span: 2074..2076,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 48,
        span: 2075..2077,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 49,
        span: 2077..2078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 94,
        column: 2,
        span: 2080..2081,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 3,
        span: 2081..2082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 94,
        column: 4,
        span: 2082..2083,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 5,
        span: 2083..2084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 94,
        column: 6,
        span: 2084..2085,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 7,
        span: 2085..2086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 94,
        column: 8,
        span: 2086..2087,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 9,
        span: 2087..2088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 94,
        column: 10,
        span: 2088..2089,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 94,
        column: 12,
        span: 2090..2091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 94,
        column: 14,
        span: 2092..2093,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 15,
        span: 2093..2094,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 16,
        span: 2093..2095,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 17,
        span: 2095..2096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 95,
        column: 7,
        span: 2097..2103,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 8,
        span: 2103..2104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 95,
        column: 9,
        span: 2104..2105,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 95,
        column: 11,
        span: 2105..2107,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 95,
        column: 14,
        span: 2107..2110,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 95,
        column: 18,
        span: 2111..2114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 95,
        column: 20,
        span: 2115..2116,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 95,
        column: 22,
        span: 2116..2118,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 95,
        column: 25,
        span: 2118..2121,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 95,
        column: 29,
        span: 2122..2125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 95,
        column: 31,
        span: 2126..2127,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 95,
        column: 33,
        span: 2127..2129,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 95,
        column: 36,
        span: 2129..2132,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 95,
        column: 40,
        span: 2133..2136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 95,
        column: 42,
        span: 2137..2138,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 95,
        column: 44,
        span: 2138..2140,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 95,
        column: 47,
        span: 2140..2143,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 95,
        column: 51,
        span: 2144..2147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 95,
        column: 53,
        span: 2148..2149,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 95,
        column: 55,
        span: 2149..2151,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 95,
        column: 58,
        span: 2151..2154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 59,
        span: 2154..2155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 99,
        column: 2,
        span: 2185..2186,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 99,
        column: 4,
        span: 2187..2188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 99,
        column: 9,
        span: 2189..2193,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ return {...} ]]",
        ),
        line: 99,
        column: 27,
        span: 2193..2211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 100,
        column: 2,
        span: 2212..2213,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 100,
        column: 4,
        span: 2214..2215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 100,
        column: 6,
        span: 2216..2217,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 7,
        span: 2217..2218,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 8,
        span: 2217..2219,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
        column: 9,
        span: 2219..2220,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 10,
        span: 2219..2221,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 11,
        span: 2221..2222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 101,
        column: 7,
        span: 2223..2229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 8,
        span: 2229..2230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 101,
        column: 9,
        span: 2230..2231,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 101,
        column: 10,
        span: 2231..2232,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 11,
        span: 2231..2233,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 101,
        column: 12,
        span: 2233..2234,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 101,
        column: 15,
        span: 2235..2237,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 17,
        span: 2237..2239,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 101,
        column: 21,
        span: 2240..2243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 101,
        column: 23,
        span: 2244..2245,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 101,
        column: 24,
        span: 2245..2246,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 25,
        span: 2245..2247,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 101,
        column: 26,
        span: 2247..2248,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 101,
        column: 29,
        span: 2249..2251,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 31,
        span: 2251..2253,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 101,
        column: 35,
        span: 2254..2257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 101,
        column: 37,
        span: 2258..2259,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 101,
        column: 38,
        span: 2259..2260,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 39,
        span: 2259..2261,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 101,
        column: 40,
        span: 2261..2262,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 101,
        column: 43,
        span: 2263..2265,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 101,
        column: 47,
        span: 2266..2269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 48,
        span: 2269..2270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 104,
        column: 2,
        span: 2273..2274,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 104,
        column: 4,
        span: 2275..2276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 104,
        column: 9,
        span: 2277..2281,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  local x = {...}\n  for i=1,select('#', ...) do assert(x[i] == select(i, ...)) end\n  assert(x[select('#', ...)+1] == nil)\n  return true\n]]",
        ),
        line: 109,
        column: 3,
        span: 2281..2422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 111,
        column: 7,
        span: 2424..2430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 8,
        span: 2430..2431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 111,
        column: 9,
        span: 2431..2432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 10,
        span: 2432..2433,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 111,
        column: 13,
        span: 2433..2436,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 14,
        span: 2436..2437,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 111,
        column: 18,
        span: 2438..2441,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 19,
        span: 2441..2442,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 111,
        column: 23,
        span: 2443..2446,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 24,
        span: 2446..2447,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 111,
        column: 26,
        span: 2448..2449,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 111,
        column: 27,
        span: 2449..2450,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 28,
        span: 2450..2451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 111,
        column: 35,
        span: 2452..2458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 36,
        span: 2458..2459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 37,
        span: 2459..2460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 112,
        column: 7,
        span: 2461..2467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 8,
        span: 2467..2468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 112,
        column: 9,
        span: 2468..2469,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 10,
        span: 2469..2470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 11,
        span: 2470..2471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 12,
        span: 2471..2472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 114,
        column: 2,
        span: 2474..2475,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 114,
        column: 4,
        span: 2476..2477,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 114,
        column: 6,
        span: 2478..2479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 114,
        column: 12,
        span: 2479..2485,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 13,
        span: 2485..2486,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 14,
        span: 2485..2487,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 15,
        span: 2487..2488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 114,
        column: 21,
        span: 2489..2494,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 114,
        column: 22,
        span: 2494..2495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 114,
        column: 28,
        span: 2495..2501,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 114,
        column: 29,
        span: 2501..2502,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 31,
        span: 2501..2504,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 32,
        span: 2504..2505,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 34,
        span: 2504..2507,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 35,
        span: 2507..2508,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 37,
        span: 2507..2510,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 38,
        span: 2510..2511,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 40,
        span: 2510..2513,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 114,
        column: 41,
        span: 2513..2514,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 42,
        span: 2514..2515,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 114,
        column: 43,
        span: 2515..2516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 115,
        column: 7,
        span: 2517..2523,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 8,
        span: 2523..2524,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 115,
        column: 9,
        span: 2524..2525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 115,
        column: 10,
        span: 2525..2526,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 115,
        column: 13,
        span: 2527..2529,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 15,
        span: 2529..2531,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 115,
        column: 19,
        span: 2532..2535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 115,
        column: 21,
        span: 2536..2537,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 115,
        column: 22,
        span: 2537..2538,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 23,
        span: 2537..2539,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 115,
        column: 24,
        span: 2539..2540,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 115,
        column: 27,
        span: 2541..2543,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 30,
        span: 2543..2546,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 115,
        column: 34,
        span: 2547..2550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 115,
        column: 36,
        span: 2551..2552,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 115,
        column: 37,
        span: 2552..2553,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 38,
        span: 2552..2554,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 115,
        column: 39,
        span: 2554..2555,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 115,
        column: 42,
        span: 2556..2558,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 45,
        span: 2558..2561,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 46,
        span: 2561..2562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 116,
        column: 2,
        span: 2563..2564,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 116,
        column: 4,
        span: 2565..2566,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 116,
        column: 6,
        span: 2567..2568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 116,
        column: 12,
        span: 2568..2574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 13,
        span: 2574..2575,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 116,
        column: 14,
        span: 2574..2576,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 15,
        span: 2576..2577,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 116,
        column: 16,
        span: 2577..2578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 117,
        column: 7,
        span: 2579..2585,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 8,
        span: 2585..2586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 117,
        column: 12,
        span: 2586..2590,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 13,
        span: 2590..2591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 117,
        column: 14,
        span: 2591..2592,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 15,
        span: 2592..2593,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 117,
        column: 18,
        span: 2594..2596,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 117,
        column: 22,
        span: 2597..2600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 23,
        span: 2600..2601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 118,
        column: 2,
        span: 2602..2603,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 118,
        column: 4,
        span: 2604..2605,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 118,
        column: 6,
        span: 2606..2607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 118,
        column: 12,
        span: 2607..2613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 13,
        span: 2613..2614,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 118,
        column: 14,
        span: 2614..2615,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 15,
        span: 2614..2616,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 16,
        span: 2616..2617,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 18,
        span: 2617..2619,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 19,
        span: 2619..2620,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 21,
        span: 2620..2622,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 22,
        span: 2622..2623,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 24,
        span: 2623..2625,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 25,
        span: 2625..2626,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 118,
        column: 26,
        span: 2626..2627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 119,
        column: 7,
        span: 2628..2634,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 8,
        span: 2634..2635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 119,
        column: 9,
        span: 2635..2636,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 119,
        column: 10,
        span: 2636..2637,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 11,
        span: 2636..2638,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 119,
        column: 12,
        span: 2638..2639,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 119,
        column: 15,
        span: 2640..2642,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 17,
        span: 2642..2644,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 119,
        column: 21,
        span: 2645..2648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 119,
        column: 23,
        span: 2649..2650,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 119,
        column: 24,
        span: 2650..2651,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 25,
        span: 2650..2652,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 119,
        column: 26,
        span: 2652..2653,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 119,
        column: 29,
        span: 2654..2656,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 119,
        column: 33,
        span: 2657..2660,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 34,
        span: 2660..2661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 120,
        column: 2,
        span: 2662..2663,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 120,
        column: 4,
        span: 2664..2665,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 120,
        column: 6,
        span: 2666..2667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 120,
        column: 12,
        span: 2667..2673,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 13,
        span: 2673..2674,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 120,
        column: 14,
        span: 2674..2675,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 15,
        span: 2674..2676,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 16,
        span: 2676..2677,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 18,
        span: 2677..2679,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 19,
        span: 2679..2680,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 21,
        span: 2680..2682,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 22,
        span: 2682..2683,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 24,
        span: 2683..2685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 25,
        span: 2685..2686,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 120,
        column: 26,
        span: 2686..2687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 121,
        column: 7,
        span: 2688..2694,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 8,
        span: 2694..2695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 121,
        column: 9,
        span: 2695..2696,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 121,
        column: 10,
        span: 2696..2697,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 11,
        span: 2696..2698,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 121,
        column: 12,
        span: 2698..2699,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 121,
        column: 15,
        span: 2700..2702,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 17,
        span: 2702..2704,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 121,
        column: 21,
        span: 2705..2708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 121,
        column: 23,
        span: 2709..2710,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 121,
        column: 24,
        span: 2710..2711,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 25,
        span: 2710..2712,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 121,
        column: 26,
        span: 2712..2713,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 121,
        column: 29,
        span: 2714..2716,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 31,
        span: 2716..2718,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 121,
        column: 35,
        span: 2719..2722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 121,
        column: 37,
        span: 2723..2724,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 121,
        column: 38,
        span: 2724..2725,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 39,
        span: 2724..2726,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 121,
        column: 40,
        span: 2726..2727,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 121,
        column: 43,
        span: 2728..2730,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 121,
        column: 47,
        span: 2731..2734,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 48,
        span: 2734..2735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 122,
        column: 6,
        span: 2736..2741,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 7,
        span: 2741..2742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 122,
        column: 13,
        span: 2742..2748,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 14,
        span: 2748..2749,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 20,
        span: 2749..2755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 21,
        span: 2755..2756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 123,
        column: 6,
        span: 2757..2762,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 7,
        span: 2762..2763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 123,
        column: 13,
        span: 2763..2769,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 14,
        span: 2769..2770,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 123,
        column: 16,
        span: 2771..2772,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 123,
        column: 21,
        span: 2771..2777,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 22,
        span: 2777..2778,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 128,
        column: 9,
        span: 2798..2806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 128,
        column: 11,
        span: 2807..2808,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 12,
        span: 2808..2809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p1",
        ),
        line: 128,
        column: 14,
        span: 2809..2811,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 15,
        span: 2811..2812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p2",
        ),
        line: 128,
        column: 18,
        span: 2813..2815,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 19,
        span: 2815..2816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p3",
        ),
        line: 128,
        column: 22,
        span: 2817..2819,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 23,
        span: 2819..2820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p4",
        ),
        line: 128,
        column: 26,
        span: 2821..2823,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 27,
        span: 2823..2824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p5",
        ),
        line: 128,
        column: 30,
        span: 2825..2827,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 31,
        span: 2827..2828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p6",
        ),
        line: 128,
        column: 34,
        span: 2829..2831,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 35,
        span: 2831..2832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p7",
        ),
        line: 128,
        column: 38,
        span: 2833..2835,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 39,
        span: 2835..2836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p8",
        ),
        line: 128,
        column: 42,
        span: 2837..2839,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 43,
        span: 2839..2840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p9",
        ),
        line: 128,
        column: 46,
        span: 2841..2843,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 47,
        span: 2843..2844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p10",
        ),
        line: 128,
        column: 51,
        span: 2845..2848,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 52,
        span: 2848..2849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p11",
        ),
        line: 129,
        column: 4,
        span: 2850..2853,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 5,
        span: 2853..2854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p12",
        ),
        line: 129,
        column: 9,
        span: 2855..2858,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 10,
        span: 2858..2859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p13",
        ),
        line: 129,
        column: 14,
        span: 2860..2863,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 15,
        span: 2863..2864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p14",
        ),
        line: 129,
        column: 19,
        span: 2865..2868,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 20,
        span: 2868..2869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p15",
        ),
        line: 129,
        column: 24,
        span: 2870..2873,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 25,
        span: 2873..2874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p16",
        ),
        line: 129,
        column: 29,
        span: 2875..2878,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 30,
        span: 2878..2879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p17",
        ),
        line: 129,
        column: 34,
        span: 2880..2883,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 35,
        span: 2883..2884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p18",
        ),
        line: 129,
        column: 39,
        span: 2885..2888,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 40,
        span: 2888..2889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p19",
        ),
        line: 129,
        column: 44,
        span: 2890..2893,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 45,
        span: 2893..2894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p20",
        ),
        line: 129,
        column: 49,
        span: 2895..2898,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 50,
        span: 2898..2899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p21",
        ),
        line: 130,
        column: 4,
        span: 2900..2903,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 5,
        span: 2903..2904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p22",
        ),
        line: 130,
        column: 9,
        span: 2905..2908,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 10,
        span: 2908..2909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p23",
        ),
        line: 130,
        column: 14,
        span: 2910..2913,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 15,
        span: 2913..2914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p24",
        ),
        line: 130,
        column: 19,
        span: 2915..2918,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 20,
        span: 2918..2919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p25",
        ),
        line: 130,
        column: 24,
        span: 2920..2923,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 25,
        span: 2923..2924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p26",
        ),
        line: 130,
        column: 29,
        span: 2925..2928,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 30,
        span: 2928..2929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p27",
        ),
        line: 130,
        column: 34,
        span: 2930..2933,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 35,
        span: 2933..2934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p28",
        ),
        line: 130,
        column: 39,
        span: 2935..2938,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 40,
        span: 2938..2939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p29",
        ),
        line: 130,
        column: 44,
        span: 2940..2943,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 45,
        span: 2943..2944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p30",
        ),
        line: 130,
        column: 49,
        span: 2945..2948,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 50,
        span: 2948..2949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p31",
        ),
        line: 131,
        column: 4,
        span: 2950..2953,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 5,
        span: 2953..2954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p32",
        ),
        line: 131,
        column: 9,
        span: 2955..2958,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 10,
        span: 2958..2959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p33",
        ),
        line: 131,
        column: 14,
        span: 2960..2963,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 15,
        span: 2963..2964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p34",
        ),
        line: 131,
        column: 19,
        span: 2965..2968,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 20,
        span: 2968..2969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p35",
        ),
        line: 131,
        column: 24,
        span: 2970..2973,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 25,
        span: 2973..2974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p36",
        ),
        line: 131,
        column: 29,
        span: 2975..2978,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 30,
        span: 2978..2979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p37",
        ),
        line: 131,
        column: 34,
        span: 2980..2983,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 35,
        span: 2983..2984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p38",
        ),
        line: 131,
        column: 39,
        span: 2985..2988,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 40,
        span: 2988..2989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p39",
        ),
        line: 131,
        column: 44,
        span: 2990..2993,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 45,
        span: 2993..2994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p40",
        ),
        line: 131,
        column: 49,
        span: 2995..2998,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 50,
        span: 2998..2999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p41",
        ),
        line: 132,
        column: 4,
        span: 3000..3003,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 5,
        span: 3003..3004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p42",
        ),
        line: 132,
        column: 9,
        span: 3005..3008,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 10,
        span: 3008..3009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p43",
        ),
        line: 132,
        column: 14,
        span: 3010..3013,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 15,
        span: 3013..3014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p44",
        ),
        line: 132,
        column: 19,
        span: 3015..3018,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 20,
        span: 3018..3019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p45",
        ),
        line: 132,
        column: 24,
        span: 3020..3023,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 25,
        span: 3023..3024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p46",
        ),
        line: 132,
        column: 29,
        span: 3025..3028,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 30,
        span: 3028..3029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p48",
        ),
        line: 132,
        column: 34,
        span: 3030..3033,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 35,
        span: 3033..3034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p49",
        ),
        line: 132,
        column: 39,
        span: 3035..3038,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 40,
        span: 3038..3039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p50",
        ),
        line: 132,
        column: 44,
        span: 3040..3043,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 45,
        span: 3043..3044,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 132,
        column: 49,
        span: 3045..3048,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 50,
        span: 3048..3049,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 133,
        column: 8,
        span: 3052..3057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 133,
        column: 11,
        span: 3058..3060,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 12,
        span: 3060..3061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a2",
        ),
        line: 133,
        column: 14,
        span: 3061..3063,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 15,
        span: 3063..3064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        line: 133,
        column: 17,
        span: 3064..3066,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 18,
        span: 3066..3067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        line: 133,
        column: 20,
        span: 3067..3069,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 21,
        span: 3069..3070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a5",
        ),
        line: 133,
        column: 23,
        span: 3070..3072,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 24,
        span: 3072..3073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a6",
        ),
        line: 133,
        column: 26,
        span: 3073..3075,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 27,
        span: 3075..3076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a7",
        ),
        line: 133,
        column: 0,
        span: 3076..3078,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 134,
        column: 8,
        span: 3081..3086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a8",
        ),
        line: 134,
        column: 11,
        span: 3087..3089,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 12,
        span: 3089..3090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a9",
        ),
        line: 134,
        column: 14,
        span: 3090..3092,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 15,
        span: 3092..3093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a10",
        ),
        line: 134,
        column: 18,
        span: 3093..3096,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 19,
        span: 3096..3097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a11",
        ),
        line: 134,
        column: 22,
        span: 3097..3100,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 23,
        span: 3100..3101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a12",
        ),
        line: 134,
        column: 26,
        span: 3101..3104,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 27,
        span: 3104..3105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a13",
        ),
        line: 134,
        column: 30,
        span: 3105..3108,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 31,
        span: 3108..3109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a14",
        ),
        line: 134,
        column: 0,
        span: 3109..3112,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 135,
        column: 0,
        span: 3113..3116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 138,
        column: 2,
        span: 3141..3142,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 3,
        span: 3142..3143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 4,
        span: 3143..3144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 141,
        column: 6,
        span: 3147..3152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 7,
        span: 3152..3153,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 141,
        column: 11,
        span: 3153..3157,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 12,
        span: 3157..3158,
    },
]
