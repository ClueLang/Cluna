---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/db.lua
---
[
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 6,
        span: 123..128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 6,
        column: 12,
        span: 129..134,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 14,
        span: 135..136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 6,
        column: 22,
        span: 137..144,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        line: 6,
        column: 30,
        span: 145..152,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 8,
        column: 6,
        span: 154..159,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 8,
        column: 15,
        span: 160..168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 8,
        column: 24,
        span: 169..177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 25,
        span: 177..178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 8,
        column: 26,
        span: 178..179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 27,
        span: 179..180,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 8,
        column: 34,
        span: 181..187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 8,
        column: 41,
        span: 188..194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 42,
        span: 194..195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 8,
        column: 46,
        span: 195..199,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 47,
        span: 199..200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 8,
        column: 48,
        span: 200..201,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 49,
        span: 201..202,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 50,
        span: 202..203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 51,
        span: 203..204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 52,
        span: 204..205,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 8,
        column: 0,
        span: 206..209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 10,
        column: 6,
        span: 211..216,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing debug library and debug information\"",
        ),
        line: 10,
        column: 51,
        span: 216..261,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 12,
        column: 0,
        span: 263..265,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 13,
        column: 6,
        span: 266..271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 13,
        column: 8,
        span: 272..273,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 13,
        column: 9,
        span: 273..274,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 13,
        column: 0,
        span: 273..275,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 14,
        column: 0,
        span: 276..279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 16,
        column: 7,
        span: 281..287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 8,
        span: 287..288,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 16,
        column: 11,
        span: 288..291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 16,
        column: 17,
        span: 292..297,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 16,
        column: 18,
        span: 297..298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 16,
        column: 25,
        span: 298..305,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 26,
        span: 305..306,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 27,
        span: 306..307,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 28,
        span: 307..308,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 18,
        column: 6,
        span: 310..315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testline",
        ),
        line: 18,
        column: 15,
        span: 316..324,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 18,
        column: 17,
        span: 325..326,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        line: 18,
        column: 20,
        span: 326..329,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 19,
        column: 9,
        span: 370..378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 19,
        column: 14,
        span: 379..383,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 16,
        span: 384..385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 19,
        column: 17,
        span: 385..386,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
        column: 18,
        span: 386..387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 19,
        column: 20,
        span: 388..389,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
        column: 21,
        span: 389..390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 19,
        column: 23,
        span: 391..392,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 24,
        span: 392..393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 20,
        column: 17,
        span: 424..438,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 18,
        span: 438..439,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 19,
        span: 439..440,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 21,
        column: 8,
        span: 470..475,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 21,
        column: 17,
        span: 476..484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 21,
        column: 19,
        span: 485..486,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 21,
        span: 487..488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "event",
        ),
        line: 21,
        column: 26,
        span: 488..493,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 27,
        span: 493..494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 21,
        column: 32,
        span: 495..499,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 33,
        span: 499..500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 22,
        column: 11,
        span: 505..511,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 12,
        span: 511..512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "event",
        ),
        line: 22,
        column: 17,
        span: 512..517,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 22,
        column: 20,
        span: 518..520,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'line'",
        ),
        line: 22,
        column: 27,
        span: 521..527,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 28,
        span: 527..528,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 23,
        column: 10,
        span: 533..538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 23,
        column: 12,
        span: 539..540,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 23,
        column: 14,
        span: 541..542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 23,
        column: 20,
        span: 543..548,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 23,
        column: 21,
        span: 548..549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 23,
        column: 27,
        span: 549..555,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 28,
        span: 555..556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 23,
        column: 29,
        span: 556..557,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 23,
        column: 30,
        span: 557..558,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 23,
        column: 32,
        span: 558..560,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 33,
        span: 560..561,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 24,
        column: 7,
        span: 566..568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 24,
        column: 9,
        span: 569..570,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 24,
        column: 14,
        span: 571..575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 24,
        column: 20,
        span: 576..581,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 21,
        span: 581..582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 24,
        column: 22,
        span: 582..583,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 24,
        column: 23,
        span: 583..584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 24,
        column: 28,
        span: 585..589,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 29,
        span: 589..590,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 24,
        column: 0,
        span: 591..594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 25,
        column: 11,
        span: 599..605,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 12,
        span: 605..606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 25,
        column: 13,
        span: 606..607,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 25,
        column: 16,
        span: 608..610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 25,
        column: 21,
        span: 611..615,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 22,
        span: 615..616,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"wrong trace!!\"",
        ),
        line: 25,
        column: 38,
        span: 617..632,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 39,
        span: 632..633,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 26,
        column: 0,
        span: 636..639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 27,
        column: 8,
        span: 642..647,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 27,
        column: 9,
        span: 647..648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 27,
        column: 16,
        span: 648..655,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 17,
        span: 655..656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 27,
        column: 18,
        span: 656..657,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
        column: 19,
        span: 657..658,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 27,
        column: 22,
        span: 658..661,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 23,
        span: 661..662,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 27,
        column: 24,
        span: 662..663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 27,
        column: 29,
        span: 664..668,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 30,
        span: 668..669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 27,
        column: 31,
        span: 669..670,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 32,
        span: 670..671,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 33,
        span: 671..672,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 34,
        span: 672..673,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 27,
        column: 35,
        span: 673..674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 27,
        column: 41,
        span: 675..680,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 27,
        column: 42,
        span: 680..681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 27,
        column: 49,
        span: 681..688,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 50,
        span: 688..689,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 51,
        span: 689..690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 28,
        column: 9,
        span: 693..699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 10,
        span: 699..700,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 28,
        column: 11,
        span: 700..701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 28,
        column: 12,
        span: 701..702,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 28,
        column: 15,
        span: 703..705,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 17,
        span: 705..707,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 18,
        span: 707..708,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 29,
        column: 0,
        span: 709..712,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 32,
        column: 0,
        span: 715..717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 33,
        column: 9,
        span: 720..726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 10,
        span: 726..727,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 33,
        column: 13,
        span: 727..730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 33,
        column: 19,
        span: 731..736,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 20,
        span: 736..737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 33,
        column: 25,
        span: 737..742,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 33,
        column: 26,
        span: 742..743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 33,
        column: 33,
        span: 743..750,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 34,
        span: 750..751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 33,
        column: 40,
        span: 752..757,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 41,
        span: 757..758,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        line: 33,
        column: 45,
        span: 759..762,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 46,
        span: 762..763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 47,
        span: 763..764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 34,
        column: 9,
        span: 787..793,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 10,
        span: 793..794,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 34,
        column: 13,
        span: 794..797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 34,
        column: 19,
        span: 798..803,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 34,
        column: 20,
        span: 803..804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 34,
        column: 27,
        span: 804..811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 28,
        span: 811..812,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 32,
        span: 811..816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 33,
        span: 816..817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 34,
        span: 817..818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
        column: 9,
        span: 845..851,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 10,
        span: 851..852,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 35,
        column: 13,
        span: 852..855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 35,
        column: 19,
        span: 856..861,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 35,
        column: 20,
        span: 861..862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 35,
        column: 27,
        span: 862..869,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 28,
        span: 869..870,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 35,
        column: 29,
        span: 870..871,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 30,
        span: 870..872,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 31,
        span: 872..873,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 32,
        span: 873..874,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 36,
        column: 8,
        span: 903..908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 36,
        column: 10,
        span: 909..910,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 36,
        column: 12,
        span: 911..912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 36,
        column: 18,
        span: 913..918,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 36,
        column: 19,
        span: 918..919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 36,
        column: 26,
        span: 919..926,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 27,
        span: 926..927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 36,
        column: 32,
        span: 927..932,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 33,
        span: 932..933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 37,
        column: 9,
        span: 936..942,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 10,
        span: 942..943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 37,
        column: 11,
        span: 943..944,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 37,
        column: 12,
        span: 944..945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        line: 37,
        column: 16,
        span: 945..949,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 37,
        column: 19,
        span: 950..952,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 37,
        column: 23,
        span: 953..956,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 37,
        column: 27,
        span: 957..960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 37,
        column: 29,
        span: 961..962,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 37,
        column: 30,
        span: 962..963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 37,
        column: 39,
        span: 963..972,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 37,
        column: 42,
        span: 973..975,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[C]\"",
        ),
        line: 37,
        column: 48,
        span: 976..981,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 49,
        span: 981..982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
        column: 4,
        span: 985..986,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 38,
        column: 6,
        span: 987..988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 38,
        column: 12,
        span: 989..994,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 13,
        span: 994..995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 38,
        column: 20,
        span: 995..1002,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 21,
        span: 1002..1003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 38,
        column: 26,
        span: 1003..1008,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 27,
        span: 1008..1009,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        line: 38,
        column: 31,
        span: 1010..1013,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 32,
        span: 1013..1014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 39,
        column: 9,
        span: 1017..1023,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 10,
        span: 1023..1024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 39,
        column: 11,
        span: 1024..1025,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
        column: 12,
        span: 1025..1026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 39,
        column: 23,
        span: 1026..1037,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 39,
        column: 26,
        span: 1038..1040,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 39,
        column: 30,
        span: 1041..1044,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 31,
        span: 1044..1045,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 40,
        column: 8,
        span: 1048..1053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 40,
        column: 10,
        span: 1054..1055,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 40,
        column: 12,
        span: 1056..1057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 40,
        column: 18,
        span: 1058..1063,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 40,
        column: 19,
        span: 1063..1064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 40,
        column: 26,
        span: 1064..1071,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 27,
        span: 1071..1072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 40,
        column: 31,
        span: 1072..1076,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 32,
        span: 1076..1077,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"SfL\"",
        ),
        line: 40,
        column: 38,
        span: 1078..1083,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 39,
        span: 1083..1084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 41,
        column: 9,
        span: 1087..1093,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 10,
        span: 1093..1094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 41,
        column: 11,
        span: 1094..1095,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
        column: 12,
        span: 1095..1096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 41,
        column: 16,
        span: 1096..1100,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 19,
        span: 1101..1103,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 41,
        column: 23,
        span: 1104..1107,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 41,
        column: 27,
        span: 1108..1111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 41,
        column: 29,
        span: 1112..1113,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
        column: 30,
        span: 1113..1114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        line: 41,
        column: 34,
        span: 1114..1118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 37,
        span: 1119..1121,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua\"",
        ),
        line: 41,
        column: 43,
        span: 1122..1127,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 41,
        column: 47,
        span: 1128..1131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 41,
        column: 49,
        span: 1132..1133,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
        column: 50,
        span: 1133..1134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        line: 41,
        column: 61,
        span: 1134..1145,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 64,
        span: 1146..1148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testline",
        ),
        line: 41,
        column: 73,
        span: 1149..1157,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 41,
        column: 0,
        span: 1158..1161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 42,
        column: 11,
        span: 1171..1172,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 42,
        column: 12,
        span: 1172..1173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastlinedefined",
        ),
        line: 42,
        column: 27,
        span: 1173..1188,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 42,
        column: 30,
        span: 1189..1191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 42,
        column: 32,
        span: 1192..1193,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 42,
        column: 33,
        span: 1193..1194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        line: 42,
        column: 44,
        span: 1194..1205,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 42,
        column: 46,
        span: 1206..1207,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 42,
        column: 49,
        span: 1207..1210,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 42,
        column: 0,
        span: 1211..1214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 43,
        column: 11,
        span: 1224..1225,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 43,
        column: 12,
        span: 1225..1226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 43,
        column: 16,
        span: 1226..1230,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 43,
        column: 19,
        span: 1231..1233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 43,
        column: 24,
        span: 1234..1238,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 43,
        column: 28,
        span: 1239..1242,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 43,
        column: 32,
        span: 1243..1246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 43,
        column: 39,
        span: 1247..1253,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 43,
        column: 40,
        span: 1253..1254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 43,
        column: 44,
        span: 1254..1258,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 45,
        span: 1258..1259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 43,
        column: 46,
        span: 1259..1260,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 43,
        column: 47,
        span: 1260..1261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 43,
        column: 56,
        span: 1261..1270,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 57,
        span: 1270..1271,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%[\"",
        ),
        line: 43,
        column: 62,
        span: 1272..1276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 63,
        span: 1276..1277,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 64,
        span: 1277..1278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 44,
        column: 9,
        span: 1281..1287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 10,
        span: 1287..1288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 44,
        column: 11,
        span: 1288..1289,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
        column: 12,
        span: 1289..1290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 44,
        column: 23,
        span: 1290..1301,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 44,
        column: 24,
        span: 1301..1302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 44,
        column: 25,
        span: 1302..1303,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
        column: 26,
        span: 1303..1304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        line: 44,
        column: 37,
        span: 1304..1315,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 44,
        column: 39,
        span: 1316..1317,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 44,
        column: 41,
        span: 1317..1319,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 44,
        column: 42,
        span: 1319..1320,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 44,
        column: 0,
        span: 1321..1324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 45,
        column: 11,
        span: 1334..1335,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
        column: 12,
        span: 1335..1336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 45,
        column: 23,
        span: 1336..1347,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 45,
        column: 24,
        span: 1347..1348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 45,
        column: 25,
        span: 1348..1349,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
        column: 26,
        span: 1349..1350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastlinedefined",
        ),
        line: 45,
        column: 41,
        span: 1350..1365,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 45,
        column: 42,
        span: 1365..1366,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 43,
        span: 1366..1367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 46,
        column: 9,
        span: 1370..1376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 10,
        span: 1376..1377,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 46,
        column: 13,
        span: 1377..1380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 46,
        column: 15,
        span: 1381..1382,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 46,
        column: 16,
        span: 1382..1383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 46,
        column: 27,
        span: 1383..1394,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 46,
        column: 28,
        span: 1394..1395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 46,
        column: 29,
        span: 1395..1396,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 46,
        column: 30,
        span: 1396..1397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        line: 46,
        column: 41,
        span: 1397..1408,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 46,
        column: 42,
        span: 1408..1409,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 46,
        column: 0,
        span: 1410..1413,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 47,
        column: 13,
        span: 1423..1426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 47,
        column: 15,
        span: 1427..1428,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 47,
        column: 16,
        span: 1428..1429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 47,
        column: 27,
        span: 1429..1440,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 47,
        column: 28,
        span: 1440..1441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 47,
        column: 29,
        span: 1441..1442,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 47,
        column: 30,
        span: 1442..1443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastlinedefined",
        ),
        line: 47,
        column: 45,
        span: 1443..1458,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 47,
        column: 47,
        span: 1459..1460,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 47,
        column: 49,
        span: 1460..1462,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 47,
        column: 50,
        span: 1462..1463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 51,
        span: 1463..1464,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 48,
        column: 0,
        span: 1465..1468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 52,
        column: 2,
        span: 1512..1513,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 52,
        column: 4,
        span: 1514..1515,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function f () end\"",
        ),
        line: 52,
        column: 24,
        span: 1516..1535,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 53,
        column: 6,
        span: 1536..1541,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 53,
        column: 15,
        span: 1542..1550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 53,
        column: 24,
        span: 1551..1559,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 26,
        span: 1560..1561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 53,
        column: 27,
        span: 1561..1562,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 28,
        span: 1562..1563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 53,
        column: 30,
        span: 1564..1565,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 31,
        span: 1565..1566,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 53,
        column: 38,
        span: 1567..1573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 53,
        column: 43,
        span: 1574..1578,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 44,
        span: 1578..1579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 53,
        column: 45,
        span: 1579..1580,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 46,
        span: 1580..1581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 53,
        column: 48,
        span: 1582..1583,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 49,
        span: 1583..1584,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 50,
        span: 1584..1585,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 51,
        span: 1585..1586,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 53,
        column: 0,
        span: 1587..1590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 54,
        column: 9,
        span: 1591..1599,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 10,
        span: 1599..1600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 54,
        column: 11,
        span: 1600..1601,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 12,
        span: 1601..1602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 55,
        column: 7,
        span: 1603..1609,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 8,
        span: 1609..1610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 55,
        column: 13,
        span: 1610..1615,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 55,
        column: 14,
        span: 1615..1616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 55,
        column: 21,
        span: 1616..1623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 22,
        span: 1623..1624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 55,
        column: 23,
        span: 1624..1625,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 24,
        span: 1625..1626,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 55,
        column: 25,
        span: 1626..1627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 55,
        column: 34,
        span: 1627..1636,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 55,
        column: 37,
        span: 1637..1639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 55,
        column: 44,
        span: 1640..1646,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 55,
        column: 45,
        span: 1646..1647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 55,
        column: 51,
        span: 1647..1653,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 52,
        span: 1653..1654,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[string \"%s\"]'",
        ),
        line: 55,
        column: 67,
        span: 1654..1669,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 55,
        column: 68,
        span: 1669..1670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 55,
        column: 70,
        span: 1671..1672,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 71,
        span: 1672..1673,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 72,
        span: 1673..1674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 56,
        column: 9,
        span: 1675..1683,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 10,
        span: 1683..1684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 56,
        column: 11,
        span: 1684..1685,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 56,
        column: 13,
        span: 1685..1687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 56,
        column: 19,
        span: 1687..1693,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 56,
        column: 20,
        span: 1693..1694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 56,
        column: 26,
        span: 1694..1700,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 27,
        span: 1700..1701,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; %s\\n=1\"",
        ),
        line: 56,
        column: 37,
        span: 1701..1711,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 38,
        span: 1711..1712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 56,
        column: 45,
        span: 1713..1719,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 56,
        column: 46,
        span: 1719..1720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 56,
        column: 49,
        span: 1720..1723,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 50,
        span: 1723..1724,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'p'",
        ),
        line: 56,
        column: 53,
        span: 1724..1727,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 54,
        span: 1727..1728,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "400",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 58,
        span: 1728..1732,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 59,
        span: 1732..1733,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 60,
        span: 1733..1734,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 61,
        span: 1734..1735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 57,
        column: 7,
        span: 1736..1742,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 8,
        span: 1742..1743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 57,
        column: 14,
        span: 1743..1749,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 57,
        column: 15,
        span: 1749..1750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 57,
        column: 19,
        span: 1750..1754,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 20,
        span: 1754..1755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 57,
        column: 25,
        span: 1755..1760,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 57,
        column: 26,
        span: 1760..1761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 57,
        column: 33,
        span: 1761..1768,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 34,
        span: 1768..1769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 57,
        column: 35,
        span: 1769..1770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 36,
        span: 1770..1771,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 57,
        column: 37,
        span: 1771..1772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 57,
        column: 46,
        span: 1772..1781,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 57,
        column: 47,
        span: 1781..1782,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^%[string [^\\n]*%.%.%.\"%]$'",
        ),
        line: 57,
        column: 76,
        span: 1783..1811,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 77,
        span: 1811..1812,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 78,
        span: 1812..1813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 58,
        column: 9,
        span: 1814..1822,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 10,
        span: 1822..1823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 58,
        column: 11,
        span: 1823..1824,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 58,
        column: 13,
        span: 1824..1826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 58,
        column: 19,
        span: 1826..1832,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
        column: 20,
        span: 1832..1833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 58,
        column: 26,
        span: 1833..1839,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 27,
        span: 1839..1840,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; %s=1\"",
        ),
        line: 58,
        column: 35,
        span: 1840..1848,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 36,
        span: 1848..1849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 58,
        column: 43,
        span: 1850..1856,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
        column: 44,
        span: 1856..1857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 58,
        column: 47,
        span: 1857..1860,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 48,
        span: 1860..1861,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'p'",
        ),
        line: 58,
        column: 51,
        span: 1861..1864,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 52,
        span: 1864..1865,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "400",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 56,
        span: 1865..1869,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 57,
        span: 1869..1870,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 58,
        span: 1870..1871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 59,
        span: 1871..1872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 59,
        column: 7,
        span: 1873..1879,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 8,
        span: 1879..1880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 59,
        column: 14,
        span: 1880..1886,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
        column: 15,
        span: 1886..1887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 59,
        column: 19,
        span: 1887..1891,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 20,
        span: 1891..1892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 59,
        column: 25,
        span: 1892..1897,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
        column: 26,
        span: 1897..1898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 59,
        column: 33,
        span: 1898..1905,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 34,
        span: 1905..1906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 59,
        column: 35,
        span: 1906..1907,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 36,
        span: 1907..1908,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
        column: 37,
        span: 1908..1909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 59,
        column: 46,
        span: 1909..1918,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 47,
        span: 1918..1919,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^%[string [^\\n]*%.%.%.\"%]$'",
        ),
        line: 59,
        column: 76,
        span: 1920..1948,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 77,
        span: 1948..1949,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 78,
        span: 1949..1950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 60,
        column: 9,
        span: 1951..1959,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 10,
        span: 1959..1960,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 60,
        column: 14,
        span: 1960..1964,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 60,
        column: 16,
        span: 1964..1966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 60,
        column: 17,
        span: 1966..1967,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 18,
        span: 1967..1968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 61,
        column: 7,
        span: 1969..1975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 8,
        span: 1975..1976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 61,
        column: 13,
        span: 1976..1981,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
        column: 14,
        span: 1981..1982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 61,
        column: 21,
        span: 1982..1989,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 22,
        span: 1989..1990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 61,
        column: 23,
        span: 1990..1991,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 24,
        span: 1991..1992,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
        column: 25,
        span: 1992..1993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 61,
        column: 34,
        span: 1993..2002,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 61,
        column: 37,
        span: 2003..2005,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[string \"...\"]'",
        ),
        line: 61,
        column: 54,
        span: 2006..2022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 55,
        span: 2022..2023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 62,
        column: 9,
        span: 2024..2032,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 10,
        span: 2032..2033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 62,
        column: 11,
        span: 2033..2034,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 62,
        column: 12,
        span: 2034..2035,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 62,
        column: 15,
        span: 2036..2038,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 16,
        span: 2038..2039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 63,
        column: 7,
        span: 2040..2046,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 8,
        span: 2046..2047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 63,
        column: 13,
        span: 2047..2052,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 63,
        column: 14,
        span: 2052..2053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 63,
        column: 21,
        span: 2053..2060,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 22,
        span: 2060..2061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 63,
        column: 23,
        span: 2061..2062,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 24,
        span: 2062..2063,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 63,
        column: 25,
        span: 2063..2064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 63,
        column: 34,
        span: 2064..2073,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 63,
        column: 37,
        span: 2074..2076,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[string \"\"]'",
        ),
        line: 63,
        column: 51,
        span: 2077..2090,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 52,
        span: 2090..2091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 64,
        column: 9,
        span: 2092..2100,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 10,
        span: 2100..2101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 64,
        column: 11,
        span: 2101..2102,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 12,
        span: 2102..2103,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@xuxu\"",
        ),
        line: 64,
        column: 20,
        span: 2104..2111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 21,
        span: 2111..2112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 65,
        column: 7,
        span: 2113..2119,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 8,
        span: 2119..2120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 65,
        column: 13,
        span: 2120..2125,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 65,
        column: 14,
        span: 2125..2126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 65,
        column: 21,
        span: 2126..2133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 22,
        span: 2133..2134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 65,
        column: 23,
        span: 2134..2135,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 24,
        span: 2135..2136,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 65,
        column: 25,
        span: 2136..2137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 65,
        column: 34,
        span: 2137..2146,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 65,
        column: 37,
        span: 2147..2149,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 65,
        column: 44,
        span: 2150..2156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 45,
        span: 2156..2157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 66,
        column: 9,
        span: 2158..2166,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 10,
        span: 2166..2167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 66,
        column: 11,
        span: 2167..2168,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 12,
        span: 2168..2169,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@\"",
        ),
        line: 66,
        column: 16,
        span: 2170..2173,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 66,
        column: 18,
        span: 2173..2175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 66,
        column: 24,
        span: 2175..2181,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 66,
        column: 25,
        span: 2181..2182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 66,
        column: 28,
        span: 2182..2185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 29,
        span: 2185..2186,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'p'",
        ),
        line: 66,
        column: 32,
        span: 2186..2189,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 33,
        span: 2189..2190,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 38,
        span: 2190..2195,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 39,
        span: 2195..2196,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 66,
        column: 41,
        span: 2196..2198,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'t'",
        ),
        line: 66,
        column: 44,
        span: 2198..2201,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 45,
        span: 2201..2202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 67,
        column: 7,
        span: 2203..2209,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 8,
        span: 2209..2210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 67,
        column: 14,
        span: 2210..2216,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
        column: 15,
        span: 2216..2217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 67,
        column: 19,
        span: 2217..2221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 20,
        span: 2221..2222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 67,
        column: 25,
        span: 2222..2227,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
        column: 26,
        span: 2227..2228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 67,
        column: 33,
        span: 2228..2235,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 34,
        span: 2235..2236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 67,
        column: 35,
        span: 2236..2237,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 36,
        span: 2237..2238,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
        column: 37,
        span: 2238..2239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 67,
        column: 46,
        span: 2239..2248,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 47,
        span: 2248..2249,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%.%.%.p*t$\"",
        ),
        line: 67,
        column: 61,
        span: 2250..2263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 62,
        span: 2263..2264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 63,
        span: 2264..2265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 68,
        column: 9,
        span: 2266..2274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 10,
        span: 2274..2275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 68,
        column: 11,
        span: 2275..2276,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 12,
        span: 2276..2277,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=xuxu\"",
        ),
        line: 68,
        column: 20,
        span: 2278..2285,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 21,
        span: 2285..2286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 69,
        column: 7,
        span: 2287..2293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 8,
        span: 2293..2294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 69,
        column: 13,
        span: 2294..2299,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 69,
        column: 14,
        span: 2299..2300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 69,
        column: 21,
        span: 2300..2307,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 22,
        span: 2307..2308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 69,
        column: 23,
        span: 2308..2309,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 24,
        span: 2309..2310,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 69,
        column: 25,
        span: 2310..2311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 69,
        column: 34,
        span: 2311..2320,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 69,
        column: 37,
        span: 2321..2323,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 69,
        column: 44,
        span: 2324..2330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 45,
        span: 2330..2331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 70,
        column: 9,
        span: 2332..2340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 10,
        span: 2340..2341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 70,
        column: 11,
        span: 2341..2342,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
        column: 12,
        span: 2342..2343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 70,
        column: 19,
        span: 2344..2350,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 70,
        column: 20,
        span: 2350..2351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 70,
        column: 26,
        span: 2351..2357,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 27,
        span: 2357..2358,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=%s\"",
        ),
        line: 70,
        column: 32,
        span: 2358..2363,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
        column: 33,
        span: 2363..2364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 70,
        column: 40,
        span: 2365..2371,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 70,
        column: 41,
        span: 2371..2372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 70,
        column: 44,
        span: 2372..2375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 45,
        span: 2375..2376,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 70,
        column: 48,
        span: 2376..2379,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
        column: 49,
        span: 2379..2380,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
        column: 53,
        span: 2380..2384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 54,
        span: 2384..2385,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 55,
        span: 2385..2386,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 56,
        span: 2386..2387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 71,
        column: 7,
        span: 2388..2394,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 8,
        span: 2394..2395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 71,
        column: 14,
        span: 2395..2401,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
        column: 15,
        span: 2401..2402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 71,
        column: 19,
        span: 2402..2406,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 20,
        span: 2406..2407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 71,
        column: 25,
        span: 2407..2412,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
        column: 26,
        span: 2412..2413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 71,
        column: 33,
        span: 2413..2420,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 34,
        span: 2420..2421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 71,
        column: 35,
        span: 2421..2422,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 36,
        span: 2422..2423,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
        column: 37,
        span: 2423..2424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 71,
        column: 46,
        span: 2424..2433,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 47,
        span: 2433..2434,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^x*$\"",
        ),
        line: 71,
        column: 54,
        span: 2435..2441,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 55,
        span: 2441..2442,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 56,
        span: 2442..2443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 72,
        column: 9,
        span: 2444..2452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 10,
        span: 2452..2453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 72,
        column: 11,
        span: 2453..2454,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 12,
        span: 2454..2455,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=\"",
        ),
        line: 72,
        column: 16,
        span: 2456..2459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 17,
        span: 2459..2460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 73,
        column: 7,
        span: 2461..2467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 8,
        span: 2467..2468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 73,
        column: 13,
        span: 2468..2473,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 73,
        column: 14,
        span: 2473..2474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 73,
        column: 21,
        span: 2474..2481,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 22,
        span: 2481..2482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 73,
        column: 23,
        span: 2482..2483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 24,
        span: 2483..2484,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 73,
        column: 25,
        span: 2484..2485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 73,
        column: 34,
        span: 2485..2494,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 73,
        column: 37,
        span: 2495..2497,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 73,
        column: 40,
        span: 2498..2500,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 41,
        span: 2500..2501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 74,
        column: 2,
        span: 2502..2503,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 74,
        column: 4,
        span: 2504..2505,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 74,
        column: 8,
        span: 2506..2509,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 74,
        column: 9,
        span: 2509..2510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 74,
        column: 11,
        span: 2511..2512,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 74,
        column: 13,
        span: 2513..2514,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 74,
        column: 17,
        span: 2515..2518,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 74,
        column: 18,
        span: 2518..2519,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 77,
        column: 0,
        span: 2522..2528,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 78,
        column: 8,
        span: 2531..2536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 78,
        column: 10,
        span: 2537..2538,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 78,
        column: 12,
        span: 2539..2540,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 78,
        column: 14,
        span: 2541..2542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 78,
        column: 15,
        span: 2542..2543,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 78,
        column: 17,
        span: 2544..2545,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 78,
        column: 26,
        span: 2546..2554,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 28,
        span: 2555..2556,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 29,
        span: 2556..2557,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 79,
        column: 10,
        span: 2562..2567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 79,
        column: 12,
        span: 2568..2569,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
        column: 14,
        span: 2570..2571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 79,
        column: 20,
        span: 2572..2577,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 79,
        column: 21,
        span: 2577..2578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 79,
        column: 28,
        span: 2578..2585,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 29,
        span: 2585..2586,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 79,
        column: 30,
        span: 2585..2587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 31,
        span: 2587..2588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 80,
        column: 11,
        span: 2593..2599,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 12,
        span: 2599..2600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 80,
        column: 13,
        span: 2600..2601,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 80,
        column: 14,
        span: 2601..2602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 80,
        column: 18,
        span: 2602..2606,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 80,
        column: 21,
        span: 2607..2609,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'f'",
        ),
        line: 80,
        column: 25,
        span: 2610..2613,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 80,
        column: 29,
        span: 2614..2617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 80,
        column: 31,
        span: 2618..2619,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 80,
        column: 32,
        span: 2619..2620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        line: 80,
        column: 40,
        span: 2620..2628,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 80,
        column: 43,
        span: 2629..2631,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'local'",
        ),
        line: 80,
        column: 51,
        span: 2632..2639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 52,
        span: 2639..2640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 81,
        column: 6,
        span: 2645..2646,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 81,
        column: 8,
        span: 2647..2648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 81,
        column: 14,
        span: 2649..2654,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 81,
        column: 15,
        span: 2654..2655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 81,
        column: 22,
        span: 2655..2662,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 23,
        span: 2662..2663,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
        column: 24,
        span: 2662..2664,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 25,
        span: 2664..2665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 82,
        column: 11,
        span: 2670..2676,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 12,
        span: 2676..2677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 82,
        column: 13,
        span: 2677..2678,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 82,
        column: 14,
        span: 2678..2679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 82,
        column: 18,
        span: 2679..2683,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 82,
        column: 21,
        span: 2684..2686,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 82,
        column: 25,
        span: 2687..2690,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 82,
        column: 29,
        span: 2691..2694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 82,
        column: 31,
        span: 2695..2696,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 82,
        column: 32,
        span: 2696..2697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        line: 82,
        column: 40,
        span: 2697..2705,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 82,
        column: 43,
        span: 2706..2708,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'field'",
        ),
        line: 82,
        column: 51,
        span: 2709..2716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 52,
        span: 2716..2717,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 83,
        column: 11,
        span: 2722..2728,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xixi'",
        ),
        line: 83,
        column: 18,
        span: 2729..2735,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 84,
        column: 6,
        span: 2738..2741,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 84,
        column: 7,
        span: 2741..2742,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 85,
        column: 8,
        span: 2745..2750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 85,
        column: 10,
        span: 2751..2752,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 85,
        column: 12,
        span: 2753..2754,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 85,
        column: 21,
        span: 2755..2763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 23,
        span: 2764..2765,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 24,
        span: 2765..2766,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 85,
        column: 31,
        span: 2767..2773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 33,
        span: 2773..2775,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 85,
        column: 34,
        span: 2775..2776,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 35,
        span: 2775..2777,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 85,
        column: 39,
        span: 2778..2781,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 41,
        span: 2782..2783,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 85,
        column: 44,
        span: 2783..2786,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 46,
        span: 2786..2788,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 85,
        column: 49,
        span: 2789..2791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 85,
        column: 51,
        span: 2792..2793,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 85,
        column: 52,
        span: 2793..2794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 85,
        column: 53,
        span: 2794..2795,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 54,
        span: 2795..2796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 55,
        span: 2796..2797,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 56,
        span: 2797..2798,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 85,
        column: 0,
        span: 2799..2802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 86,
        column: 9,
        span: 2805..2811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 10,
        span: 2811..2812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 86,
        column: 11,
        span: 2812..2813,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 12,
        span: 2813..2814,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 13,
        span: 2814..2815,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 86,
        column: 16,
        span: 2816..2818,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xixi'",
        ),
        line: 86,
        column: 23,
        span: 2819..2825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 24,
        span: 2825..2826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 87,
        column: 4,
        span: 2829..2830,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 87,
        column: 6,
        span: 2831..2832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 87,
        column: 12,
        span: 2833..2838,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 87,
        column: 13,
        span: 2838..2839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 87,
        column: 20,
        span: 2839..2846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 21,
        span: 2846..2847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 87,
        column: 22,
        span: 2847..2848,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 23,
        span: 2848..2849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 88,
        column: 9,
        span: 2852..2858,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 10,
        span: 2858..2859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 88,
        column: 11,
        span: 2859..2860,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 88,
        column: 12,
        span: 2860..2861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        line: 88,
        column: 16,
        span: 2861..2865,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 88,
        column: 19,
        span: 2866..2868,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua\"",
        ),
        line: 88,
        column: 25,
        span: 2869..2874,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 88,
        column: 29,
        span: 2875..2878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 88,
        column: 31,
        span: 2879..2880,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 88,
        column: 32,
        span: 2880..2881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 88,
        column: 36,
        span: 2881..2885,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 88,
        column: 39,
        span: 2886..2888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 88,
        column: 41,
        span: 2889..2890,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 88,
        column: 45,
        span: 2891..2894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 88,
        column: 47,
        span: 2895..2896,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 88,
        column: 48,
        span: 2896..2897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        line: 88,
        column: 56,
        span: 2897..2905,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 88,
        column: 59,
        span: 2906..2908,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 88,
        column: 62,
        span: 2909..2911,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 88,
        column: 66,
        span: 2912..2915,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 88,
        column: 70,
        span: 2916..2919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 88,
        column: 72,
        span: 2920..2921,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 88,
        column: 73,
        span: 2921..2922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 88,
        column: 77,
        span: 2922..2926,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 78,
        span: 2926..2927,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 90,
        column: 11,
        span: 2931..2939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 90,
        column: 13,
        span: 2940..2941,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 15,
        span: 2942..2943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 90,
        column: 16,
        span: 2943..2944,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 17,
        span: 2944..2945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 90,
        column: 22,
        span: 2946..2950,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 23,
        span: 2950..2951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 91,
        column: 9,
        span: 2968..2972,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 91,
        column: 11,
        span: 2973..2974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 91,
        column: 16,
        span: 2975..2979,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 91,
        column: 19,
        span: 2980..2982,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'f'",
        ),
        line: 91,
        column: 23,
        span: 2983..2986,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 92,
        column: 10,
        span: 2991..2996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 92,
        column: 12,
        span: 2997..2998,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 92,
        column: 14,
        span: 2999..3000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 92,
        column: 20,
        span: 3001..3006,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 92,
        column: 21,
        span: 3006..3007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 92,
        column: 28,
        span: 3007..3014,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 29,
        span: 3014..3015,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 30,
        span: 3014..3016,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 31,
        span: 3016..3017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 93,
        column: 11,
        span: 3022..3028,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 12,
        span: 3028..3029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 93,
        column: 13,
        span: 3029..3030,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 93,
        column: 14,
        span: 3030..3031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 93,
        column: 18,
        span: 3031..3035,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 93,
        column: 21,
        span: 3036..3038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 93,
        column: 26,
        span: 3039..3043,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 93,
        column: 30,
        span: 3044..3047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 93,
        column: 32,
        span: 3048..3049,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 93,
        column: 33,
        span: 3049..3050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        line: 93,
        column: 41,
        span: 3050..3058,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 93,
        column: 44,
        span: 3059..3061,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'local'",
        ),
        line: 93,
        column: 52,
        span: 3062..3069,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 53,
        span: 3069..3070,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 94,
        column: 11,
        span: 3075..3081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 94,
        column: 0,
        span: 3082..3083,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 95,
        column: 0,
        span: 3086..3089,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 98,
        column: 5,
        span: 3129..3131,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 98,
        column: 7,
        span: 3131..3133,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 98,
        column: 8,
        span: 3133..3134,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 98,
        column: 9,
        span: 3133..3135,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 98,
        column: 14,
        span: 3136..3140,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 98,
        column: 20,
        span: 3141..3146,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 98,
        column: 24,
        span: 3147..3150,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 98,
        column: 25,
        span: 3150..3151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 98,
        column: 27,
        span: 3152..3153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 28,
        span: 3153..3154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 29,
        span: 3154..3155,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 99,
        column: 5,
        span: 3158..3160,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
        column: 7,
        span: 3160..3162,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 99,
        column: 8,
        span: 3162..3163,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
        column: 9,
        span: 3162..3164,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 99,
        column: 14,
        span: 3165..3169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 99,
        column: 16,
        span: 3170..3171,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 99,
        column: 17,
        span: 3171..3172,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
        column: 18,
        span: 3171..3173,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 99,
        column: 23,
        span: 3174..3178,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 99,
        column: 29,
        span: 3179..3184,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 99,
        column: 33,
        span: 3185..3188,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 99,
        column: 34,
        span: 3188..3189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 99,
        column: 36,
        span: 3190..3191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 37,
        span: 3191..3192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 38,
        span: 3192..3193,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 100,
        column: 8,
        span: 3196..3201,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 10,
        span: 3201..3203,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 100,
        column: 13,
        span: 3204..3206,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 100,
        column: 19,
        span: 3207..3212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 100,
        column: 21,
        span: 3213..3214,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 100,
        column: 22,
        span: 3214..3215,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 24,
        span: 3214..3217,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 100,
        column: 25,
        span: 3217..3218,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 100,
        column: 31,
        span: 3219..3224,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 100,
        column: 35,
        span: 3225..3228,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 100,
        column: 36,
        span: 3228..3229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 100,
        column: 38,
        span: 3230..3231,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 39,
        span: 3231..3232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 40,
        span: 3232..3233,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 101,
        column: 8,
        span: 3236..3241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 101,
        column: 10,
        span: 3242..3243,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 101,
        column: 12,
        span: 3244..3245,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 0,
        span: 3245..3247,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 102,
        column: 5,
        span: 3250..3252,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 7,
        span: 3252..3254,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 102,
        column: 8,
        span: 3254..3255,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 9,
        span: 3254..3256,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 102,
        column: 14,
        span: 3257..3261,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 102,
        column: 21,
        span: 3262..3268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 102,
        column: 26,
        span: 3269..3273,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 102,
        column: 27,
        span: 3273..3274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 102,
        column: 30,
        span: 3274..3277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 31,
        span: 3277..3278,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 32,
        span: 3277..3279,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 33,
        span: 3279..3280,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 102,
        column: 37,
        span: 3281..3284,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 102,
        column: 38,
        span: 3284..3285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 102,
        column: 40,
        span: 3286..3287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 41,
        span: 3287..3288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 42,
        span: 3288..3289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 103,
        column: 4,
        span: 3292..3293,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 103,
        column: 6,
        span: 3294..3295,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 8,
        span: 3295..3297,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 103,
        column: 9,
        span: 3297..3298,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 10,
        span: 3297..3299,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 103,
        column: 11,
        span: 3299..3300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 103,
        column: 13,
        span: 3301..3302,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 14,
        span: 3302..3303,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 15,
        span: 3303..3304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 104,
        column: 4,
        span: 3307..3308,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 104,
        column: 6,
        span: 3309..3310,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
        column: 8,
        span: 3310..3312,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 104,
        column: 9,
        span: 3312..3313,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
        column: 10,
        span: 3312..3314,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 104,
        column: 13,
        span: 3315..3317,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
        column: 15,
        span: 3317..3319,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 104,
        column: 16,
        span: 3319..3320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 104,
        column: 18,
        span: 3321..3322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 19,
        span: 3322..3323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 20,
        span: 3323..3324,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 105,
        column: 9,
        span: 3327..3333,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 105,
        column: 15,
        span: 3334..3339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 105,
        column: 17,
        span: 3340..3341,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 105,
        column: 18,
        span: 3341..3342,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 20,
        span: 3341..3344,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 105,
        column: 21,
        span: 3344..3345,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 105,
        column: 24,
        span: 3346..3348,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 26,
        span: 3348..3350,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 105,
        column: 27,
        span: 3350..3351,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 28,
        span: 3350..3352,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 105,
        column: 33,
        span: 3353..3357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 105,
        column: 35,
        span: 3358..3359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 36,
        span: 3359..3360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 37,
        span: 3360..3361,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 105,
        column: 42,
        span: 3362..3366,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 105,
        column: 48,
        span: 3367..3372,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 105,
        column: 52,
        span: 3373..3376,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 105,
        column: 53,
        span: 3376..3377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 105,
        column: 55,
        span: 3378..3379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 56,
        span: 3379..3380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 57,
        span: 3380..3381,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 105,
        column: 63,
        span: 3382..3387,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 0,
        span: 3387..3389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 106,
        column: 4,
        span: 3392..3393,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 106,
        column: 6,
        span: 3394..3395,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 106,
        column: 8,
        span: 3396..3397,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 106,
        column: 9,
        span: 3397..3398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 107,
        column: 4,
        span: 3401..3402,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 5,
        span: 3402..3403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 107,
        column: 6,
        span: 3403..3404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 7,
        span: 3404..3405,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 107,
        column: 8,
        span: 3405..3406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 107,
        column: 9,
        span: 3406..3407,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 107,
        column: 11,
        span: 3408..3409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 107,
        column: 13,
        span: 3410..3411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 14,
        span: 3411..3412,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
        column: 15,
        span: 3411..3413,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 16,
        span: 3413..3414,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 107,
        column: 20,
        span: 3415..3418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 107,
        column: 22,
        span: 3419..3420,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 23,
        span: 3420..3421,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
        column: 25,
        span: 3420..3423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 26,
        span: 3423..3424,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 107,
        column: 27,
        span: 3424..3425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 107,
        column: 28,
        span: 3425..3426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 29,
        span: 3426..3427,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
        column: 30,
        span: 3426..3428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 31,
        span: 3428..3429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 108,
        column: 9,
        span: 3432..3438,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 10,
        span: 3438..3439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 108,
        column: 11,
        span: 3439..3440,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 108,
        column: 12,
        span: 3440..3441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 108,
        column: 13,
        span: 3441..3442,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 108,
        column: 16,
        span: 3443..3445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 108,
        column: 18,
        span: 3446..3447,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 19,
        span: 3447..3448,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
        column: 21,
        span: 3447..3450,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 22,
        span: 3450..3451,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 23,
        span: 3451..3452,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 109,
        column: 11,
        span: 3455..3463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 109,
        column: 13,
        span: 3464..3465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 14,
        span: 3465..3466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 109,
        column: 15,
        span: 3466..3467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 16,
        span: 3467..3468,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 109,
        column: 19,
        span: 3469..3471,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 109,
        column: 23,
        span: 3472..3475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 109,
        column: 25,
        span: 3476..3477,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 109,
        column: 30,
        span: 3478..3482,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 109,
        column: 37,
        span: 3483..3489,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 109,
        column: 39,
        span: 3489..3491,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 109,
        column: 43,
        span: 3492..3495,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 109,
        column: 50,
        span: 3496..3502,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 52,
        span: 3503..3504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 109,
        column: 53,
        span: 3504..3505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 54,
        span: 3505..3506,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 109,
        column: 57,
        span: 3506..3509,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 109,
        column: 58,
        span: 3509..3510,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 109,
        column: 62,
        span: 3511..3514,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 63,
        span: 3514..3515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 64,
        span: 3515..3516,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 109,
        column: 0,
        span: 3517..3520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 110,
        column: 9,
        span: 3523..3529,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 10,
        span: 3529..3530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 110,
        column: 11,
        span: 3530..3531,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 12,
        span: 3531..3532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 110,
        column: 13,
        span: 3532..3533,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 14,
        span: 3533..3534,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 110,
        column: 17,
        span: 3535..3537,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 110,
        column: 21,
        span: 3538..3541,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 22,
        span: 3541..3542,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 111,
        column: 6,
        span: 3543..3548,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 0,
        span: 3548..3550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 113,
        column: 5,
        span: 3552..3556,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 6,
        span: 3556..3557,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[if\nmath.sin(1)\nthen\n  a=1\nelse\n  a=2\nend\n]]",
        ),
        line: 120,
        column: 3,
        span: 3557..3602,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 4,
        span: 3602..3603,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 120,
        column: 6,
        span: 3604..3605,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 7,
        span: 3604..3606,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 8,
        span: 3606..3607,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 9,
        span: 3606..3608,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 10,
        span: 3608..3609,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 11,
        span: 3608..3610,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 12,
        span: 3610..3611,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 13,
        span: 3610..3612,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 120,
        column: 14,
        span: 3612..3613,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 15,
        span: 3613..3614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 122,
        column: 5,
        span: 3616..3620,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 6,
        span: 3620..3621,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[--\nif nil then\n  a=1\nelse\n  a=2\nend\n]]",
        ),
        line: 128,
        column: 3,
        span: 3621..3661,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 4,
        span: 3661..3662,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 128,
        column: 6,
        span: 3663..3664,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 7,
        span: 3663..3665,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 8,
        span: 3665..3666,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 9,
        span: 3665..3667,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 10,
        span: 3667..3668,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 11,
        span: 3667..3669,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 128,
        column: 12,
        span: 3669..3670,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 13,
        span: 3670..3671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 130,
        column: 5,
        span: 3673..3677,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 6,
        span: 3677..3678,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[a=1\nrepeat\n  a=a+1\nuntil a==3\n]]",
        ),
        line: 134,
        column: 3,
        span: 3678..3712,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 4,
        span: 3712..3713,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 134,
        column: 6,
        span: 3714..3715,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 7,
        span: 3714..3716,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 8,
        span: 3716..3717,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 9,
        span: 3716..3718,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 10,
        span: 3718..3719,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 11,
        span: 3718..3720,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 12,
        span: 3720..3721,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 13,
        span: 3720..3722,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 14,
        span: 3722..3723,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 15,
        span: 3722..3724,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 134,
        column: 16,
        span: 3724..3725,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 17,
        span: 3725..3726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 136,
        column: 5,
        span: 3728..3732,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 6,
        span: 3732..3733,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ do\n  return\nend\n]]",
        ),
        line: 139,
        column: 3,
        span: 3733..3754,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 4,
        span: 3754..3755,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 139,
        column: 6,
        span: 3756..3757,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
        column: 7,
        span: 3756..3758,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 139,
        column: 8,
        span: 3758..3759,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 9,
        span: 3759..3760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 141,
        column: 5,
        span: 3762..3766,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 6,
        span: 3766..3767,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[local a\na=1\nwhile a<=3 do\n  a=a+1\nend\n]]",
        ),
        line: 146,
        column: 3,
        span: 3767..3809,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 4,
        span: 3809..3810,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 146,
        column: 6,
        span: 3811..3812,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 7,
        span: 3811..3813,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 8,
        span: 3813..3814,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 9,
        span: 3813..3815,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 10,
        span: 3815..3816,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 11,
        span: 3815..3817,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 12,
        span: 3817..3818,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 13,
        span: 3817..3819,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 14,
        span: 3819..3820,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 15,
        span: 3819..3821,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 16,
        span: 3821..3822,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 17,
        span: 3821..3823,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 18,
        span: 3823..3824,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 19,
        span: 3823..3825,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 20,
        span: 3825..3826,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 21,
        span: 3825..3827,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 22,
        span: 3827..3828,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 23,
        span: 3827..3829,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 24,
        span: 3829..3830,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 25,
        span: 3829..3831,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 146,
        column: 26,
        span: 3831..3832,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 27,
        span: 3832..3833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 148,
        column: 5,
        span: 3835..3839,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 6,
        span: 3839..3840,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[while math.sin(1) do\n  if math.sin(1)\n  then break\n  end\nend\na=1]]",
        ),
        line: 153,
        column: 6,
        span: 3840..3908,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 7,
        span: 3908..3909,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 153,
        column: 9,
        span: 3910..3911,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 10,
        span: 3910..3912,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 11,
        span: 3912..3913,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 12,
        span: 3912..3914,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 13,
        span: 3914..3915,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 14,
        span: 3914..3916,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 15,
        span: 3916..3917,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 16,
        span: 3916..3918,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 153,
        column: 17,
        span: 3918..3919,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 18,
        span: 3919..3920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 155,
        column: 5,
        span: 3922..3926,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 6,
        span: 3926..3927,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[for i=1,3 do\n  a=i\nend\n]]",
        ),
        line: 158,
        column: 3,
        span: 3927..3954,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 4,
        span: 3954..3955,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 158,
        column: 6,
        span: 3956..3957,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 158,
        column: 7,
        span: 3956..3958,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 8,
        span: 3958..3959,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 158,
        column: 9,
        span: 3958..3960,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 10,
        span: 3960..3961,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 158,
        column: 11,
        span: 3960..3962,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 12,
        span: 3962..3963,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 158,
        column: 13,
        span: 3962..3964,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 14,
        span: 3964..3965,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 158,
        column: 15,
        span: 3964..3966,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 16,
        span: 3966..3967,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 158,
        column: 17,
        span: 3966..3968,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 18,
        span: 3968..3969,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 158,
        column: 19,
        span: 3968..3970,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 20,
        span: 3970..3971,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 158,
        column: 21,
        span: 3970..3972,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 158,
        column: 22,
        span: 3972..3973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 23,
        span: 3973..3974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 160,
        column: 5,
        span: 3976..3980,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 6,
        span: 3980..3981,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[for i,v in pairs{'a','b'} do\n  a=tostring(i) .. v\nend\n]]",
        ),
        line: 163,
        column: 3,
        span: 3981..4039,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 163,
        column: 4,
        span: 4039..4040,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 163,
        column: 6,
        span: 4041..4042,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 7,
        span: 4041..4043,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 163,
        column: 8,
        span: 4043..4044,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 9,
        span: 4043..4045,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 163,
        column: 10,
        span: 4045..4046,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 11,
        span: 4045..4047,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 163,
        column: 12,
        span: 4047..4048,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 13,
        span: 4047..4049,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 163,
        column: 14,
        span: 4049..4050,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 15,
        span: 4049..4051,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 163,
        column: 16,
        span: 4051..4052,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 17,
        span: 4051..4053,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 163,
        column: 18,
        span: 4053..4054,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 19,
        span: 4054..4055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 165,
        column: 5,
        span: 4057..4061,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 6,
        span: 4061..4062,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[for i=1,4 do a=1 end]]",
        ),
        line: 165,
        column: 30,
        span: 4062..4086,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 31,
        span: 4086..4087,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 165,
        column: 33,
        span: 4088..4089,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 34,
        span: 4088..4090,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 35,
        span: 4090..4091,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 36,
        span: 4090..4092,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 37,
        span: 4092..4093,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 38,
        span: 4092..4094,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 39,
        span: 4094..4095,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 40,
        span: 4094..4096,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 41,
        span: 4096..4097,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 42,
        span: 4096..4098,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 165,
        column: 43,
        span: 4098..4099,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 44,
        span: 4099..4100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 169,
        column: 6,
        span: 4104..4109,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 169,
        column: 9,
        span: 4109..4112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 172,
        column: 7,
        span: 4147..4153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 8,
        span: 4153..4154,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 172,
        column: 11,
        span: 4154..4157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 172,
        column: 17,
        span: 4158..4163,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 18,
        span: 4163..4164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 172,
        column: 23,
        span: 4164..4169,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 172,
        column: 24,
        span: 4169..4170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 172,
        column: 32,
        span: 4170..4178,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 172,
        column: 33,
        span: 4178..4179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 172,
        column: 36,
        span: 4179..4182,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 172,
        column: 37,
        span: 4182..4183,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 172,
        column: 39,
        span: 4183..4185,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 40,
        span: 4185..4186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 41,
        span: 4186..4187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 173,
        column: 7,
        span: 4188..4194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 8,
        span: 4194..4195,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 173,
        column: 11,
        span: 4195..4198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 173,
        column: 17,
        span: 4199..4204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 18,
        span: 4204..4205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 173,
        column: 23,
        span: 4205..4210,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 173,
        column: 24,
        span: 4210..4211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 173,
        column: 32,
        span: 4211..4219,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
        column: 33,
        span: 4219..4220,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 173,
        column: 35,
        span: 4221..4222,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 36,
        span: 4221..4223,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
        column: 37,
        span: 4223..4224,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 39,
        span: 4224..4226,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
        column: 40,
        span: 4226..4227,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 43,
        span: 4227..4230,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 44,
        span: 4230..4231,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 45,
        span: 4231..4232,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 177,
        column: 6,
        span: 4254..4259,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 177,
        column: 15,
        span: 4260..4268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 177,
        column: 19,
        span: 4269..4272,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 21,
        span: 4273..4274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 177,
        column: 22,
        span: 4274..4275,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 23,
        span: 4275..4276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 177,
        column: 24,
        span: 4276..4277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 25,
        span: 4277..4278,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 177,
        column: 28,
        span: 4278..4281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 29,
        span: 4281..4282,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 177,
        column: 35,
        span: 4283..4288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 177,
        column: 37,
        span: 4289..4290,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 38,
        span: 4290..4291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 177,
        column: 40,
        span: 4292..4293,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 177,
        column: 0,
        span: 4294..4297,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 178,
        column: 6,
        span: 4298..4303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 178,
        column: 9,
        span: 4304..4306,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 178,
        column: 11,
        span: 4307..4308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 178,
        column: 21,
        span: 4309..4318,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 178,
        column: 22,
        span: 4318..4319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 178,
        column: 28,
        span: 4319..4325,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 29,
        span: 4325..4326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 178,
        column: 32,
        span: 4326..4329,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 33,
        span: 4329..4330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 180,
        column: 7,
        span: 4332..4338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 8,
        span: 4338..4339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 180,
        column: 13,
        span: 4339..4344,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 180,
        column: 14,
        span: 4344..4345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 180,
        column: 22,
        span: 4345..4353,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 23,
        span: 4353..4354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 180,
        column: 26,
        span: 4354..4357,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 27,
        span: 4357..4358,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 180,
        column: 29,
        span: 4358..4360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 30,
        span: 4360..4361,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 180,
        column: 33,
        span: 4362..4364,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 180,
        column: 37,
        span: 4365..4368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 38,
        span: 4368..4369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 181,
        column: 7,
        span: 4370..4376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
        column: 8,
        span: 4376..4377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 181,
        column: 13,
        span: 4377..4382,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 181,
        column: 14,
        span: 4382..4383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 181,
        column: 22,
        span: 4383..4391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
        column: 23,
        span: 4391..4392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 181,
        column: 26,
        span: 4392..4395,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
        column: 27,
        span: 4395..4396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
        column: 29,
        span: 4396..4398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
        column: 30,
        span: 4398..4399,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 181,
        column: 33,
        span: 4400..4402,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 181,
        column: 37,
        span: 4403..4406,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
        column: 38,
        span: 4406..4407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 182,
        column: 7,
        span: 4408..4414,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 8,
        span: 4414..4415,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 182,
        column: 11,
        span: 4415..4418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 182,
        column: 17,
        span: 4419..4424,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 182,
        column: 18,
        span: 4424..4425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 182,
        column: 26,
        span: 4425..4433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 27,
        span: 4433..4434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 182,
        column: 30,
        span: 4434..4437,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
        column: 31,
        span: 4437..4438,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 182,
        column: 33,
        span: 4438..4440,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 34,
        span: 4440..4441,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 35,
        span: 4441..4442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 183,
        column: 7,
        span: 4443..4449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 8,
        span: 4449..4450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 183,
        column: 13,
        span: 4450..4455,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 183,
        column: 14,
        span: 4455..4456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 183,
        column: 22,
        span: 4456..4464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 23,
        span: 4464..4465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 183,
        column: 25,
        span: 4465..4467,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 183,
        column: 26,
        span: 4467..4468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 183,
        column: 30,
        span: 4469..4472,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 183,
        column: 31,
        span: 4472..4473,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 33,
        span: 4473..4475,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 34,
        span: 4475..4476,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 183,
        column: 37,
        span: 4477..4479,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 183,
        column: 41,
        span: 4480..4483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 42,
        span: 4483..4484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 184,
        column: 7,
        span: 4485..4491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 8,
        span: 4491..4492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 184,
        column: 13,
        span: 4492..4497,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 184,
        column: 14,
        span: 4497..4498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 184,
        column: 22,
        span: 4498..4506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 23,
        span: 4506..4507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 184,
        column: 25,
        span: 4507..4509,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 26,
        span: 4509..4510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 184,
        column: 30,
        span: 4511..4514,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 31,
        span: 4514..4515,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 184,
        column: 33,
        span: 4515..4517,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 34,
        span: 4517..4518,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 184,
        column: 37,
        span: 4519..4521,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 184,
        column: 41,
        span: 4522..4525,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 42,
        span: 4525..4526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 185,
        column: 7,
        span: 4527..4533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 8,
        span: 4533..4534,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 185,
        column: 11,
        span: 4534..4537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 185,
        column: 17,
        span: 4538..4543,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 185,
        column: 18,
        span: 4543..4544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 185,
        column: 26,
        span: 4544..4552,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 27,
        span: 4552..4553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 185,
        column: 29,
        span: 4553..4555,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 30,
        span: 4555..4556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 185,
        column: 34,
        span: 4557..4560,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 35,
        span: 4560..4561,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 37,
        span: 4561..4563,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 38,
        span: 4563..4564,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 39,
        span: 4564..4565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 187,
        column: 7,
        span: 4567..4573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 8,
        span: 4573..4574,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 187,
        column: 11,
        span: 4574..4577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 187,
        column: 17,
        span: 4578..4583,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 187,
        column: 18,
        span: 4583..4584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 187,
        column: 26,
        span: 4584..4592,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 27,
        span: 4592..4593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 187,
        column: 32,
        span: 4593..4598,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 33,
        span: 4598..4599,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 35,
        span: 4599..4601,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 36,
        span: 4601..4602,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 37,
        span: 4602..4603,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 191,
        column: 6,
        span: 4617..4622,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 191,
        column: 15,
        span: 4623..4631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 191,
        column: 19,
        span: 4632..4635,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 21,
        span: 4636..4637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 191,
        column: 22,
        span: 4637..4638,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
        column: 23,
        span: 4638..4639,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 191,
        column: 27,
        span: 4640..4643,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 28,
        span: 4643..4644,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 192,
        column: 8,
        span: 4647..4652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 192,
        column: 10,
        span: 4653..4654,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 192,
        column: 12,
        span: 4655..4656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 192,
        column: 18,
        span: 4657..4662,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 192,
        column: 19,
        span: 4662..4663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 192,
        column: 23,
        span: 4663..4667,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 24,
        span: 4667..4668,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 192,
        column: 27,
        span: 4668..4671,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 28,
        span: 4671..4672,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 193,
        column: 6,
        span: 4675..4678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 193,
        column: 8,
        span: 4679..4680,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 193,
        column: 10,
        span: 4681..4682,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 12,
        span: 4682..4684,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
        column: 13,
        span: 4684..4685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 193,
        column: 15,
        span: 4686..4687,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 193,
        column: 16,
        span: 4687..4688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 193,
        column: 17,
        span: 4688..4689,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 193,
        column: 0,
        span: 4690..4692,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 194,
        column: 10,
        span: 4697..4702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 194,
        column: 12,
        span: 4703..4704,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 194,
        column: 13,
        span: 4704..4705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 194,
        column: 15,
        span: 4706..4707,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 194,
        column: 17,
        span: 4708..4709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 194,
        column: 23,
        span: 4710..4715,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 194,
        column: 24,
        span: 4715..4716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 194,
        column: 32,
        span: 4716..4724,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 33,
        span: 4724..4725,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 194,
        column: 34,
        span: 4724..4726,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 194,
        column: 35,
        span: 4726..4727,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 194,
        column: 37,
        span: 4728..4729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 194,
        column: 38,
        span: 4729..4730,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 39,
        span: 4730..4731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 195,
        column: 11,
        span: 4736..4742,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 12,
        span: 4742..4743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 195,
        column: 13,
        span: 4743..4744,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 195,
        column: 16,
        span: 4745..4747,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(*vararg)\"",
        ),
        line: 195,
        column: 28,
        span: 4748..4759,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 195,
        column: 32,
        span: 4760..4763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 195,
        column: 34,
        span: 4764..4765,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 195,
        column: 37,
        span: 4766..4768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 195,
        column: 39,
        span: 4769..4770,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 195,
        column: 40,
        span: 4770..4771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 195,
        column: 41,
        span: 4771..4772,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 195,
        column: 42,
        span: 4772..4773,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 43,
        span: 4773..4774,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 196,
        column: 0,
        span: 4777..4780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 197,
        column: 9,
        span: 4783..4789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 10,
        span: 4789..4790,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 197,
        column: 13,
        span: 4790..4793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 197,
        column: 19,
        span: 4794..4799,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 197,
        column: 20,
        span: 4799..4800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 197,
        column: 28,
        span: 4800..4808,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 29,
        span: 4808..4809,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 197,
        column: 30,
        span: 4808..4810,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 197,
        column: 31,
        span: 4810..4811,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 197,
        column: 33,
        span: 4812..4813,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 34,
        span: 4813..4814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 197,
        column: 35,
        span: 4814..4815,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 197,
        column: 36,
        span: 4815..4816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 197,
        column: 37,
        span: 4816..4817,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 197,
        column: 39,
        span: 4818..4819,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 197,
        column: 41,
        span: 4819..4821,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 42,
        span: 4821..4822,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 43,
        span: 4822..4823,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 44,
        span: 4823..4824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 198,
        column: 9,
        span: 4827..4833,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 10,
        span: 4833..4834,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 198,
        column: 13,
        span: 4834..4837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 198,
        column: 19,
        span: 4838..4843,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 198,
        column: 20,
        span: 4843..4844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 198,
        column: 28,
        span: 4844..4852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 29,
        span: 4852..4853,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 198,
        column: 30,
        span: 4852..4854,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 198,
        column: 31,
        span: 4854..4855,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 198,
        column: 33,
        span: 4856..4857,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 34,
        span: 4857..4858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 198,
        column: 35,
        span: 4858..4859,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 198,
        column: 36,
        span: 4859..4860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 198,
        column: 37,
        span: 4860..4861,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 198,
        column: 39,
        span: 4862..4863,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 198,
        column: 41,
        span: 4863..4865,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 42,
        span: 4865..4866,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 198,
        column: 43,
        span: 4866..4867,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 198,
        column: 46,
        span: 4867..4870,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 47,
        span: 4870..4871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 48,
        span: 4871..4872,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 199,
        column: 5,
        span: 4875..4877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 199,
        column: 7,
        span: 4878..4879,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 199,
        column: 8,
        span: 4879..4880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 199,
        column: 9,
        span: 4880..4881,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 199,
        column: 11,
        span: 4882..4883,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 199,
        column: 13,
        span: 4883..4885,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 199,
        column: 0,
        span: 4886..4890,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 6,
        span: 4895..4896,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 200,
        column: 14,
        span: 4896..4904,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 16,
        span: 4905..4906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 200,
        column: 17,
        span: 4906..4907,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 18,
        span: 4907..4908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 201,
        column: 13,
        span: 4915..4921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 14,
        span: 4921..4922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 201,
        column: 19,
        span: 4922..4927,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 201,
        column: 20,
        span: 4927..4928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 201,
        column: 28,
        span: 4928..4936,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 29,
        span: 4936..4937,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 201,
        column: 30,
        span: 4936..4938,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 201,
        column: 31,
        span: 4938..4939,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 201,
        column: 33,
        span: 4940..4941,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 201,
        column: 34,
        span: 4940..4942,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 201,
        column: 35,
        span: 4942..4943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 201,
        column: 37,
        span: 4944..4945,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 38,
        span: 4945..4946,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 201,
        column: 41,
        span: 4947..4949,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(*vararg)\"",
        ),
        line: 201,
        column: 53,
        span: 4950..4961,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 54,
        span: 4961..4962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 202,
        column: 13,
        span: 4969..4975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 14,
        span: 4975..4976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 202,
        column: 19,
        span: 4976..4981,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 202,
        column: 20,
        span: 4981..4982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 202,
        column: 28,
        span: 4982..4990,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 29,
        span: 4990..4991,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 202,
        column: 30,
        span: 4990..4992,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 202,
        column: 31,
        span: 4992..4993,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 202,
        column: 33,
        span: 4994..4995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 202,
        column: 34,
        span: 4995..4996,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 202,
        column: 35,
        span: 4996..4997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 202,
        column: 36,
        span: 4997..4998,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 202,
        column: 37,
        span: 4998..4999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 202,
        column: 39,
        span: 5000..5001,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 40,
        span: 5001..5002,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 202,
        column: 43,
        span: 5003..5005,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(*vararg)\"",
        ),
        line: 202,
        column: 55,
        span: 5006..5017,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 56,
        span: 5017..5018,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 203,
        column: 9,
        span: 5024..5027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 10,
        span: 5027..5028,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 11,
        span: 5028..5029,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "430",
                    after_decimal: "",
                },
            ),
        ),
        line: 203,
        column: 14,
        span: 5028..5032,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 15,
        span: 5032..5033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 204,
        column: 12,
        span: 5039..5045,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 13,
        span: 5045..5046,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 204,
        column: 16,
        span: 5046..5049,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 204,
        column: 19,
        span: 5050..5052,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "430",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 23,
        span: 5052..5056,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 24,
        span: 5056..5057,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 205,
        column: 0,
        span: 5060..5063,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 206,
        column: 0,
        span: 5064..5067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 208,
        column: 4,
        span: 5069..5072,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 5,
        span: 5072..5073,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 6,
        span: 5073..5074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 209,
        column: 4,
        span: 5075..5078,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 5,
        span: 5078..5079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 209,
        column: 10,
        span: 5079..5084,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 11,
        span: 5084..5085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 210,
        column: 4,
        span: 5086..5089,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 5,
        span: 5089..5090,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 210,
        column: 8,
        span: 5089..5093,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 210,
        column: 9,
        span: 5093..5094,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 210,
        column: 11,
        span: 5094..5096,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 210,
        column: 12,
        span: 5096..5097,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 210,
        column: 14,
        span: 5097..5099,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 15,
        span: 5099..5100,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 211,
        column: 6,
        span: 5101..5106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 211,
        column: 8,
        span: 5107..5108,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 211,
        column: 10,
        span: 5109..5110,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 211,
        column: 12,
        span: 5111..5112,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 211,
        column: 13,
        span: 5112..5113,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 212,
        column: 4,
        span: 5114..5117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 212,
        column: 6,
        span: 5118..5119,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 212,
        column: 8,
        span: 5120..5121,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 212,
        column: 10,
        span: 5121..5123,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 212,
        column: 11,
        span: 5123..5124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 13,
        span: 5125..5126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 212,
        column: 18,
        span: 5126..5131,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 212,
        column: 22,
        span: 5132..5135,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 212,
        column: 26,
        span: 5135..5139,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 212,
        column: 29,
        span: 5140..5142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 212,
        column: 34,
        span: 5142..5147,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 35,
        span: 5147..5148,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 212,
        column: 38,
        span: 5149..5151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 212,
        column: 40,
        span: 5152..5153,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 212,
        column: 41,
        span: 5153..5154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 212,
        column: 42,
        span: 5154..5155,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 212,
        column: 43,
        span: 5155..5156,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 212,
        column: 45,
        span: 5157..5158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 212,
        column: 47,
        span: 5159..5160,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 212,
        column: 0,
        span: 5161..5164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 213,
        column: 4,
        span: 5165..5168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 5,
        span: 5168..5169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 213,
        column: 10,
        span: 5169..5174,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 213,
        column: 11,
        span: 5174..5175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 213,
        column: 17,
        span: 5175..5181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 18,
        span: 5181..5182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 213,
        column: 19,
        span: 5182..5183,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 20,
        span: 5183..5184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 21,
        span: 5184..5185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 214,
        column: 2,
        span: 5186..5187,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 214,
        column: 4,
        span: 5188..5189,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 214,
        column: 0,
        span: 5190..5193,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 217,
        column: 6,
        span: 5238..5243,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 217,
        column: 15,
        span: 5244..5252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 217,
        column: 19,
        span: 5253..5256,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 21,
        span: 5257..5258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 22,
        span: 5258..5259,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 217,
        column: 29,
        span: 5260..5266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 217,
        column: 35,
        span: 5267..5272,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 217,
        column: 36,
        span: 5272..5273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 217,
        column: 44,
        span: 5273..5281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 45,
        span: 5281..5282,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
        column: 46,
        span: 5281..5283,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 217,
        column: 47,
        span: 5283..5284,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 217,
        column: 49,
        span: 5285..5286,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
        column: 50,
        span: 5285..5287,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 51,
        span: 5287..5288,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 217,
        column: 0,
        span: 5289..5292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 218,
        column: 7,
        span: 5293..5299,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 8,
        span: 5299..5300,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 218,
        column: 11,
        span: 5300..5303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 218,
        column: 15,
        span: 5304..5307,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 16,
        span: 5307..5308,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 218,
        column: 18,
        span: 5307..5310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 19,
        span: 5310..5311,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 20,
        span: 5311..5312,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 221,
        column: 3,
        span: 5315..5317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 222,
        column: 9,
        span: 5358..5364,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 10,
        span: 5364..5365,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 222,
        column: 13,
        span: 5365..5368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 222,
        column: 19,
        span: 5369..5374,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 222,
        column: 20,
        span: 5374..5375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 222,
        column: 27,
        span: 5375..5382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 28,
        span: 5382..5383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 29,
        span: 5383..5384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 30,
        span: 5384..5385,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 223,
        column: 8,
        span: 5388..5393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 223,
        column: 14,
        span: 5394..5399,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 223,
        column: 16,
        span: 5400..5401,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 0,
        span: 5401..5403,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 224,
        column: 8,
        span: 5406..5411,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 224,
        column: 17,
        span: 5412..5420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 224,
        column: 19,
        span: 5421..5422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 21,
        span: 5423..5424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 22,
        span: 5424..5425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 225,
        column: 11,
        span: 5430..5436,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 12,
        span: 5436..5437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 225,
        column: 17,
        span: 5437..5442,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 225,
        column: 18,
        span: 5442..5443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 225,
        column: 25,
        span: 5443..5450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 26,
        span: 5450..5451,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 225,
        column: 27,
        span: 5450..5452,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 28,
        span: 5452..5453,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 225,
        column: 29,
        span: 5453..5454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        line: 225,
        column: 37,
        span: 5454..5462,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 225,
        column: 40,
        span: 5463..5465,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hook\"",
        ),
        line: 225,
        column: 47,
        span: 5466..5472,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 48,
        span: 5472..5473,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 226,
        column: 10,
        span: 5478..5483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sndline",
        ),
        line: 226,
        column: 18,
        span: 5484..5491,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 226,
        column: 20,
        span: 5492..5493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 226,
        column: 27,
        span: 5494..5500,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 226,
        column: 28,
        span: 5500..5501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 226,
        column: 33,
        span: 5501..5506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 34,
        span: 5506..5507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 226,
        column: 39,
        span: 5507..5512,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 226,
        column: 40,
        span: 5512..5513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 226,
        column: 49,
        span: 5513..5522,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 50,
        span: 5522..5523,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 51,
        span: 5523..5524,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
        column: 52,
        span: 5524..5525,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n(.-)\\n\"",
        ),
        line: 226,
        column: 63,
        span: 5526..5536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 64,
        span: 5536..5537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 227,
        column: 11,
        span: 5542..5548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 12,
        span: 5548..5549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 227,
        column: 18,
        span: 5549..5555,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 227,
        column: 19,
        span: 5555..5556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 227,
        column: 23,
        span: 5556..5560,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 24,
        span: 5560..5561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sndline",
        ),
        line: 227,
        column: 31,
        span: 5561..5568,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
        column: 32,
        span: 5568..5569,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hook\"",
        ),
        line: 227,
        column: 39,
        span: 5570..5576,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 40,
        span: 5576..5577,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 41,
        span: 5577..5578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 228,
        column: 10,
        span: 5583..5588,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 228,
        column: 12,
        span: 5589..5590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 228,
        column: 18,
        span: 5591..5596,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 228,
        column: 20,
        span: 5597..5598,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 228,
        column: 0,
        span: 5598..5600,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 229,
        column: 0,
        span: 5603..5606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 230,
        column: 8,
        span: 5609..5614,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 230,
        column: 9,
        span: 5614..5615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 230,
        column: 16,
        span: 5615..5622,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 17,
        span: 5622..5623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 230,
        column: 18,
        span: 5623..5624,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
        column: 19,
        span: 5624..5625,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 230,
        column: 23,
        span: 5626..5629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 24,
        span: 5629..5630,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 231,
        column: 8,
        span: 5633..5638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 231,
        column: 10,
        span: 5639..5640,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 231,
        column: 12,
        span: 5641..5642,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 0,
        span: 5642..5644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 232,
        column: 7,
        span: 5647..5651,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 232,
        column: 8,
        span: 5651..5652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 232,
        column: 9,
        span: 5652..5653,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 232,
        column: 11,
        span: 5654..5655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 232,
        column: 0,
        span: 5656..5657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 233,
        column: 4,
        span: 5660..5661,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 233,
        column: 6,
        span: 5662..5663,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 0,
        span: 5663..5665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 234,
        column: 8,
        span: 5668..5673,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 234,
        column: 9,
        span: 5673..5674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 234,
        column: 16,
        span: 5674..5681,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 17,
        span: 5681..5682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 18,
        span: 5682..5683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 235,
        column: 9,
        span: 5686..5692,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 10,
        span: 5692..5693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 235,
        column: 15,
        span: 5693..5698,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 235,
        column: 18,
        span: 5699..5701,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 235,
        column: 20,
        span: 5701..5703,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 21,
        span: 5703..5704,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 236,
        column: 0,
        span: 5705..5708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 239,
        column: 2,
        span: 5711..5712,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 239,
        column: 4,
        span: 5713..5714,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 239,
        column: 6,
        span: 5715..5716,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 239,
        column: 7,
        span: 5716..5717,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 239,
        column: 8,
        span: 5717..5718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        line: 239,
        column: 10,
        span: 5719..5720,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 239,
        column: 12,
        span: 5721..5722,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 239,
        column: 0,
        span: 5723..5726,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 240,
        column: 6,
        span: 5727..5732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 240,
        column: 11,
        span: 5733..5737,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 240,
        column: 13,
        span: 5738..5739,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 240,
        column: 0,
        span: 5739..5741,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 241,
        column: 6,
        span: 5742..5747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldglob",
        ),
        line: 241,
        column: 14,
        span: 5748..5755,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 241,
        column: 16,
        span: 5756..5757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 241,
        column: 0,
        span: 5758..5762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 242,
        column: 6,
        span: 5763..5768,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 242,
        column: 7,
        span: 5768..5769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 242,
        column: 14,
        span: 5769..5776,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 15,
        span: 5776..5777,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 242,
        column: 23,
        span: 5777..5785,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 25,
        span: 5786..5787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 242,
        column: 26,
        span: 5787..5788,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 27,
        span: 5788..5789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 242,
        column: 28,
        span: 5789..5790,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 29,
        span: 5790..5791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 243,
        column: 17,
        span: 5794..5808,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 18,
        span: 5808..5809,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 19,
        span: 5809..5810,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 244,
        column: 8,
        span: 5841..5846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 244,
        column: 10,
        span: 5847..5848,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 244,
        column: 11,
        span: 5848..5849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 244,
        column: 13,
        span: 5850..5851,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 244,
        column: 14,
        span: 5851..5852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 244,
        column: 16,
        span: 5853..5854,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 244,
        column: 18,
        span: 5855..5856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 244,
        column: 24,
        span: 5857..5862,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 244,
        column: 25,
        span: 5862..5863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 244,
        column: 32,
        span: 5863..5870,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
        column: 33,
        span: 5870..5871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 34,
        span: 5871..5872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 245,
        column: 9,
        span: 5875..5881,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 10,
        span: 5881..5882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 245,
        column: 11,
        span: 5882..5883,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 245,
        column: 14,
        span: 5884..5886,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'crl'",
        ),
        line: 245,
        column: 20,
        span: 5887..5892,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 245,
        column: 24,
        span: 5893..5896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 245,
        column: 26,
        span: 5897..5898,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 245,
        column: 29,
        span: 5899..5901,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
        column: 31,
        span: 5901..5903,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 32,
        span: 5903..5904,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 246,
        column: 5,
        span: 5907..5909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 246,
        column: 7,
        span: 5910..5911,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 246,
        column: 10,
        span: 5912..5914,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        line: 246,
        column: 17,
        span: 5915..5921,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 246,
        column: 0,
        span: 5922..5926,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 247,
        column: 7,
        span: 5931..5933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 247,
        column: 12,
        span: 5934..5938,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 247,
        column: 15,
        span: 5939..5941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldglob",
        ),
        line: 247,
        column: 23,
        span: 5942..5949,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 247,
        column: 0,
        span: 5950..5954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        line: 248,
        column: 8,
        span: 5961..5962,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 248,
        column: 10,
        span: 5963..5964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 248,
        column: 12,
        span: 5965..5966,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 248,
        column: 13,
        span: 5966..5967,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 248,
        column: 14,
        span: 5966..5968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldglob",
        ),
        line: 249,
        column: 14,
        span: 6024..6031,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 249,
        column: 16,
        span: 6032..6033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 249,
        column: 0,
        span: 6034..6038,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 250,
        column: 0,
        span: 6043..6046,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 251,
        column: 9,
        span: 6049..6055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 251,
        column: 11,
        span: 6056..6057,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 251,
        column: 14,
        span: 6058..6060,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        line: 251,
        column: 21,
        span: 6061..6067,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 251,
        column: 0,
        span: 6068..6072,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 252,
        column: 12,
        span: 6079..6084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 252,
        column: 14,
        span: 6085..6086,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 252,
        column: 16,
        span: 6087..6088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 252,
        column: 22,
        span: 6089..6094,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 252,
        column: 23,
        span: 6094..6095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 252,
        column: 30,
        span: 6095..6102,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 31,
        span: 6102..6103,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 252,
        column: 32,
        span: 6102..6104,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 252,
        column: 33,
        span: 6104..6105,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 252,
        column: 37,
        span: 6106..6109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 38,
        span: 6109..6110,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 252,
        column: 39,
        span: 6110..6111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 252,
        column: 0,
        span: 6111..6115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 253,
        column: 8,
        span: 6122..6123,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 253,
        column: 9,
        span: 6123..6124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 253,
        column: 10,
        span: 6124..6125,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 253,
        column: 11,
        span: 6125..6126,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 253,
        column: 13,
        span: 6127..6128,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 0,
        span: 6128..6130,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 254,
        column: 7,
        span: 6133..6137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 254,
        column: 14,
        span: 6138..6144,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 15,
        span: 6144..6145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 254,
        column: 16,
        span: 6145..6146,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 254,
        column: 19,
        span: 6147..6149,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        line: 254,
        column: 28,
        span: 6150..6158,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 29,
        span: 6158..6159,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 255,
        column: 0,
        span: 6162..6165,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 256,
        column: 4,
        span: 6166..6169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 5,
        span: 6169..6170,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"crl\"",
        ),
        line: 256,
        column: 11,
        span: 6171..6176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 12,
        span: 6176..6177,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 259,
        column: 9,
        span: 6180..6188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 259,
        column: 11,
        span: 6189..6190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 12,
        span: 6190..6191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 259,
        column: 13,
        span: 6191..6192,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 14,
        span: 6192..6193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 259,
        column: 15,
        span: 6193..6194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 16,
        span: 6194..6195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 260,
        column: 17,
        span: 6198..6212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
        column: 18,
        span: 6212..6213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
        column: 19,
        span: 6213..6214,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 261,
        column: 8,
        span: 6217..6222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 261,
        column: 10,
        span: 6223..6224,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 11,
        span: 6224..6225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 261,
        column: 13,
        span: 6226..6227,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 261,
        column: 15,
        span: 6228..6229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 261,
        column: 21,
        span: 6230..6235,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 261,
        column: 22,
        span: 6235..6236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 261,
        column: 30,
        span: 6236..6244,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 261,
        column: 31,
        span: 6244..6245,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 261,
        column: 32,
        span: 6244..6246,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 33,
        span: 6246..6247,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 261,
        column: 35,
        span: 6247..6249,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 261,
        column: 36,
        span: 6249..6250,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 262,
        column: 8,
        span: 6253..6258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 262,
        column: 10,
        span: 6259..6260,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
        column: 11,
        span: 6260..6261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 262,
        column: 13,
        span: 6262..6263,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 262,
        column: 15,
        span: 6264..6265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 262,
        column: 21,
        span: 6266..6271,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 262,
        column: 22,
        span: 6271..6272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 262,
        column: 30,
        span: 6272..6280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 31,
        span: 6280..6281,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
        column: 32,
        span: 6280..6282,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
        column: 33,
        span: 6282..6283,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
        column: 35,
        span: 6283..6285,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 36,
        span: 6285..6286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 263,
        column: 9,
        span: 6289..6295,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 10,
        span: 6295..6296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 263,
        column: 11,
        span: 6296..6297,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 263,
        column: 14,
        span: 6298..6300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 263,
        column: 16,
        span: 6301..6302,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 263,
        column: 20,
        span: 6303..6306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 263,
        column: 22,
        span: 6307..6308,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 263,
        column: 25,
        span: 6309..6311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 263,
        column: 27,
        span: 6312..6313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 28,
        span: 6313..6314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 264,
        column: 9,
        span: 6317..6323,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 10,
        span: 6323..6324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 264,
        column: 15,
        span: 6324..6329,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 264,
        column: 16,
        span: 6329..6330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 264,
        column: 24,
        span: 6330..6338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 25,
        span: 6338..6339,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
        column: 26,
        span: 6338..6340,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 264,
        column: 27,
        span: 6340..6341,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
        column: 29,
        span: 6341..6343,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 264,
        column: 30,
        span: 6343..6344,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pera\"",
        ),
        line: 264,
        column: 37,
        span: 6345..6351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 38,
        span: 6351..6352,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 264,
        column: 41,
        span: 6353..6355,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        line: 264,
        column: 46,
        span: 6356..6360,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 264,
        column: 48,
        span: 6360..6362,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        line: 264,
        column: 52,
        span: 6362..6366,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 53,
        span: 6366..6367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 265,
        column: 9,
        span: 6370..6376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 10,
        span: 6376..6377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 265,
        column: 15,
        span: 6377..6382,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 265,
        column: 16,
        span: 6382..6383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 265,
        column: 24,
        span: 6383..6391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 25,
        span: 6391..6392,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
        column: 26,
        span: 6391..6393,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 265,
        column: 27,
        span: 6393..6394,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
        column: 29,
        span: 6394..6396,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 265,
        column: 30,
        span: 6396..6397,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"maçã\"",
        ),
        line: 265,
        column: 37,
        span: 6398..6404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 38,
        span: 6404..6405,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 265,
        column: 41,
        span: 6406..6408,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B\"",
        ),
        line: 265,
        column: 45,
        span: 6409..6412,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 46,
        span: 6412..6413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 266,
        column: 4,
        span: 6416..6417,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 266,
        column: 6,
        span: 6418..6419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 266,
        column: 12,
        span: 6420..6425,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 266,
        column: 13,
        span: 6425..6426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 266,
        column: 20,
        span: 6426..6433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 21,
        span: 6433..6434,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 266,
        column: 22,
        span: 6433..6435,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 23,
        span: 6435..6436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 267,
        column: 9,
        span: 6439..6445,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 10,
        span: 6445..6446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 267,
        column: 11,
        span: 6446..6447,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 267,
        column: 12,
        span: 6447..6448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 267,
        column: 16,
        span: 6448..6452,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 267,
        column: 19,
        span: 6453..6455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 267,
        column: 21,
        span: 6456..6457,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 267,
        column: 25,
        span: 6458..6461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 267,
        column: 27,
        span: 6462..6463,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 267,
        column: 28,
        span: 6463..6464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        line: 267,
        column: 32,
        span: 6464..6468,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 267,
        column: 35,
        span: 6469..6471,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua\"",
        ),
        line: 267,
        column: 41,
        span: 6472..6477,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 267,
        column: 45,
        span: 6478..6481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 267,
        column: 47,
        span: 6482..6483,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 267,
        column: 48,
        span: 6483..6484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 267,
        column: 52,
        span: 6484..6488,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 267,
        column: 55,
        span: 6489..6491,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'g'",
        ),
        line: 267,
        column: 59,
        span: 6492..6495,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 267,
        column: 0,
        span: 6496..6499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 268,
        column: 11,
        span: 6509..6510,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 268,
        column: 12,
        span: 6510..6511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        line: 268,
        column: 16,
        span: 6511..6515,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 268,
        column: 19,
        span: 6516..6518,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 268,
        column: 21,
        span: 6518..6520,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 268,
        column: 25,
        span: 6521..6524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 268,
        column: 32,
        span: 6525..6531,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 268,
        column: 33,
        span: 6531..6532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 268,
        column: 37,
        span: 6532..6536,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 38,
        span: 6536..6537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 268,
        column: 39,
        span: 6537..6538,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 268,
        column: 40,
        span: 6538..6539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 268,
        column: 46,
        span: 6539..6545,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
        column: 47,
        span: 6545..6546,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^@.*db%.lua$\"",
        ),
        line: 268,
        column: 62,
        span: 6547..6561,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 63,
        span: 6561..6562,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 64,
        span: 6562..6563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 269,
        column: 7,
        span: 6566..6570,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 269,
        column: 9,
        span: 6571..6572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 269,
        column: 14,
        span: 6573..6577,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 269,
        column: 15,
        span: 6577..6578,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
        column: 0,
        span: 6577..6579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 270,
        column: 9,
        span: 6582..6588,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 10,
        span: 6588..6589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 270,
        column: 15,
        span: 6589..6594,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 270,
        column: 16,
        span: 6594..6595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 270,
        column: 23,
        span: 6595..6602,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 24,
        span: 6602..6603,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
        column: 25,
        span: 6602..6604,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
        column: 26,
        span: 6604..6605,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 270,
        column: 30,
        span: 6606..6609,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 31,
        span: 6609..6610,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 270,
        column: 32,
        span: 6610..6611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 270,
        column: 43,
        span: 6611..6622,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 270,
        column: 46,
        span: 6623..6625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        line: 270,
        column: 48,
        span: 6626..6627,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 270,
        column: 49,
        span: 6627..6628,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
        column: 50,
        span: 6627..6629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 51,
        span: 6629..6630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 271,
        column: 9,
        span: 6633..6639,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 10,
        span: 6639..6640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 271,
        column: 15,
        span: 6640..6645,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 271,
        column: 16,
        span: 6645..6646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 271,
        column: 23,
        span: 6646..6653,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 24,
        span: 6653..6654,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 271,
        column: 25,
        span: 6653..6655,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 271,
        column: 26,
        span: 6655..6656,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 271,
        column: 30,
        span: 6657..6660,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 31,
        span: 6660..6661,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 271,
        column: 32,
        span: 6661..6662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 271,
        column: 43,
        span: 6662..6673,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 271,
        column: 46,
        span: 6674..6676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        line: 271,
        column: 48,
        span: 6677..6678,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 271,
        column: 49,
        span: 6678..6679,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 271,
        column: 50,
        span: 6678..6680,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 51,
        span: 6680..6681,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 272,
        column: 0,
        span: 6682..6685,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 274,
        column: 9,
        span: 6687..6695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 274,
        column: 13,
        span: 6696..6699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 14,
        span: 6699..6700,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 15,
        span: 6700..6701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 275,
        column: 7,
        span: 6704..6708,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 275,
        column: 9,
        span: 6709..6710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 275,
        column: 14,
        span: 6711..6715,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 275,
        column: 15,
        span: 6715..6716,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
        column: 0,
        span: 6715..6717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 276,
        column: 9,
        span: 6720..6726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 10,
        span: 6726..6727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 276,
        column: 15,
        span: 6727..6732,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 276,
        column: 16,
        span: 6732..6733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 276,
        column: 23,
        span: 6733..6740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 24,
        span: 6740..6741,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
        column: 25,
        span: 6740..6742,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 276,
        column: 26,
        span: 6742..6743,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 276,
        column: 30,
        span: 6744..6747,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 31,
        span: 6747..6748,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 276,
        column: 32,
        span: 6748..6749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 276,
        column: 43,
        span: 6749..6760,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 276,
        column: 46,
        span: 6761..6763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        line: 276,
        column: 48,
        span: 6764..6765,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 276,
        column: 49,
        span: 6765..6766,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
        column: 50,
        span: 6765..6767,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 51,
        span: 6767..6768,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 277,
        column: 4,
        span: 6769..6772,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 277,
        column: 5,
        span: 6772..6773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 277,
        column: 9,
        span: 6774..6777,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 10,
        span: 6777..6778,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 11,
        span: 6778..6779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 280,
        column: 2,
        span: 6845..6846,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 280,
        column: 4,
        span: 6847..6848,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo\\\nalo'",
        ),
        line: 281,
        column: 5,
        span: 6849..6859,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 281,
        column: 8,
        span: 6860..6862,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n\n]]",
        ),
        line: 283,
        column: 3,
        span: 6863..6869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 286,
        column: 7,
        span: 6878..6884,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 8,
        span: 6884..6885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 286,
        column: 13,
        span: 6885..6890,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 286,
        column: 14,
        span: 6890..6891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 286,
        column: 21,
        span: 6891..6898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 22,
        span: 6898..6899,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 23,
        span: 6898..6900,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
        column: 24,
        span: 6900..6901,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 286,
        column: 28,
        span: 6902..6905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 29,
        span: 6905..6906,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 286,
        column: 30,
        span: 6906..6907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 286,
        column: 41,
        span: 6907..6918,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 286,
        column: 44,
        span: 6919..6921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        line: 286,
        column: 46,
        span: 6922..6923,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 286,
        column: 47,
        span: 6923..6924,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 49,
        span: 6923..6926,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 50,
        span: 6926..6927,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 289,
        column: 9,
        span: 6955..6963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 289,
        column: 11,
        span: 6964..6965,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 12,
        span: 6965..6966,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 289,
        column: 15,
        span: 6966..6969,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 16,
        span: 6969..6970,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 290,
        column: 8,
        span: 6973..6978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 290,
        column: 12,
        span: 6979..6982,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 290,
        column: 14,
        span: 6983..6984,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 290,
        column: 16,
        span: 6985..6986,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 290,
        column: 19,
        span: 6986..6989,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 290,
        column: 20,
        span: 6989..6990,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 291,
        column: 5,
        span: 6993..6995,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 291,
        column: 11,
        span: 6996..7001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 291,
        column: 13,
        span: 7002..7003,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 291,
        column: 14,
        span: 7003..7004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 291,
        column: 15,
        span: 7004..7005,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 291,
        column: 16,
        span: 7005..7006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 291,
        column: 17,
        span: 7006..7007,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 291,
        column: 18,
        span: 7007..7008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 291,
        column: 20,
        span: 7009..7010,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 291,
        column: 21,
        span: 7010..7011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 291,
        column: 25,
        span: 7011..7015,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 291,
        column: 26,
        span: 7015..7016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 291,
        column: 29,
        span: 7016..7019,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 30,
        span: 7019..7020,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 291,
        column: 32,
        span: 7019..7022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 33,
        span: 7022..7023,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 291,
        column: 34,
        span: 7023..7024,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 291,
        column: 0,
        span: 7025..7028,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 292,
        column: 8,
        span: 7031..7036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "feijao",
        ),
        line: 292,
        column: 0,
        span: 7037..7043,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 293,
        column: 8,
        span: 7046..7051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AAAA",
        ),
        line: 293,
        column: 13,
        span: 7052..7056,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 293,
        column: 14,
        span: 7056..7057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 293,
        column: 15,
        span: 7057..7058,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 293,
        column: 17,
        span: 7059..7060,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 293,
        column: 24,
        span: 7061..7067,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 293,
        column: 25,
        span: 7067..7068,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mamão\"",
        ),
        line: 293,
        column: 33,
        span: 7069..7076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 294,
        column: 4,
        span: 7079..7080,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 5,
        span: 7080..7081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AAAA",
        ),
        line: 294,
        column: 9,
        span: 7081..7085,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 294,
        column: 10,
        span: 7085..7086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 294,
        column: 11,
        span: 7086..7087,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 12,
        span: 7087..7088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 295,
        column: 9,
        span: 7091..7097,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
        column: 10,
        span: 7097..7098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AAAA",
        ),
        line: 295,
        column: 14,
        span: 7098..7102,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 295,
        column: 17,
        span: 7103..7105,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pera\"",
        ),
        line: 295,
        column: 24,
        span: 7106..7112,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 295,
        column: 28,
        span: 7113..7116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 295,
        column: 30,
        span: 7117..7118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 295,
        column: 33,
        span: 7119..7121,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"maçã\"",
        ),
        line: 295,
        column: 40,
        span: 7122..7128,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
        column: 41,
        span: 7128..7129,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 296,
        column: 0,
        span: 7132..7134,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 297,
        column: 11,
        span: 7140..7145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 297,
        column: 13,
        span: 7146..7147,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 297,
        column: 15,
        span: 7148..7149,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 297,
        column: 0,
        span: 7149..7152,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 298,
        column: 11,
        span: 7158..7163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 298,
        column: 13,
        span: 7164..7165,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 298,
        column: 14,
        span: 7165..7166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 298,
        column: 15,
        span: 7166..7167,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 298,
        column: 17,
        span: 7168..7169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 298,
        column: 23,
        span: 7170..7175,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 298,
        column: 24,
        span: 7175..7176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 298,
        column: 32,
        span: 7176..7184,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 33,
        span: 7184..7185,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 298,
        column: 34,
        span: 7184..7186,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 298,
        column: 35,
        span: 7186..7187,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 298,
        column: 36,
        span: 7186..7188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 37,
        span: 7188..7189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 299,
        column: 12,
        span: 7195..7201,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 13,
        span: 7201..7202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 299,
        column: 14,
        span: 7202..7203,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 299,
        column: 17,
        span: 7204..7206,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'B'",
        ),
        line: 299,
        column: 21,
        span: 7207..7210,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 299,
        column: 25,
        span: 7211..7214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 299,
        column: 27,
        span: 7215..7216,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 299,
        column: 30,
        span: 7217..7219,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 299,
        column: 33,
        span: 7219..7222,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 34,
        span: 7222..7223,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 300,
        column: 0,
        span: 7226..7229,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 301,
        column: 0,
        span: 7230..7233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 303,
        column: 2,
        span: 7235..7236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 3,
        span: 7236..7237,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 4,
        span: 7237..7238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 306,
        column: 7,
        span: 7241..7247,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
        column: 8,
        span: 7247..7248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 306,
        column: 9,
        span: 7248..7249,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 306,
        column: 10,
        span: 7249..7250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 306,
        column: 11,
        span: 7250..7251,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 306,
        column: 12,
        span: 7251..7252,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 306,
        column: 16,
        span: 7253..7256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 306,
        column: 18,
        span: 7257..7258,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 306,
        column: 19,
        span: 7258..7259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 306,
        column: 20,
        span: 7259..7260,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 306,
        column: 21,
        span: 7260..7261,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 306,
        column: 25,
        span: 7262..7265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 306,
        column: 27,
        span: 7266..7267,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 306,
        column: 28,
        span: 7267..7268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 306,
        column: 34,
        span: 7268..7274,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 306,
        column: 35,
        span: 7274..7275,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 306,
        column: 39,
        span: 7276..7279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 306,
        column: 41,
        span: 7280..7281,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 306,
        column: 42,
        span: 7281..7282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 306,
        column: 47,
        span: 7282..7287,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 306,
        column: 48,
        span: 7287..7288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 306,
        column: 56,
        span: 7288..7296,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 306,
        column: 57,
        span: 7296..7297,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 306,
        column: 61,
        span: 7298..7301,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 306,
        column: 65,
        span: 7302..7305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 306,
        column: 67,
        span: 7306..7307,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 306,
        column: 68,
        span: 7307..7308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 306,
        column: 73,
        span: 7308..7313,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 306,
        column: 74,
        span: 7313..7314,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
        column: 75,
        span: 7314..7315,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 311,
        column: 6,
        span: 7391..7396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 311,
        column: 8,
        span: 7397..7398,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 9,
        span: 7398..7399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 311,
        column: 11,
        span: 7400..7401,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 311,
        column: 13,
        span: 7402..7403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 311,
        column: 19,
        span: 7404..7409,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 311,
        column: 20,
        span: 7409..7410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 311,
        column: 28,
        span: 7410..7418,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 29,
        span: 7418..7419,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 30,
        span: 7418..7420,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 31,
        span: 7420..7421,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 33,
        span: 7421..7423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 34,
        span: 7423..7424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 312,
        column: 7,
        span: 7425..7431,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
        column: 8,
        span: 7431..7432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 312,
        column: 9,
        span: 7432..7433,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 312,
        column: 12,
        span: 7434..7436,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 312,
        column: 14,
        span: 7436..7438,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 312,
        column: 18,
        span: 7439..7442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 312,
        column: 20,
        span: 7443..7444,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 312,
        column: 23,
        span: 7445..7447,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(*temporary)\"",
        ),
        line: 312,
        column: 38,
        span: 7448..7462,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 39,
        span: 7462..7463,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 313,
        column: 6,
        span: 7464..7469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 313,
        column: 8,
        span: 7470..7471,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 313,
        column: 9,
        span: 7471..7472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 313,
        column: 11,
        span: 7473..7474,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 313,
        column: 13,
        span: 7475..7476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 313,
        column: 19,
        span: 7477..7482,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 313,
        column: 20,
        span: 7482..7483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 313,
        column: 28,
        span: 7483..7491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
        column: 29,
        span: 7491..7492,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 313,
        column: 30,
        span: 7491..7493,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 313,
        column: 31,
        span: 7493..7494,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 313,
        column: 33,
        span: 7494..7496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
        column: 34,
        span: 7496..7497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 314,
        column: 7,
        span: 7498..7504,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
        column: 8,
        span: 7504..7505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 314,
        column: 9,
        span: 7505..7506,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 314,
        column: 12,
        span: 7507..7509,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 314,
        column: 14,
        span: 7509..7511,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 314,
        column: 18,
        span: 7512..7515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 314,
        column: 20,
        span: 7516..7517,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 314,
        column: 23,
        span: 7518..7520,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(*temporary)\"",
        ),
        line: 314,
        column: 38,
        span: 7521..7535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 314,
        column: 39,
        span: 7535..7536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 315,
        column: 7,
        span: 7537..7543,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 315,
        column: 8,
        span: 7543..7544,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 315,
        column: 11,
        span: 7544..7547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 315,
        column: 17,
        span: 7548..7553,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 315,
        column: 18,
        span: 7553..7554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 315,
        column: 26,
        span: 7554..7562,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 315,
        column: 27,
        span: 7562..7563,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 315,
        column: 28,
        span: 7562..7564,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 315,
        column: 29,
        span: 7564..7565,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 315,
        column: 31,
        span: 7565..7567,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 315,
        column: 32,
        span: 7567..7568,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 315,
        column: 33,
        span: 7568..7569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 316,
        column: 7,
        span: 7570..7576,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 8,
        span: 7576..7577,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 316,
        column: 11,
        span: 7577..7580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 316,
        column: 17,
        span: 7581..7586,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 316,
        column: 18,
        span: 7586..7587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 316,
        column: 26,
        span: 7587..7595,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 27,
        span: 7595..7596,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
        column: 28,
        span: 7595..7597,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 316,
        column: 29,
        span: 7597..7598,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
        column: 31,
        span: 7598..7600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 32,
        span: 7600..7601,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 33,
        span: 7601..7602,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 318,
        column: 9,
        span: 7604..7612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 318,
        column: 11,
        span: 7613..7614,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
        column: 12,
        span: 7614..7615,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
        column: 13,
        span: 7615..7616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 319,
        column: 9,
        span: 7619..7625,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 10,
        span: 7625..7626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 319,
        column: 16,
        span: 7626..7632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 17,
        span: 7632..7633,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 319,
        column: 18,
        span: 7632..7634,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 319,
        column: 19,
        span: 7634..7635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 319,
        column: 25,
        span: 7636..7641,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 319,
        column: 26,
        span: 7641..7642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 319,
        column: 34,
        span: 7642..7650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 35,
        span: 7650..7651,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 319,
        column: 36,
        span: 7650..7652,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 319,
        column: 37,
        span: 7652..7653,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 319,
        column: 38,
        span: 7652..7654,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 39,
        span: 7654..7655,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 40,
        span: 7655..7656,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 319,
        column: 43,
        span: 7657..7659,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 319,
        column: 45,
        span: 7659..7661,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 46,
        span: 7661..7662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 320,
        column: 9,
        span: 7665..7671,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
        column: 10,
        span: 7671..7672,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 320,
        column: 13,
        span: 7672..7675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 320,
        column: 19,
        span: 7676..7681,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 320,
        column: 20,
        span: 7681..7682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 320,
        column: 28,
        span: 7682..7690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
        column: 29,
        span: 7690..7691,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 320,
        column: 30,
        span: 7690..7692,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 320,
        column: 31,
        span: 7692..7693,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 320,
        column: 32,
        span: 7692..7694,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
        column: 33,
        span: 7694..7695,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
        column: 34,
        span: 7695..7696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 321,
        column: 8,
        span: 7699..7704,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 321,
        column: 9,
        span: 7704..7705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 321,
        column: 17,
        span: 7705..7713,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 18,
        span: 7713..7714,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 321,
        column: 19,
        span: 7713..7715,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 321,
        column: 20,
        span: 7715..7716,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 321,
        column: 22,
        span: 7716..7718,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 321,
        column: 23,
        span: 7718..7719,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 321,
        column: 26,
        span: 7719..7722,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 27,
        span: 7722..7723,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 322,
        column: 9,
        span: 7726..7732,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 322,
        column: 0,
        span: 7732..7735,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 323,
        column: 0,
        span: 7736..7739,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 325,
        column: 9,
        span: 7741..7749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 325,
        column: 11,
        span: 7750..7751,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 325,
        column: 12,
        span: 7751..7752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 325,
        column: 13,
        span: 7752..7753,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 325,
        column: 14,
        span: 7753..7754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 325,
        column: 15,
        span: 7754..7755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 325,
        column: 16,
        span: 7755..7756,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 325,
        column: 23,
        span: 7757..7763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 325,
        column: 25,
        span: 7764..7765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 325,
        column: 26,
        span: 7765..7766,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 325,
        column: 27,
        span: 7766..7767,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 325,
        column: 28,
        span: 7766..7768,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 325,
        column: 29,
        span: 7768..7769,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 325,
        column: 31,
        span: 7770..7771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 325,
        column: 33,
        span: 7772..7773,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 325,
        column: 34,
        span: 7773..7774,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 325,
        column: 35,
        span: 7774..7775,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 325,
        column: 0,
        span: 7776..7779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 327,
        column: 7,
        span: 7781..7787,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 8,
        span: 7787..7788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 327,
        column: 9,
        span: 7788..7789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 10,
        span: 7789..7790,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 327,
        column: 11,
        span: 7789..7791,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 327,
        column: 12,
        span: 7791..7792,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 327,
        column: 13,
        span: 7791..7793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 14,
        span: 7793..7794,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 327,
        column: 17,
        span: 7795..7797,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 327,
        column: 20,
        span: 7797..7800,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 21,
        span: 7800..7801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 330,
        column: 6,
        span: 7805..7810,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 330,
        column: 7,
        span: 7810..7811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 330,
        column: 14,
        span: 7811..7818,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
        column: 15,
        span: 7818..7819,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 330,
        column: 18,
        span: 7819..7822,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
        column: 19,
        span: 7822..7823,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 330,
        column: 20,
        span: 7823..7824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 331,
        column: 7,
        span: 7825..7831,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
        column: 8,
        span: 7831..7832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 331,
        column: 13,
        span: 7832..7837,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 331,
        column: 14,
        span: 7837..7838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 331,
        column: 21,
        span: 7838..7845,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
        column: 22,
        span: 7845..7846,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
        column: 23,
        span: 7846..7847,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 331,
        column: 26,
        span: 7848..7850,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 331,
        column: 30,
        span: 7851..7854,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
        column: 31,
        span: 7854..7855,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 336,
        column: 6,
        span: 7899..7904,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 336,
        column: 15,
        span: 7905..7913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectlocals",
        ),
        line: 336,
        column: 29,
        span: 7914..7927,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
        column: 31,
        span: 7928..7929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "level",
        ),
        line: 336,
        column: 36,
        span: 7929..7934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
        column: 37,
        span: 7934..7935,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 337,
        column: 8,
        span: 7938..7943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        line: 337,
        column: 12,
        span: 7944..7947,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 337,
        column: 14,
        span: 7948..7949,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 337,
        column: 16,
        span: 7950..7951,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 337,
        column: 17,
        span: 7951..7952,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 338,
        column: 6,
        span: 7955..7958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 338,
        column: 8,
        span: 7959..7960,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 338,
        column: 10,
        span: 7961..7962,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 338,
        column: 12,
        span: 7962..7964,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 338,
        column: 13,
        span: 7964..7965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 338,
        column: 18,
        span: 7966..7970,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 338,
        column: 19,
        span: 7970..7971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 338,
        column: 23,
        span: 7971..7975,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 338,
        column: 0,
        span: 7976..7978,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 339,
        column: 10,
        span: 7983..7988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 339,
        column: 12,
        span: 7989..7990,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 339,
        column: 13,
        span: 7990..7991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 339,
        column: 15,
        span: 7992..7993,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 339,
        column: 17,
        span: 7994..7995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 339,
        column: 23,
        span: 7996..8001,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 339,
        column: 24,
        span: 8001..8002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 339,
        column: 32,
        span: 8002..8010,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 339,
        column: 33,
        span: 8010..8011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "level",
        ),
        line: 339,
        column: 38,
        span: 8011..8016,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 339,
        column: 40,
        span: 8017..8018,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 339,
        column: 42,
        span: 8018..8020,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 339,
        column: 43,
        span: 8020..8021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 339,
        column: 45,
        span: 8022..8023,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 339,
        column: 46,
        span: 8023..8024,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 340,
        column: 7,
        span: 8029..8031,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 340,
        column: 11,
        span: 8032..8035,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 13,
        span: 8036..8037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 340,
        column: 14,
        span: 8037..8038,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 340,
        column: 18,
        span: 8039..8042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 340,
        column: 25,
        span: 8043..8049,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 340,
        column: 26,
        span: 8049..8050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 340,
        column: 30,
        span: 8050..8054,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 31,
        span: 8054..8055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 340,
        column: 32,
        span: 8055..8056,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
        column: 33,
        span: 8056..8057,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^[a-zA-Z0-9_]+$\"",
        ),
        line: 340,
        column: 51,
        span: 8058..8075,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 52,
        span: 8075..8076,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 53,
        span: 8076..8077,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 340,
        column: 0,
        span: 8078..8082,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 341,
        column: 13,
        span: 8090..8095,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 342,
        column: 0,
        span: 8134..8137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        line: 343,
        column: 8,
        span: 8142..8145,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 343,
        column: 9,
        span: 8145..8146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 343,
        column: 10,
        span: 8146..8147,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 343,
        column: 11,
        span: 8147..8148,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 343,
        column: 13,
        span: 8149..8150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 343,
        column: 0,
        span: 8151..8152,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 344,
        column: 0,
        span: 8155..8158,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 345,
        column: 9,
        span: 8161..8167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        line: 345,
        column: 0,
        span: 8168..8171,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 346,
        column: 0,
        span: 8172..8175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 349,
        column: 2,
        span: 8178..8179,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 349,
        column: 4,
        span: 8180..8181,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 349,
        column: 0,
        span: 8182..8185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 350,
        column: 2,
        span: 8186..8187,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 350,
        column: 4,
        span: 8188..8189,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 350,
        column: 6,
        span: 8190..8191,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 350,
        column: 7,
        span: 8191..8192,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 351,
        column: 9,
        span: 8193..8201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 351,
        column: 11,
        span: 8202..8203,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 351,
        column: 12,
        span: 8203..8204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 351,
        column: 13,
        span: 8204..8205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
        column: 15,
        span: 8206..8207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 351,
        column: 16,
        span: 8207..8208,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 351,
        column: 17,
        span: 8208..8209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 351,
        column: 19,
        span: 8210..8211,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 351,
        column: 20,
        span: 8211..8212,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 351,
        column: 24,
        span: 8213..8216,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
        column: 25,
        span: 8216..8217,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 351,
        column: 31,
        span: 8218..8223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 351,
        column: 35,
        span: 8224..8227,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 351,
        column: 37,
        span: 8228..8229,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 351,
        column: 39,
        span: 8230..8231,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 351,
        column: 42,
        span: 8231..8234,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 351,
        column: 43,
        span: 8234..8235,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 351,
        column: 44,
        span: 8235..8236,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 351,
        column: 50,
        span: 8237..8242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 351,
        column: 52,
        span: 8243..8244,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 351,
        column: 54,
        span: 8245..8246,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 351,
        column: 57,
        span: 8246..8249,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 351,
        column: 0,
        span: 8250..8253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 352,
        column: 6,
        span: 8254..8259,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 352,
        column: 7,
        span: 8259..8260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 352,
        column: 14,
        span: 8260..8267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 15,
        span: 8267..8268,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 352,
        column: 23,
        span: 8268..8276,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 25,
        span: 8277..8278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 352,
        column: 26,
        span: 8278..8279,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 27,
        span: 8279..8280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 353,
        column: 9,
        span: 8283..8289,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 353,
        column: 10,
        span: 8289..8290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 353,
        column: 11,
        span: 8290..8291,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 353,
        column: 14,
        span: 8292..8294,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        line: 353,
        column: 21,
        span: 8295..8301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
        column: 22,
        span: 8301..8302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 354,
        column: 11,
        span: 8305..8313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 12,
        span: 8313..8314,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XX = 12\"",
        ),
        line: 354,
        column: 21,
        span: 8314..8323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 22,
        span: 8323..8324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 356,
        column: 9,
        span: 8391..8397,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 10,
        span: 8397..8398,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 356,
        column: 13,
        span: 8398..8401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 356,
        column: 19,
        span: 8402..8407,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 20,
        span: 8407..8408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 356,
        column: 24,
        span: 8408..8412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 25,
        span: 8412..8413,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a='joao'+1\"",
        ),
        line: 356,
        column: 37,
        span: 8413..8425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 38,
        span: 8425..8426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 39,
        span: 8426..8427,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 40,
        span: 8427..8428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 357,
        column: 8,
        span: 8431..8436,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 357,
        column: 9,
        span: 8436..8437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 357,
        column: 16,
        span: 8437..8444,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 357,
        column: 17,
        span: 8444..8445,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 357,
        column: 25,
        span: 8445..8453,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 357,
        column: 27,
        span: 8454..8455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 357,
        column: 28,
        span: 8455..8456,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 357,
        column: 29,
        span: 8456..8457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 357,
        column: 31,
        span: 8458..8459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 357,
        column: 32,
        span: 8459..8460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 358,
        column: 11,
        span: 8466..8472,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 12,
        span: 8472..8473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 358,
        column: 17,
        span: 8473..8478,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 358,
        column: 18,
        span: 8478..8479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 358,
        column: 25,
        span: 8479..8486,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 26,
        span: 8486..8487,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 358,
        column: 27,
        span: 8486..8488,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 358,
        column: 28,
        span: 8488..8489,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 358,
        column: 32,
        span: 8490..8493,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 33,
        span: 8493..8494,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 358,
        column: 34,
        span: 8494..8495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 358,
        column: 45,
        span: 8495..8506,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 358,
        column: 48,
        span: 8507..8509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 358,
        column: 50,
        span: 8510..8511,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 51,
        span: 8511..8512,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 359,
        column: 10,
        span: 8517..8522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 359,
        column: 12,
        span: 8523..8524,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 359,
        column: 13,
        span: 8524..8525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 359,
        column: 14,
        span: 8525..8526,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 359,
        column: 15,
        span: 8526..8527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 359,
        column: 16,
        span: 8527..8528,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 359,
        column: 18,
        span: 8529..8530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 359,
        column: 24,
        span: 8531..8536,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 359,
        column: 25,
        span: 8536..8537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 359,
        column: 32,
        span: 8537..8544,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 359,
        column: 33,
        span: 8544..8545,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 359,
        column: 34,
        span: 8545..8546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 360,
        column: 11,
        span: 8551..8557,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 12,
        span: 8557..8558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 360,
        column: 13,
        span: 8558..8559,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 360,
        column: 16,
        span: 8560..8562,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        line: 360,
        column: 23,
        span: 8563..8569,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 24,
        span: 8569..8570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 361,
        column: 11,
        span: 8575..8581,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
        column: 12,
        span: 8581..8582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 361,
        column: 13,
        span: 8582..8583,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 361,
        column: 16,
        span: 8584..8586,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'l'",
        ),
        line: 361,
        column: 20,
        span: 8587..8590,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 361,
        column: 24,
        span: 8591..8594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 361,
        column: 26,
        span: 8595..8596,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 361,
        column: 29,
        span: 8597..8599,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 361,
        column: 31,
        span: 8599..8601,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 361,
        column: 32,
        span: 8601..8602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 362,
        column: 10,
        span: 8607..8612,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 362,
        column: 11,
        span: 8612..8613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 362,
        column: 18,
        span: 8613..8620,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 362,
        column: 19,
        span: 8620..8621,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 362,
        column: 22,
        span: 8621..8624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 362,
        column: 23,
        span: 8624..8625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 363,
        column: 11,
        span: 8659..8665,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
        column: 12,
        span: 8665..8666,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 363,
        column: 15,
        span: 8666..8669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 363,
        column: 17,
        span: 8670..8671,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
        column: 18,
        span: 8671..8672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 364,
        column: 6,
        span: 8697..8698,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 364,
        column: 8,
        span: 8699..8700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectlocals",
        ),
        line: 364,
        column: 22,
        span: 8701..8714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 364,
        column: 23,
        span: 8714..8715,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 364,
        column: 24,
        span: 8714..8716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 364,
        column: 25,
        span: 8716..8717,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 365,
        column: 6,
        span: 8720..8723,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 365,
        column: 7,
        span: 8723..8724,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 365,
        column: 11,
        span: 8725..8728,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
        column: 12,
        span: 8728..8729,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 366,
        column: 4,
        span: 8730..8733,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 366,
        column: 5,
        span: 8733..8734,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        line: 366,
        column: 9,
        span: 8735..8738,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 10,
        span: 8738..8739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
        column: 2,
        span: 8741..8742,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 368,
        column: 3,
        span: 8742..8743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 368,
        column: 4,
        span: 8743..8744,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 368,
        column: 5,
        span: 8744..8745,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 6,
        span: 8744..8746,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 7,
        span: 8746..8747,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 8,
        span: 8746..8748,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 9,
        span: 8748..8749,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 10,
        span: 8748..8750,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 11,
        span: 8750..8751,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 12,
        span: 8750..8752,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 13,
        span: 8752..8753,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 14,
        span: 8752..8754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 368,
        column: 15,
        span: 8754..8755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 369,
        column: 7,
        span: 8756..8762,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 369,
        column: 8,
        span: 8762..8763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 369,
        column: 9,
        span: 8763..8764,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 369,
        column: 10,
        span: 8764..8765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 369,
        column: 14,
        span: 8765..8769,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 369,
        column: 17,
        span: 8770..8772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 369,
        column: 19,
        span: 8773..8774,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 369,
        column: 23,
        span: 8775..8778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 369,
        column: 25,
        span: 8779..8780,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 369,
        column: 26,
        span: 8780..8781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 369,
        column: 27,
        span: 8781..8782,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 369,
        column: 30,
        span: 8783..8785,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 369,
        column: 32,
        span: 8785..8787,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 369,
        column: 38,
        span: 8790..8793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 369,
        column: 40,
        span: 8794..8795,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 369,
        column: 41,
        span: 8795..8796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 369,
        column: 42,
        span: 8796..8797,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 369,
        column: 45,
        span: 8798..8800,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 369,
        column: 47,
        span: 8800..8802,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 369,
        column: 51,
        span: 8803..8806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 369,
        column: 53,
        span: 8807..8808,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 369,
        column: 54,
        span: 8808..8809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 369,
        column: 55,
        span: 8809..8810,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 369,
        column: 58,
        span: 8811..8813,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 369,
        column: 62,
        span: 8814..8817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 369,
        column: 63,
        span: 8817..8818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 370,
        column: 7,
        span: 8819..8825,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 370,
        column: 8,
        span: 8825..8826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        line: 370,
        column: 10,
        span: 8826..8828,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 370,
        column: 13,
        span: 8829..8831,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 370,
        column: 16,
        span: 8831..8834,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 370,
        column: 17,
        span: 8834..8835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 371,
        column: 7,
        span: 8836..8842,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
        column: 8,
        span: 8842..8843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 371,
        column: 13,
        span: 8843..8848,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 371,
        column: 14,
        span: 8848..8849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 371,
        column: 21,
        span: 8849..8856,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
        column: 22,
        span: 8856..8857,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
        column: 23,
        span: 8857..8858,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 371,
        column: 26,
        span: 8859..8861,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 371,
        column: 30,
        span: 8862..8865,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
        column: 31,
        span: 8865..8866,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 375,
        column: 0,
        span: 8934..8936,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 376,
        column: 8,
        span: 8939..8944,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 376,
        column: 17,
        span: 8945..8953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 376,
        column: 21,
        span: 8954..8957,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
        column: 23,
        span: 8958..8959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 376,
        column: 24,
        span: 8959..8960,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
        column: 25,
        span: 8960..8961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 376,
        column: 27,
        span: 8962..8963,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
        column: 28,
        span: 8963..8964,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 377,
        column: 7,
        span: 8969..8971,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 377,
        column: 13,
        span: 8972..8977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 377,
        column: 15,
        span: 8978..8979,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 377,
        column: 16,
        span: 8979..8980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 377,
        column: 17,
        span: 8980..8981,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 377,
        column: 18,
        span: 8981..8982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 377,
        column: 19,
        span: 8982..8983,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 377,
        column: 0,
        span: 8984..8987,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 378,
        column: 10,
        span: 8992..8997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 378,
        column: 12,
        span: 8998..8999,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 378,
        column: 13,
        span: 8999..9000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 378,
        column: 15,
        span: 9001..9002,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 378,
        column: 17,
        span: 9003..9004,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 378,
        column: 20,
        span: 9004..9007,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 378,
        column: 21,
        span: 9007..9008,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 378,
        column: 0,
        span: 9008..9011,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 379,
        column: 0,
        span: 9016..9022,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 380,
        column: 0,
        span: 9025..9028,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 382,
        column: 8,
        span: 9032..9037,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 382,
        column: 17,
        span: 9038..9046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 382,
        column: 21,
        span: 9047..9050,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
        column: 23,
        span: 9051..9052,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 382,
        column: 24,
        span: 9052..9053,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 383,
        column: 7,
        span: 9058..9060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 383,
        column: 13,
        span: 9061..9066,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 383,
        column: 14,
        span: 9066..9067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 383,
        column: 21,
        span: 9067..9074,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
        column: 22,
        span: 9074..9075,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
        column: 23,
        span: 9074..9076,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
        column: 24,
        span: 9076..9077,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 383,
        column: 25,
        span: 9077..9078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 383,
        column: 29,
        span: 9078..9082,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 383,
        column: 32,
        span: 9083..9085,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"foo\"",
        ),
        line: 383,
        column: 38,
        span: 9086..9091,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 383,
        column: 0,
        span: 9092..9096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 384,
        column: 10,
        span: 9103..9106,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 384,
        column: 12,
        span: 9107..9108,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 384,
        column: 16,
        span: 9109..9112,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 385,
        column: 12,
        span: 9154..9159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        line: 385,
        column: 16,
        span: 9160..9163,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 385,
        column: 18,
        span: 9164..9165,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 385,
        column: 20,
        span: 9166..9167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 385,
        column: 21,
        span: 9167..9168,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 385,
        column: 23,
        span: 9169..9170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 385,
        column: 27,
        span: 9170..9174,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 385,
        column: 28,
        span: 9174..9175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 385,
        column: 30,
        span: 9176..9177,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 385,
        column: 32,
        span: 9178..9179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 385,
        column: 36,
        span: 9179..9183,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 385,
        column: 37,
        span: 9183..9184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 385,
        column: 39,
        span: 9185..9186,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 385,
        column: 41,
        span: 9187..9188,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 385,
        column: 44,
        span: 9188..9191,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 385,
        column: 45,
        span: 9191..9192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 385,
        column: 47,
        span: 9193..9194,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 385,
        column: 49,
        span: 9195..9196,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 385,
        column: 52,
        span: 9196..9199,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 385,
        column: 53,
        span: 9199..9200,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 386,
        column: 10,
        span: 9207..9210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 386,
        column: 12,
        span: 9211..9212,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 386,
        column: 13,
        span: 9212..9213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 386,
        column: 15,
        span: 9214..9215,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 386,
        column: 18,
        span: 9216..9218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 386,
        column: 24,
        span: 9219..9224,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
        column: 25,
        span: 9224..9225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectlocals",
        ),
        line: 386,
        column: 38,
        span: 9225..9238,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
        column: 39,
        span: 9238..9239,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 386,
        column: 40,
        span: 9238..9240,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
        column: 41,
        span: 9240..9241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
        column: 42,
        span: 9241..9242,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 386,
        column: 0,
        span: 9243..9245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 387,
        column: 15,
        span: 9254..9260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
        column: 16,
        span: 9260..9261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        line: 387,
        column: 19,
        span: 9261..9264,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 387,
        column: 20,
        span: 9264..9265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 387,
        column: 21,
        span: 9265..9266,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 387,
        column: 22,
        span: 9266..9267,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 387,
        column: 25,
        span: 9268..9270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 387,
        column: 27,
        span: 9271..9272,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
        column: 28,
        span: 9272..9273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        line: 388,
        column: 12,
        span: 9282..9285,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 388,
        column: 13,
        span: 9285..9286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 388,
        column: 14,
        span: 9286..9287,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 388,
        column: 15,
        span: 9287..9288,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 388,
        column: 17,
        span: 9289..9290,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 388,
        column: 0,
        span: 9291..9294,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 389,
        column: 0,
        span: 9301..9304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 390,
        column: 13,
        span: 9311..9317,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
        column: 14,
        span: 9317..9318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 390,
        column: 18,
        span: 9318..9322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
        column: 19,
        span: 9322..9323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        line: 390,
        column: 22,
        span: 9323..9326,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
        column: 23,
        span: 9326..9327,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 390,
        column: 26,
        span: 9328..9330,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 390,
        column: 30,
        span: 9331..9334,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
        column: 31,
        span: 9334..9335,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 391,
        column: 0,
        span: 9366..9369,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 392,
        column: 0,
        span: 9372..9375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 394,
        column: 8,
        span: 9379..9384,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 394,
        column: 9,
        span: 9384..9385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 394,
        column: 16,
        span: 9385..9392,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 394,
        column: 17,
        span: 9392..9393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 394,
        column: 20,
        span: 9393..9396,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 21,
        span: 9396..9397,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        line: 394,
        column: 25,
        span: 9398..9401,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 394,
        column: 26,
        span: 9401..9402,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 394,
        column: 27,
        span: 9402..9403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 394,
        column: 31,
        span: 9404..9407,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 394,
        column: 32,
        span: 9407..9408,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 394,
        column: 35,
        span: 9407..9411,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 36,
        span: 9411..9412,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 394,
        column: 40,
        span: 9412..9416,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 394,
        column: 41,
        span: 9416..9417,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 394,
        column: 42,
        span: 9417..9418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 394,
        column: 48,
        span: 9419..9424,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 394,
        column: 49,
        span: 9424..9425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 394,
        column: 56,
        span: 9425..9432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 394,
        column: 57,
        span: 9432..9433,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 394,
        column: 58,
        span: 9433..9434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 395,
        column: 9,
        span: 9437..9443,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 10,
        span: 9443..9444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 395,
        column: 13,
        span: 9444..9447,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 395,
        column: 16,
        span: 9448..9450,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 395,
        column: 20,
        span: 9451..9454,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 21,
        span: 9454..9455,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 396,
        column: 0,
        span: 9456..9459,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 399,
        column: 6,
        span: 9487..9492,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 399,
        column: 15,
        span: 9493..9501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalues",
        ),
        line: 399,
        column: 27,
        span: 9502..9513,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
        column: 29,
        span: 9514..9515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 399,
        column: 30,
        span: 9515..9516,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 31,
        span: 9516..9517,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 400,
        column: 8,
        span: 9520..9525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 400,
        column: 10,
        span: 9526..9527,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 400,
        column: 12,
        span: 9528..9529,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 400,
        column: 14,
        span: 9530..9531,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 400,
        column: 15,
        span: 9531..9532,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 401,
        column: 8,
        span: 9535..9540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 401,
        column: 10,
        span: 9541..9542,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 401,
        column: 12,
        span: 9543..9544,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
        column: 0,
        span: 9544..9546,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 402,
        column: 8,
        span: 9549..9554,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 402,
        column: 13,
        span: 9555..9559,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 402,
        column: 0,
        span: 9560..9562,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 403,
        column: 10,
        span: 9567..9572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 403,
        column: 15,
        span: 9573..9577,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 403,
        column: 16,
        span: 9577..9578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "value",
        ),
        line: 403,
        column: 22,
        span: 9579..9584,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 403,
        column: 24,
        span: 9585..9586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 403,
        column: 30,
        span: 9587..9592,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 403,
        column: 31,
        span: 9592..9593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        line: 403,
        column: 41,
        span: 9593..9603,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 403,
        column: 42,
        span: 9603..9604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 403,
        column: 43,
        span: 9604..9605,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 403,
        column: 44,
        span: 9605..9606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 403,
        column: 46,
        span: 9607..9608,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 403,
        column: 47,
        span: 9608..9609,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 404,
        column: 7,
        span: 9614..9616,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 404,
        column: 11,
        span: 9617..9620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 404,
        column: 16,
        span: 9621..9625,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 404,
        column: 21,
        span: 9626..9630,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 404,
        column: 27,
        span: 9631..9636,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 404,
        column: 0,
        span: 9637..9640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 405,
        column: 11,
        span: 9645..9651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 405,
        column: 12,
        span: 9651..9652,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 405,
        column: 15,
        span: 9652..9655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 405,
        column: 17,
        span: 9656..9657,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 405,
        column: 18,
        span: 9657..9658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 405,
        column: 22,
        span: 9658..9662,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 405,
        column: 23,
        span: 9662..9663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 405,
        column: 24,
        span: 9663..9664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 406,
        column: 6,
        span: 9669..9670,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 406,
        column: 7,
        span: 9670..9671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 406,
        column: 11,
        span: 9671..9675,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 406,
        column: 12,
        span: 9675..9676,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 406,
        column: 14,
        span: 9677..9678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "value",
        ),
        line: 406,
        column: 0,
        span: 9679..9684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 407,
        column: 6,
        span: 9689..9690,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 407,
        column: 8,
        span: 9691..9692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 407,
        column: 10,
        span: 9693..9694,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 407,
        column: 12,
        span: 9695..9696,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 407,
        column: 0,
        span: 9696..9698,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 408,
        column: 0,
        span: 9701..9704,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 409,
        column: 9,
        span: 9707..9713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 409,
        column: 0,
        span: 9714..9715,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 410,
        column: 0,
        span: 9716..9719,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 412,
        column: 6,
        span: 9721..9726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 412,
        column: 8,
        span: 9727..9728,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 412,
        column: 9,
        span: 9728..9729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 412,
        column: 10,
        span: 9729..9730,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 412,
        column: 11,
        span: 9730..9731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 412,
        column: 12,
        span: 9731..9732,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 412,
        column: 14,
        span: 9733..9734,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
        column: 16,
        span: 9734..9736,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 412,
        column: 17,
        span: 9736..9737,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
        column: 18,
        span: 9736..9738,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 412,
        column: 19,
        span: 9738..9739,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
        column: 0,
        span: 9738..9740,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 413,
        column: 6,
        span: 9741..9746,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 413,
        column: 15,
        span: 9747..9755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 413,
        column: 20,
        span: 9756..9760,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 413,
        column: 22,
        span: 9761..9762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 413,
        column: 23,
        span: 9762..9763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 413,
        column: 24,
        span: 9763..9764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 413,
        column: 26,
        span: 9765..9766,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 413,
        column: 28,
        span: 9767..9768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 413,
        column: 30,
        span: 9769..9770,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 413,
        column: 31,
        span: 9770..9771,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 413,
        column: 38,
        span: 9772..9778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 413,
        column: 40,
        span: 9779..9780,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 413,
        column: 0,
        span: 9781..9784,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 414,
        column: 6,
        span: 9785..9790,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 414,
        column: 15,
        span: 9791..9799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 414,
        column: 20,
        span: 9800..9804,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
        column: 22,
        span: 9805..9806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 414,
        column: 23,
        span: 9806..9807,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
        column: 24,
        span: 9807..9808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 414,
        column: 26,
        span: 9809..9810,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 414,
        column: 28,
        span: 9811..9812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 414,
        column: 30,
        span: 9813..9814,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 414,
        column: 31,
        span: 9814..9815,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 414,
        column: 38,
        span: 9816..9822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 414,
        column: 40,
        span: 9823..9824,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 414,
        column: 41,
        span: 9824..9825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 414,
        column: 42,
        span: 9825..9826,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 414,
        column: 0,
        span: 9827..9830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 415,
        column: 7,
        span: 9831..9837,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 415,
        column: 8,
        span: 9837..9838,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 415,
        column: 11,
        span: 9838..9841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 415,
        column: 17,
        span: 9842..9847,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 415,
        column: 18,
        span: 9847..9848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        line: 415,
        column: 28,
        span: 9848..9858,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 415,
        column: 29,
        span: 9858..9859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 415,
        column: 33,
        span: 9859..9863,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 415,
        column: 34,
        span: 9863..9864,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 415,
        column: 36,
        span: 9864..9866,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 415,
        column: 37,
        span: 9866..9867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 415,
        column: 38,
        span: 9867..9868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 416,
        column: 7,
        span: 9869..9875,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 416,
        column: 8,
        span: 9875..9876,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 416,
        column: 11,
        span: 9876..9879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 416,
        column: 17,
        span: 9880..9885,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 416,
        column: 18,
        span: 9885..9886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        line: 416,
        column: 28,
        span: 9886..9896,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 416,
        column: 29,
        span: 9896..9897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 416,
        column: 33,
        span: 9897..9901,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 416,
        column: 34,
        span: 9901..9902,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 416,
        column: 36,
        span: 9902..9904,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 416,
        column: 37,
        span: 9904..9905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 416,
        column: 38,
        span: 9905..9906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 417,
        column: 7,
        span: 9907..9913,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
        column: 8,
        span: 9913..9914,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 417,
        column: 11,
        span: 9914..9917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 417,
        column: 17,
        span: 9918..9923,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 417,
        column: 18,
        span: 9923..9924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        line: 417,
        column: 28,
        span: 9924..9934,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
        column: 29,
        span: 9934..9935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 417,
        column: 33,
        span: 9935..9939,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 417,
        column: 34,
        span: 9939..9940,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 417,
        column: 36,
        span: 9940..9942,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 417,
        column: 37,
        span: 9942..9943,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 417,
        column: 44,
        span: 9944..9950,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
        column: 45,
        span: 9950..9951,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
        column: 46,
        span: 9951..9952,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 418,
        column: 6,
        span: 9953..9958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 418,
        column: 8,
        span: 9959..9960,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 418,
        column: 10,
        span: 9961..9962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalues",
        ),
        line: 418,
        column: 22,
        span: 9963..9974,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 23,
        span: 9974..9975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 418,
        column: 27,
        span: 9975..9979,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 28,
        span: 9979..9980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 419,
        column: 7,
        span: 9981..9987,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 419,
        column: 8,
        span: 9987..9988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 419,
        column: 9,
        span: 9988..9989,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 419,
        column: 10,
        span: 9989..9990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 419,
        column: 11,
        span: 9990..9991,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 419,
        column: 14,
        span: 9992..9994,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 419,
        column: 18,
        span: 9995..9998,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 419,
        column: 22,
        span: 9999..10002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 419,
        column: 24,
        span: 10003..10004,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 419,
        column: 25,
        span: 10004..10005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 419,
        column: 26,
        span: 10005..10006,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 419,
        column: 29,
        span: 10007..10009,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 419,
        column: 31,
        span: 10009..10011,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 419,
        column: 35,
        span: 10012..10015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 419,
        column: 37,
        span: 10016..10017,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 419,
        column: 38,
        span: 10017..10018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 419,
        column: 39,
        span: 10018..10019,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 419,
        column: 42,
        span: 10020..10022,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 419,
        column: 44,
        span: 10022..10024,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 419,
        column: 45,
        span: 10024..10025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 420,
        column: 2,
        span: 10026..10027,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 420,
        column: 4,
        span: 10028..10029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalues",
        ),
        line: 420,
        column: 16,
        span: 10030..10041,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 420,
        column: 17,
        span: 10041..10042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 420,
        column: 21,
        span: 10042..10046,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 420,
        column: 22,
        span: 10046..10047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 421,
        column: 7,
        span: 10048..10054,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 421,
        column: 8,
        span: 10054..10055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 421,
        column: 9,
        span: 10055..10056,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 421,
        column: 10,
        span: 10056..10057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 421,
        column: 11,
        span: 10057..10058,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 421,
        column: 14,
        span: 10059..10061,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 421,
        column: 16,
        span: 10061..10063,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 421,
        column: 20,
        span: 10064..10067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 421,
        column: 22,
        span: 10068..10069,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 421,
        column: 23,
        span: 10069..10070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 421,
        column: 24,
        span: 10070..10071,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 421,
        column: 27,
        span: 10072..10074,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 421,
        column: 29,
        span: 10074..10076,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 421,
        column: 33,
        span: 10077..10080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 421,
        column: 35,
        span: 10081..10082,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 421,
        column: 36,
        span: 10082..10083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 421,
        column: 37,
        span: 10083..10084,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 421,
        column: 40,
        span: 10085..10087,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 421,
        column: 42,
        span: 10087..10089,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 421,
        column: 43,
        span: 10089..10090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 422,
        column: 7,
        span: 10091..10097,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 422,
        column: 8,
        span: 10097..10098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 422,
        column: 13,
        span: 10098..10103,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 422,
        column: 14,
        span: 10103..10104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        line: 422,
        column: 24,
        span: 10104..10114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 422,
        column: 25,
        span: 10114..10115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 422,
        column: 29,
        span: 10115..10119,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
        column: 30,
        span: 10119..10120,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 422,
        column: 32,
        span: 10120..10122,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
        column: 33,
        span: 10122..10123,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 422,
        column: 40,
        span: 10124..10130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 422,
        column: 41,
        span: 10130..10131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 422,
        column: 44,
        span: 10132..10134,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 422,
        column: 48,
        span: 10135..10138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 422,
        column: 49,
        span: 10138..10139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 423,
        column: 7,
        span: 10140..10146,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
        column: 8,
        span: 10146..10147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
        column: 9,
        span: 10147..10148,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 423,
        column: 10,
        span: 10148..10149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 423,
        column: 15,
        span: 10149..10154,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 423,
        column: 16,
        span: 10154..10155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        line: 423,
        column: 26,
        span: 10155..10165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
        column: 27,
        span: 10165..10166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 423,
        column: 31,
        span: 10166..10170,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 423,
        column: 32,
        span: 10170..10171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 423,
        column: 34,
        span: 10171..10173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
        column: 35,
        span: 10173..10174,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 423,
        column: 36,
        span: 10174..10175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
        column: 37,
        span: 10175..10176,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 423,
        column: 38,
        span: 10176..10177,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 423,
        column: 39,
        span: 10176..10178,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 423,
        column: 40,
        span: 10178..10179,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 423,
        column: 43,
        span: 10180..10182,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 423,
        column: 50,
        span: 10183..10189,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
        column: 51,
        span: 10189..10190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 425,
        column: 7,
        span: 10261..10267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 425,
        column: 8,
        span: 10267..10268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 425,
        column: 13,
        span: 10268..10273,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 425,
        column: 14,
        span: 10273..10274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        line: 425,
        column: 24,
        span: 10274..10284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 425,
        column: 25,
        span: 10284..10285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 425,
        column: 31,
        span: 10285..10291,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 425,
        column: 32,
        span: 10291..10292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 425,
        column: 38,
        span: 10292..10298,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 425,
        column: 39,
        span: 10298..10299,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 425,
        column: 42,
        span: 10299..10302,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 425,
        column: 43,
        span: 10302..10303,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 425,
        column: 47,
        span: 10304..10307,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
        column: 48,
        span: 10307..10308,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 425,
        column: 49,
        span: 10308..10309,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
        column: 51,
        span: 10309..10311,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
        column: 52,
        span: 10311..10312,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 425,
        column: 55,
        span: 10313..10315,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 425,
        column: 58,
        span: 10316..10318,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
        column: 59,
        span: 10318..10319,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 429,
        column: 6,
        span: 10347..10352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 429,
        column: 8,
        span: 10353..10354,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 429,
        column: 9,
        span: 10354..10355,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 429,
        column: 0,
        span: 10354..10356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 430,
        column: 6,
        span: 10357..10362,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 430,
        column: 7,
        span: 10362..10363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 430,
        column: 14,
        span: 10363..10370,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 430,
        column: 15,
        span: 10370..10371,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 430,
        column: 23,
        span: 10371..10379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 430,
        column: 25,
        span: 10380..10381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 430,
        column: 26,
        span: 10381..10382,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 430,
        column: 27,
        span: 10382..10383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 430,
        column: 29,
        span: 10384..10385,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 430,
        column: 30,
        span: 10385..10386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 430,
        column: 31,
        span: 10386..10387,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 430,
        column: 32,
        span: 10387..10388,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 430,
        column: 33,
        span: 10387..10389,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 430,
        column: 37,
        span: 10390..10393,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 430,
        column: 38,
        span: 10393..10394,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 430,
        column: 41,
        span: 10395..10397,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 430,
        column: 42,
        span: 10397..10398,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 430,
        column: 44,
        span: 10398..10400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 430,
        column: 45,
        span: 10400..10401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 431,
        column: 2,
        span: 10402..10403,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 431,
        column: 3,
        span: 10403..10404,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 431,
        column: 4,
        span: 10403..10405,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 431,
        column: 5,
        span: 10405..10406,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 431,
        column: 9,
        span: 10407..10410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 431,
        column: 11,
        span: 10411..10412,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 431,
        column: 12,
        span: 10412..10413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 431,
        column: 13,
        span: 10412..10414,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 431,
        column: 14,
        span: 10414..10415,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 431,
        column: 18,
        span: 10414..10419,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 431,
        column: 21,
        span: 10420..10422,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 431,
        column: 25,
        span: 10423..10426,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 431,
        column: 26,
        span: 10426..10427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 431,
        column: 33,
        span: 10428..10434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 431,
        column: 34,
        span: 10434..10435,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 431,
        column: 38,
        span: 10434..10439,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 431,
        column: 40,
        span: 10440..10441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 431,
        column: 42,
        span: 10442..10443,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 431,
        column: 46,
        span: 10444..10447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 431,
        column: 48,
        span: 10448..10449,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 431,
        column: 50,
        span: 10450..10451,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1012",
                    after_decimal: "",
                },
            ),
        ),
        line: 431,
        column: 55,
        span: 10451..10456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 431,
        column: 56,
        span: 10456..10457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 432,
        column: 6,
        span: 10458..10463,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 432,
        column: 7,
        span: 10463..10464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 432,
        column: 14,
        span: 10464..10471,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
        column: 15,
        span: 10471..10472,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 432,
        column: 23,
        span: 10472..10480,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
        column: 25,
        span: 10481..10482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 432,
        column: 26,
        span: 10482..10483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
        column: 27,
        span: 10483..10484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 432,
        column: 29,
        span: 10485..10486,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 432,
        column: 30,
        span: 10486..10487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 432,
        column: 31,
        span: 10487..10488,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 432,
        column: 32,
        span: 10488..10489,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 432,
        column: 33,
        span: 10488..10490,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 432,
        column: 37,
        span: 10491..10494,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 432,
        column: 38,
        span: 10494..10495,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 432,
        column: 41,
        span: 10496..10498,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 432,
        column: 42,
        span: 10498..10499,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 432,
        column: 44,
        span: 10499..10501,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
        column: 45,
        span: 10501..10502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 433,
        column: 2,
        span: 10503..10504,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 433,
        column: 3,
        span: 10504..10505,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 433,
        column: 4,
        span: 10504..10506,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 433,
        column: 5,
        span: 10506..10507,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 433,
        column: 9,
        span: 10508..10511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 433,
        column: 11,
        span: 10512..10513,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 433,
        column: 12,
        span: 10513..10514,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 433,
        column: 13,
        span: 10513..10515,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 433,
        column: 14,
        span: 10515..10516,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 433,
        column: 18,
        span: 10515..10520,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 433,
        column: 21,
        span: 10521..10523,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 433,
        column: 25,
        span: 10524..10527,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 433,
        column: 26,
        span: 10527..10528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 433,
        column: 33,
        span: 10529..10535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 433,
        column: 34,
        span: 10535..10536,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "250",
                    after_decimal: "",
                },
            ),
        ),
        line: 433,
        column: 37,
        span: 10535..10539,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 433,
        column: 39,
        span: 10540..10541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 433,
        column: 41,
        span: 10542..10543,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 433,
        column: 45,
        span: 10544..10547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 433,
        column: 47,
        span: 10548..10549,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 433,
        column: 49,
        span: 10550..10551,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 433,
        column: 53,
        span: 10551..10555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 433,
        column: 54,
        span: 10555..10556,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 434,
        column: 6,
        span: 10557..10562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 434,
        column: 8,
        span: 10563..10564,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
        column: 9,
        span: 10564..10565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 434,
        column: 10,
        span: 10565..10566,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
        column: 11,
        span: 10566..10567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 434,
        column: 12,
        span: 10567..10568,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 434,
        column: 14,
        span: 10569..10570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 434,
        column: 20,
        span: 10571..10576,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 434,
        column: 21,
        span: 10576..10577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 434,
        column: 28,
        span: 10577..10584,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
        column: 29,
        span: 10584..10585,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
        column: 30,
        span: 10585..10586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 435,
        column: 7,
        span: 10587..10593,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 435,
        column: 8,
        span: 10593..10594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 435,
        column: 9,
        span: 10594..10595,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 435,
        column: 12,
        span: 10596..10598,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 435,
        column: 15,
        span: 10599..10601,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 435,
        column: 19,
        span: 10602..10605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 435,
        column: 21,
        span: 10606..10607,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 435,
        column: 24,
        span: 10608..10610,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 435,
        column: 26,
        span: 10610..10612,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 435,
        column: 27,
        span: 10612..10613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 436,
        column: 6,
        span: 10614..10619,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 436,
        column: 7,
        span: 10619..10620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 436,
        column: 14,
        span: 10620..10627,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 436,
        column: 15,
        span: 10627..10628,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 436,
        column: 23,
        span: 10628..10636,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 436,
        column: 25,
        span: 10637..10638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 436,
        column: 26,
        span: 10638..10639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 436,
        column: 27,
        span: 10639..10640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 436,
        column: 29,
        span: 10641..10642,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 436,
        column: 30,
        span: 10642..10643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 436,
        column: 31,
        span: 10643..10644,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 436,
        column: 32,
        span: 10644..10645,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 436,
        column: 33,
        span: 10644..10646,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 436,
        column: 37,
        span: 10647..10650,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 436,
        column: 38,
        span: 10650..10651,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 436,
        column: 41,
        span: 10652..10654,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 436,
        column: 42,
        span: 10654..10655,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4000",
                    after_decimal: "",
                },
            ),
        ),
        line: 436,
        column: 47,
        span: 10655..10660,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 436,
        column: 48,
        span: 10660..10661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 437,
        column: 2,
        span: 10662..10663,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 437,
        column: 3,
        span: 10663..10664,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 437,
        column: 4,
        span: 10663..10665,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 437,
        column: 5,
        span: 10665..10666,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 437,
        column: 9,
        span: 10667..10670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 437,
        column: 11,
        span: 10671..10672,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 437,
        column: 12,
        span: 10672..10673,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 437,
        column: 13,
        span: 10672..10674,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 437,
        column: 14,
        span: 10674..10675,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 437,
        column: 18,
        span: 10674..10679,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 437,
        column: 21,
        span: 10680..10682,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 437,
        column: 25,
        span: 10683..10686,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 437,
        column: 26,
        span: 10686..10687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 437,
        column: 33,
        span: 10688..10694,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 437,
        column: 34,
        span: 10694..10695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 437,
        column: 35,
        span: 10695..10696,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 437,
        column: 38,
        span: 10697..10699,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 437,
        column: 40,
        span: 10699..10701,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 437,
        column: 41,
        span: 10701..10702,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 439,
        column: 0,
        span: 10704..10706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 440,
        column: 8,
        span: 10709..10714,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 440,
        column: 9,
        span: 10714..10715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 440,
        column: 16,
        span: 10715..10722,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 440,
        column: 17,
        span: 10722..10723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 440,
        column: 22,
        span: 10723..10728,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 440,
        column: 23,
        span: 10728..10729,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 440,
        column: 26,
        span: 10730..10732,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 440,
        column: 27,
        span: 10732..10733,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 440,
        column: 29,
        span: 10733..10735,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 440,
        column: 30,
        span: 10735..10736,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        line: 440,
        column: 32,
        span: 10735..10738,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 440,
        column: 34,
        span: 10739..10740,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 440,
        column: 36,
        span: 10740..10742,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 440,
        column: 37,
        span: 10742..10743,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 441,
        column: 8,
        span: 10768..10773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 441,
        column: 10,
        span: 10774..10775,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 441,
        column: 11,
        span: 10775..10776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 441,
        column: 12,
        span: 10776..10777,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 441,
        column: 13,
        span: 10777..10778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 441,
        column: 14,
        span: 10778..10779,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 441,
        column: 16,
        span: 10780..10781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 441,
        column: 22,
        span: 10782..10787,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 441,
        column: 23,
        span: 10787..10788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 441,
        column: 30,
        span: 10788..10795,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 441,
        column: 31,
        span: 10795..10796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 441,
        column: 32,
        span: 10796..10797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 442,
        column: 9,
        span: 10800..10806,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 442,
        column: 10,
        span: 10806..10807,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 442,
        column: 11,
        span: 10807..10808,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 442,
        column: 12,
        span: 10808..10809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 442,
        column: 17,
        span: 10809..10814,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 442,
        column: 18,
        span: 10814..10815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 442,
        column: 25,
        span: 10815..10822,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 442,
        column: 26,
        span: 10822..10823,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 442,
        column: 27,
        span: 10823..10824,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 442,
        column: 28,
        span: 10824..10825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 442,
        column: 29,
        span: 10825..10826,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 442,
        column: 30,
        span: 10826..10827,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 442,
        column: 31,
        span: 10826..10828,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 442,
        column: 32,
        span: 10828..10829,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 442,
        column: 35,
        span: 10830..10832,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 442,
        column: 37,
        span: 10832..10834,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 442,
        column: 38,
        span: 10834..10835,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        line: 442,
        column: 40,
        span: 10834..10837,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 442,
        column: 42,
        span: 10838..10839,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 442,
        column: 44,
        span: 10839..10841,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 442,
        column: 45,
        span: 10841..10842,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 443,
        column: 0,
        span: 10843..10846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 445,
        column: 6,
        span: 10848..10853,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 445,
        column: 7,
        span: 10853..10854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 445,
        column: 14,
        span: 10854..10861,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 445,
        column: 15,
        span: 10861..10862,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 445,
        column: 16,
        span: 10862..10863,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 449,
        column: 6,
        span: 10890..10895,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 449,
        column: 15,
        span: 10896..10904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 449,
        column: 17,
        span: 10905..10906,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 449,
        column: 19,
        span: 10907..10908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 449,
        column: 20,
        span: 10908..10909,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 449,
        column: 21,
        span: 10909..10910,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 450,
        column: 5,
        span: 10913..10915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 450,
        column: 7,
        span: 10916..10917,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 450,
        column: 0,
        span: 10918..10922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 451,
        column: 11,
        span: 10927..10933,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 12,
        span: 10933..10934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 451,
        column: 17,
        span: 10934..10939,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 451,
        column: 18,
        span: 10939..10940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 451,
        column: 25,
        span: 10940..10947,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 26,
        span: 10947..10948,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 451,
        column: 27,
        span: 10947..10949,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 451,
        column: 28,
        span: 10949..10950,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"S\"",
        ),
        line: 451,
        column: 32,
        span: 10951..10954,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 33,
        span: 10954..10955,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 451,
        column: 34,
        span: 10955..10956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        line: 451,
        column: 38,
        span: 10956..10960,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 451,
        column: 41,
        span: 10961..10963,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua\"",
        ),
        line: 451,
        column: 47,
        span: 10964..10969,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 48,
        span: 10969..10970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 452,
        column: 11,
        span: 10975..10981,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 452,
        column: 12,
        span: 10981..10982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 452,
        column: 17,
        span: 10982..10987,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 452,
        column: 18,
        span: 10987..10988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 452,
        column: 25,
        span: 10988..10995,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 452,
        column: 26,
        span: 10995..10996,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 452,
        column: 27,
        span: 10995..10997,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 452,
        column: 28,
        span: 10997..10998,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        line: 452,
        column: 32,
        span: 10999..11002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 452,
        column: 33,
        span: 11002..11003,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 452,
        column: 34,
        span: 11003..11004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "istailcall",
        ),
        line: 452,
        column: 44,
        span: 11004..11014,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 452,
        column: 47,
        span: 11015..11017,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 452,
        column: 52,
        span: 11018..11022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 452,
        column: 53,
        span: 11022..11023,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 453,
        column: 10,
        span: 11028..11033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tail",
        ),
        line: 453,
        column: 15,
        span: 11034..11038,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 453,
        column: 17,
        span: 11039..11040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 453,
        column: 23,
        span: 11041..11046,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 453,
        column: 24,
        span: 11046..11047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 453,
        column: 31,
        span: 11047..11054,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 453,
        column: 32,
        span: 11054..11055,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 453,
        column: 33,
        span: 11054..11056,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 453,
        column: 34,
        span: 11056..11057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 454,
        column: 11,
        span: 11062..11068,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 454,
        column: 12,
        span: 11068..11069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tail",
        ),
        line: 454,
        column: 16,
        span: 11069..11073,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 454,
        column: 17,
        span: 11073..11074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 454,
        column: 21,
        span: 11074..11078,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 454,
        column: 24,
        span: 11079..11081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g1",
        ),
        line: 454,
        column: 27,
        span: 11082..11084,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 454,
        column: 31,
        span: 11085..11088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tail",
        ),
        line: 454,
        column: 36,
        span: 11089..11093,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 454,
        column: 37,
        span: 11093..11094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "istailcall",
        ),
        line: 454,
        column: 47,
        span: 11094..11104,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 454,
        column: 50,
        span: 11105..11107,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 454,
        column: 55,
        span: 11108..11112,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 454,
        column: 56,
        span: 11112..11113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 455,
        column: 11,
        span: 11118..11124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 455,
        column: 12,
        span: 11124..11125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 455,
        column: 17,
        span: 11125..11130,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 455,
        column: 18,
        span: 11130..11131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 455,
        column: 25,
        span: 11131..11138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 455,
        column: 26,
        span: 11138..11139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 455,
        column: 27,
        span: 11138..11140,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 455,
        column: 28,
        span: 11140..11141,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"S\"",
        ),
        line: 455,
        column: 32,
        span: 11142..11145,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 455,
        column: 33,
        span: 11145..11146,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 455,
        column: 34,
        span: 11146..11147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        line: 455,
        column: 38,
        span: 11147..11151,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 455,
        column: 41,
        span: 11152..11154,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"main\"",
        ),
        line: 455,
        column: 48,
        span: 11155..11161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 455,
        column: 49,
        span: 11161..11162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 456,
        column: 10,
        span: 11167..11172,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 456,
        column: 13,
        span: 11172..11175,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 457,
        column: 0,
        span: 11180..11183,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 458,
        column: 0,
        span: 11184..11187,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 460,
        column: 9,
        span: 11189..11197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 460,
        column: 11,
        span: 11198..11199,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 460,
        column: 12,
        span: 11199..11200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 460,
        column: 13,
        span: 11200..11201,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 460,
        column: 14,
        span: 11201..11202,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 460,
        column: 21,
        span: 11203..11209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 460,
        column: 23,
        span: 11210..11211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 460,
        column: 24,
        span: 11211..11212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 460,
        column: 25,
        span: 11212..11213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 460,
        column: 26,
        span: 11213..11214,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 460,
        column: 0,
        span: 11215..11218,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 462,
        column: 9,
        span: 11220..11228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g1",
        ),
        line: 462,
        column: 12,
        span: 11229..11231,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 462,
        column: 13,
        span: 11231..11232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 462,
        column: 14,
        span: 11232..11233,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 462,
        column: 15,
        span: 11233..11234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 462,
        column: 17,
        span: 11235..11236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 462,
        column: 18,
        span: 11236..11237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 462,
        column: 19,
        span: 11237..11238,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 462,
        column: 20,
        span: 11238..11239,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 462,
        column: 0,
        span: 11240..11243,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 464,
        column: 6,
        span: 11245..11250,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 464,
        column: 15,
        span: 11251..11259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 464,
        column: 17,
        span: 11260..11261,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 464,
        column: 19,
        span: 11262..11263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 464,
        column: 20,
        span: 11263..11264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
        column: 21,
        span: 11264..11265,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 464,
        column: 27,
        span: 11266..11271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 464,
        column: 29,
        span: 11272..11273,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 464,
        column: 30,
        span: 11273..11274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g1",
        ),
        line: 464,
        column: 32,
        span: 11274..11276,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 464,
        column: 33,
        span: 11276..11277,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 464,
        column: 40,
        span: 11278..11284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 464,
        column: 42,
        span: 11285..11286,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 464,
        column: 43,
        span: 11286..11287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 464,
        column: 44,
        span: 11287..11288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
        column: 45,
        span: 11288..11289,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 464,
        column: 0,
        span: 11290..11293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 466,
        column: 2,
        span: 11295..11296,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 466,
        column: 3,
        span: 11296..11297,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 466,
        column: 7,
        span: 11297..11301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
        column: 8,
        span: 11301..11302,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 468,
        column: 6,
        span: 11304..11309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 468,
        column: 8,
        span: 11310..11311,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 468,
        column: 10,
        span: 11312..11313,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 468,
        column: 12,
        span: 11314..11315,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 468,
        column: 13,
        span: 11315..11316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 469,
        column: 6,
        span: 11317..11322,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 469,
        column: 7,
        span: 11322..11323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 469,
        column: 14,
        span: 11323..11330,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 469,
        column: 15,
        span: 11330..11331,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 469,
        column: 23,
        span: 11331..11339,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 469,
        column: 25,
        span: 11340..11341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 469,
        column: 26,
        span: 11341..11342,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 469,
        column: 27,
        span: 11342..11343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 469,
        column: 33,
        span: 11344..11349,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 469,
        column: 34,
        span: 11349..11350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 469,
        column: 40,
        span: 11350..11356,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 469,
        column: 41,
        span: 11356..11357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 469,
        column: 42,
        span: 11357..11358,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 469,
        column: 43,
        span: 11358..11359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 469,
        column: 45,
        span: 11360..11361,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 469,
        column: 46,
        span: 11361..11362,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 469,
        column: 50,
        span: 11363..11366,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 469,
        column: 51,
        span: 11366..11367,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cr\"",
        ),
        line: 469,
        column: 56,
        span: 11368..11372,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 469,
        column: 57,
        span: 11372..11373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 470,
        column: 2,
        span: 11374..11375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
        column: 3,
        span: 11375..11376,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 470,
        column: 8,
        span: 11376..11381,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
        column: 9,
        span: 11381..11382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 471,
        column: 6,
        span: 11383..11388,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 471,
        column: 7,
        span: 11388..11389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 471,
        column: 14,
        span: 11389..11396,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 471,
        column: 15,
        span: 11396..11397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 471,
        column: 16,
        span: 11397..11398,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 472,
        column: 6,
        span: 11399..11404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 472,
        column: 10,
        span: 11405..11408,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 472,
        column: 12,
        span: 11409..11410,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 472,
        column: 14,
        span: 11411..11412,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        line: 472,
        column: 22,
        span: 11412..11420,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 472,
        column: 23,
        span: 11420..11421,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        line: 473,
        column: 9,
        span: 11457..11463,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 473,
        column: 10,
        span: 11463..11464,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tail call\"",
        ),
        line: 473,
        column: 22,
        span: 11465..11476,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 473,
        column: 23,
        span: 11476..11477,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        line: 473,
        column: 30,
        span: 11478..11484,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 473,
        column: 31,
        span: 11484..11485,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tail call\"",
        ),
        line: 473,
        column: 43,
        span: 11486..11497,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 473,
        column: 44,
        span: 11497..11498,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        line: 474,
        column: 11,
        span: 11501..11509,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 474,
        column: 12,
        span: 11509..11510,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        line: 474,
        column: 21,
        span: 11511..11519,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 474,
        column: 22,
        span: 11519..11520,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        line: 475,
        column: 9,
        span: 11523..11529,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 475,
        column: 10,
        span: 11529..11530,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 476,
        column: 2,
        span: 11560..11561,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 477,
        column: 4,
        span: 11562..11565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 477,
        column: 6,
        span: 11566..11567,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 477,
        column: 8,
        span: 11568..11569,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 477,
        column: 10,
        span: 11569..11571,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 477,
        column: 11,
        span: 11571..11572,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 477,
        column: 13,
        span: 11573..11574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 477,
        column: 16,
        span: 11574..11577,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 477,
        column: 19,
        span: 11578..11580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 477,
        column: 26,
        span: 11581..11587,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 477,
        column: 27,
        span: 11587..11588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 477,
        column: 30,
        span: 11588..11591,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 477,
        column: 31,
        span: 11591..11592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 477,
        column: 32,
        span: 11592..11593,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 477,
        column: 33,
        span: 11593..11594,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 477,
        column: 36,
        span: 11595..11597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 477,
        column: 42,
        span: 11598..11603,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 477,
        column: 43,
        span: 11603..11604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 477,
        column: 49,
        span: 11604..11610,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 477,
        column: 50,
        span: 11610..11611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 477,
        column: 51,
        span: 11611..11612,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 477,
        column: 52,
        span: 11612..11613,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 477,
        column: 54,
        span: 11613..11615,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 477,
        column: 55,
        span: 11615..11616,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 477,
        column: 56,
        span: 11616..11617,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 477,
        column: 0,
        span: 11618..11621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 479,
        column: 2,
        span: 11623..11624,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 479,
        column: 4,
        span: 11625..11626,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 479,
        column: 0,
        span: 11626..11628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 480,
        column: 6,
        span: 11629..11634,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 480,
        column: 7,
        span: 11634..11635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 480,
        column: 14,
        span: 11635..11642,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 480,
        column: 15,
        span: 11642..11643,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 480,
        column: 23,
        span: 11643..11651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 480,
        column: 25,
        span: 11652..11653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 480,
        column: 26,
        span: 11653..11654,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 480,
        column: 27,
        span: 11654..11655,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 481,
        column: 19,
        span: 11672..11674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 481,
        column: 21,
        span: 11675..11676,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 481,
        column: 24,
        span: 11677..11679,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tail call\"",
        ),
        line: 481,
        column: 36,
        span: 11680..11691,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 481,
        column: 0,
        span: 11692..11696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 482,
        column: 20,
        span: 11715..11716,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 482,
        column: 22,
        span: 11717..11718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 482,
        column: 24,
        span: 11719..11720,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 482,
        column: 26,
        span: 11721..11722,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 482,
        column: 0,
        span: 11722..11724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 483,
        column: 25,
        span: 11743..11749,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 483,
        column: 26,
        span: 11749..11750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 483,
        column: 31,
        span: 11750..11755,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 483,
        column: 32,
        span: 11755..11756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 483,
        column: 39,
        span: 11756..11763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 483,
        column: 40,
        span: 11763..11764,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 483,
        column: 41,
        span: 11763..11765,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 483,
        column: 42,
        span: 11765..11766,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        line: 483,
        column: 46,
        span: 11767..11770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 483,
        column: 47,
        span: 11770..11771,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 483,
        column: 48,
        span: 11771..11772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "istailcall",
        ),
        line: 483,
        column: 58,
        span: 11772..11782,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 483,
        column: 61,
        span: 11783..11785,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 483,
        column: 66,
        span: 11786..11790,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 483,
        column: 67,
        span: 11790..11791,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 484,
        column: 0,
        span: 11808..11812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 485,
        column: 25,
        span: 11831..11837,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 485,
        column: 26,
        span: 11837..11838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 485,
        column: 31,
        span: 11838..11843,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 485,
        column: 32,
        span: 11843..11844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 485,
        column: 39,
        span: 11844..11851,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 485,
        column: 40,
        span: 11851..11852,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 485,
        column: 41,
        span: 11851..11853,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 485,
        column: 42,
        span: 11853..11854,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        line: 485,
        column: 46,
        span: 11855..11858,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 485,
        column: 47,
        span: 11858..11859,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 485,
        column: 48,
        span: 11859..11860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "istailcall",
        ),
        line: 485,
        column: 58,
        span: 11860..11870,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 485,
        column: 61,
        span: 11871..11873,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 485,
        column: 67,
        span: 11874..11879,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 485,
        column: 68,
        span: 11879..11880,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 486,
        column: 0,
        span: 11897..11900,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 487,
        column: 18,
        span: 11915..11918,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 487,
        column: 19,
        span: 11918..11919,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        line: 487,
        column: 23,
        span: 11920..11923,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 487,
        column: 24,
        span: 11923..11924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 488,
        column: 2,
        span: 11925..11926,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 488,
        column: 3,
        span: 11926..11927,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 488,
        column: 8,
        span: 11927..11932,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 488,
        column: 9,
        span: 11932..11933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 489,
        column: 6,
        span: 11934..11939,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 489,
        column: 7,
        span: 11939..11940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 489,
        column: 14,
        span: 11940..11947,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 489,
        column: 15,
        span: 11947..11948,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 489,
        column: 16,
        span: 11948..11949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 490,
        column: 7,
        span: 11950..11956,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 490,
        column: 8,
        span: 11956..11957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 490,
        column: 9,
        span: 11957..11958,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 490,
        column: 12,
        span: 11959..11961,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 490,
        column: 14,
        span: 11961..11963,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 490,
        column: 15,
        span: 11963..11964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 492,
        column: 4,
        span: 11986..11989,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 492,
        column: 6,
        span: 11990..11991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 492,
        column: 12,
        span: 11992..11997,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 492,
        column: 16,
        span: 11998..12001,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        line: 492,
        column: 21,
        span: 12001..12006,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 492,
        column: 24,
        span: 12007..12009,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30000",
                    after_decimal: "",
                },
            ),
        ),
        line: 492,
        column: 0,
        span: 12009..12015,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 493,
        column: 6,
        span: 12016..12021,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 493,
        column: 15,
        span: 12022..12030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 493,
        column: 19,
        span: 12031..12034,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 493,
        column: 21,
        span: 12035..12036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 493,
        column: 22,
        span: 12036..12037,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 493,
        column: 23,
        span: 12037..12038,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 494,
        column: 5,
        span: 12041..12043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 494,
        column: 7,
        span: 12044..12045,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 494,
        column: 9,
        span: 12045..12047,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 494,
        column: 10,
        span: 12046..12048,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 494,
        column: 0,
        span: 12049..12053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 495,
        column: 11,
        span: 12058..12064,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 495,
        column: 12,
        span: 12064..12065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 495,
        column: 17,
        span: 12065..12070,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 495,
        column: 18,
        span: 12070..12071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 495,
        column: 25,
        span: 12071..12078,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 495,
        column: 26,
        span: 12078..12079,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 495,
        column: 27,
        span: 12078..12080,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 495,
        column: 28,
        span: 12080..12081,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 495,
        column: 29,
        span: 12081..12082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        line: 495,
        column: 33,
        span: 12082..12086,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 495,
        column: 36,
        span: 12087..12089,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"main\"",
        ),
        line: 495,
        column: 43,
        span: 12090..12096,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 495,
        column: 44,
        span: 12096..12097,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 496,
        column: 10,
        span: 12102..12107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        line: 496,
        column: 15,
        span: 12108..12112,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 496,
        column: 17,
        span: 12113..12114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 496,
        column: 23,
        span: 12115..12120,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 496,
        column: 24,
        span: 12120..12121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 496,
        column: 31,
        span: 12121..12128,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 496,
        column: 32,
        span: 12128..12129,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 496,
        column: 33,
        span: 12128..12130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 496,
        column: 34,
        span: 12130..12131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 497,
        column: 11,
        span: 12136..12142,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 497,
        column: 12,
        span: 12142..12143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        line: 497,
        column: 16,
        span: 12143..12147,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 497,
        column: 17,
        span: 12147..12148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "istailcall",
        ),
        line: 497,
        column: 27,
        span: 12148..12158,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 497,
        column: 30,
        span: 12159..12161,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 497,
        column: 35,
        span: 12162..12166,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 497,
        column: 39,
        span: 12167..12170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        line: 497,
        column: 44,
        span: 12171..12175,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 497,
        column: 45,
        span: 12175..12176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 497,
        column: 49,
        span: 12176..12180,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 497,
        column: 52,
        span: 12181..12183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 497,
        column: 56,
        span: 12184..12187,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 497,
        column: 57,
        span: 12187..12188,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 498,
        column: 7,
        span: 12191..12195,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 498,
        column: 14,
        span: 12196..12202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 498,
        column: 18,
        span: 12203..12206,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 498,
        column: 19,
        span: 12206..12207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 498,
        column: 20,
        span: 12207..12208,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 498,
        column: 21,
        span: 12208..12209,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 498,
        column: 22,
        span: 12208..12210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 498,
        column: 23,
        span: 12210..12211,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 499,
        column: 0,
        span: 12214..12217,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 500,
        column: 0,
        span: 12218..12221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 502,
        column: 4,
        span: 12223..12226,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 502,
        column: 5,
        span: 12226..12227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 502,
        column: 8,
        span: 12227..12230,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 502,
        column: 9,
        span: 12230..12231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 505,
        column: 6,
        span: 12234..12239,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 505,
        column: 9,
        span: 12239..12242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 509,
        column: 3,
        span: 12283..12285,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 509,
        column: 5,
        span: 12286..12287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 509,
        column: 10,
        span: 12288..12292,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  local A = function ()\n    return x\n  end\n  return\n]]",
        ),
        line: 514,
        column: 3,
        span: 12292..12349,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 516,
        column: 6,
        span: 12351..12356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 516,
        column: 8,
        span: 12357..12358,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 516,
        column: 10,
        span: 12359..12360,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 516,
        column: 0,
        span: 12360..12362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 518,
        column: 6,
        span: 12435..12440,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 518,
        column: 7,
        span: 12440..12441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 518,
        column: 14,
        span: 12441..12448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 518,
        column: 15,
        span: 12448..12449,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 518,
        column: 23,
        span: 12449..12457,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 518,
        column: 25,
        span: 12458..12459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 518,
        column: 26,
        span: 12459..12460,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 518,
        column: 27,
        span: 12460..12461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 518,
        column: 29,
        span: 12462..12463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 518,
        column: 30,
        span: 12463..12464,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 519,
        column: 5,
        span: 12467..12469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 519,
        column: 7,
        span: 12470..12471,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 519,
        column: 10,
        span: 12472..12474,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 519,
        column: 12,
        span: 12474..12476,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 519,
        column: 17,
        span: 12477..12481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 519,
        column: 19,
        span: 12482..12483,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 519,
        column: 21,
        span: 12484..12485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 519,
        column: 23,
        span: 12486..12487,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 519,
        column: 25,
        span: 12488..12489,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 519,
        column: 27,
        span: 12489..12491,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 519,
        column: 28,
        span: 12491..12492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 519,
        column: 35,
        span: 12493..12499,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 519,
        column: 36,
        span: 12499..12500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 519,
        column: 41,
        span: 12500..12505,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 519,
        column: 42,
        span: 12505..12506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 519,
        column: 50,
        span: 12506..12514,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 519,
        column: 51,
        span: 12514..12515,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 519,
        column: 52,
        span: 12514..12516,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 519,
        column: 53,
        span: 12516..12517,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 519,
        column: 55,
        span: 12517..12519,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 519,
        column: 56,
        span: 12519..12520,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 519,
        column: 59,
        span: 12521..12523,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(*temporary)\"",
        ),
        line: 519,
        column: 74,
        span: 12524..12538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 519,
        column: 75,
        span: 12538..12539,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 520,
        column: 9,
        span: 12542..12548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 520,
        column: 11,
        span: 12549..12550,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 520,
        column: 14,
        span: 12551..12553,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 520,
        column: 16,
        span: 12553..12555,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 520,
        column: 21,
        span: 12556..12560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 520,
        column: 23,
        span: 12561..12562,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 520,
        column: 25,
        span: 12563..12564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 520,
        column: 27,
        span: 12565..12566,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 520,
        column: 29,
        span: 12567..12568,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 520,
        column: 31,
        span: 12568..12570,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 520,
        column: 32,
        span: 12570..12571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 520,
        column: 39,
        span: 12572..12578,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 520,
        column: 40,
        span: 12578..12579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 520,
        column: 45,
        span: 12579..12584,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 520,
        column: 46,
        span: 12584..12585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 520,
        column: 54,
        span: 12585..12593,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 520,
        column: 55,
        span: 12593..12594,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 520,
        column: 56,
        span: 12593..12595,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 520,
        column: 57,
        span: 12595..12596,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 520,
        column: 59,
        span: 12596..12598,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 520,
        column: 60,
        span: 12598..12599,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 520,
        column: 63,
        span: 12600..12602,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A\"",
        ),
        line: 520,
        column: 67,
        span: 12603..12606,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 520,
        column: 68,
        span: 12606..12607,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 521,
        column: 0,
        span: 12610..12613,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 522,
        column: 4,
        span: 12614..12617,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 522,
        column: 5,
        span: 12617..12618,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 522,
        column: 9,
        span: 12619..12622,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 522,
        column: 10,
        span: 12622..12623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 523,
        column: 3,
        span: 12624..12626,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 523,
        column: 4,
        span: 12626..12627,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 523,
        column: 5,
        span: 12627..12628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 524,
        column: 6,
        span: 12663..12668,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 524,
        column: 7,
        span: 12668..12669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 524,
        column: 14,
        span: 12669..12676,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 524,
        column: 15,
        span: 12676..12677,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 524,
        column: 16,
        span: 12677..12678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 525,
        column: 7,
        span: 12697..12703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 525,
        column: 8,
        span: 12703..12704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 525,
        column: 9,
        span: 12704..12705,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 525,
        column: 12,
        span: 12706..12708,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 525,
        column: 14,
        span: 12708..12710,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 525,
        column: 15,
        span: 12710..12711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 529,
        column: 7,
        span: 12774..12780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
        column: 8,
        span: 12780..12781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 529,
        column: 13,
        span: 12781..12786,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 529,
        column: 14,
        span: 12786..12787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 529,
        column: 23,
        span: 12787..12796,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
        column: 24,
        span: 12796..12797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 529,
        column: 29,
        span: 12797..12802,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
        column: 30,
        span: 12802..12803,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 529,
        column: 33,
        span: 12804..12806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 529,
        column: 39,
        span: 12807..12812,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
        column: 40,
        span: 12812..12813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 530,
        column: 7,
        span: 12814..12820,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 530,
        column: 8,
        span: 12820..12821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 530,
        column: 13,
        span: 12821..12826,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 530,
        column: 14,
        span: 12826..12827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 530,
        column: 23,
        span: 12827..12836,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 530,
        column: 24,
        span: 12836..12837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 530,
        column: 29,
        span: 12837..12842,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 530,
        column: 30,
        span: 12842..12843,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 530,
        column: 32,
        span: 12843..12845,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 530,
        column: 33,
        span: 12845..12846,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 530,
        column: 36,
        span: 12847..12849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 530,
        column: 42,
        span: 12850..12855,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 530,
        column: 43,
        span: 12855..12856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 531,
        column: 7,
        span: 12857..12863,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 531,
        column: 8,
        span: 12863..12864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 531,
        column: 14,
        span: 12864..12870,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 531,
        column: 15,
        span: 12870..12871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 531,
        column: 19,
        span: 12871..12875,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 531,
        column: 20,
        span: 12875..12876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 531,
        column: 25,
        span: 12876..12881,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 531,
        column: 26,
        span: 12881..12882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 531,
        column: 35,
        span: 12882..12891,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 531,
        column: 36,
        span: 12891..12892,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 531,
        column: 40,
        span: 12892..12896,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 531,
        column: 41,
        span: 12896..12897,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 531,
        column: 43,
        span: 12897..12899,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 531,
        column: 44,
        span: 12899..12900,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 531,
        column: 45,
        span: 12900..12901,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^hi\\n\"",
        ),
        line: 531,
        column: 53,
        span: 12902..12909,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 531,
        column: 54,
        span: 12909..12910,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 531,
        column: 55,
        span: 12910..12911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 532,
        column: 7,
        span: 12912..12918,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
        column: 8,
        span: 12918..12919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 532,
        column: 14,
        span: 12919..12925,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 532,
        column: 15,
        span: 12925..12926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 532,
        column: 19,
        span: 12926..12930,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
        column: 20,
        span: 12930..12931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 532,
        column: 25,
        span: 12931..12936,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 532,
        column: 26,
        span: 12936..12937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 532,
        column: 35,
        span: 12937..12946,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
        column: 36,
        span: 12946..12947,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 532,
        column: 40,
        span: 12947..12951,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
        column: 41,
        span: 12951..12952,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 532,
        column: 42,
        span: 12952..12953,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^hi\\n\"",
        ),
        line: 532,
        column: 50,
        span: 12954..12961,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
        column: 51,
        span: 12961..12962,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
        column: 52,
        span: 12962..12963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 533,
        column: 7,
        span: 12964..12970,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
        column: 8,
        span: 12970..12971,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 533,
        column: 11,
        span: 12971..12974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 533,
        column: 18,
        span: 12975..12981,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 533,
        column: 19,
        span: 12981..12982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 533,
        column: 23,
        span: 12982..12986,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
        column: 24,
        span: 12986..12987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 533,
        column: 29,
        span: 12987..12992,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 533,
        column: 30,
        span: 12992..12993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 533,
        column: 39,
        span: 12993..13002,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
        column: 40,
        span: 13002..13003,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 533,
        column: 44,
        span: 13003..13007,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
        column: 45,
        span: 13007..13008,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 533,
        column: 46,
        span: 13008..13009,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'debug.traceback'\"",
        ),
        line: 533,
        column: 66,
        span: 13010..13029,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
        column: 67,
        span: 13029..13030,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
        column: 68,
        span: 13030..13031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 534,
        column: 7,
        span: 13032..13038,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 534,
        column: 8,
        span: 13038..13039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 534,
        column: 14,
        span: 13039..13045,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 534,
        column: 15,
        span: 13045..13046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 534,
        column: 19,
        span: 13046..13050,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 534,
        column: 20,
        span: 13050..13051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 534,
        column: 25,
        span: 13051..13056,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 534,
        column: 26,
        span: 13056..13057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 534,
        column: 35,
        span: 13057..13066,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 534,
        column: 36,
        span: 13066..13067,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 534,
        column: 40,
        span: 13067..13071,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 534,
        column: 41,
        span: 13071..13072,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 534,
        column: 43,
        span: 13072..13074,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 534,
        column: 44,
        span: 13074..13075,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 534,
        column: 45,
        span: 13075..13076,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'debug.traceback'\"",
        ),
        line: 534,
        column: 65,
        span: 13077..13096,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 534,
        column: 66,
        span: 13096..13097,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 534,
        column: 67,
        span: 13097..13098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 535,
        column: 7,
        span: 13099..13105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 535,
        column: 8,
        span: 13105..13106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 535,
        column: 14,
        span: 13106..13112,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 535,
        column: 15,
        span: 13112..13113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 535,
        column: 19,
        span: 13113..13117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 535,
        column: 20,
        span: 13117..13118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 535,
        column: 25,
        span: 13118..13123,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 535,
        column: 26,
        span: 13123..13124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 535,
        column: 35,
        span: 13124..13133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 535,
        column: 36,
        span: 13133..13134,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 535,
        column: 37,
        span: 13134..13135,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 535,
        column: 38,
        span: 13135..13136,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^stack traceback:\\n\"",
        ),
        line: 535,
        column: 60,
        span: 13137..13158,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 535,
        column: 61,
        span: 13158..13159,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 535,
        column: 62,
        span: 13159..13160,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 537,
        column: 3,
        span: 13162..13164,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 538,
        column: 8,
        span: 13201..13206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 538,
        column: 11,
        span: 13207..13209,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 538,
        column: 12,
        span: 13209..13210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 538,
        column: 16,
        span: 13211..13214,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 538,
        column: 18,
        span: 13215..13216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 538,
        column: 20,
        span: 13217..13218,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 538,
        column: 28,
        span: 13218..13226,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 538,
        column: 30,
        span: 13227..13228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 538,
        column: 31,
        span: 13228..13229,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 538,
        column: 38,
        span: 13230..13236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 538,
        column: 44,
        span: 13237..13242,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 538,
        column: 48,
        span: 13243..13246,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 538,
        column: 49,
        span: 13246..13247,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 538,
        column: 50,
        span: 13247..13248,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 538,
        column: 51,
        span: 13248..13249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 538,
        column: 52,
        span: 13249..13250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 538,
        column: 57,
        span: 13250..13255,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 538,
        column: 58,
        span: 13255..13256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 538,
        column: 67,
        span: 13256..13265,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 538,
        column: 68,
        span: 13265..13266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 539,
        column: 9,
        span: 13269..13275,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 539,
        column: 10,
        span: 13275..13276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 539,
        column: 12,
        span: 13276..13278,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 539,
        column: 15,
        span: 13279..13281,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 539,
        column: 20,
        span: 13282..13286,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 539,
        column: 24,
        span: 13287..13290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 539,
        column: 31,
        span: 13291..13297,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 539,
        column: 32,
        span: 13297..13298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 539,
        column: 36,
        span: 13298..13302,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 539,
        column: 37,
        span: 13302..13303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 539,
        column: 40,
        span: 13303..13306,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 539,
        column: 41,
        span: 13306..13307,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pcall\"",
        ),
        line: 539,
        column: 49,
        span: 13308..13315,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 539,
        column: 50,
        span: 13315..13316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 539,
        column: 51,
        span: 13316..13317,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 540,
        column: 0,
        span: 13318..13321,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 544,
        column: 6,
        span: 13360..13365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 544,
        column: 8,
        span: 13366..13367,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 544,
        column: 10,
        span: 13368..13369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 544,
        column: 16,
        span: 13370..13375,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 544,
        column: 17,
        span: 13375..13376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 544,
        column: 24,
        span: 13376..13383,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 544,
        column: 25,
        span: 13383..13384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 544,
        column: 30,
        span: 13384..13389,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 544,
        column: 31,
        span: 13389..13390,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"u\"",
        ),
        line: 544,
        column: 35,
        span: 13391..13394,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 544,
        column: 36,
        span: 13394..13395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 545,
        column: 7,
        span: 13396..13402,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 545,
        column: 8,
        span: 13402..13403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 545,
        column: 9,
        span: 13403..13404,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 545,
        column: 10,
        span: 13404..13405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isvararg",
        ),
        line: 545,
        column: 18,
        span: 13405..13413,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 545,
        column: 21,
        span: 13414..13416,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 545,
        column: 26,
        span: 13417..13421,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 545,
        column: 30,
        span: 13422..13425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 545,
        column: 32,
        span: 13426..13427,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 545,
        column: 33,
        span: 13427..13428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nparams",
        ),
        line: 545,
        column: 40,
        span: 13428..13435,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 545,
        column: 43,
        span: 13436..13438,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 545,
        column: 45,
        span: 13438..13440,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 545,
        column: 49,
        span: 13441..13444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 545,
        column: 51,
        span: 13445..13446,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 545,
        column: 52,
        span: 13446..13447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        line: 545,
        column: 56,
        span: 13447..13451,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 545,
        column: 59,
        span: 13452..13454,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 545,
        column: 61,
        span: 13454..13456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 545,
        column: 62,
        span: 13456..13457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 547,
        column: 2,
        span: 13459..13460,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 547,
        column: 4,
        span: 13461..13462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 547,
        column: 10,
        span: 13463..13468,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 547,
        column: 11,
        span: 13468..13469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 547,
        column: 18,
        span: 13469..13476,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 547,
        column: 19,
        span: 13476..13477,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 547,
        column: 27,
        span: 13477..13485,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 547,
        column: 29,
        span: 13486..13487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 547,
        column: 30,
        span: 13487..13488,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 547,
        column: 31,
        span: 13488..13489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 547,
        column: 32,
        span: 13489..13490,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 547,
        column: 33,
        span: 13490..13491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 547,
        column: 34,
        span: 13491..13492,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 547,
        column: 35,
        span: 13492..13493,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 547,
        column: 39,
        span: 13494..13497,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 547,
        column: 40,
        span: 13497..13498,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"u\"",
        ),
        line: 547,
        column: 44,
        span: 13499..13502,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 547,
        column: 45,
        span: 13502..13503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 548,
        column: 7,
        span: 13504..13510,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 548,
        column: 8,
        span: 13510..13511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 548,
        column: 9,
        span: 13511..13512,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 548,
        column: 10,
        span: 13512..13513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isvararg",
        ),
        line: 548,
        column: 18,
        span: 13513..13521,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 548,
        column: 21,
        span: 13522..13524,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 548,
        column: 27,
        span: 13525..13530,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 548,
        column: 31,
        span: 13531..13534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 548,
        column: 33,
        span: 13535..13536,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 548,
        column: 34,
        span: 13536..13537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nparams",
        ),
        line: 548,
        column: 41,
        span: 13537..13544,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 548,
        column: 44,
        span: 13545..13547,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 548,
        column: 46,
        span: 13547..13549,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 548,
        column: 50,
        span: 13550..13553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 548,
        column: 52,
        span: 13554..13555,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 548,
        column: 53,
        span: 13555..13556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        line: 548,
        column: 57,
        span: 13556..13560,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 548,
        column: 60,
        span: 13561..13563,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 548,
        column: 62,
        span: 13563..13565,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 548,
        column: 63,
        span: 13565..13566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 550,
        column: 2,
        span: 13568..13569,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 550,
        column: 4,
        span: 13570..13571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 550,
        column: 10,
        span: 13572..13577,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 550,
        column: 11,
        span: 13577..13578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 550,
        column: 18,
        span: 13578..13585,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 550,
        column: 19,
        span: 13585..13586,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 550,
        column: 27,
        span: 13586..13594,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 550,
        column: 29,
        span: 13595..13596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 550,
        column: 30,
        span: 13596..13597,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 550,
        column: 31,
        span: 13597..13598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 550,
        column: 32,
        span: 13598..13599,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 550,
        column: 33,
        span: 13599..13600,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 550,
        column: 36,
        span: 13600..13603,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 550,
        column: 37,
        span: 13603..13604,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 550,
        column: 44,
        span: 13605..13611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 550,
        column: 46,
        span: 13612..13613,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 550,
        column: 47,
        span: 13613..13614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 550,
        column: 48,
        span: 13614..13615,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 550,
        column: 49,
        span: 13615..13616,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 550,
        column: 53,
        span: 13617..13620,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 550,
        column: 54,
        span: 13620..13621,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"u\"",
        ),
        line: 550,
        column: 58,
        span: 13622..13625,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 550,
        column: 59,
        span: 13625..13626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 551,
        column: 7,
        span: 13627..13633,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 551,
        column: 8,
        span: 13633..13634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 551,
        column: 9,
        span: 13634..13635,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 551,
        column: 10,
        span: 13635..13636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isvararg",
        ),
        line: 551,
        column: 18,
        span: 13636..13644,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 551,
        column: 21,
        span: 13645..13647,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 551,
        column: 26,
        span: 13648..13652,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 551,
        column: 30,
        span: 13653..13656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 551,
        column: 32,
        span: 13657..13658,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 551,
        column: 33,
        span: 13658..13659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nparams",
        ),
        line: 551,
        column: 40,
        span: 13659..13666,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 551,
        column: 43,
        span: 13667..13669,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 551,
        column: 45,
        span: 13669..13671,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 551,
        column: 49,
        span: 13672..13675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 551,
        column: 51,
        span: 13676..13677,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 551,
        column: 52,
        span: 13677..13678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        line: 551,
        column: 56,
        span: 13678..13682,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 551,
        column: 59,
        span: 13683..13685,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 551,
        column: 61,
        span: 13685..13687,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 551,
        column: 62,
        span: 13687..13688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 553,
        column: 2,
        span: 13690..13691,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 553,
        column: 4,
        span: 13692..13693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 553,
        column: 10,
        span: 13694..13699,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 553,
        column: 11,
        span: 13699..13700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 553,
        column: 18,
        span: 13700..13707,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 553,
        column: 19,
        span: 13707..13708,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 553,
        column: 20,
        span: 13707..13709,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 553,
        column: 21,
        span: 13709..13710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 554,
        column: 7,
        span: 13721..13727,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 554,
        column: 8,
        span: 13727..13728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 554,
        column: 9,
        span: 13728..13729,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 554,
        column: 10,
        span: 13729..13730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isvararg",
        ),
        line: 554,
        column: 18,
        span: 13730..13738,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 554,
        column: 21,
        span: 13739..13741,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 554,
        column: 26,
        span: 13742..13746,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 554,
        column: 30,
        span: 13747..13750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 554,
        column: 32,
        span: 13751..13752,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 554,
        column: 33,
        span: 13752..13753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nparams",
        ),
        line: 554,
        column: 40,
        span: 13753..13760,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 554,
        column: 43,
        span: 13761..13763,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 554,
        column: 45,
        span: 13763..13765,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 554,
        column: 49,
        span: 13766..13769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 554,
        column: 51,
        span: 13770..13771,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 554,
        column: 52,
        span: 13771..13772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        line: 554,
        column: 56,
        span: 13772..13776,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 554,
        column: 59,
        span: 13777..13779,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 554,
        column: 61,
        span: 13779..13781,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 554,
        column: 0,
        span: 13782..13785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 555,
        column: 13,
        span: 13793..13798,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 555,
        column: 14,
        span: 13798..13799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        line: 555,
        column: 24,
        span: 13799..13809,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 555,
        column: 25,
        span: 13809..13810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 555,
        column: 26,
        span: 13810..13811,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 555,
        column: 27,
        span: 13811..13812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 555,
        column: 31,
        span: 13812..13816,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 555,
        column: 32,
        span: 13816..13817,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 555,
        column: 34,
        span: 13817..13819,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 555,
        column: 35,
        span: 13819..13820,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 555,
        column: 38,
        span: 13821..13823,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_ENV\"",
        ),
        line: 555,
        column: 45,
        span: 13824..13830,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 555,
        column: 46,
        span: 13830..13831,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 562,
        column: 6,
        span: 13872..13877,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 562,
        column: 15,
        span: 13878..13886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 562,
        column: 30,
        span: 13887..13901,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 562,
        column: 32,
        span: 13902..13903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 562,
        column: 34,
        span: 13903..13905,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 562,
        column: 35,
        span: 13905..13906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 562,
        column: 37,
        span: 13907..13908,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 562,
        column: 38,
        span: 13908..13909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "level",
        ),
        line: 562,
        column: 44,
        span: 13910..13915,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 562,
        column: 45,
        span: 13915..13916,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 563,
        column: 8,
        span: 13919..13924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tb",
        ),
        line: 563,
        column: 11,
        span: 13925..13927,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 563,
        column: 13,
        span: 13928..13929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 563,
        column: 19,
        span: 13930..13935,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 563,
        column: 20,
        span: 13935..13936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 563,
        column: 29,
        span: 13936..13945,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 563,
        column: 30,
        span: 13945..13946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 563,
        column: 32,
        span: 13946..13948,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 563,
        column: 33,
        span: 13948..13949,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 563,
        column: 37,
        span: 13950..13953,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 563,
        column: 38,
        span: 13953..13954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "level",
        ),
        line: 563,
        column: 44,
        span: 13955..13960,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 563,
        column: 45,
        span: 13960..13961,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 564,
        column: 8,
        span: 13964..13969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 564,
        column: 10,
        span: 13970..13971,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 564,
        column: 12,
        span: 13972..13973,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 564,
        column: 0,
        span: 13973..13975,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 565,
        column: 6,
        span: 13978..13981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 565,
        column: 8,
        span: 13982..13983,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 565,
        column: 11,
        span: 13984..13986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 565,
        column: 18,
        span: 13987..13993,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 565,
        column: 19,
        span: 13993..13994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 565,
        column: 25,
        span: 13994..14000,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 565,
        column: 26,
        span: 14000..14001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tb",
        ),
        line: 565,
        column: 28,
        span: 14001..14003,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 565,
        column: 29,
        span: 14003..14004,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[^\\n]+\\n?\"",
        ),
        line: 565,
        column: 41,
        span: 14005..14016,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 565,
        column: 42,
        span: 14016..14017,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 565,
        column: 0,
        span: 14018..14020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 566,
        column: 11,
        span: 14025..14031,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 566,
        column: 12,
        span: 14031..14032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 566,
        column: 13,
        span: 14032..14033,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 566,
        column: 16,
        span: 14034..14036,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 566,
        column: 18,
        span: 14036..14038,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 566,
        column: 21,
        span: 14039..14041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 566,
        column: 28,
        span: 14042..14048,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 566,
        column: 29,
        span: 14048..14049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 566,
        column: 33,
        span: 14049..14053,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 566,
        column: 34,
        span: 14053..14054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 566,
        column: 35,
        span: 14054..14055,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 566,
        column: 36,
        span: 14055..14056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 566,
        column: 38,
        span: 14057..14058,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 566,
        column: 39,
        span: 14058..14059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 566,
        column: 40,
        span: 14059..14060,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 566,
        column: 41,
        span: 14060..14061,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 566,
        column: 42,
        span: 14061..14062,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 566,
        column: 43,
        span: 14062..14063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 567,
        column: 6,
        span: 14068..14069,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 567,
        column: 8,
        span: 14070..14071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 567,
        column: 10,
        span: 14072..14073,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 567,
        column: 11,
        span: 14073..14074,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 567,
        column: 0,
        span: 14073..14075,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 568,
        column: 0,
        span: 14078..14081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 569,
        column: 9,
        span: 14084..14090,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 569,
        column: 10,
        span: 14090..14091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 569,
        column: 11,
        span: 14091..14092,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 569,
        column: 12,
        span: 14092..14093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 569,
        column: 13,
        span: 14093..14094,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 569,
        column: 14,
        span: 14094..14095,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 569,
        column: 17,
        span: 14096..14098,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 569,
        column: 21,
        span: 14099..14102,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 569,
        column: 22,
        span: 14102..14103,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 570,
        column: 0,
        span: 14104..14107,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 573,
        column: 6,
        span: 14110..14115,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 573,
        column: 15,
        span: 14116..14124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 573,
        column: 17,
        span: 14125..14126,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 573,
        column: 19,
        span: 14127..14128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 573,
        column: 20,
        span: 14128..14129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
        column: 21,
        span: 14129..14130,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 574,
        column: 5,
        span: 14133..14135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 574,
        column: 7,
        span: 14136..14137,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 574,
        column: 9,
        span: 14138..14139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 574,
        column: 11,
        span: 14139..14141,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 574,
        column: 16,
        span: 14142..14146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 574,
        column: 18,
        span: 14147..14148,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
        column: 19,
        span: 14148..14149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 574,
        column: 20,
        span: 14149..14150,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 574,
        column: 21,
        span: 14150..14151,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 574,
        column: 22,
        span: 14150..14152,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
        column: 23,
        span: 14152..14153,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 575,
        column: 7,
        span: 14156..14160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 575,
        column: 17,
        span: 14161..14170,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 575,
        column: 18,
        span: 14170..14171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 575,
        column: 23,
        span: 14171..14176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
        column: 24,
        span: 14176..14177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
        column: 25,
        span: 14177..14178,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 575,
        column: 0,
        span: 14179..14182,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 576,
        column: 0,
        span: 14183..14186,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 578,
        column: 6,
        span: 14188..14193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 578,
        column: 9,
        span: 14194..14196,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 578,
        column: 11,
        span: 14197..14198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 578,
        column: 21,
        span: 14199..14208,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 578,
        column: 22,
        span: 14208..14209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 578,
        column: 28,
        span: 14209..14215,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 578,
        column: 29,
        span: 14215..14216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 578,
        column: 30,
        span: 14216..14217,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 578,
        column: 31,
        span: 14217..14218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 579,
        column: 10,
        span: 14219..14228,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 579,
        column: 11,
        span: 14228..14229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 579,
        column: 17,
        span: 14229..14235,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 579,
        column: 18,
        span: 14235..14236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 579,
        column: 20,
        span: 14236..14238,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 579,
        column: 21,
        span: 14238..14239,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 579,
        column: 23,
        span: 14239..14241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 579,
        column: 24,
        span: 14241..14242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 580,
        column: 15,
        span: 14243..14257,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 580,
        column: 16,
        span: 14257..14258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 580,
        column: 18,
        span: 14258..14260,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 580,
        column: 19,
        span: 14260..14261,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 580,
        column: 21,
        span: 14262..14263,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yield\"",
        ),
        line: 580,
        column: 28,
        span: 14263..14270,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 580,
        column: 29,
        span: 14270..14271,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 580,
        column: 38,
        span: 14272..14280,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 580,
        column: 39,
        span: 14280..14281,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 580,
        column: 48,
        span: 14282..14290,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 580,
        column: 49,
        span: 14290..14291,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 580,
        column: 58,
        span: 14292..14300,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 580,
        column: 59,
        span: 14300..14301,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 580,
        column: 68,
        span: 14302..14310,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 580,
        column: 69,
        span: 14310..14311,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 580,
        column: 70,
        span: 14311..14312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 581,
        column: 15,
        span: 14313..14327,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 581,
        column: 16,
        span: 14327..14328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 581,
        column: 18,
        span: 14328..14330,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 581,
        column: 19,
        span: 14330..14331,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 581,
        column: 21,
        span: 14332..14333,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 581,
        column: 29,
        span: 14333..14341,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 581,
        column: 30,
        span: 14341..14342,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 581,
        column: 39,
        span: 14343..14351,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 581,
        column: 40,
        span: 14351..14352,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 581,
        column: 49,
        span: 14353..14361,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 581,
        column: 50,
        span: 14361..14362,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 581,
        column: 59,
        span: 14363..14371,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 581,
        column: 60,
        span: 14371..14372,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 581,
        column: 61,
        span: 14372..14373,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 581,
        column: 63,
        span: 14373..14375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 581,
        column: 64,
        span: 14375..14376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 582,
        column: 15,
        span: 14377..14391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 582,
        column: 16,
        span: 14391..14392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 582,
        column: 18,
        span: 14392..14394,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 582,
        column: 19,
        span: 14394..14395,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 582,
        column: 21,
        span: 14396..14397,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 582,
        column: 29,
        span: 14397..14405,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 582,
        column: 30,
        span: 14405..14406,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 582,
        column: 39,
        span: 14407..14415,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 582,
        column: 40,
        span: 14415..14416,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 582,
        column: 49,
        span: 14417..14425,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 582,
        column: 50,
        span: 14425..14426,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 582,
        column: 51,
        span: 14426..14427,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 582,
        column: 53,
        span: 14427..14429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 582,
        column: 54,
        span: 14429..14430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 583,
        column: 15,
        span: 14431..14445,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 583,
        column: 16,
        span: 14445..14446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 583,
        column: 18,
        span: 14446..14448,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 583,
        column: 19,
        span: 14448..14449,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 583,
        column: 21,
        span: 14450..14451,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 583,
        column: 29,
        span: 14451..14459,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 583,
        column: 30,
        span: 14459..14460,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 583,
        column: 31,
        span: 14460..14461,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 583,
        column: 33,
        span: 14461..14463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 583,
        column: 34,
        span: 14463..14464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 584,
        column: 15,
        span: 14465..14479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 584,
        column: 16,
        span: 14479..14480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 584,
        column: 18,
        span: 14480..14482,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 584,
        column: 19,
        span: 14482..14483,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 584,
        column: 21,
        span: 14484..14485,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 584,
        column: 22,
        span: 14485..14486,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 584,
        column: 23,
        span: 14486..14487,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 584,
        column: 26,
        span: 14487..14490,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 584,
        column: 27,
        span: 14490..14491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 587,
        column: 3,
        span: 14494..14496,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 587,
        column: 5,
        span: 14497..14498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 587,
        column: 15,
        span: 14499..14508,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 587,
        column: 16,
        span: 14508..14509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 587,
        column: 22,
        span: 14509..14515,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 587,
        column: 23,
        span: 14515..14516,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 587,
        column: 31,
        span: 14516..14524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 587,
        column: 33,
        span: 14525..14526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 587,
        column: 34,
        span: 14526..14527,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 587,
        column: 35,
        span: 14527..14528,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 588,
        column: 13,
        span: 14536..14541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 588,
        column: 15,
        span: 14542..14543,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 588,
        column: 17,
        span: 14544..14545,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 588,
        column: 0,
        span: 14545..14547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 589,
        column: 17,
        span: 14555..14564,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 589,
        column: 18,
        span: 14564..14565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 589,
        column: 23,
        span: 14565..14570,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 589,
        column: 24,
        span: 14570..14571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 589,
        column: 29,
        span: 14571..14576,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 589,
        column: 30,
        span: 14576..14577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 589,
        column: 37,
        span: 14577..14584,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 589,
        column: 38,
        span: 14584..14585,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 589,
        column: 39,
        span: 14584..14586,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 589,
        column: 40,
        span: 14586..14587,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 589,
        column: 44,
        span: 14588..14591,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 589,
        column: 45,
        span: 14591..14592,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 589,
        column: 46,
        span: 14592..14593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 590,
        column: 17,
        span: 14601..14610,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 590,
        column: 18,
        span: 14610..14611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 590,
        column: 23,
        span: 14611..14616,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 590,
        column: 24,
        span: 14616..14617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 590,
        column: 29,
        span: 14617..14622,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 590,
        column: 30,
        span: 14622..14623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 590,
        column: 37,
        span: 14623..14630,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 590,
        column: 38,
        span: 14630..14631,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 590,
        column: 39,
        span: 14630..14632,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 590,
        column: 40,
        span: 14632..14633,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 590,
        column: 44,
        span: 14634..14637,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 590,
        column: 45,
        span: 14637..14638,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 590,
        column: 46,
        span: 14638..14639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 590,
        column: 57,
        span: 14639..14650,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 590,
        column: 58,
        span: 14650..14651,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 591,
        column: 14,
        span: 14659..14665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 591,
        column: 0,
        span: 14666..14667,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 592,
        column: 9,
        span: 14673..14676,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 592,
        column: 10,
        span: 14676..14677,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 594,
        column: 6,
        span: 14679..14684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        line: 594,
        column: 9,
        span: 14685..14687,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 594,
        column: 11,
        span: 14688..14689,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 594,
        column: 13,
        span: 14690..14691,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 594,
        column: 14,
        span: 14691..14692,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 595,
        column: 6,
        span: 14693..14698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 595,
        column: 10,
        span: 14699..14702,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 595,
        column: 12,
        span: 14703..14704,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 595,
        column: 21,
        span: 14705..14713,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 595,
        column: 23,
        span: 14714..14715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 595,
        column: 24,
        span: 14715..14716,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 595,
        column: 25,
        span: 14716..14717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 595,
        column: 27,
        span: 14718..14719,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 595,
        column: 28,
        span: 14719..14720,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 595,
        column: 31,
        span: 14721..14723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 595,
        column: 33,
        span: 14724..14725,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 595,
        column: 38,
        span: 14726..14730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 595,
        column: 44,
        span: 14731..14736,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 595,
        column: 45,
        span: 14736..14737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 595,
        column: 51,
        span: 14737..14743,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 595,
        column: 52,
        span: 14743..14744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        line: 595,
        column: 54,
        span: 14744..14746,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 595,
        column: 55,
        span: 14746..14747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 595,
        column: 57,
        span: 14748..14749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 595,
        column: 58,
        span: 14749..14750,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 595,
        column: 62,
        span: 14751..14754,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 595,
        column: 0,
        span: 14755..14758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 596,
        column: 6,
        span: 14759..14764,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 596,
        column: 7,
        span: 14764..14765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 596,
        column: 14,
        span: 14765..14772,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 596,
        column: 15,
        span: 14772..14773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 596,
        column: 17,
        span: 14773..14775,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 596,
        column: 18,
        span: 14775..14776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 596,
        column: 22,
        span: 14777..14780,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 596,
        column: 23,
        span: 14780..14781,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lcr\"",
        ),
        line: 596,
        column: 29,
        span: 14782..14787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 596,
        column: 30,
        span: 14787..14788,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 598,
        column: 6,
        span: 14790..14795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 598,
        column: 8,
        span: 14796..14797,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 598,
        column: 9,
        span: 14797..14798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 598,
        column: 11,
        span: 14799..14800,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 598,
        column: 13,
        span: 14801..14802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 598,
        column: 23,
        span: 14803..14812,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 598,
        column: 24,
        span: 14812..14813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 598,
        column: 30,
        span: 14813..14819,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 598,
        column: 31,
        span: 14819..14820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 598,
        column: 33,
        span: 14820..14822,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 598,
        column: 34,
        span: 14822..14823,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 598,
        column: 37,
        span: 14823..14826,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 598,
        column: 38,
        span: 14826..14827,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 599,
        column: 6,
        span: 14828..14833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 599,
        column: 8,
        span: 14834..14835,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 599,
        column: 10,
        span: 14836..14837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 599,
        column: 16,
        span: 14838..14843,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 599,
        column: 17,
        span: 14843..14844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 599,
        column: 24,
        span: 14844..14851,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 599,
        column: 25,
        span: 14851..14852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 599,
        column: 27,
        span: 14852..14854,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 599,
        column: 28,
        span: 14854..14855,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 599,
        column: 30,
        span: 14855..14857,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 599,
        column: 31,
        span: 14857..14858,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lfLS\"",
        ),
        line: 599,
        column: 38,
        span: 14859..14865,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 599,
        column: 39,
        span: 14865..14866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 600,
        column: 7,
        span: 14867..14873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 600,
        column: 8,
        span: 14873..14874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 600,
        column: 9,
        span: 14874..14875,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 600,
        column: 10,
        span: 14875..14876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 600,
        column: 21,
        span: 14876..14887,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 600,
        column: 24,
        span: 14888..14890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 600,
        column: 26,
        span: 14891..14892,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 600,
        column: 27,
        span: 14892..14893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 600,
        column: 38,
        span: 14893..14904,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 600,
        column: 42,
        span: 14905..14908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 600,
        column: 44,
        span: 14909..14910,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 600,
        column: 45,
        span: 14910..14911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 600,
        column: 56,
        span: 14911..14922,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 600,
        column: 57,
        span: 14922..14923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 600,
        column: 58,
        span: 14923..14924,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 600,
        column: 59,
        span: 14924..14925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 600,
        column: 70,
        span: 14925..14936,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 600,
        column: 71,
        span: 14936..14937,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 600,
        column: 72,
        span: 14937..14938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 601,
        column: 7,
        span: 14939..14945,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 601,
        column: 8,
        span: 14945..14946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 601,
        column: 12,
        span: 14946..14950,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 601,
        column: 13,
        span: 14950..14951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 601,
        column: 14,
        span: 14951..14952,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 601,
        column: 15,
        span: 14952..14953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 601,
        column: 19,
        span: 14953..14957,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 601,
        column: 20,
        span: 14957..14958,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 601,
        column: 23,
        span: 14959..14961,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        line: 601,
        column: 34,
        span: 14962..14972,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 601,
        column: 35,
        span: 14972..14973,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 602,
        column: 4,
        span: 14974..14977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 602,
        column: 6,
        span: 14978..14979,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 602,
        column: 7,
        span: 14979..14980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 602,
        column: 8,
        span: 14980..14981,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 602,
        column: 9,
        span: 14981..14982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        line: 602,
        column: 20,
        span: 14982..14993,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 602,
        column: 22,
        span: 14994..14995,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 602,
        column: 24,
        span: 14995..14997,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 602,
        column: 25,
        span: 14997..14998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 602,
        column: 27,
        span: 14999..15000,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 602,
        column: 28,
        span: 15000..15001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastlinedefined",
        ),
        line: 602,
        column: 43,
        span: 15001..15016,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 602,
        column: 0,
        span: 15017..15019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 603,
        column: 9,
        span: 15022..15028,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 603,
        column: 10,
        span: 15028..15029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 603,
        column: 11,
        span: 15029..15030,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 603,
        column: 12,
        span: 15030..15031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 603,
        column: 23,
        span: 15031..15042,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 603,
        column: 24,
        span: 15042..15043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 603,
        column: 25,
        span: 15043..15044,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 603,
        column: 26,
        span: 15044..15045,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 603,
        column: 27,
        span: 15045..15046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 604,
        column: 4,
        span: 15049..15050,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 604,
        column: 5,
        span: 15050..15051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 604,
        column: 16,
        span: 15051..15062,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 604,
        column: 17,
        span: 15062..15063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 604,
        column: 18,
        span: 15063..15064,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 604,
        column: 19,
        span: 15064..15065,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 604,
        column: 21,
        span: 15066..15067,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 604,
        column: 0,
        span: 15068..15071,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 605,
        column: 0,
        span: 15072..15075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 606,
        column: 7,
        span: 15076..15082,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 606,
        column: 8,
        span: 15082..15083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 606,
        column: 12,
        span: 15083..15087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 606,
        column: 13,
        span: 15087..15088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 606,
        column: 14,
        span: 15088..15089,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 606,
        column: 15,
        span: 15089..15090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 606,
        column: 26,
        span: 15090..15101,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 606,
        column: 27,
        span: 15101..15102,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 606,
        column: 30,
        span: 15103..15105,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 606,
        column: 34,
        span: 15106..15109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 606,
        column: 35,
        span: 15109..15110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 607,
        column: 7,
        span: 15136..15142,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 607,
        column: 8,
        span: 15142..15143,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 607,
        column: 11,
        span: 15143..15146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 607,
        column: 17,
        span: 15147..15152,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 607,
        column: 18,
        span: 15152..15153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 607,
        column: 25,
        span: 15153..15160,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 607,
        column: 26,
        span: 15160..15161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 607,
        column: 28,
        span: 15161..15163,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 607,
        column: 29,
        span: 15163..15164,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 607,
        column: 31,
        span: 15164..15166,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 607,
        column: 32,
        span: 15166..15167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 607,
        column: 33,
        span: 15167..15168,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 608,
        column: 6,
        span: 15169..15174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 608,
        column: 8,
        span: 15175..15176,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 608,
        column: 9,
        span: 15176..15177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 608,
        column: 10,
        span: 15177..15178,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 608,
        column: 12,
        span: 15179..15180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 608,
        column: 18,
        span: 15181..15186,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 608,
        column: 19,
        span: 15186..15187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 608,
        column: 27,
        span: 15187..15195,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 608,
        column: 28,
        span: 15195..15196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 608,
        column: 30,
        span: 15196..15198,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 608,
        column: 31,
        span: 15198..15199,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 608,
        column: 33,
        span: 15199..15201,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 608,
        column: 34,
        span: 15201..15202,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 608,
        column: 36,
        span: 15202..15204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 608,
        column: 37,
        span: 15204..15205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 609,
        column: 7,
        span: 15206..15212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 609,
        column: 8,
        span: 15212..15213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 609,
        column: 9,
        span: 15213..15214,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 609,
        column: 12,
        span: 15215..15217,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 609,
        column: 16,
        span: 15218..15221,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 609,
        column: 20,
        span: 15222..15225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 609,
        column: 22,
        span: 15226..15227,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 609,
        column: 25,
        span: 15228..15230,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 609,
        column: 28,
        span: 15230..15233,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 609,
        column: 29,
        span: 15233..15234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 610,
        column: 2,
        span: 15235..15236,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 610,
        column: 3,
        span: 15236..15237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 610,
        column: 4,
        span: 15237..15238,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 610,
        column: 6,
        span: 15239..15240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 610,
        column: 12,
        span: 15241..15246,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 610,
        column: 13,
        span: 15246..15247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 610,
        column: 21,
        span: 15247..15255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 610,
        column: 22,
        span: 15255..15256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 610,
        column: 24,
        span: 15256..15258,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 610,
        column: 25,
        span: 15258..15259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 610,
        column: 27,
        span: 15259..15261,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 610,
        column: 28,
        span: 15261..15262,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 610,
        column: 30,
        span: 15262..15264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 610,
        column: 31,
        span: 15264..15265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 611,
        column: 7,
        span: 15266..15272,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 611,
        column: 8,
        span: 15272..15273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 611,
        column: 9,
        span: 15273..15274,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 611,
        column: 12,
        span: 15275..15277,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 611,
        column: 16,
        span: 15278..15281,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 611,
        column: 20,
        span: 15282..15285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 611,
        column: 22,
        span: 15286..15287,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 611,
        column: 25,
        span: 15288..15290,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 611,
        column: 27,
        span: 15290..15292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 611,
        column: 28,
        span: 15292..15293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 612,
        column: 6,
        span: 15294..15299,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 612,
        column: 7,
        span: 15299..15300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 612,
        column: 15,
        span: 15300..15308,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 612,
        column: 16,
        span: 15308..15309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 612,
        column: 18,
        span: 15309..15311,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 612,
        column: 19,
        span: 15311..15312,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 612,
        column: 21,
        span: 15312..15314,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 612,
        column: 22,
        span: 15314..15315,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 612,
        column: 24,
        span: 15315..15317,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 612,
        column: 25,
        span: 15317..15318,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 612,
        column: 30,
        span: 15319..15323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 612,
        column: 31,
        span: 15323..15324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 613,
        column: 7,
        span: 15325..15331,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 613,
        column: 8,
        span: 15331..15332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 613,
        column: 13,
        span: 15332..15337,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 613,
        column: 14,
        span: 15337..15338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 613,
        column: 21,
        span: 15338..15345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 613,
        column: 22,
        span: 15345..15346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 613,
        column: 24,
        span: 15346..15348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 613,
        column: 25,
        span: 15348..15349,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 613,
        column: 28,
        span: 15350..15352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 613,
        column: 32,
        span: 15353..15356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 613,
        column: 33,
        span: 15356..15357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 614,
        column: 7,
        span: 15358..15364,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 614,
        column: 8,
        span: 15364..15365,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 614,
        column: 9,
        span: 15365..15366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        line: 614,
        column: 11,
        span: 15366..15368,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 614,
        column: 14,
        span: 15369..15371,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 614,
        column: 16,
        span: 15371..15373,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 614,
        column: 0,
        span: 15374..15377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        line: 615,
        column: 10,
        span: 15385..15387,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 615,
        column: 11,
        span: 15387..15388,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 615,
        column: 12,
        span: 15387..15389,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 615,
        column: 13,
        span: 15389..15390,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 615,
        column: 16,
        span: 15391..15393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 615,
        column: 18,
        span: 15394..15395,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 615,
        column: 19,
        span: 15395..15396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 615,
        column: 30,
        span: 15396..15407,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 615,
        column: 31,
        span: 15407..15408,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 615,
        column: 32,
        span: 15407..15409,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 615,
        column: 36,
        span: 15410..15413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        line: 615,
        column: 39,
        span: 15414..15416,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 615,
        column: 40,
        span: 15416..15417,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 615,
        column: 41,
        span: 15416..15418,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 615,
        column: 42,
        span: 15418..15419,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 615,
        column: 45,
        span: 15420..15422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 615,
        column: 47,
        span: 15423..15424,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 615,
        column: 48,
        span: 15424..15425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 615,
        column: 59,
        span: 15425..15436,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 615,
        column: 60,
        span: 15436..15437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 617,
        column: 2,
        span: 15439..15440,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 617,
        column: 3,
        span: 15440..15441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 617,
        column: 4,
        span: 15441..15442,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 617,
        column: 5,
        span: 15442..15443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 617,
        column: 6,
        span: 15443..15444,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 617,
        column: 8,
        span: 15445..15446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 617,
        column: 14,
        span: 15447..15452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 617,
        column: 15,
        span: 15452..15453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 617,
        column: 24,
        span: 15453..15462,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 617,
        column: 25,
        span: 15462..15463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 617,
        column: 31,
        span: 15463..15469,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 617,
        column: 32,
        span: 15469..15470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 617,
        column: 35,
        span: 15471..15473,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 617,
        column: 36,
        span: 15473..15474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 618,
        column: 7,
        span: 15475..15481,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 618,
        column: 8,
        span: 15481..15482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 618,
        column: 9,
        span: 15482..15483,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 618,
        column: 13,
        span: 15484..15487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 618,
        column: 15,
        span: 15488..15489,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 618,
        column: 19,
        span: 15490..15493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 618,
        column: 21,
        span: 15494..15495,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 618,
        column: 24,
        span: 15496..15498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 618,
        column: 26,
        span: 15499..15500,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 618,
        column: 27,
        span: 15500..15501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 618,
        column: 38,
        span: 15501..15512,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 618,
        column: 39,
        span: 15512..15513,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 618,
        column: 40,
        span: 15512..15514,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 618,
        column: 41,
        span: 15514..15515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 619,
        column: 15,
        span: 15516..15530,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 619,
        column: 16,
        span: 15530..15531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 619,
        column: 18,
        span: 15531..15533,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 619,
        column: 19,
        span: 15533..15534,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 619,
        column: 21,
        span: 15535..15536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yield\"",
        ),
        line: 619,
        column: 28,
        span: 15536..15543,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 619,
        column: 29,
        span: 15543..15544,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"in function <\"",
        ),
        line: 619,
        column: 45,
        span: 15545..15560,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 619,
        column: 46,
        span: 15560..15561,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 619,
        column: 47,
        span: 15561..15562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 621,
        column: 2,
        span: 15564..15565,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 621,
        column: 3,
        span: 15565..15566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 621,
        column: 4,
        span: 15566..15567,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 621,
        column: 6,
        span: 15568..15569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 621,
        column: 16,
        span: 15570..15579,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 621,
        column: 17,
        span: 15579..15580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 621,
        column: 23,
        span: 15580..15586,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 621,
        column: 24,
        span: 15586..15587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 621,
        column: 26,
        span: 15587..15589,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 621,
        column: 27,
        span: 15589..15590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 622,
        column: 7,
        span: 15591..15597,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 622,
        column: 8,
        span: 15597..15598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 622,
        column: 9,
        span: 15598..15599,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 622,
        column: 13,
        span: 15600..15603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 622,
        column: 15,
        span: 15604..15605,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 622,
        column: 18,
        span: 15606..15608,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 622,
        column: 23,
        span: 15609..15613,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 622,
        column: 24,
        span: 15613..15614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 623,
        column: 7,
        span: 15615..15621,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 623,
        column: 8,
        span: 15621..15622,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 623,
        column: 9,
        span: 15622..15623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        line: 623,
        column: 11,
        span: 15623..15625,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 623,
        column: 14,
        span: 15626..15628,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 623,
        column: 16,
        span: 15628..15630,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 623,
        column: 20,
        span: 15631..15634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        line: 623,
        column: 23,
        span: 15635..15637,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 623,
        column: 24,
        span: 15637..15638,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 623,
        column: 25,
        span: 15637..15639,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 623,
        column: 26,
        span: 15639..15640,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 623,
        column: 29,
        span: 15641..15643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 623,
        column: 31,
        span: 15644..15645,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 623,
        column: 32,
        span: 15645..15646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 623,
        column: 43,
        span: 15646..15657,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 623,
        column: 44,
        span: 15657..15658,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 623,
        column: 45,
        span: 15657..15659,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 623,
        column: 46,
        span: 15659..15660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 624,
        column: 7,
        span: 15661..15667,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 624,
        column: 8,
        span: 15667..15668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 624,
        column: 13,
        span: 15668..15673,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 624,
        column: 14,
        span: 15673..15674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 624,
        column: 21,
        span: 15674..15681,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 624,
        column: 22,
        span: 15681..15682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 624,
        column: 24,
        span: 15682..15684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 624,
        column: 25,
        span: 15684..15685,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 624,
        column: 28,
        span: 15686..15688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 624,
        column: 32,
        span: 15689..15692,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 624,
        column: 33,
        span: 15692..15693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 625,
        column: 7,
        span: 15694..15700,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 625,
        column: 8,
        span: 15700..15701,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 625,
        column: 11,
        span: 15701..15704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 625,
        column: 17,
        span: 15705..15710,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 625,
        column: 18,
        span: 15710..15711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 625,
        column: 25,
        span: 15711..15718,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 625,
        column: 26,
        span: 15718..15719,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 625,
        column: 27,
        span: 15719..15720,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 625,
        column: 28,
        span: 15720..15721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 626,
        column: 15,
        span: 15722..15736,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 626,
        column: 16,
        span: 15736..15737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 626,
        column: 18,
        span: 15737..15739,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 626,
        column: 19,
        span: 15739..15740,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 626,
        column: 21,
        span: 15741..15742,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 626,
        column: 22,
        span: 15742..15743,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 626,
        column: 23,
        span: 15743..15744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 630,
        column: 3,
        span: 15783..15785,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 630,
        column: 5,
        span: 15786..15787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 630,
        column: 15,
        span: 15788..15797,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 630,
        column: 16,
        span: 15797..15798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 630,
        column: 22,
        span: 15798..15804,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 630,
        column: 23,
        span: 15804..15805,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 630,
        column: 31,
        span: 15805..15813,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 630,
        column: 33,
        span: 15814..15815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 630,
        column: 34,
        span: 15815..15816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 630,
        column: 35,
        span: 15816..15817,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 631,
        column: 8,
        span: 15820..15825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 631,
        column: 10,
        span: 15826..15827,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 631,
        column: 11,
        span: 15827..15828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 631,
        column: 13,
        span: 15829..15830,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 631,
        column: 15,
        span: 15831..15832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 631,
        column: 25,
        span: 15833..15842,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 631,
        column: 26,
        span: 15842..15843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 631,
        column: 31,
        span: 15843..15848,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 631,
        column: 32,
        span: 15848..15849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 631,
        column: 33,
        span: 15849..15850,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 631,
        column: 34,
        span: 15850..15851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 632,
        column: 9,
        span: 15854..15860,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 632,
        column: 10,
        span: 15860..15861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 632,
        column: 11,
        span: 15861..15862,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 632,
        column: 14,
        span: 15863..15865,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 632,
        column: 18,
        span: 15865..15869,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 632,
        column: 22,
        span: 15870..15873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 632,
        column: 24,
        span: 15874..15875,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 632,
        column: 27,
        span: 15876..15878,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 632,
        column: 31,
        span: 15879..15882,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 632,
        column: 32,
        span: 15882..15883,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 633,
        column: 9,
        span: 15886..15892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 633,
        column: 0,
        span: 15893..15894,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 634,
        column: 4,
        span: 15895..15898,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 634,
        column: 5,
        span: 15898..15899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 635,
        column: 2,
        span: 15900..15901,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 635,
        column: 3,
        span: 15901..15902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 635,
        column: 5,
        span: 15903..15904,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 635,
        column: 7,
        span: 15905..15906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 635,
        column: 17,
        span: 15907..15916,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 635,
        column: 18,
        span: 15916..15917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 635,
        column: 24,
        span: 15917..15923,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 635,
        column: 25,
        span: 15923..15924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 635,
        column: 27,
        span: 15924..15926,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 635,
        column: 28,
        span: 15926..15927,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 635,
        column: 31,
        span: 15927..15930,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 635,
        column: 32,
        span: 15930..15931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 636,
        column: 7,
        span: 15932..15938,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 636,
        column: 8,
        span: 15938..15939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 636,
        column: 9,
        span: 15939..15940,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 636,
        column: 13,
        span: 15941..15944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 636,
        column: 15,
        span: 15945..15946,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 636,
        column: 18,
        span: 15947..15949,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 636,
        column: 21,
        span: 15949..15952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 636,
        column: 22,
        span: 15952..15953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 637,
        column: 2,
        span: 15954..15955,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 637,
        column: 3,
        span: 15955..15956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 637,
        column: 5,
        span: 15957..15958,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 637,
        column: 7,
        span: 15959..15960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 637,
        column: 13,
        span: 15961..15966,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 637,
        column: 14,
        span: 15966..15967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 637,
        column: 22,
        span: 15967..15975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 637,
        column: 23,
        span: 15975..15976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 637,
        column: 25,
        span: 15976..15978,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 637,
        column: 26,
        span: 15978..15979,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 637,
        column: 28,
        span: 15979..15981,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 637,
        column: 29,
        span: 15981..15982,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 637,
        column: 31,
        span: 15982..15984,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 637,
        column: 32,
        span: 15984..15985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 638,
        column: 7,
        span: 15986..15992,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 638,
        column: 8,
        span: 15992..15993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 638,
        column: 9,
        span: 15993..15994,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 638,
        column: 12,
        span: 15995..15997,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 638,
        column: 16,
        span: 15998..16001,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 638,
        column: 20,
        span: 16002..16005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 638,
        column: 22,
        span: 16006..16007,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 638,
        column: 25,
        span: 16008..16010,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 638,
        column: 28,
        span: 16010..16013,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 638,
        column: 29,
        span: 16013..16014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 639,
        column: 7,
        span: 16015..16021,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 639,
        column: 8,
        span: 16021..16022,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 639,
        column: 11,
        span: 16022..16025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 639,
        column: 17,
        span: 16026..16031,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 639,
        column: 18,
        span: 16031..16032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 639,
        column: 26,
        span: 16032..16040,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 639,
        column: 27,
        span: 16040..16041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 639,
        column: 29,
        span: 16041..16043,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 639,
        column: 30,
        span: 16043..16044,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 639,
        column: 32,
        span: 16044..16046,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 639,
        column: 33,
        span: 16046..16047,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 639,
        column: 35,
        span: 16047..16049,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 639,
        column: 36,
        span: 16049..16050,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 639,
        column: 37,
        span: 16050..16051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 640,
        column: 7,
        span: 16052..16058,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 640,
        column: 8,
        span: 16058..16059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 640,
        column: 13,
        span: 16059..16064,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 640,
        column: 14,
        span: 16064..16065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 640,
        column: 22,
        span: 16065..16073,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 640,
        column: 23,
        span: 16073..16074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 640,
        column: 25,
        span: 16074..16076,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 640,
        column: 26,
        span: 16076..16077,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 640,
        column: 28,
        span: 16077..16079,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 640,
        column: 29,
        span: 16079..16080,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 640,
        column: 31,
        span: 16080..16082,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 640,
        column: 32,
        span: 16082..16083,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 640,
        column: 35,
        span: 16083..16086,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 640,
        column: 36,
        span: 16086..16087,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 640,
        column: 39,
        span: 16088..16090,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 640,
        column: 43,
        span: 16091..16094,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 640,
        column: 44,
        span: 16094..16095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 641,
        column: 7,
        span: 16096..16102,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 641,
        column: 8,
        span: 16102..16103,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 641,
        column: 11,
        span: 16103..16106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 641,
        column: 17,
        span: 16107..16112,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 641,
        column: 18,
        span: 16112..16113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 641,
        column: 26,
        span: 16113..16121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 641,
        column: 27,
        span: 16121..16122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 641,
        column: 29,
        span: 16122..16124,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 641,
        column: 30,
        span: 16124..16125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 641,
        column: 32,
        span: 16125..16127,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 641,
        column: 33,
        span: 16127..16128,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 641,
        column: 35,
        span: 16128..16130,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 641,
        column: 36,
        span: 16130..16131,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 641,
        column: 39,
        span: 16131..16134,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 641,
        column: 40,
        span: 16134..16135,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 641,
        column: 41,
        span: 16135..16136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 642,
        column: 2,
        span: 16137..16138,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 642,
        column: 3,
        span: 16138..16139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 642,
        column: 5,
        span: 16140..16141,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 642,
        column: 7,
        span: 16142..16143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 642,
        column: 17,
        span: 16144..16153,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 642,
        column: 18,
        span: 16153..16154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 642,
        column: 24,
        span: 16154..16160,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 642,
        column: 25,
        span: 16160..16161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 642,
        column: 27,
        span: 16161..16163,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 642,
        column: 28,
        span: 16163..16164,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 642,
        column: 32,
        span: 16164..16168,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 642,
        column: 33,
        span: 16168..16169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 643,
        column: 7,
        span: 16170..16176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 643,
        column: 8,
        span: 16176..16177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 643,
        column: 9,
        span: 16177..16178,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 643,
        column: 13,
        span: 16179..16182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 643,
        column: 15,
        span: 16183..16184,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 643,
        column: 18,
        span: 16185..16187,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 643,
        column: 21,
        span: 16187..16190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 643,
        column: 22,
        span: 16190..16191,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 648,
        column: 9,
        span: 16259..16267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 648,
        column: 11,
        span: 16268..16269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 648,
        column: 12,
        span: 16269..16270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 648,
        column: 13,
        span: 16270..16271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 648,
        column: 14,
        span: 16271..16272,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 648,
        column: 17,
        span: 16273..16275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 648,
        column: 19,
        span: 16276..16277,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 648,
        column: 21,
        span: 16277..16279,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 648,
        column: 22,
        span: 16278..16280,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 648,
        column: 27,
        span: 16281..16285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 648,
        column: 33,
        span: 16286..16291,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 648,
        column: 34,
        span: 16291..16292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 648,
        column: 35,
        span: 16292..16293,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 648,
        column: 36,
        span: 16293..16294,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 648,
        column: 41,
        span: 16295..16299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 648,
        column: 51,
        span: 16300..16309,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 648,
        column: 52,
        span: 16309..16310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 648,
        column: 57,
        span: 16310..16315,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 648,
        column: 58,
        span: 16315..16316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 648,
        column: 59,
        span: 16316..16317,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 648,
        column: 60,
        span: 16317..16318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 648,
        column: 62,
        span: 16319..16320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 648,
        column: 63,
        span: 16320..16321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 648,
        column: 64,
        span: 16321..16322,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 648,
        column: 65,
        span: 16322..16323,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 648,
        column: 66,
        span: 16322..16324,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 648,
        column: 67,
        span: 16324..16325,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 648,
        column: 71,
        span: 16326..16329,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 648,
        column: 0,
        span: 16330..16333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 650,
        column: 3,
        span: 16335..16337,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 650,
        column: 5,
        span: 16338..16339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 650,
        column: 15,
        span: 16340..16349,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 650,
        column: 16,
        span: 16349..16350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 650,
        column: 22,
        span: 16350..16356,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 650,
        column: 23,
        span: 16356..16357,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 650,
        column: 31,
        span: 16357..16365,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 650,
        column: 33,
        span: 16366..16367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 650,
        column: 34,
        span: 16367..16368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 650,
        column: 35,
        span: 16368..16369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 650,
        column: 37,
        span: 16370..16371,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 650,
        column: 38,
        span: 16371..16372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 650,
        column: 39,
        span: 16372..16373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 650,
        column: 40,
        span: 16373..16374,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 650,
        column: 44,
        span: 16375..16378,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 650,
        column: 45,
        span: 16378..16379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 651,
        column: 2,
        span: 16380..16381,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 651,
        column: 3,
        span: 16381..16382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 651,
        column: 5,
        span: 16383..16384,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 651,
        column: 7,
        span: 16385..16386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 651,
        column: 17,
        span: 16387..16396,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 651,
        column: 18,
        span: 16396..16397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 651,
        column: 24,
        span: 16397..16403,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 651,
        column: 25,
        span: 16403..16404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 651,
        column: 27,
        span: 16404..16406,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 651,
        column: 28,
        span: 16406..16407,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 651,
        column: 30,
        span: 16407..16409,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 651,
        column: 31,
        span: 16409..16410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 652,
        column: 2,
        span: 16411..16412,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 652,
        column: 4,
        span: 16413..16414,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 652,
        column: 6,
        span: 16415..16416,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'coroutine.yield'\"",
        ),
        line: 652,
        column: 25,
        span: 16416..16435,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 652,
        column: 26,
        span: 16435..16436,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'f'\"",
        ),
        line: 652,
        column: 32,
        span: 16437..16442,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 652,
        column: 33,
        span: 16442..16443,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"in function <\"",
        ),
        line: 652,
        column: 49,
        span: 16444..16459,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 652,
        column: 50,
        span: 16459..16460,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 653,
        column: 6,
        span: 16461..16466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 653,
        column: 16,
        span: 16467..16476,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 653,
        column: 17,
        span: 16476..16477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        line: 653,
        column: 23,
        span: 16477..16483,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 653,
        column: 24,
        span: 16483..16484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 653,
        column: 26,
        span: 16484..16486,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 653,
        column: 27,
        span: 16486..16487,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 653,
        column: 30,
        span: 16488..16490,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"suspended\"",
        ),
        line: 653,
        column: 42,
        span: 16491..16502,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 653,
        column: 0,
        span: 16503..16505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 654,
        column: 17,
        span: 16508..16522,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 654,
        column: 18,
        span: 16522..16523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 654,
        column: 20,
        span: 16523..16525,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 654,
        column: 21,
        span: 16525..16526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 654,
        column: 23,
        span: 16527..16528,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 654,
        column: 24,
        span: 16528..16529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 655,
        column: 4,
        span: 16532..16533,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 655,
        column: 5,
        span: 16533..16534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 655,
        column: 7,
        span: 16535..16536,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 655,
        column: 9,
        span: 16537..16538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 655,
        column: 19,
        span: 16539..16548,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 655,
        column: 20,
        span: 16548..16549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 655,
        column: 26,
        span: 16549..16555,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 655,
        column: 27,
        span: 16555..16556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 655,
        column: 29,
        span: 16556..16558,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 655,
        column: 30,
        span: 16558..16559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 656,
        column: 8,
        span: 16562..16567,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 656,
        column: 9,
        span: 16567..16568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 656,
        column: 15,
        span: 16568..16574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 656,
        column: 16,
        span: 16574..16575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 656,
        column: 17,
        span: 16575..16576,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 656,
        column: 18,
        span: 16576..16577,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 656,
        column: 20,
        span: 16577..16579,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 656,
        column: 21,
        span: 16579..16580,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'f'\"",
        ),
        line: 656,
        column: 27,
        span: 16581..16586,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 656,
        column: 28,
        span: 16586..16587,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 657,
        column: 0,
        span: 16624..16627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 658,
        column: 2,
        span: 16628..16629,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 658,
        column: 3,
        span: 16629..16630,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 658,
        column: 4,
        span: 16629..16631,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 658,
        column: 5,
        span: 16631..16632,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 658,
        column: 7,
        span: 16633..16634,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'error'\"",
        ),
        line: 658,
        column: 17,
        span: 16635..16644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 659,
        column: 15,
        span: 16645..16659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 659,
        column: 16,
        span: 16659..16660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 659,
        column: 18,
        span: 16660..16662,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 659,
        column: 19,
        span: 16662..16663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 659,
        column: 21,
        span: 16664..16665,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 659,
        column: 22,
        span: 16665..16666,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 665,
        column: 6,
        span: 16785..16790,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 665,
        column: 15,
        span: 16791..16799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 665,
        column: 17,
        span: 16800..16801,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 665,
        column: 18,
        span: 16801..16802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 665,
        column: 19,
        span: 16802..16803,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 665,
        column: 20,
        span: 16803..16804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 666,
        column: 14,
        span: 16809..16818,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 666,
        column: 15,
        span: 16818..16819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 666,
        column: 20,
        span: 16819..16824,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 666,
        column: 21,
        span: 16824..16825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 666,
        column: 22,
        span: 16825..16826,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 666,
        column: 23,
        span: 16826..16827,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 667,
        column: 0,
        span: 16828..16831,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 669,
        column: 6,
        span: 16833..16838,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 669,
        column: 15,
        span: 16839..16847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 669,
        column: 17,
        span: 16848..16849,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 669,
        column: 19,
        span: 16850..16851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 669,
        column: 20,
        span: 16851..16852,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 669,
        column: 21,
        span: 16852..16853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 670,
        column: 8,
        span: 16856..16861,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 670,
        column: 9,
        span: 16861..16862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 670,
        column: 16,
        span: 16862..16869,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 670,
        column: 17,
        span: 16869..16870,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 670,
        column: 25,
        span: 16870..16878,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 670,
        column: 27,
        span: 16879..16880,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 670,
        column: 28,
        span: 16880..16881,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 670,
        column: 32,
        span: 16882..16885,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 670,
        column: 33,
        span: 16885..16886,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 670,
        column: 37,
        span: 16887..16890,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 670,
        column: 38,
        span: 16890..16891,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 671,
        column: 6,
        span: 16894..16897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 671,
        column: 8,
        span: 16898..16899,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 671,
        column: 9,
        span: 16899..16900,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 671,
        column: 10,
        span: 16899..16901,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 671,
        column: 11,
        span: 16901..16902,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 671,
        column: 15,
        span: 16901..16906,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 671,
        column: 0,
        span: 16907..16909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 672,
        column: 6,
        span: 16914..16915,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 672,
        column: 7,
        span: 16915..16916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 672,
        column: 8,
        span: 16916..16917,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 672,
        column: 9,
        span: 16917..16918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 672,
        column: 10,
        span: 16918..16919,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 672,
        column: 11,
        span: 16919..16920,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 673,
        column: 0,
        span: 16923..16926,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 674,
        column: 0,
        span: 16927..16930,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 676,
        column: 6,
        span: 16932..16937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 676,
        column: 9,
        span: 16938..16940,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 676,
        column: 11,
        span: 16941..16942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 676,
        column: 21,
        span: 16943..16952,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 676,
        column: 22,
        span: 16952..16953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 676,
        column: 26,
        span: 16953..16957,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 676,
        column: 27,
        span: 16957..16958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 676,
        column: 28,
        span: 16958..16959,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 676,
        column: 29,
        span: 16959..16960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 677,
        column: 3,
        span: 16961..16963,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 677,
        column: 4,
        span: 16963..16964,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 677,
        column: 6,
        span: 16963..16966,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 677,
        column: 7,
        span: 16966..16967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 678,
        column: 6,
        span: 16968..16973,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 678,
        column: 7,
        span: 16973..16974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 678,
        column: 9,
        span: 16974..16976,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 678,
        column: 10,
        span: 16976..16977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 679,
        column: 6,
        span: 16978..16983,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 679,
        column: 7,
        span: 16983..16984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 679,
        column: 9,
        span: 16984..16986,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 679,
        column: 10,
        span: 16986..16987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 682,
        column: 7,
        span: 16990..16996,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 682,
        column: 8,
        span: 16996..16997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 682,
        column: 12,
        span: 16997..17001,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 682,
        column: 13,
        span: 17001..17002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 682,
        column: 18,
        span: 17002..17007,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 682,
        column: 19,
        span: 17007..17008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getregistry",
        ),
        line: 682,
        column: 30,
        span: 17008..17019,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 682,
        column: 31,
        span: 17019..17020,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 682,
        column: 32,
        span: 17020..17021,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 682,
        column: 33,
        span: 17021..17022,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 682,
        column: 36,
        span: 17023..17025,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 682,
        column: 44,
        span: 17026..17033,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 682,
        column: 45,
        span: 17033..17034,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 686,
        column: 6,
        span: 17067..17072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 686,
        column: 8,
        span: 17073..17074,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 686,
        column: 10,
        span: 17075..17076,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 686,
        column: 12,
        span: 17077..17078,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 686,
        column: 13,
        span: 17078..17079,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 687,
        column: 6,
        span: 17080..17085,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 687,
        column: 15,
        span: 17086..17094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 687,
        column: 17,
        span: 17095..17096,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 687,
        column: 19,
        span: 17097..17098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 687,
        column: 20,
        span: 17098..17099,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 687,
        column: 21,
        span: 17099..17100,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 688,
        column: 8,
        span: 17103..17108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        line: 688,
        column: 13,
        span: 17109..17113,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 688,
        column: 15,
        span: 17114..17115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 688,
        column: 21,
        span: 17116..17121,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 688,
        column: 22,
        span: 17121..17122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 688,
        column: 29,
        span: 17122..17129,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 688,
        column: 30,
        span: 17129..17130,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 688,
        column: 31,
        span: 17129..17131,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 688,
        column: 32,
        span: 17131..17132,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 688,
        column: 33,
        span: 17132..17133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 689,
        column: 9,
        span: 17136..17142,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 689,
        column: 10,
        span: 17142..17143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        line: 689,
        column: 14,
        span: 17143..17147,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 689,
        column: 15,
        span: 17147..17148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        line: 689,
        column: 23,
        span: 17148..17156,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 689,
        column: 26,
        span: 17157..17159,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"metamethod\"",
        ),
        line: 689,
        column: 39,
        span: 17160..17172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 689,
        column: 40,
        span: 17172..17173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 690,
        column: 4,
        span: 17176..17177,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 690,
        column: 5,
        span: 17177..17178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 690,
        column: 7,
        span: 17178..17180,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 690,
        column: 9,
        span: 17181..17182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        line: 690,
        column: 14,
        span: 17183..17187,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 690,
        column: 15,
        span: 17187..17188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 690,
        column: 0,
        span: 17188..17192,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 691,
        column: 9,
        span: 17195..17201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        line: 691,
        column: 14,
        span: 17202..17206,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 691,
        column: 15,
        span: 17206..17207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 691,
        column: 0,
        span: 17207..17211,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 692,
        column: 0,
        span: 17212..17215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 693,
        column: 13,
        span: 17216..17228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 693,
        column: 14,
        span: 17228..17229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 693,
        column: 15,
        span: 17229..17230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 693,
        column: 16,
        span: 17230..17231,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 693,
        column: 18,
        span: 17232..17233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 694,
        column: 10,
        span: 17236..17243,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 694,
        column: 12,
        span: 17244..17245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 694,
        column: 14,
        span: 17246..17247,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 694,
        column: 15,
        span: 17247..17248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__add",
        ),
        line: 694,
        column: 21,
        span: 17249..17254,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 694,
        column: 23,
        span: 17255..17256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 694,
        column: 25,
        span: 17257..17258,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 694,
        column: 26,
        span: 17258..17259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__div",
        ),
        line: 694,
        column: 32,
        span: 17260..17265,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 694,
        column: 34,
        span: 17266..17267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 694,
        column: 36,
        span: 17268..17269,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 694,
        column: 37,
        span: 17269..17270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mod",
        ),
        line: 694,
        column: 43,
        span: 17271..17276,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 694,
        column: 45,
        span: 17277..17278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 694,
        column: 47,
        span: 17279..17280,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 694,
        column: 48,
        span: 17280..17281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__concat",
        ),
        line: 694,
        column: 57,
        span: 17282..17290,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 694,
        column: 59,
        span: 17291..17292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 694,
        column: 61,
        span: 17293..17294,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 694,
        column: 62,
        span: 17294..17295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__pow",
        ),
        line: 694,
        column: 68,
        span: 17296..17301,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 694,
        column: 70,
        span: 17302..17303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 694,
        column: 72,
        span: 17304..17305,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 694,
        column: 73,
        span: 17305..17306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mul",
        ),
        line: 695,
        column: 8,
        span: 17309..17314,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 695,
        column: 10,
        span: 17315..17316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 695,
        column: 12,
        span: 17317..17318,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 695,
        column: 13,
        span: 17318..17319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__idiv",
        ),
        line: 695,
        column: 20,
        span: 17320..17326,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 695,
        column: 22,
        span: 17327..17328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 695,
        column: 24,
        span: 17329..17330,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 695,
        column: 25,
        span: 17330..17331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__unm",
        ),
        line: 695,
        column: 31,
        span: 17332..17337,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 695,
        column: 33,
        span: 17338..17339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 695,
        column: 35,
        span: 17340..17341,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 695,
        column: 36,
        span: 17341..17342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        line: 695,
        column: 42,
        span: 17343..17348,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 695,
        column: 44,
        span: 17349..17350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 695,
        column: 46,
        span: 17351..17352,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 695,
        column: 47,
        span: 17352..17353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__sub",
        ),
        line: 695,
        column: 53,
        span: 17354..17359,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 695,
        column: 55,
        span: 17360..17361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 695,
        column: 57,
        span: 17362..17363,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 695,
        column: 58,
        span: 17363..17364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__shl",
        ),
        line: 696,
        column: 8,
        span: 17367..17372,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 696,
        column: 10,
        span: 17373..17374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 696,
        column: 12,
        span: 17375..17376,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 696,
        column: 13,
        span: 17376..17377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__shr",
        ),
        line: 696,
        column: 19,
        span: 17378..17383,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 696,
        column: 21,
        span: 17384..17385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 696,
        column: 23,
        span: 17386..17387,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 696,
        column: 24,
        span: 17387..17388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__bor",
        ),
        line: 696,
        column: 30,
        span: 17389..17394,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 696,
        column: 32,
        span: 17395..17396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 696,
        column: 34,
        span: 17397..17398,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 696,
        column: 35,
        span: 17398..17399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__bxor",
        ),
        line: 696,
        column: 42,
        span: 17400..17406,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 696,
        column: 44,
        span: 17407..17408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 696,
        column: 46,
        span: 17409..17410,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 696,
        column: 47,
        span: 17410..17411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        line: 697,
        column: 7,
        span: 17414..17418,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 697,
        column: 9,
        span: 17419..17420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 697,
        column: 11,
        span: 17421..17422,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 697,
        column: 12,
        span: 17422..17423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__le",
        ),
        line: 697,
        column: 17,
        span: 17424..17428,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 697,
        column: 19,
        span: 17429..17430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 697,
        column: 21,
        span: 17431..17432,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 697,
        column: 22,
        span: 17432..17433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        line: 697,
        column: 27,
        span: 17434..17438,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 697,
        column: 29,
        span: 17439..17440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 697,
        column: 31,
        span: 17441..17442,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 697,
        column: 32,
        span: 17442..17443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__unm",
        ),
        line: 697,
        column: 38,
        span: 17444..17449,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 697,
        column: 40,
        span: 17450..17451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 697,
        column: 42,
        span: 17452..17453,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 697,
        column: 43,
        span: 17453..17454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        line: 697,
        column: 49,
        span: 17455..17460,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 697,
        column: 51,
        span: 17461..17462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 697,
        column: 53,
        span: 17463..17464,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 697,
        column: 54,
        span: 17464..17465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__band",
        ),
        line: 697,
        column: 61,
        span: 17466..17472,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 697,
        column: 63,
        span: 17473..17474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 697,
        column: 65,
        span: 17475..17476,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 697,
        column: 66,
        span: 17476..17477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__bnot",
        ),
        line: 698,
        column: 9,
        span: 17480..17486,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 698,
        column: 11,
        span: 17487..17488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 698,
        column: 13,
        span: 17489..17490,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 698,
        column: 14,
        span: 17490..17491,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 699,
        column: 2,
        span: 17492..17493,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 699,
        column: 3,
        span: 17493..17494,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 701,
        column: 6,
        span: 17496..17501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 701,
        column: 8,
        span: 17502..17503,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 701,
        column: 10,
        span: 17504..17505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 701,
        column: 23,
        span: 17506..17518,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 701,
        column: 24,
        span: 17518..17519,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 701,
        column: 25,
        span: 17519..17520,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 701,
        column: 26,
        span: 17520..17521,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 701,
        column: 27,
        span: 17521..17522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 701,
        column: 40,
        span: 17523..17535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 701,
        column: 41,
        span: 17535..17536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 701,
        column: 42,
        span: 17536..17537,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 701,
        column: 43,
        span: 17537..17538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 701,
        column: 44,
        span: 17538..17539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 703,
        column: 7,
        span: 17541..17547,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 703,
        column: 8,
        span: 17547..17548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 703,
        column: 9,
        span: 17548..17549,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 703,
        column: 10,
        span: 17549..17550,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 703,
        column: 11,
        span: 17549..17551,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 703,
        column: 12,
        span: 17551..17552,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 703,
        column: 15,
        span: 17553..17555,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__index\"",
        ),
        line: 703,
        column: 25,
        span: 17556..17565,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 703,
        column: 29,
        span: 17566..17569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 703,
        column: 31,
        span: 17570..17571,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 703,
        column: 32,
        span: 17571..17572,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 703,
        column: 33,
        span: 17571..17573,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 703,
        column: 36,
        span: 17574..17576,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__pow\"",
        ),
        line: 703,
        column: 44,
        span: 17577..17584,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 703,
        column: 48,
        span: 17585..17588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 703,
        column: 50,
        span: 17589..17590,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 703,
        column: 52,
        span: 17590..17592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 703,
        column: 53,
        span: 17592..17593,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 703,
        column: 56,
        span: 17594..17596,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__concat\"",
        ),
        line: 703,
        column: 67,
        span: 17597..17607,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 703,
        column: 68,
        span: 17607..17608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 704,
        column: 7,
        span: 17609..17615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 704,
        column: 8,
        span: 17615..17616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 704,
        column: 9,
        span: 17616..17617,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 704,
        column: 10,
        span: 17617..17618,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 704,
        column: 11,
        span: 17617..17619,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 704,
        column: 14,
        span: 17620..17622,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__div\"",
        ),
        line: 704,
        column: 22,
        span: 17623..17630,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 704,
        column: 26,
        span: 17631..17634,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 704,
        column: 28,
        span: 17634..17636,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 704,
        column: 29,
        span: 17636..17637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 704,
        column: 30,
        span: 17637..17638,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 704,
        column: 33,
        span: 17639..17641,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__mod\"",
        ),
        line: 704,
        column: 41,
        span: 17642..17649,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 704,
        column: 42,
        span: 17649..17650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 705,
        column: 7,
        span: 17651..17657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 705,
        column: 8,
        span: 17657..17658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 705,
        column: 9,
        span: 17658..17659,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 705,
        column: 10,
        span: 17659..17660,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 705,
        column: 11,
        span: 17659..17661,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 705,
        column: 14,
        span: 17662..17664,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__add\"",
        ),
        line: 705,
        column: 22,
        span: 17665..17672,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 705,
        column: 26,
        span: 17673..17676,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 705,
        column: 28,
        span: 17676..17678,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 705,
        column: 29,
        span: 17678..17679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 705,
        column: 30,
        span: 17679..17680,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 705,
        column: 33,
        span: 17681..17683,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__sub\"",
        ),
        line: 705,
        column: 41,
        span: 17684..17691,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 705,
        column: 45,
        span: 17692..17695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 705,
        column: 47,
        span: 17696..17697,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 705,
        column: 48,
        span: 17697..17698,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 705,
        column: 49,
        span: 17697..17699,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 705,
        column: 52,
        span: 17700..17702,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__mul\"",
        ),
        line: 705,
        column: 60,
        span: 17703..17710,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 705,
        column: 0,
        span: 17711..17714,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 706,
        column: 9,
        span: 17722..17723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 706,
        column: 10,
        span: 17723..17724,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 706,
        column: 13,
        span: 17725..17727,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__unm\"",
        ),
        line: 706,
        column: 21,
        span: 17728..17735,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 706,
        column: 25,
        span: 17736..17739,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 706,
        column: 27,
        span: 17740..17741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 706,
        column: 28,
        span: 17741..17742,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 706,
        column: 31,
        span: 17743..17745,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__len\"",
        ),
        line: 706,
        column: 39,
        span: 17746..17753,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 706,
        column: 43,
        span: 17754..17757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 706,
        column: 45,
        span: 17758..17759,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 706,
        column: 46,
        span: 17759..17760,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 706,
        column: 47,
        span: 17759..17761,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 706,
        column: 50,
        span: 17762..17764,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__band\"",
        ),
        line: 706,
        column: 59,
        span: 17765..17773,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 706,
        column: 60,
        span: 17773..17774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 707,
        column: 7,
        span: 17775..17781,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 707,
        column: 8,
        span: 17781..17782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 707,
        column: 9,
        span: 17782..17783,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 707,
        column: 10,
        span: 17783..17784,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 707,
        column: 11,
        span: 17783..17785,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 707,
        column: 14,
        span: 17786..17788,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__bor\"",
        ),
        line: 707,
        column: 22,
        span: 17789..17796,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 707,
        column: 26,
        span: 17797..17800,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 707,
        column: 28,
        span: 17800..17802,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 707,
        column: 29,
        span: 17802..17803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 707,
        column: 30,
        span: 17803..17804,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 707,
        column: 33,
        span: 17805..17807,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__bxor\"",
        ),
        line: 707,
        column: 42,
        span: 17808..17816,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 707,
        column: 46,
        span: 17817..17820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 707,
        column: 48,
        span: 17821..17822,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 707,
        column: 50,
        span: 17822..17824,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 707,
        column: 51,
        span: 17823..17825,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 707,
        column: 54,
        span: 17826..17828,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__shl\"",
        ),
        line: 707,
        column: 62,
        span: 17829..17836,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 707,
        column: 0,
        span: 17837..17840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 708,
        column: 9,
        span: 17848..17849,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 708,
        column: 11,
        span: 17849..17851,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 708,
        column: 12,
        span: 17850..17852,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 708,
        column: 15,
        span: 17853..17855,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__shr\"",
        ),
        line: 708,
        column: 23,
        span: 17856..17863,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 708,
        column: 24,
        span: 17863..17864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 709,
        column: 7,
        span: 17865..17871,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 709,
        column: 9,
        span: 17872..17873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 709,
        column: 10,
        span: 17873..17874,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 709,
        column: 12,
        span: 17874..17876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 709,
        column: 13,
        span: 17876..17877,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 709,
        column: 17,
        span: 17878..17881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 709,
        column: 19,
        span: 17882..17883,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 709,
        column: 20,
        span: 17883..17884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 709,
        column: 22,
        span: 17884..17886,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 709,
        column: 25,
        span: 17887..17889,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__eq\"",
        ),
        line: 709,
        column: 32,
        span: 17890..17896,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 709,
        column: 33,
        span: 17896..17897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 710,
        column: 7,
        span: 17898..17904,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 710,
        column: 9,
        span: 17905..17906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 710,
        column: 10,
        span: 17906..17907,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 710,
        column: 12,
        span: 17907..17909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 710,
        column: 13,
        span: 17909..17910,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 710,
        column: 17,
        span: 17911..17914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 710,
        column: 19,
        span: 17915..17916,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 710,
        column: 20,
        span: 17916..17917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 710,
        column: 22,
        span: 17917..17919,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 710,
        column: 25,
        span: 17920..17922,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__le\"",
        ),
        line: 710,
        column: 32,
        span: 17923..17929,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 710,
        column: 33,
        span: 17929..17930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 711,
        column: 7,
        span: 17931..17937,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 711,
        column: 9,
        span: 17938..17939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 711,
        column: 10,
        span: 17939..17940,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 711,
        column: 11,
        span: 17940..17941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 711,
        column: 12,
        span: 17941..17942,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 711,
        column: 16,
        span: 17943..17946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 711,
        column: 18,
        span: 17947..17948,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 711,
        column: 19,
        span: 17948..17949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 711,
        column: 21,
        span: 17949..17951,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 711,
        column: 24,
        span: 17952..17954,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__lt\"",
        ),
        line: 711,
        column: 31,
        span: 17955..17961,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 711,
        column: 32,
        span: 17961..17962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 712,
        column: 7,
        span: 17963..17969,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 712,
        column: 8,
        span: 17969..17970,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 712,
        column: 9,
        span: 17970..17971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 712,
        column: 10,
        span: 17971..17972,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 712,
        column: 13,
        span: 17973..17975,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__bnot\"",
        ),
        line: 712,
        column: 22,
        span: 17976..17984,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 712,
        column: 23,
        span: 17984..17985,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 714,
        column: 3,
        span: 17987..17989,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 715,
        column: 8,
        span: 18023..18028,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 715,
        column: 17,
        span: 18029..18037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 715,
        column: 19,
        span: 18038..18039,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 715,
        column: 20,
        span: 18039..18040,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 715,
        column: 21,
        span: 18040..18041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 716,
        column: 11,
        span: 18046..18052,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 716,
        column: 12,
        span: 18052..18053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 716,
        column: 17,
        span: 18053..18058,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 716,
        column: 18,
        span: 18058..18059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 716,
        column: 25,
        span: 18059..18066,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 716,
        column: 26,
        span: 18066..18067,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 716,
        column: 27,
        span: 18066..18068,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 716,
        column: 28,
        span: 18068..18069,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 716,
        column: 29,
        span: 18069..18070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 716,
        column: 33,
        span: 18070..18074,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 716,
        column: 36,
        span: 18075..18077,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for iterator\"",
        ),
        line: 716,
        column: 51,
        span: 18078..18092,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 716,
        column: 52,
        span: 18092..18093,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 717,
        column: 0,
        span: 18096..18099,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 719,
        column: 6,
        span: 18103..18106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 719,
        column: 8,
        span: 18107..18108,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 719,
        column: 11,
        span: 18109..18111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 719,
        column: 13,
        span: 18112..18113,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 719,
        column: 16,
        span: 18114..18116,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 719,
        column: 0,
        span: 18117..18120,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 720,
        column: 0,
        span: 18121..18124,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 723,
        column: 3,
        span: 18127..18129,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 724,
        column: 8,
        span: 18171..18176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 724,
        column: 13,
        span: 18177..18181,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 724,
        column: 15,
        span: 18182..18183,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 724,
        column: 0,
        span: 18184..18187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 727,
        column: 15,
        span: 18239..18251,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 727,
        column: 16,
        span: 18251..18252,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 727,
        column: 17,
        span: 18252..18253,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 727,
        column: 18,
        span: 18253..18254,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 727,
        column: 19,
        span: 18254..18255,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 727,
        column: 21,
        span: 18256..18257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 727,
        column: 25,
        span: 18257..18261,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 727,
        column: 27,
        span: 18262..18263,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 727,
        column: 36,
        span: 18264..18272,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 727,
        column: 38,
        span: 18273..18274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 727,
        column: 39,
        span: 18274..18275,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 728,
        column: 10,
        span: 18280..18285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 728,
        column: 12,
        span: 18286..18287,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 728,
        column: 14,
        span: 18288..18289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 728,
        column: 20,
        span: 18290..18295,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 728,
        column: 21,
        span: 18295..18296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 728,
        column: 28,
        span: 18296..18303,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 728,
        column: 29,
        span: 18303..18304,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 728,
        column: 30,
        span: 18303..18305,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 728,
        column: 31,
        span: 18305..18306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 729,
        column: 11,
        span: 18339..18345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 729,
        column: 12,
        span: 18345..18346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 729,
        column: 13,
        span: 18346..18347,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 729,
        column: 14,
        span: 18347..18348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        line: 729,
        column: 22,
        span: 18348..18356,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 729,
        column: 25,
        span: 18357..18359,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"metamethod\"",
        ),
        line: 729,
        column: 38,
        span: 18360..18372,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 729,
        column: 39,
        span: 18372..18373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 730,
        column: 9,
        span: 18378..18382,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 730,
        column: 11,
        span: 18383..18384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 730,
        column: 13,
        span: 18385..18386,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 730,
        column: 14,
        span: 18386..18387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 730,
        column: 0,
        span: 18387..18391,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 731,
        column: 6,
        span: 18394..18397,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 731,
        column: 7,
        span: 18397..18398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 731,
        column: 8,
        span: 18398..18399,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 734,
        column: 9,
        span: 18462..18468,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 734,
        column: 15,
        span: 18469..18474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 734,
        column: 17,
        span: 18475..18476,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 734,
        column: 19,
        span: 18477..18478,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 734,
        column: 21,
        span: 18479..18480,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 734,
        column: 22,
        span: 18480..18481,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 734,
        column: 28,
        span: 18482..18487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 734,
        column: 0,
        span: 18488..18492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 735,
        column: 9,
        span: 18495..18501,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 735,
        column: 10,
        span: 18501..18502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 735,
        column: 14,
        span: 18502..18506,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 735,
        column: 17,
        span: 18507..18509,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__gc\"",
        ),
        line: 735,
        column: 24,
        span: 18510..18516,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 735,
        column: 25,
        span: 18516..18517,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 736,
        column: 0,
        span: 18518..18521,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 739,
        column: 0,
        span: 18524..18526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 740,
        column: 8,
        span: 18529..18534,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 740,
        column: 9,
        span: 18534..18535,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing traceback sizes\"",
        ),
        line: 740,
        column: 34,
        span: 18535..18560,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 740,
        column: 35,
        span: 18560..18561,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 742,
        column: 8,
        span: 18565..18570,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 742,
        column: 17,
        span: 18571..18579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "countlines",
        ),
        line: 742,
        column: 28,
        span: 18580..18590,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 742,
        column: 30,
        span: 18591..18592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 742,
        column: 31,
        span: 18592..18593,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 742,
        column: 32,
        span: 18593..18594,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 743,
        column: 11,
        span: 18599..18605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 743,
        column: 18,
        span: 18606..18612,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 743,
        column: 19,
        span: 18612..18613,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 743,
        column: 20,
        span: 18612..18614,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 743,
        column: 21,
        span: 18614..18615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 743,
        column: 28,
        span: 18616..18622,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 743,
        column: 29,
        span: 18622..18623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 743,
        column: 33,
        span: 18623..18627,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 743,
        column: 34,
        span: 18627..18628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 743,
        column: 35,
        span: 18628..18629,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 743,
        column: 36,
        span: 18629..18630,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 743,
        column: 41,
        span: 18631..18635,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 743,
        column: 42,
        span: 18635..18636,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 743,
        column: 45,
        span: 18637..18639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 743,
        column: 46,
        span: 18639..18640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 743,
        column: 47,
        span: 18640..18641,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 744,
        column: 0,
        span: 18644..18647,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 746,
        column: 8,
        span: 18651..18656,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 746,
        column: 17,
        span: 18657..18665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 746,
        column: 22,
        span: 18666..18670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 746,
        column: 24,
        span: 18671..18672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lvl",
        ),
        line: 746,
        column: 27,
        span: 18672..18675,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 746,
        column: 28,
        span: 18675..18676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 746,
        column: 30,
        span: 18677..18678,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 746,
        column: 31,
        span: 18678..18679,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 747,
        column: 7,
        span: 18684..18686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lvl",
        ),
        line: 747,
        column: 11,
        span: 18687..18690,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 747,
        column: 14,
        span: 18691..18693,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 747,
        column: 16,
        span: 18693..18695,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 747,
        column: 0,
        span: 18696..18700,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 748,
        column: 13,
        span: 18707..18713,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 748,
        column: 15,
        span: 18714..18715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 748,
        column: 20,
        span: 18715..18720,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 748,
        column: 21,
        span: 18720..18721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 748,
        column: 30,
        span: 18721..18730,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 748,
        column: 31,
        span: 18730..18731,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"message\"",
        ),
        line: 748,
        column: 40,
        span: 18731..18740,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 748,
        column: 41,
        span: 18740..18741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 748,
        column: 43,
        span: 18742..18743,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 748,
        column: 44,
        span: 18743..18744,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 748,
        column: 45,
        span: 18744..18745,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 749,
        column: 0,
        span: 18750..18754,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 750,
        column: 13,
        span: 18761..18767,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 750,
        column: 15,
        span: 18768..18769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 750,
        column: 19,
        span: 18769..18773,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 750,
        column: 20,
        span: 18773..18774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lvl",
        ),
        line: 750,
        column: 23,
        span: 18774..18777,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 750,
        column: 24,
        span: 18777..18778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 750,
        column: 25,
        span: 18777..18779,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 750,
        column: 26,
        span: 18779..18780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 750,
        column: 28,
        span: 18781..18782,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 750,
        column: 29,
        span: 18782..18783,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 750,
        column: 30,
        span: 18783..18784,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 751,
        column: 0,
        span: 18789..18792,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 752,
        column: 0,
        span: 18795..18798,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 754,
        column: 8,
        span: 18802..18807,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 754,
        column: 17,
        span: 18808..18816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkdeep",
        ),
        line: 754,
        column: 27,
        span: 18817..18826,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 754,
        column: 29,
        span: 18827..18828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "total",
        ),
        line: 754,
        column: 34,
        span: 18828..18833,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 754,
        column: 35,
        span: 18833..18834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "start",
        ),
        line: 754,
        column: 41,
        span: 18835..18840,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 754,
        column: 42,
        span: 18840..18841,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 755,
        column: 10,
        span: 18846..18851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 755,
        column: 12,
        span: 18852..18853,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 755,
        column: 14,
        span: 18854..18855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 755,
        column: 19,
        span: 18856..18860,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 755,
        column: 20,
        span: 18860..18861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "total",
        ),
        line: 755,
        column: 25,
        span: 18861..18866,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 755,
        column: 26,
        span: 18866..18867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "start",
        ),
        line: 755,
        column: 32,
        span: 18868..18873,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 755,
        column: 33,
        span: 18873..18874,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 756,
        column: 10,
        span: 18879..18884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest",
        ),
        line: 756,
        column: 15,
        span: 18885..18889,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 756,
        column: 17,
        span: 18890..18891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 756,
        column: 24,
        span: 18892..18898,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 756,
        column: 25,
        span: 18898..18899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 756,
        column: 30,
        span: 18899..18904,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 756,
        column: 31,
        span: 18904..18905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 756,
        column: 32,
        span: 18905..18906,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 756,
        column: 33,
        span: 18906..18907,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^message\\nstack traceback:\\n(.*)$\"",
        ),
        line: 756,
        column: 69,
        span: 18908..18943,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 756,
        column: 70,
        span: 18943..18944,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 757,
        column: 10,
        span: 18949..18954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 757,
        column: 13,
        span: 18955..18957,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 757,
        column: 15,
        span: 18958..18959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "countlines",
        ),
        line: 757,
        column: 26,
        span: 18960..18970,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 757,
        column: 27,
        span: 18970..18971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest",
        ),
        line: 757,
        column: 31,
        span: 18971..18975,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 757,
        column: 32,
        span: 18975..18976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 759,
        column: 11,
        span: 19045..19051,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 759,
        column: 12,
        span: 19051..19052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 759,
        column: 14,
        span: 19052..19054,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 759,
        column: 17,
        span: 19055..19057,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 759,
        column: 20,
        span: 19057..19060,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 759,
        column: 22,
        span: 19061..19062,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 759,
        column: 25,
        span: 19062..19065,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 759,
        column: 27,
        span: 19066..19067,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 759,
        column: 29,
        span: 19067..19069,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 759,
        column: 30,
        span: 19069..19070,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 760,
        column: 10,
        span: 19075..19080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "brk",
        ),
        line: 760,
        column: 14,
        span: 19081..19084,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 760,
        column: 16,
        span: 19085..19086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 760,
        column: 23,
        span: 19087..19093,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 760,
        column: 24,
        span: 19093..19094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 760,
        column: 28,
        span: 19094..19098,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 760,
        column: 29,
        span: 19098..19099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest",
        ),
        line: 760,
        column: 33,
        span: 19099..19103,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 760,
        column: 34,
        span: 19103..19104,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%.%.%.\"",
        ),
        line: 760,
        column: 43,
        span: 19105..19113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 760,
        column: 44,
        span: 19113..19114,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 761,
        column: 7,
        span: 19119..19121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "brk",
        ),
        line: 761,
        column: 11,
        span: 19122..19125,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 761,
        column: 16,
        span: 19126..19130,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 762,
        column: 12,
        span: 19167..19172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest1",
        ),
        line: 762,
        column: 18,
        span: 19173..19178,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 762,
        column: 20,
        span: 19179..19180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 762,
        column: 27,
        span: 19181..19187,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 762,
        column: 28,
        span: 19187..19188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 762,
        column: 31,
        span: 19188..19191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 762,
        column: 32,
        span: 19191..19192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest",
        ),
        line: 762,
        column: 36,
        span: 19192..19196,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 762,
        column: 37,
        span: 19196..19197,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 762,
        column: 39,
        span: 19197..19199,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 762,
        column: 40,
        span: 19199..19200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "brk",
        ),
        line: 762,
        column: 44,
        span: 19201..19204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 762,
        column: 45,
        span: 19204..19205,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 763,
        column: 12,
        span: 19212..19217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest2",
        ),
        line: 763,
        column: 18,
        span: 19218..19223,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 763,
        column: 20,
        span: 19224..19225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 763,
        column: 27,
        span: 19226..19232,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 763,
        column: 28,
        span: 19232..19233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 763,
        column: 31,
        span: 19233..19236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 763,
        column: 32,
        span: 19236..19237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest",
        ),
        line: 763,
        column: 36,
        span: 19237..19241,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 763,
        column: 37,
        span: 19241..19242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "brk",
        ),
        line: 763,
        column: 41,
        span: 19243..19246,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 763,
        column: 42,
        span: 19246..19247,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 763,
        column: 44,
        span: 19248..19249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest",
        ),
        line: 763,
        column: 48,
        span: 19249..19253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 763,
        column: 49,
        span: 19253..19254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 764,
        column: 13,
        span: 19261..19267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 764,
        column: 14,
        span: 19267..19268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "countlines",
        ),
        line: 764,
        column: 24,
        span: 19268..19278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 764,
        column: 25,
        span: 19278..19279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest1",
        ),
        line: 764,
        column: 30,
        span: 19279..19284,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 764,
        column: 31,
        span: 19284..19285,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 764,
        column: 34,
        span: 19286..19288,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 764,
        column: 37,
        span: 19288..19291,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 764,
        column: 41,
        span: 19292..19295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "countlines",
        ),
        line: 764,
        column: 52,
        span: 19296..19306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 764,
        column: 53,
        span: 19306..19307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest2",
        ),
        line: 764,
        column: 58,
        span: 19307..19312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 764,
        column: 59,
        span: 19312..19313,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 764,
        column: 62,
        span: 19314..19316,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 764,
        column: 65,
        span: 19316..19319,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 764,
        column: 66,
        span: 19319..19320,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 765,
        column: 0,
        span: 19325..19329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 766,
        column: 13,
        span: 19336..19342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 766,
        column: 14,
        span: 19342..19343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 766,
        column: 16,
        span: 19343..19345,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 766,
        column: 19,
        span: 19346..19348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "total",
        ),
        line: 766,
        column: 25,
        span: 19349..19354,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 766,
        column: 27,
        span: 19355..19356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "start",
        ),
        line: 766,
        column: 33,
        span: 19357..19362,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 766,
        column: 35,
        span: 19363..19364,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 766,
        column: 37,
        span: 19364..19366,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 766,
        column: 38,
        span: 19366..19367,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 767,
        column: 0,
        span: 19372..19375,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 768,
        column: 0,
        span: 19378..19381,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 770,
        column: 6,
        span: 19385..19388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 770,
        column: 8,
        span: 19389..19390,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 770,
        column: 10,
        span: 19391..19392,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 770,
        column: 12,
        span: 19392..19394,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 770,
        column: 13,
        span: 19394..19395,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "51",
                    after_decimal: "",
                },
            ),
        ),
        line: 770,
        column: 16,
        span: 19395..19398,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 770,
        column: 17,
        span: 19398..19399,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 770,
        column: 20,
        span: 19399..19402,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 770,
        column: 0,
        span: 19403..19405,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 771,
        column: 8,
        span: 19410..19413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 771,
        column: 10,
        span: 19414..19415,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 771,
        column: 12,
        span: 19416..19417,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 771,
        column: 14,
        span: 19417..19419,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 771,
        column: 15,
        span: 19419..19420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 771,
        column: 17,
        span: 19421..19422,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 771,
        column: 0,
        span: 19423..19425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 773,
        column: 16,
        span: 19496..19505,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 773,
        column: 17,
        span: 19505..19506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 773,
        column: 21,
        span: 19506..19510,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 773,
        column: 22,
        span: 19510..19511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkdeep",
        ),
        line: 773,
        column: 31,
        span: 19511..19520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 773,
        column: 32,
        span: 19520..19521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 773,
        column: 33,
        span: 19521..19522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 773,
        column: 34,
        span: 19522..19523,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 773,
        column: 35,
        span: 19523..19524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 773,
        column: 37,
        span: 19525..19526,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 773,
        column: 38,
        span: 19526..19527,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 774,
        column: 0,
        span: 19532..19535,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 775,
        column: 0,
        span: 19538..19541,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 777,
        column: 0,
        span: 19543..19546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 780,
        column: 6,
        span: 19549..19554,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 780,
        column: 7,
        span: 19554..19555,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing debug functions on chunk without debug info\"",
        ),
        line: 780,
        column: 60,
        span: 19555..19608,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 780,
        column: 61,
        span: 19608..19609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 781,
        column: 5,
        span: 19610..19614,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 781,
        column: 7,
        span: 19615..19616,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[-- program to be loaded without debug information\nlocal debug = require'debug'\nlocal a = 12  -- a local variable\n\nlocal n, v = debug.getlocal(1, 1)\nassert(n == \"(*temporary)\" and v == debug)   -- unkown name but known value\nn, v = debug.getlocal(1, 2)\nassert(n == \"(*temporary)\" and v == 12)   -- unkown name but known value\n\n-- a function with an upvalue\nlocal f = function () local x; return a end\nn, v = debug.getupvalue(f, 1)\nassert(n == \"(*no name)\" and v == 12)\nassert(debug.setupvalue(f, 1, 13) == \"(*no name)\")\nassert(a == 13)\n\nlocal t = debug.getinfo(f)\nassert(t.name == nil and t.linedefined > 0 and\n       t.lastlinedefined == t.linedefined and\n       t.short_src == \"?\")\nassert(debug.getinfo(1).currentline == -1)\n\nt = debug.getinfo(f, \"L\").activelines\nassert(next(t) == nil)    -- active lines are empty\n\n-- dump/load a function without debug info\nf = load(string.dump(f))\n\nt = debug.getinfo(f)\nassert(t.name == nil and t.linedefined > 0 and\n       t.lastlinedefined == t.linedefined and\n       t.short_src == \"?\")\nassert(debug.getinfo(1).currentline == -1)\n\nreturn a\n]]",
        ),
        line: 816,
        column: 3,
        span: 19617..20702,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 820,
        column: 6,
        span: 20739..20744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 820,
        column: 8,
        span: 20745..20746,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 820,
        column: 10,
        span: 20747..20748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 820,
        column: 17,
        span: 20749..20755,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 820,
        column: 18,
        span: 20755..20756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 820,
        column: 22,
        span: 20756..20760,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 820,
        column: 23,
        span: 20760..20761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 820,
        column: 29,
        span: 20761..20767,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 820,
        column: 30,
        span: 20767..20768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 820,
        column: 34,
        span: 20768..20772,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 820,
        column: 35,
        span: 20772..20773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 820,
        column: 39,
        span: 20773..20777,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 820,
        column: 40,
        span: 20777..20778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 820,
        column: 44,
        span: 20778..20782,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 820,
        column: 45,
        span: 20782..20783,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 820,
        column: 46,
        span: 20783..20784,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 820,
        column: 51,
        span: 20785..20789,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 820,
        column: 52,
        span: 20789..20790,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 820,
        column: 53,
        span: 20790..20791,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 820,
        column: 54,
        span: 20791..20792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 822,
        column: 7,
        span: 20794..20800,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 822,
        column: 8,
        span: 20800..20801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 822,
        column: 9,
        span: 20801..20802,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 822,
        column: 10,
        span: 20802..20803,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 822,
        column: 11,
        span: 20803..20804,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 822,
        column: 14,
        span: 20805..20807,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 822,
        column: 17,
        span: 20807..20810,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 822,
        column: 18,
        span: 20810..20811,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 824,
        column: 3,
        span: 20813..20815,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 825,
        column: 8,
        span: 20858..20863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 825,
        column: 13,
        span: 20864..20868,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 825,
        column: 15,
        span: 20869..20870,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    return function (x)\n      return function (y) \n        return x + y\n      end\n    end\n  ]]",
        ),
        line: 831,
        column: 5,
        span: 20871..20968,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 832,
        column: 8,
        span: 20971..20976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 832,
        column: 13,
        span: 20977..20981,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 832,
        column: 15,
        span: 20982..20983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 832,
        column: 22,
        span: 20984..20990,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 832,
        column: 23,
        span: 20990..20991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 832,
        column: 26,
        span: 20991..20994,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 832,
        column: 27,
        span: 20994..20995,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 832,
        column: 30,
        span: 20995..20998,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 832,
        column: 31,
        span: 20998..20999,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 832,
        column: 36,
        span: 20999..21004,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 832,
        column: 37,
        span: 21004..21005,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 833,
        column: 8,
        span: 21008..21013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 833,
        column: 10,
        span: 21014..21015,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 833,
        column: 12,
        span: 21016..21017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 833,
        column: 19,
        span: 21018..21024,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 833,
        column: 20,
        span: 21024..21025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 833,
        column: 24,
        span: 21025..21029,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 833,
        column: 25,
        span: 21029..21030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 833,
        column: 29,
        span: 21030..21034,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 833,
        column: 30,
        span: 21034..21035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 833,
        column: 35,
        span: 21036..21040,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 833,
        column: 36,
        span: 21040..21041,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 833,
        column: 37,
        span: 21041..21042,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 835,
        column: 8,
        span: 21100..21105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 835,
        column: 10,
        span: 21106..21107,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 835,
        column: 12,
        span: 21108..21109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 835,
        column: 19,
        span: 21110..21116,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 835,
        column: 20,
        span: 21116..21117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 835,
        column: 24,
        span: 21117..21121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 835,
        column: 25,
        span: 21121..21122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 835,
        column: 26,
        span: 21122..21123,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 835,
        column: 27,
        span: 21123..21124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 836,
        column: 9,
        span: 21127..21133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 836,
        column: 10,
        span: 21133..21134,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 836,
        column: 11,
        span: 21134..21135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 836,
        column: 12,
        span: 21135..21136,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 836,
        column: 14,
        span: 21137..21138,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 836,
        column: 19,
        span: 21138..21143,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 836,
        column: 23,
        span: 21144..21147,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 836,
        column: 25,
        span: 21148..21149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 836,
        column: 26,
        span: 21149..21150,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 836,
        column: 28,
        span: 21151..21152,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 836,
        column: 33,
        span: 21152..21157,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 836,
        column: 34,
        span: 21157..21158,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 837,
        column: 8,
        span: 21200..21205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 837,
        column: 10,
        span: 21206..21207,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 837,
        column: 12,
        span: 21208..21209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 837,
        column: 19,
        span: 21210..21216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 837,
        column: 20,
        span: 21216..21217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 837,
        column: 24,
        span: 21217..21221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 837,
        column: 25,
        span: 21221..21222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 837,
        column: 26,
        span: 21222..21223,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 837,
        column: 27,
        span: 21223..21224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 837,
        column: 28,
        span: 21224..21225,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 838,
        column: 8,
        span: 21228..21233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 838,
        column: 10,
        span: 21234..21235,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 838,
        column: 12,
        span: 21236..21237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 838,
        column: 14,
        span: 21238..21239,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 838,
        column: 15,
        span: 21239..21240,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 838,
        column: 16,
        span: 21240..21241,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 839,
        column: 8,
        span: 21244..21249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 839,
        column: 10,
        span: 21250..21251,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 839,
        column: 12,
        span: 21252..21253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 839,
        column: 14,
        span: 21254..21255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 839,
        column: 15,
        span: 21255..21256,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 839,
        column: 16,
        span: 21255..21257,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 839,
        column: 17,
        span: 21257..21258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 840,
        column: 9,
        span: 21261..21267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 840,
        column: 10,
        span: 21267..21268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 840,
        column: 11,
        span: 21268..21269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 840,
        column: 12,
        span: 21269..21270,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 840,
        column: 13,
        span: 21269..21271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 840,
        column: 14,
        span: 21271..21272,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 840,
        column: 17,
        span: 21273..21275,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 840,
        column: 19,
        span: 21275..21277,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 840,
        column: 20,
        span: 21277..21278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 841,
        column: 9,
        span: 21281..21287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 841,
        column: 10,
        span: 21287..21288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 841,
        column: 15,
        span: 21288..21293,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 841,
        column: 16,
        span: 21293..21294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 841,
        column: 23,
        span: 21294..21301,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 841,
        column: 24,
        span: 21301..21302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 841,
        column: 25,
        span: 21302..21303,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 841,
        column: 26,
        span: 21303..21304,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 841,
        column: 27,
        span: 21304..21305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 841,
        column: 33,
        span: 21305..21311,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 841,
        column: 36,
        span: 21312..21314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 841,
        column: 41,
        span: 21315..21319,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 841,
        column: 45,
        span: 21320..21323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 842,
        column: 15,
        span: 21366..21371,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 842,
        column: 16,
        span: 21371..21372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 842,
        column: 23,
        span: 21372..21379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 842,
        column: 24,
        span: 21379..21380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 842,
        column: 25,
        span: 21380..21381,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 842,
        column: 26,
        span: 21381..21382,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 842,
        column: 27,
        span: 21382..21383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 842,
        column: 33,
        span: 21383..21389,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 842,
        column: 36,
        span: 21390..21392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 842,
        column: 41,
        span: 21393..21397,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 842,
        column: 45,
        span: 21398..21401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 843,
        column: 15,
        span: 21412..21417,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 843,
        column: 16,
        span: 21417..21418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 843,
        column: 23,
        span: 21418..21425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 843,
        column: 24,
        span: 21425..21426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 843,
        column: 25,
        span: 21426..21427,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 843,
        column: 26,
        span: 21427..21428,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 843,
        column: 27,
        span: 21428..21429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 843,
        column: 33,
        span: 21429..21435,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 843,
        column: 36,
        span: 21436..21438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 843,
        column: 41,
        span: 21439..21443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 843,
        column: 42,
        span: 21443..21444,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 845,
        column: 8,
        span: 21478..21483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 845,
        column: 10,
        span: 21484..21485,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 845,
        column: 12,
        span: 21486..21487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 845,
        column: 19,
        span: 21488..21494,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 845,
        column: 20,
        span: 21494..21495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 845,
        column: 24,
        span: 21495..21499,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 845,
        column: 25,
        span: 21499..21500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 845,
        column: 26,
        span: 21500..21501,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 845,
        column: 27,
        span: 21501..21502,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 845,
        column: 32,
        span: 21503..21507,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 845,
        column: 33,
        span: 21507..21508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 846,
        column: 9,
        span: 21511..21517,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 846,
        column: 10,
        span: 21517..21518,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 846,
        column: 11,
        span: 21518..21519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 846,
        column: 12,
        span: 21519..21520,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 846,
        column: 14,
        span: 21521..21522,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 846,
        column: 18,
        span: 21522..21526,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 846,
        column: 19,
        span: 21526..21527,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 847,
        column: 8,
        span: 21555..21560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 847,
        column: 10,
        span: 21561..21562,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 847,
        column: 12,
        span: 21563..21564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 847,
        column: 19,
        span: 21565..21571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 847,
        column: 20,
        span: 21571..21572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 847,
        column: 24,
        span: 21572..21576,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 847,
        column: 25,
        span: 21576..21577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 847,
        column: 26,
        span: 21577..21578,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 847,
        column: 27,
        span: 21578..21579,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 847,
        column: 28,
        span: 21579..21580,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 848,
        column: 8,
        span: 21583..21588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 848,
        column: 10,
        span: 21589..21590,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 848,
        column: 12,
        span: 21591..21592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 848,
        column: 14,
        span: 21593..21594,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 848,
        column: 15,
        span: 21594..21595,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 848,
        column: 16,
        span: 21595..21596,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 849,
        column: 8,
        span: 21599..21604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 849,
        column: 10,
        span: 21605..21606,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 849,
        column: 12,
        span: 21607..21608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 849,
        column: 14,
        span: 21609..21610,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 849,
        column: 15,
        span: 21610..21611,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 849,
        column: 17,
        span: 21610..21613,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 849,
        column: 18,
        span: 21613..21614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 850,
        column: 9,
        span: 21617..21623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 850,
        column: 10,
        span: 21623..21624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 850,
        column: 11,
        span: 21624..21625,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 850,
        column: 12,
        span: 21625..21626,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 850,
        column: 14,
        span: 21625..21628,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 850,
        column: 15,
        span: 21628..21629,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 850,
        column: 18,
        span: 21630..21632,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "80",
                    after_decimal: "",
                },
            ),
        ),
        line: 850,
        column: 21,
        span: 21632..21635,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 850,
        column: 22,
        span: 21635..21636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 851,
        column: 9,
        span: 21639..21645,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 851,
        column: 10,
        span: 21645..21646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 851,
        column: 15,
        span: 21646..21651,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 851,
        column: 16,
        span: 21651..21652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 851,
        column: 23,
        span: 21652..21659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 851,
        column: 24,
        span: 21659..21660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 851,
        column: 25,
        span: 21660..21661,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 851,
        column: 26,
        span: 21661..21662,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 851,
        column: 27,
        span: 21662..21663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 851,
        column: 33,
        span: 21663..21669,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 851,
        column: 36,
        span: 21670..21672,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'=?'",
        ),
        line: 851,
        column: 41,
        span: 21673..21677,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 851,
        column: 45,
        span: 21678..21681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 852,
        column: 15,
        span: 21721..21726,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 852,
        column: 16,
        span: 21726..21727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 852,
        column: 23,
        span: 21727..21734,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 852,
        column: 24,
        span: 21734..21735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 852,
        column: 25,
        span: 21735..21736,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 852,
        column: 26,
        span: 21736..21737,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 852,
        column: 27,
        span: 21737..21738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 852,
        column: 33,
        span: 21738..21744,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 852,
        column: 36,
        span: 21745..21747,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'=?'",
        ),
        line: 852,
        column: 41,
        span: 21748..21752,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 852,
        column: 45,
        span: 21753..21756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 853,
        column: 15,
        span: 21767..21772,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 853,
        column: 16,
        span: 21772..21773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 853,
        column: 23,
        span: 21773..21780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 853,
        column: 24,
        span: 21780..21781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 853,
        column: 25,
        span: 21781..21782,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 853,
        column: 26,
        span: 21782..21783,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 853,
        column: 27,
        span: 21783..21784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 853,
        column: 33,
        span: 21784..21790,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 853,
        column: 36,
        span: 21791..21793,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'=?'",
        ),
        line: 853,
        column: 41,
        span: 21794..21798,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 853,
        column: 42,
        span: 21798..21799,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 854,
        column: 0,
        span: 21800..21803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 856,
        column: 6,
        span: 21805..21810,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        line: 856,
        column: 10,
        span: 21810..21814,
    },
]
