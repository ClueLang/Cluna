---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/closure.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
        column: 6,
        span: 102..107,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing closures\"",
        ),
        line: 4,
        column: 25,
        span: 108..126,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 6,
        span: 128..133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 6,
        column: 8,
        span: 134..135,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 6,
        column: 9,
        span: 135..136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 6,
        column: 11,
        span: 137..138,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 13,
        span: 139..140,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 6,
        column: 15,
        span: 140..142,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 6,
        column: 16,
        span: 142..143,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 6,
        column: 18,
        span: 144..145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 6,
        column: 20,
        span: 146..147,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 22,
        span: 148..149,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 6,
        column: 25,
        span: 149..152,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 6,
        column: 27,
        span: 153..154,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 7,
        column: 9,
        span: 155..163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 7,
        column: 11,
        span: 164..165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 7,
        column: 12,
        span: 165..166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 7,
        column: 13,
        span: 166..167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 7,
        column: 14,
        span: 167..168,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 8,
        column: 8,
        span: 171..176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 8,
        column: 10,
        span: 177..178,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 8,
        column: 12,
        span: 179..180,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 8,
        column: 14,
        span: 181..182,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 8,
        column: 15,
        span: 182..183,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 9,
        column: 6,
        span: 186..189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 9,
        column: 8,
        span: 190..191,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 9,
        column: 10,
        span: 192..193,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 9,
        column: 12,
        span: 193..195,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 9,
        column: 13,
        span: 195..196,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 9,
        column: 18,
        span: 196..201,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 9,
        column: 0,
        span: 202..204,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 10,
        column: 10,
        span: 209..214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 10,
        column: 12,
        span: 215..216,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 10,
        column: 14,
        span: 217..218,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 10,
        column: 0,
        span: 218..220,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 11,
        column: 0,
        span: 225..227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 12,
        column: 8,
        span: 234..235,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 12,
        column: 9,
        span: 235..236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 12,
        column: 10,
        span: 236..237,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 12,
        column: 11,
        span: 237..238,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 12,
        column: 13,
        span: 239..240,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 12,
        column: 22,
        span: 241..249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 23,
        span: 249..250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 24,
        span: 250..251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 13,
        column: 10,
        span: 260..261,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 13,
        column: 11,
        span: 261..262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 13,
        column: 12,
        span: 262..263,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 13,
        column: 14,
        span: 264..265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 13,
        column: 16,
        span: 266..267,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 13,
        column: 17,
        span: 267..268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 13,
        column: 18,
        span: 268..269,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 13,
        column: 20,
        span: 270..271,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 13,
        column: 22,
        span: 271..273,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 13,
        column: 23,
        span: 273..274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 13,
        column: 25,
        span: 275..276,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 13,
        column: 27,
        span: 277..278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 13,
        column: 29,
        span: 279..280,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 13,
        column: 31,
        span: 281..282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 13,
        column: 33,
        span: 283..284,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 13,
        column: 34,
        span: 284..285,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 13,
        column: 41,
        span: 286..292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 13,
        column: 43,
        span: 293..294,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 13,
        column: 45,
        span: 295..296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 13,
        column: 0,
        span: 297..298,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 14,
        column: 0,
        span: 305..308,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 15,
        column: 0,
        span: 313..316,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 16,
        column: 0,
        span: 319..322,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 17,
        column: 8,
        span: 325..330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 17,
        column: 14,
        span: 331..336,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 17,
        column: 16,
        span: 337..338,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 17,
        column: 25,
        span: 339..347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 26,
        span: 347..348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 27,
        span: 348..349,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 17,
        column: 34,
        span: 350..356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 17,
        column: 36,
        span: 357..358,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 17,
        column: 37,
        span: 358..359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 17,
        column: 38,
        span: 359..360,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 17,
        column: 39,
        span: 360..361,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 17,
        column: 0,
        span: 362..365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 18,
        column: 17,
        span: 368..382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 18,
        span: 382..383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 19,
        span: 383..384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 19,
        column: 4,
        span: 387..388,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 19,
        column: 6,
        span: 389..390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 19,
        column: 8,
        span: 390..392,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 19,
        column: 9,
        span: 392..393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 19,
        column: 16,
        span: 394..400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 17,
        span: 400..401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 19,
        column: 22,
        span: 401..406,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 23,
        span: 406..407,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 24,
        span: 407..408,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 19,
        column: 27,
        span: 409..411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 19,
        column: 29,
        span: 412..413,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 19,
        column: 30,
        span: 413..414,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 19,
        column: 31,
        span: 413..415,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 19,
        column: 32,
        span: 415..416,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 33,
        span: 416..417,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 19,
        column: 34,
        span: 417..418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 19,
        column: 36,
        span: 419..420,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 19,
        column: 38,
        span: 421..422,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 19,
        column: 40,
        span: 422..424,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 19,
        column: 41,
        span: 424..425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 20,
        column: 9,
        span: 428..434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 10,
        span: 434..435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 20,
        column: 11,
        span: 435..436,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 20,
        column: 12,
        span: 436..437,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 13,
        span: 436..438,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 20,
        column: 14,
        span: 438..439,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 15,
        span: 439..440,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 16,
        span: 440..441,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 20,
        column: 19,
        span: 442..444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 20,
        column: 21,
        span: 445..446,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 22,
        span: 446..447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 21,
        column: 9,
        span: 450..456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 10,
        span: 456..457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 21,
        column: 11,
        span: 457..458,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 21,
        column: 12,
        span: 458..459,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 21,
        column: 13,
        span: 458..460,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 21,
        column: 14,
        span: 460..461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 15,
        span: 461..462,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 16,
        span: 462..463,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 21,
        column: 19,
        span: 464..466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 21,
        column: 21,
        span: 467..468,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 22,
        span: 468..469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 22,
        column: 17,
        span: 472..486,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 18,
        span: 486..487,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 19,
        span: 487..488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 23,
        column: 9,
        span: 491..497,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 10,
        span: 497..498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 23,
        column: 11,
        span: 498..499,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 23,
        column: 12,
        span: 499..500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 23,
        column: 13,
        span: 500..501,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 23,
        column: 16,
        span: 502..504,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 23,
        column: 19,
        span: 504..507,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 20,
        span: 507..508,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 24,
        column: 9,
        span: 511..517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 24,
        column: 0,
        span: 518..519,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 25,
        column: 0,
        span: 520..523,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 27,
        column: 6,
        span: 525..530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 27,
        column: 8,
        span: 531..532,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 27,
        column: 10,
        span: 533..534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 27,
        column: 12,
        span: 535..536,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 13,
        span: 536..537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 27,
        column: 15,
        span: 536..539,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 16,
        span: 539..540,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 29,
        column: 6,
        span: 569..574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 29,
        column: 8,
        span: 575..576,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 29,
        column: 10,
        span: 577..578,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 29,
        column: 12,
        span: 579..580,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 29,
        column: 14,
        span: 581..582,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
        column: 15,
        span: 581..583,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 29,
        column: 16,
        span: 583..584,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 29,
        column: 18,
        span: 585..586,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 29,
        column: 20,
        span: 587..588,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 29,
        column: 21,
        span: 588..589,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 29,
        column: 23,
        span: 590..591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 30,
        column: 13,
        span: 616..628,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 14,
        span: 628..629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 30,
        column: 15,
        span: 629..630,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
        column: 16,
        span: 630..631,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 30,
        column: 18,
        span: 632..633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 30,
        column: 25,
        span: 634..640,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 30,
        column: 27,
        span: 641..642,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'kv'",
        ),
        line: 30,
        column: 32,
        span: 643..647,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 30,
        column: 34,
        span: 648..649,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 35,
        span: 649..650,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 31,
        column: 6,
        span: 651..656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 31,
        column: 8,
        span: 657..658,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 31,
        column: 9,
        span: 658..659,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 10,
        span: 658..660,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 31,
        column: 11,
        span: 660..661,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 31,
        column: 14,
        span: 662..664,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 32,
        column: 8,
        span: 701..706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 32,
        column: 10,
        span: 707..708,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 32,
        column: 12,
        span: 709..710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 32,
        column: 14,
        span: 711..712,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 32,
        column: 17,
        span: 713..715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 32,
        column: 19,
        span: 716..717,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 32,
        column: 22,
        span: 718..720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 32,
        column: 24,
        span: 721..722,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 32,
        column: 27,
        span: 723..725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 32,
        column: 29,
        span: 726..727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 33,
        column: 4,
        span: 748..749,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 33,
        column: 6,
        span: 750..751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 33,
        column: 8,
        span: 752..753,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 33,
        column: 10,
        span: 754..755,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 0,
        span: 755..757,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 34,
        column: 0,
        span: 758..761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
        column: 7,
        span: 762..768,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 8,
        span: 768..769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 35,
        column: 9,
        span: 769..770,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 35,
        column: 10,
        span: 770..771,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 11,
        span: 770..772,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 35,
        column: 12,
        span: 772..773,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 13,
        span: 773..774,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 14,
        span: 774..775,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 35,
        column: 17,
        span: 776..778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 20,
        span: 778..781,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 35,
        column: 22,
        span: 782..783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 35,
        column: 24,
        span: 784..785,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 25,
        span: 785..786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 36,
        column: 7,
        span: 787..793,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 8,
        span: 793..794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 36,
        column: 9,
        span: 794..795,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 36,
        column: 10,
        span: 795..796,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 11,
        span: 795..797,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 36,
        column: 12,
        span: 797..798,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 13,
        span: 798..799,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 14,
        span: 799..800,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 36,
        column: 17,
        span: 801..803,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 20,
        span: 803..806,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 36,
        column: 22,
        span: 807..808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 36,
        column: 24,
        span: 809..810,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 25,
        span: 810..811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 37,
        column: 7,
        span: 812..818,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 8,
        span: 818..819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 37,
        column: 9,
        span: 819..820,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 37,
        column: 10,
        span: 820..821,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 37,
        column: 11,
        span: 820..822,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 37,
        column: 12,
        span: 822..823,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 13,
        span: 823..824,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 14,
        span: 824..825,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 37,
        column: 17,
        span: 826..828,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 37,
        column: 20,
        span: 828..831,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 37,
        column: 22,
        span: 832..833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 37,
        column: 24,
        span: 834..835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 25,
        span: 835..836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 38,
        column: 15,
        span: 837..851,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 16,
        span: 851..852,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 17,
        span: 852..853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 39,
        column: 7,
        span: 854..860,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 8,
        span: 860..861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 39,
        column: 9,
        span: 861..862,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 39,
        column: 10,
        span: 862..863,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 11,
        span: 862..864,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 39,
        column: 12,
        span: 864..865,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 13,
        span: 865..866,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 14,
        span: 866..867,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 39,
        column: 17,
        span: 868..870,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 20,
        span: 870..873,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 39,
        column: 22,
        span: 874..875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 39,
        column: 24,
        span: 876..877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 25,
        span: 877..878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 40,
        column: 7,
        span: 879..885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 8,
        span: 885..886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 40,
        column: 9,
        span: 886..887,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 40,
        column: 10,
        span: 887..888,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 11,
        span: 887..889,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 40,
        column: 12,
        span: 889..890,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 13,
        span: 890..891,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 14,
        span: 891..892,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 40,
        column: 17,
        span: 893..895,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 20,
        span: 895..898,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 40,
        column: 22,
        span: 899..900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 40,
        column: 24,
        span: 901..902,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 25,
        span: 902..903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 41,
        column: 7,
        span: 904..910,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 8,
        span: 910..911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 41,
        column: 9,
        span: 911..912,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 41,
        column: 10,
        span: 912..913,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
        column: 11,
        span: 912..914,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 41,
        column: 12,
        span: 914..915,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 13,
        span: 915..916,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 14,
        span: 916..917,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 17,
        span: 918..920,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
        column: 20,
        span: 920..923,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 41,
        column: 22,
        span: 924..925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 41,
        column: 24,
        span: 926..927,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 25,
        span: 927..928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 42,
        column: 7,
        span: 929..935,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 8,
        span: 935..936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 42,
        column: 9,
        span: 936..937,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 42,
        column: 10,
        span: 937..938,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 42,
        column: 11,
        span: 937..939,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 42,
        column: 12,
        span: 939..940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 13,
        span: 940..941,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 14,
        span: 941..942,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 42,
        column: 17,
        span: 943..945,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 42,
        column: 20,
        span: 945..948,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 42,
        column: 22,
        span: 949..950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 42,
        column: 24,
        span: 951..952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 25,
        span: 952..953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 43,
        column: 7,
        span: 954..960,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 8,
        span: 960..961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 43,
        column: 20,
        span: 961..973,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 21,
        span: 973..974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 43,
        column: 22,
        span: 974..975,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 23,
        span: 975..976,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 43,
        column: 24,
        span: 976..977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 43,
        column: 30,
        span: 977..983,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 43,
        column: 33,
        span: 984..986,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'kv'",
        ),
        line: 43,
        column: 38,
        span: 987..991,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 39,
        span: 991..992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 44,
        column: 7,
        span: 993..999,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 8,
        span: 999..1000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 44,
        column: 9,
        span: 1000..1001,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
        column: 10,
        span: 1001..1002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 44,
        column: 11,
        span: 1002..1003,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 44,
        column: 14,
        span: 1004..1006,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        line: 44,
        column: 17,
        span: 1006..1009,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 18,
        span: 1009..1010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 48,
        column: 2,
        span: 1033..1034,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 48,
        column: 4,
        span: 1035..1036,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 48,
        column: 6,
        span: 1037..1038,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 48,
        column: 7,
        span: 1038..1039,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 49,
        column: 4,
        span: 1040..1043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 49,
        column: 6,
        span: 1044..1045,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 49,
        column: 8,
        span: 1046..1047,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 10,
        span: 1047..1049,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
        column: 11,
        span: 1049..1050,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 13,
        span: 1050..1052,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 49,
        column: 16,
        span: 1053..1055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 49,
        column: 18,
        span: 1056..1057,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 49,
        column: 19,
        span: 1057..1058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 49,
        column: 20,
        span: 1058..1059,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 49,
        column: 21,
        span: 1059..1060,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 49,
        column: 23,
        span: 1061..1062,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 49,
        column: 32,
        span: 1063..1071,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 33,
        span: 1071..1072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 49,
        column: 34,
        span: 1072..1073,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 35,
        span: 1073..1074,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 49,
        column: 42,
        span: 1075..1081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 49,
        column: 44,
        span: 1082..1083,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 49,
        column: 46,
        span: 1084..1085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 49,
        column: 48,
        span: 1086..1087,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 49,
        column: 50,
        span: 1088..1089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 49,
        column: 55,
        span: 1090..1094,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 49,
        column: 59,
        span: 1095..1098,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 49,
        column: 0,
        span: 1099..1102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 50,
        column: 7,
        span: 1103..1109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 8,
        span: 1109..1110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 50,
        column: 9,
        span: 1110..1111,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 50,
        column: 10,
        span: 1111..1112,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 11,
        span: 1111..1113,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 50,
        column: 12,
        span: 1113..1114,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 50,
        column: 15,
        span: 1115..1117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 50,
        column: 17,
        span: 1118..1119,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 50,
        column: 18,
        span: 1119..1120,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 19,
        span: 1119..1121,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 50,
        column: 20,
        span: 1121..1122,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 50,
        column: 24,
        span: 1123..1126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 50,
        column: 26,
        span: 1127..1128,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 50,
        column: 27,
        span: 1128..1129,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 28,
        span: 1128..1130,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 50,
        column: 29,
        span: 1130..1131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 50,
        column: 32,
        span: 1132..1134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 50,
        column: 34,
        span: 1135..1136,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 50,
        column: 35,
        span: 1136..1137,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 36,
        span: 1136..1138,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 50,
        column: 37,
        span: 1138..1139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 38,
        span: 1139..1140,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 52,
        column: 4,
        span: 1142..1145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 52,
        column: 6,
        span: 1146..1147,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 52,
        column: 8,
        span: 1148..1149,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 52,
        column: 10,
        span: 1149..1151,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
        column: 11,
        span: 1151..1152,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 52,
        column: 13,
        span: 1152..1154,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 52,
        column: 16,
        span: 1155..1157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 52,
        column: 18,
        span: 1158..1159,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 52,
        column: 19,
        span: 1159..1160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 52,
        column: 20,
        span: 1160..1161,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 52,
        column: 21,
        span: 1161..1162,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 52,
        column: 23,
        span: 1163..1164,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 52,
        column: 32,
        span: 1165..1173,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 33,
        span: 1173..1174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 52,
        column: 34,
        span: 1174..1175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 35,
        span: 1175..1176,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 52,
        column: 42,
        span: 1177..1183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 52,
        column: 44,
        span: 1184..1185,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 52,
        column: 46,
        span: 1186..1187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 52,
        column: 48,
        span: 1188..1189,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 52,
        column: 50,
        span: 1190..1191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 52,
        column: 55,
        span: 1192..1196,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 52,
        column: 59,
        span: 1197..1200,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 52,
        column: 0,
        span: 1201..1204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 53,
        column: 7,
        span: 1205..1211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 8,
        span: 1211..1212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
        column: 9,
        span: 1212..1213,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 53,
        column: 10,
        span: 1213..1214,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
        column: 11,
        span: 1213..1215,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 53,
        column: 12,
        span: 1215..1216,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 53,
        column: 15,
        span: 1217..1219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
        column: 17,
        span: 1220..1221,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 53,
        column: 18,
        span: 1221..1222,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
        column: 19,
        span: 1221..1223,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 53,
        column: 20,
        span: 1223..1224,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 53,
        column: 24,
        span: 1225..1228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
        column: 26,
        span: 1229..1230,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 53,
        column: 27,
        span: 1230..1231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
        column: 28,
        span: 1230..1232,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 53,
        column: 29,
        span: 1232..1233,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 53,
        column: 32,
        span: 1234..1236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
        column: 34,
        span: 1237..1238,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 53,
        column: 35,
        span: 1238..1239,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
        column: 36,
        span: 1238..1240,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 53,
        column: 37,
        span: 1240..1241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 38,
        span: 1241..1242,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 55,
        column: 6,
        span: 1244..1249,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 55,
        column: 15,
        span: 1250..1258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 55,
        column: 17,
        span: 1259..1260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 18,
        span: 1260..1261,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 19,
        span: 1261..1262,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 56,
        column: 9,
        span: 1265..1271,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 56,
        column: 18,
        span: 1272..1280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 19,
        span: 1280..1281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 56,
        column: 20,
        span: 1281..1282,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 21,
        span: 1282..1283,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 56,
        column: 28,
        span: 1284..1290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 56,
        column: 33,
        span: 1291..1295,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 56,
        column: 34,
        span: 1295..1296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 56,
        column: 37,
        span: 1296..1299,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 38,
        span: 1299..1300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 56,
        column: 42,
        span: 1300..1304,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 56,
        column: 43,
        span: 1304..1305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 56,
        column: 44,
        span: 1305..1306,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 56,
        column: 45,
        span: 1306..1307,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 46,
        span: 1307..1308,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 56,
        column: 0,
        span: 1309..1312,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 57,
        column: 0,
        span: 1313..1316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 58,
        column: 7,
        span: 1317..1323,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 8,
        span: 1323..1324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 58,
        column: 9,
        span: 1324..1325,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 10,
        span: 1325..1326,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 11,
        span: 1326..1327,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 58,
        column: 14,
        span: 1328..1330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 58,
        column: 16,
        span: 1331..1332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 17,
        span: 1332..1333,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 18,
        span: 1333..1334,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 19,
        span: 1334..1335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 62,
        column: 2,
        span: 1386..1387,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 62,
        column: 4,
        span: 1388..1389,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 62,
        column: 6,
        span: 1390..1391,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 62,
        column: 7,
        span: 1391..1392,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 63,
        column: 4,
        span: 1393..1396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 63,
        column: 6,
        span: 1397..1398,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 63,
        column: 8,
        span: 1399..1400,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 63,
        column: 10,
        span: 1400..1402,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 11,
        span: 1402..1403,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 63,
        column: 14,
        span: 1403..1406,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 63,
        column: 0,
        span: 1407..1409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 64,
        column: 4,
        span: 1412..1413,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 64,
        column: 5,
        span: 1413..1414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 64,
        column: 6,
        span: 1414..1415,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 64,
        column: 7,
        span: 1415..1416,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 64,
        column: 9,
        span: 1417..1418,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 64,
        column: 11,
        span: 1419..1420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "set",
        ),
        line: 64,
        column: 15,
        span: 1421..1424,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 64,
        column: 17,
        span: 1425..1426,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 64,
        column: 26,
        span: 1427..1435,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 27,
        span: 1435..1436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 64,
        column: 28,
        span: 1436..1437,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 29,
        span: 1437..1438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 64,
        column: 31,
        span: 1439..1440,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 64,
        column: 33,
        span: 1441..1442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 64,
        column: 35,
        span: 1443..1444,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 64,
        column: 39,
        span: 1445..1448,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 40,
        span: 1448..1449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 64,
        column: 44,
        span: 1450..1453,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 64,
        column: 46,
        span: 1454..1455,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 64,
        column: 55,
        span: 1456..1464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 56,
        span: 1464..1465,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 57,
        span: 1465..1466,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 64,
        column: 64,
        span: 1467..1473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 64,
        column: 66,
        span: 1474..1475,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 64,
        column: 70,
        span: 1476..1479,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 64,
        column: 72,
        span: 1480..1481,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 65,
        column: 5,
        span: 1484..1486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 65,
        column: 7,
        span: 1487..1488,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 65,
        column: 10,
        span: 1489..1491,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 12,
        span: 1491..1493,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 65,
        column: 17,
        span: 1494..1498,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 65,
        column: 23,
        span: 1499..1504,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 65,
        column: 0,
        span: 1505..1508,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 66,
        column: 0,
        span: 1509..1512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 67,
        column: 7,
        span: 1513..1519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 8,
        span: 1519..1520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 67,
        column: 9,
        span: 1520..1521,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 67,
        column: 10,
        span: 1521..1522,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 67,
        column: 11,
        span: 1521..1523,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 67,
        column: 12,
        span: 1523..1524,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 67,
        column: 15,
        span: 1525..1527,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 67,
        column: 19,
        span: 1528..1531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 20,
        span: 1531..1532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 68,
        column: 2,
        span: 1533..1534,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 68,
        column: 3,
        span: 1534..1535,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 4,
        span: 1534..1536,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 68,
        column: 5,
        span: 1536..1537,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 68,
        column: 6,
        span: 1537..1538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "set",
        ),
        line: 68,
        column: 9,
        span: 1538..1541,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 10,
        span: 1541..1542,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 12,
        span: 1541..1544,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 13,
        span: 1544..1545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 69,
        column: 7,
        span: 1546..1552,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 8,
        span: 1552..1553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 69,
        column: 9,
        span: 1553..1554,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 69,
        column: 10,
        span: 1554..1555,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 11,
        span: 1554..1556,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 69,
        column: 12,
        span: 1556..1557,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 69,
        column: 13,
        span: 1557..1558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 69,
        column: 16,
        span: 1558..1561,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 17,
        span: 1561..1562,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 18,
        span: 1562..1563,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 69,
        column: 21,
        span: 1564..1566,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 23,
        span: 1566..1568,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 24,
        span: 1568..1569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 70,
        column: 2,
        span: 1570..1571,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 70,
        column: 3,
        span: 1571..1572,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
        column: 4,
        span: 1571..1573,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 70,
        column: 5,
        span: 1573..1574,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 70,
        column: 6,
        span: 1574..1575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "set",
        ),
        line: 70,
        column: 9,
        span: 1575..1578,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 10,
        span: 1578..1579,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 70,
        column: 13,
        span: 1579..1582,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 14,
        span: 1582..1583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 71,
        column: 7,
        span: 1584..1590,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 8,
        span: 1590..1591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 71,
        column: 9,
        span: 1591..1592,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 71,
        column: 10,
        span: 1592..1593,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 11,
        span: 1592..1594,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 71,
        column: 12,
        span: 1594..1595,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
        column: 13,
        span: 1595..1596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 71,
        column: 16,
        span: 1596..1599,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 17,
        span: 1599..1600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 18,
        span: 1600..1601,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 21,
        span: 1602..1604,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 23,
        span: 1604..1606,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 24,
        span: 1606..1607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 72,
        column: 7,
        span: 1608..1614,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 8,
        span: 1614..1615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 72,
        column: 9,
        span: 1615..1616,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 72,
        column: 10,
        span: 1616..1617,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 72,
        column: 11,
        span: 1616..1618,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 72,
        column: 12,
        span: 1618..1619,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 72,
        column: 13,
        span: 1619..1620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 72,
        column: 16,
        span: 1620..1623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 17,
        span: 1623..1624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 18,
        span: 1624..1625,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 72,
        column: 21,
        span: 1626..1628,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 72,
        column: 25,
        span: 1629..1632,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 26,
        span: 1632..1633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 74,
        column: 2,
        span: 1635..1636,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 74,
        column: 4,
        span: 1637..1638,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 74,
        column: 6,
        span: 1639..1640,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 74,
        column: 7,
        span: 1640..1641,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 75,
        column: 6,
        span: 1642..1647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 75,
        column: 8,
        span: 1648..1649,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 75,
        column: 10,
        span: 1650..1651,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 75,
        column: 12,
        span: 1652..1653,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 75,
        column: 16,
        span: 1654..1657,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 75,
        column: 17,
        span: 1657..1658,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 75,
        column: 21,
        span: 1659..1662,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 75,
        column: 23,
        span: 1663..1664,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 76,
        column: 4,
        span: 1665..1668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 76,
        column: 6,
        span: 1669..1670,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 76,
        column: 8,
        span: 1671..1672,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
        column: 10,
        span: 1672..1674,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
        column: 11,
        span: 1674..1675,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 76,
        column: 13,
        span: 1676..1677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 76,
        column: 14,
        span: 1677..1678,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 76,
        column: 0,
        span: 1679..1681,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 77,
        column: 8,
        span: 1684..1689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 77,
        column: 10,
        span: 1690..1691,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 77,
        column: 12,
        span: 1692..1693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 77,
        column: 14,
        span: 1694..1695,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 77,
        column: 15,
        span: 1695..1696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 77,
        column: 16,
        span: 1696..1697,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 77,
        column: 17,
        span: 1697..1698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 78,
        column: 4,
        span: 1701..1702,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 78,
        column: 5,
        span: 1702..1703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 78,
        column: 6,
        span: 1703..1704,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 78,
        column: 7,
        span: 1704..1705,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 78,
        column: 9,
        span: 1706..1707,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 78,
        column: 11,
        span: 1708..1709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "set",
        ),
        line: 79,
        column: 8,
        span: 1714..1717,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
        column: 10,
        span: 1718..1719,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 79,
        column: 19,
        span: 1720..1728,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 20,
        span: 1728..1729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 79,
        column: 21,
        span: 1729..1730,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 79,
        column: 22,
        span: 1730..1731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 79,
        column: 24,
        span: 1732..1733,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 25,
        span: 1733..1734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 80,
        column: 8,
        span: 1741..1742,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 80,
        column: 10,
        span: 1743..1744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 80,
        column: 12,
        span: 1745..1746,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 80,
        column: 13,
        span: 1746..1747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 80,
        column: 15,
        span: 1748..1749,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 80,
        column: 17,
        span: 1750..1751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 80,
        column: 0,
        span: 1752..1753,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 81,
        column: 8,
        span: 1758..1761,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 9,
        span: 1761..1762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 82,
        column: 8,
        span: 1767..1770,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 82,
        column: 10,
        span: 1771..1772,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 82,
        column: 19,
        span: 1773..1781,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 20,
        span: 1781..1782,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 21,
        span: 1782..1783,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 82,
        column: 28,
        span: 1784..1790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 82,
        column: 30,
        span: 1791..1792,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 82,
        column: 31,
        span: 1792..1793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 82,
        column: 33,
        span: 1794..1795,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 82,
        column: 0,
        span: 1796..1799,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 83,
        column: 4,
        span: 1802..1803,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 84,
        column: 5,
        span: 1806..1808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 84,
        column: 7,
        span: 1809..1810,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 84,
        column: 10,
        span: 1811..1813,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 12,
        span: 1813..1815,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 84,
        column: 17,
        span: 1816..1820,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 84,
        column: 23,
        span: 1821..1826,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 84,
        column: 0,
        span: 1827..1830,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 85,
        column: 0,
        span: 1831..1834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 86,
        column: 2,
        span: 1835..1836,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 86,
        column: 3,
        span: 1836..1837,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 4,
        span: 1836..1838,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 86,
        column: 5,
        span: 1838..1839,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 86,
        column: 6,
        span: 1839..1840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "set",
        ),
        line: 86,
        column: 9,
        span: 1840..1843,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 10,
        span: 1843..1844,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 12,
        span: 1843..1846,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
        column: 13,
        span: 1846..1847,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 16,
        span: 1847..1850,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 17,
        span: 1850..1851,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 87,
        column: 6,
        span: 1852..1857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 87,
        column: 8,
        span: 1858..1859,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 87,
        column: 9,
        span: 1859..1860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 87,
        column: 11,
        span: 1861..1862,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 87,
        column: 13,
        span: 1863..1864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 87,
        column: 15,
        span: 1865..1866,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 87,
        column: 16,
        span: 1866..1867,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 87,
        column: 17,
        span: 1866..1868,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 87,
        column: 18,
        span: 1868..1869,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 87,
        column: 19,
        span: 1869..1870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 87,
        column: 22,
        span: 1870..1873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 23,
        span: 1873..1874,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 24,
        span: 1874..1875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 88,
        column: 7,
        span: 1876..1882,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 8,
        span: 1882..1883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 88,
        column: 9,
        span: 1883..1884,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 88,
        column: 12,
        span: 1885..1887,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 88,
        column: 14,
        span: 1887..1889,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 88,
        column: 18,
        span: 1890..1893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 88,
        column: 20,
        span: 1894..1895,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 88,
        column: 23,
        span: 1896..1898,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 88,
        column: 27,
        span: 1899..1902,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 28,
        span: 1902..1903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 89,
        column: 2,
        span: 1904..1905,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
        column: 3,
        span: 1905..1906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 89,
        column: 5,
        span: 1907..1908,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 89,
        column: 7,
        span: 1909..1910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 89,
        column: 9,
        span: 1911..1912,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 89,
        column: 10,
        span: 1912..1913,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
        column: 11,
        span: 1912..1914,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 89,
        column: 12,
        span: 1914..1915,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 89,
        column: 13,
        span: 1915..1916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 89,
        column: 16,
        span: 1916..1919,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 17,
        span: 1919..1920,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 18,
        span: 1920..1921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 90,
        column: 7,
        span: 1922..1928,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 8,
        span: 1928..1929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 90,
        column: 9,
        span: 1929..1930,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 90,
        column: 12,
        span: 1931..1933,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
        column: 15,
        span: 1933..1936,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 90,
        column: 19,
        span: 1937..1940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 90,
        column: 21,
        span: 1941..1942,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 90,
        column: 24,
        span: 1943..1945,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
        column: 27,
        span: 1945..1948,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 28,
        span: 1948..1949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 91,
        column: 2,
        span: 1950..1951,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 91,
        column: 3,
        span: 1951..1952,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 91,
        column: 4,
        span: 1951..1953,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 91,
        column: 5,
        span: 1953..1954,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 91,
        column: 6,
        span: 1954..1955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "set",
        ),
        line: 91,
        column: 9,
        span: 1955..1958,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 10,
        span: 1958..1959,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 91,
        column: 13,
        span: 1959..1962,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 14,
        span: 1962..1963,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 91,
        column: 18,
        span: 1964..1967,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 19,
        span: 1967..1968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 92,
        column: 2,
        span: 1969..1970,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 92,
        column: 3,
        span: 1970..1971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 92,
        column: 5,
        span: 1972..1973,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 92,
        column: 7,
        span: 1974..1975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 92,
        column: 9,
        span: 1976..1977,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 92,
        column: 10,
        span: 1977..1978,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 11,
        span: 1977..1979,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 92,
        column: 12,
        span: 1979..1980,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 92,
        column: 13,
        span: 1980..1981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 92,
        column: 16,
        span: 1981..1984,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 17,
        span: 1984..1985,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 18,
        span: 1985..1986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 93,
        column: 7,
        span: 1987..1993,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 8,
        span: 1993..1994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 93,
        column: 9,
        span: 1994..1995,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 93,
        column: 12,
        span: 1996..1998,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 93,
        column: 16,
        span: 1999..2002,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 93,
        column: 20,
        span: 2003..2006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 93,
        column: 22,
        span: 2007..2008,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 93,
        column: 25,
        span: 2009..2011,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 93,
        column: 29,
        span: 2012..2015,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 30,
        span: 2015..2016,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 97,
        column: 4,
        span: 2075..2078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 97,
        column: 6,
        span: 2079..2080,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 97,
        column: 8,
        span: 2081..2082,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
        column: 10,
        span: 2082..2084,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 11,
        span: 2084..2085,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
        column: 13,
        span: 2085..2087,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 97,
        column: 0,
        span: 2088..2090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 98,
        column: 4,
        span: 2093..2094,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 98,
        column: 6,
        span: 2095..2096,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 98,
        column: 15,
        span: 2097..2105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 16,
        span: 2105..2106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 17,
        span: 2106..2107,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 98,
        column: 24,
        span: 2108..2114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 98,
        column: 26,
        span: 2115..2116,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 98,
        column: 0,
        span: 2117..2120,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 99,
        column: 0,
        span: 2123..2128,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 100,
        column: 0,
        span: 2129..2132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 101,
        column: 7,
        span: 2133..2139,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 8,
        span: 2139..2140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 101,
        column: 9,
        span: 2140..2141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 10,
        span: 2141..2142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 11,
        span: 2142..2143,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 101,
        column: 14,
        span: 2144..2146,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 16,
        span: 2146..2148,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 17,
        span: 2148..2149,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 103,
        column: 4,
        span: 2151..2154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 103,
        column: 6,
        span: 2155..2156,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 103,
        column: 8,
        span: 2157..2158,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 10,
        span: 2158..2160,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 103,
        column: 11,
        span: 2160..2161,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 103,
        column: 13,
        span: 2162..2163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 103,
        column: 14,
        span: 2163..2164,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 103,
        column: 0,
        span: 2165..2167,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 104,
        column: 8,
        span: 2170..2175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 104,
        column: 10,
        span: 2176..2177,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 104,
        column: 12,
        span: 2178..2179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 104,
        column: 14,
        span: 2180..2181,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 104,
        column: 15,
        span: 2181..2182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 104,
        column: 16,
        span: 2182..2183,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 104,
        column: 17,
        span: 2183..2184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 105,
        column: 4,
        span: 2187..2188,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 105,
        column: 6,
        span: 2189..2190,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 105,
        column: 15,
        span: 2191..2199,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 16,
        span: 2199..2200,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 17,
        span: 2200..2201,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 105,
        column: 24,
        span: 2202..2208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 105,
        column: 26,
        span: 2209..2210,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 27,
        span: 2210..2211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 105,
        column: 29,
        span: 2212..2213,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 105,
        column: 0,
        span: 2214..2217,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 106,
        column: 0,
        span: 2220..2225,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 107,
        column: 0,
        span: 2226..2229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 108,
        column: 7,
        span: 2230..2236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 8,
        span: 2236..2237,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 9,
        span: 2237..2238,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 108,
        column: 10,
        span: 2238..2239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 108,
        column: 12,
        span: 2240..2241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 13,
        span: 2241..2242,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 14,
        span: 2242..2243,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 108,
        column: 16,
        span: 2244..2245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 17,
        span: 2245..2246,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 108,
        column: 18,
        span: 2246..2247,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
        column: 19,
        span: 2246..2248,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 108,
        column: 20,
        span: 2248..2249,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 108,
        column: 23,
        span: 2250..2252,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
        column: 25,
        span: 2252..2254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 26,
        span: 2254..2255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 109,
        column: 7,
        span: 2256..2262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 8,
        span: 2262..2263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 9,
        span: 2263..2264,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 109,
        column: 10,
        span: 2264..2265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 109,
        column: 12,
        span: 2266..2267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 13,
        span: 2267..2268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 14,
        span: 2268..2269,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 109,
        column: 16,
        span: 2270..2271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 17,
        span: 2271..2272,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 109,
        column: 18,
        span: 2272..2273,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 109,
        column: 19,
        span: 2272..2274,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 109,
        column: 20,
        span: 2274..2275,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 109,
        column: 23,
        span: 2276..2278,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 109,
        column: 27,
        span: 2279..2282,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 28,
        span: 2282..2283,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 114,
        column: 6,
        span: 2332..2337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 114,
        column: 0,
        span: 2338..2339,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 115,
        column: 9,
        span: 2340..2348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 115,
        column: 11,
        span: 2349..2350,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 12,
        span: 2350..2351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 115,
        column: 13,
        span: 2351..2352,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 14,
        span: 2352..2353,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 116,
        column: 8,
        span: 2356..2361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "first",
        ),
        line: 116,
        column: 14,
        span: 2362..2367,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 116,
        column: 16,
        span: 2368..2369,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 116,
        column: 0,
        span: 2369..2371,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 117,
        column: 8,
        span: 2374..2379,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 10,
        span: 2379..2381,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 117,
        column: 0,
        span: 2382..2384,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 118,
        column: 7,
        span: 2389..2391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 118,
        column: 9,
        span: 2392..2393,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 118,
        column: 12,
        span: 2394..2396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 14,
        span: 2396..2398,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 118,
        column: 18,
        span: 2399..2402,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 118,
        column: 22,
        span: 2403..2406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "first",
        ),
        line: 118,
        column: 28,
        span: 2407..2412,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 118,
        column: 33,
        span: 2413..2417,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 118,
        column: 40,
        span: 2418..2424,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 118,
        column: 0,
        span: 2425..2428,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 119,
        column: 10,
        span: 2433..2438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 119,
        column: 12,
        span: 2439..2440,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 119,
        column: 14,
        span: 2441..2442,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 119,
        column: 21,
        span: 2443..2449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 120,
        column: 6,
        span: 2454..2455,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 120,
        column: 8,
        span: 2456..2457,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 120,
        column: 17,
        span: 2458..2466,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 18,
        span: 2466..2467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 120,
        column: 20,
        span: 2467..2469,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 21,
        span: 2469..2470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 120,
        column: 23,
        span: 2471..2472,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 24,
        span: 2472..2473,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 121,
        column: 9,
        span: 2480..2482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 121,
        column: 12,
        span: 2483..2485,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 121,
        column: 15,
        span: 2486..2488,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'set'",
        ),
        line: 121,
        column: 21,
        span: 2489..2494,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 121,
        column: 0,
        span: 2495..2499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 122,
        column: 10,
        span: 2508..2509,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 122,
        column: 12,
        span: 2510..2511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 122,
        column: 14,
        span: 2512..2513,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 122,
        column: 16,
        span: 2514..2515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 122,
        column: 0,
        span: 2516..2517,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 123,
        column: 0,
        span: 2524..2528,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 124,
        column: 15,
        span: 2537..2543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 124,
        column: 0,
        span: 2544..2545,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 125,
        column: 0,
        span: 2552..2555,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 126,
        column: 0,
        span: 2560..2563,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 127,
        column: 7,
        span: 2568..2570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 127,
        column: 9,
        span: 2571..2572,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 127,
        column: 12,
        span: 2573..2575,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 127,
        column: 14,
        span: 2575..2577,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 127,
        column: 0,
        span: 2578..2582,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 128,
        column: 9,
        span: 2589..2591,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 128,
        column: 15,
        span: 2592..2597,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 128,
        column: 0,
        span: 2598..2601,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 129,
        column: 11,
        span: 2606..2612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 129,
        column: 13,
        span: 2613..2614,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 129,
        column: 16,
        span: 2615..2617,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
        column: 18,
        span: 2617..2619,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 129,
        column: 0,
        span: 2620..2624,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 130,
        column: 0,
        span: 2631..2637,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 131,
        column: 0,
        span: 2642..2646,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 132,
        column: 9,
        span: 2653..2655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 132,
        column: 11,
        span: 2656..2657,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 132,
        column: 14,
        span: 2658..2660,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 132,
        column: 16,
        span: 2660..2662,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 132,
        column: 21,
        span: 2663..2667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 132,
        column: 27,
        span: 2668..2673,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 28,
        span: 2673..2674,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 29,
        span: 2674..2675,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 132,
        column: 0,
        span: 2676..2679,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 133,
        column: 0,
        span: 2684..2687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "first",
        ),
        line: 134,
        column: 10,
        span: 2692..2697,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 134,
        column: 12,
        span: 2698..2699,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 134,
        column: 0,
        span: 2700..2703,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 135,
        column: 0,
        span: 2706..2709,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 136,
        column: 0,
        span: 2710..2713,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 138,
        column: 4,
        span: 2715..2718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 138,
        column: 6,
        span: 2719..2720,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 138,
        column: 8,
        span: 2721..2722,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 10,
        span: 2722..2724,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 11,
        span: 2724..2725,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 13,
        span: 2725..2727,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 138,
        column: 0,
        span: 2728..2730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 139,
        column: 4,
        span: 2733..2734,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 5,
        span: 2734..2735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 139,
        column: 6,
        span: 2735..2736,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 7,
        span: 2736..2737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 140,
        column: 9,
        span: 2740..2746,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 10,
        span: 2746..2747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 140,
        column: 11,
        span: 2747..2748,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 12,
        span: 2748..2749,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'get'",
        ),
        line: 140,
        column: 17,
        span: 2749..2754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 18,
        span: 2754..2755,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 140,
        column: 21,
        span: 2756..2758,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 140,
        column: 28,
        span: 2759..2765,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 29,
        span: 2765..2766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 141,
        column: 4,
        span: 2769..2770,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 5,
        span: 2770..2771,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'set'",
        ),
        line: 141,
        column: 10,
        span: 2771..2776,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
        column: 11,
        span: 2776..2777,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
        column: 14,
        span: 2777..2780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 15,
        span: 2780..2781,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 141,
        column: 16,
        span: 2781..2782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 141,
        column: 23,
        span: 2783..2789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 24,
        span: 2789..2790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 141,
        column: 25,
        span: 2790..2791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 26,
        span: 2791..2792,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'get'",
        ),
        line: 141,
        column: 31,
        span: 2792..2797,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 32,
        span: 2797..2798,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
        column: 35,
        span: 2799..2801,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
        column: 38,
        span: 2801..2804,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 141,
        column: 40,
        span: 2805..2806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 141,
        column: 42,
        span: 2807..2808,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 43,
        span: 2808..2809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 142,
        column: 4,
        span: 2812..2813,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 142,
        column: 6,
        span: 2814..2815,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 142,
        column: 0,
        span: 2816..2819,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 143,
        column: 0,
        span: 2820..2823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 145,
        column: 6,
        span: 2825..2830,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 7,
        span: 2830..2831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 145,
        column: 8,
        span: 2831..2832,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 9,
        span: 2832..2833,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
        column: 11,
        span: 2833..2835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 12,
        span: 2835..2836,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 145,
        column: 13,
        span: 2836..2837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 146,
        column: 7,
        span: 2838..2844,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 8,
        span: 2844..2845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 146,
        column: 9,
        span: 2845..2846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 10,
        span: 2846..2847,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'get'",
        ),
        line: 146,
        column: 15,
        span: 2847..2852,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 16,
        span: 2852..2853,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 146,
        column: 19,
        span: 2854..2856,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 146,
        column: 26,
        span: 2857..2863,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 27,
        span: 2863..2864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 147,
        column: 2,
        span: 2865..2866,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 3,
        span: 2866..2867,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'set'",
        ),
        line: 147,
        column: 8,
        span: 2867..2872,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 147,
        column: 9,
        span: 2872..2873,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
        column: 12,
        span: 2873..2876,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 13,
        span: 2876..2877,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 147,
        column: 14,
        span: 2877..2878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 147,
        column: 21,
        span: 2879..2885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 22,
        span: 2885..2886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 147,
        column: 23,
        span: 2886..2887,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 24,
        span: 2887..2888,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'get'",
        ),
        line: 147,
        column: 29,
        span: 2888..2893,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 30,
        span: 2893..2894,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 147,
        column: 33,
        span: 2895..2897,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
        column: 36,
        span: 2897..2900,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 37,
        span: 2900..2901,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 150,
        column: 6,
        span: 2904..2909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 150,
        column: 0,
        span: 2910..2911,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 152,
        column: 9,
        span: 2943..2951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 152,
        column: 11,
        span: 2952..2953,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 12,
        span: 2953..2954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 152,
        column: 13,
        span: 2954..2955,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 14,
        span: 2955..2956,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 153,
        column: 9,
        span: 2959..2965,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 153,
        column: 18,
        span: 2966..2974,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 19,
        span: 2974..2975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 153,
        column: 20,
        span: 2975..2976,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 21,
        span: 2976..2977,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 154,
        column: 11,
        span: 2982..2988,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 154,
        column: 20,
        span: 2989..2997,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 21,
        span: 2997..2998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 154,
        column: 22,
        span: 2998..2999,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 23,
        span: 2999..3000,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 154,
        column: 30,
        span: 3001..3007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 154,
        column: 32,
        span: 3008..3009,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 154,
        column: 34,
        span: 3010..3011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 154,
        column: 36,
        span: 3012..3013,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 154,
        column: 38,
        span: 3014..3015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 154,
        column: 40,
        span: 3016..3017,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 154,
        column: 42,
        span: 3018..3019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 154,
        column: 44,
        span: 3020..3021,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 154,
        column: 0,
        span: 3022..3025,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 155,
        column: 0,
        span: 3028..3031,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 156,
        column: 0,
        span: 3032..3035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 158,
        column: 2,
        span: 3037..3038,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 158,
        column: 4,
        span: 3039..3040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 158,
        column: 6,
        span: 3041..3042,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 7,
        span: 3042..3043,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 158,
        column: 9,
        span: 3042..3045,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 10,
        span: 3045..3046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 159,
        column: 2,
        span: 3047..3048,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 159,
        column: 4,
        span: 3049..3050,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".345",
                },
            ),
        ),
        line: 159,
        column: 0,
        span: 3050..3056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 160,
        column: 7,
        span: 3057..3063,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 8,
        span: 3063..3064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 160,
        column: 9,
        span: 3064..3065,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 10,
        span: 3065..3066,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 160,
        column: 12,
        span: 3065..3068,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 13,
        span: 3068..3069,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 14,
        span: 3069..3070,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 160,
        column: 16,
        span: 3069..3072,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 17,
        span: 3072..3073,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 160,
        column: 20,
        span: 3074..3076,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 160,
        column: 23,
        span: 3076..3079,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 160,
        column: 25,
        span: 3080..3081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 160,
        column: 27,
        span: 3082..3083,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 28,
        span: 3083..3084,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 164,
        column: 6,
        span: 3122..3127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 164,
        column: 8,
        span: 3128..3129,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 164,
        column: 10,
        span: 3130..3131,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 164,
        column: 12,
        span: 3132..3133,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 164,
        column: 13,
        span: 3133..3134,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 165,
        column: 6,
        span: 3135..3140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 165,
        column: 8,
        span: 3141..3142,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 165,
        column: 10,
        span: 3143..3144,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 0,
        span: 3144..3146,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 166,
        column: 0,
        span: 3147..3153,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 167,
        column: 8,
        span: 3156..3161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 167,
        column: 10,
        span: 3162..3163,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 167,
        column: 12,
        span: 3164..3165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 167,
        column: 0,
        span: 3166..3167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 168,
        column: 4,
        span: 3170..3171,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 168,
        column: 5,
        span: 3171..3172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 168,
        column: 6,
        span: 3172..3173,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 168,
        column: 7,
        span: 3173..3174,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 168,
        column: 9,
        span: 3175..3176,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 168,
        column: 18,
        span: 3177..3185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 19,
        span: 3185..3186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 20,
        span: 3186..3187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 169,
        column: 6,
        span: 3192..3193,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 169,
        column: 8,
        span: 3194..3195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 169,
        column: 10,
        span: 3196..3197,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 169,
        column: 12,
        span: 3198..3199,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 14,
        span: 3199..3201,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 169,
        column: 15,
        span: 3201..3202,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 169,
        column: 22,
        span: 3203..3209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 169,
        column: 0,
        span: 3210..3211,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 170,
        column: 0,
        span: 3214..3217,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 171,
        column: 6,
        span: 3218..3223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 171,
        column: 8,
        span: 3224..3225,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 171,
        column: 10,
        span: 3226..3227,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 13,
        span: 3227..3230,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 171,
        column: 16,
        span: 3231..3233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 171,
        column: 18,
        span: 3234..3235,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 171,
        column: 19,
        span: 3235..3236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 171,
        column: 20,
        span: 3236..3237,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 171,
        column: 21,
        span: 3237..3238,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 22,
        span: 3238..3239,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 23,
        span: 3239..3240,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 171,
        column: 26,
        span: 3241..3243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 171,
        column: 0,
        span: 3244..3245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 172,
        column: 7,
        span: 3246..3252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 8,
        span: 3252..3253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 172,
        column: 9,
        span: 3253..3254,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 172,
        column: 12,
        span: 3255..3257,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 172,
        column: 15,
        span: 3257..3260,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 172,
        column: 19,
        span: 3261..3264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 172,
        column: 21,
        span: 3265..3266,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 172,
        column: 22,
        span: 3266..3267,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 172,
        column: 23,
        span: 3266..3268,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 172,
        column: 24,
        span: 3268..3269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 25,
        span: 3269..3270,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 26,
        span: 3270..3271,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 172,
        column: 29,
        span: 3272..3274,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 172,
        column: 31,
        span: 3274..3276,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 172,
        column: 35,
        span: 3277..3280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 172,
        column: 37,
        span: 3281..3282,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 172,
        column: 38,
        span: 3282..3283,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 172,
        column: 39,
        span: 3282..3284,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 172,
        column: 40,
        span: 3284..3285,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 41,
        span: 3285..3286,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 42,
        span: 3286..3287,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 172,
        column: 45,
        span: 3288..3290,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 172,
        column: 47,
        span: 3290..3292,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 172,
        column: 51,
        span: 3293..3296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 172,
        column: 53,
        span: 3297..3298,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 172,
        column: 56,
        span: 3299..3301,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 172,
        column: 58,
        span: 3301..3303,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 59,
        span: 3303..3304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 176,
        column: 2,
        span: 3371..3372,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 176,
        column: 4,
        span: 3373..3374,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 176,
        column: 6,
        span: 3375..3376,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 176,
        column: 7,
        span: 3376..3377,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 177,
        column: 4,
        span: 3378..3381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 177,
        column: 6,
        span: 3382..3383,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 177,
        column: 8,
        span: 3384..3385,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 177,
        column: 10,
        span: 3385..3387,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 11,
        span: 3387..3388,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 177,
        column: 14,
        span: 3388..3391,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 177,
        column: 0,
        span: 3392..3394,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 178,
        column: 5,
        span: 3397..3399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 178,
        column: 7,
        span: 3400..3401,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 178,
        column: 9,
        span: 3402..3403,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
        column: 11,
        span: 3403..3405,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 178,
        column: 14,
        span: 3406..3408,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
        column: 16,
        span: 3408..3410,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 178,
        column: 0,
        span: 3411..3415,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 179,
        column: 10,
        span: 3420..3425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 179,
        column: 12,
        span: 3426..3427,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 179,
        column: 14,
        span: 3428..3429,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
        column: 0,
        span: 3429..3431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 180,
        column: 6,
        span: 3436..3437,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 180,
        column: 7,
        span: 3437..3438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 180,
        column: 8,
        span: 3438..3439,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 180,
        column: 9,
        span: 3439..3440,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 180,
        column: 11,
        span: 3441..3442,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 180,
        column: 20,
        span: 3443..3451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 21,
        span: 3451..3452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 180,
        column: 22,
        span: 3452..3453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 23,
        span: 3453..3454,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 181,
        column: 12,
        span: 3461..3466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 181,
        column: 14,
        span: 3467..3468,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 181,
        column: 16,
        span: 3469..3470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 181,
        column: 18,
        span: 3471..3472,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 181,
        column: 19,
        span: 3472..3473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 181,
        column: 21,
        span: 3474..3475,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 181,
        column: 23,
        span: 3476..3477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 181,
        column: 25,
        span: 3478..3479,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 181,
        column: 26,
        span: 3479..3480,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 181,
        column: 33,
        span: 3481..3487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 181,
        column: 0,
        span: 3488..3489,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 182,
        column: 0,
        span: 3494..3497,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 183,
        column: 9,
        span: 3500..3506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 183,
        column: 11,
        span: 3507..3508,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 183,
        column: 13,
        span: 3509..3510,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 15,
        span: 3510..3512,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 183,
        column: 18,
        span: 3513..3515,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 20,
        span: 3515..3517,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 183,
        column: 0,
        span: 3518..3522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 184,
        column: 10,
        span: 3527..3532,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'not here'",
        ),
        line: 184,
        column: 21,
        span: 3533..3543,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 186,
        column: 10,
        span: 3549..3554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 186,
        column: 12,
        span: 3555..3556,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 186,
        column: 14,
        span: 3557..3558,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 0,
        span: 3558..3560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 187,
        column: 6,
        span: 3565..3566,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 187,
        column: 7,
        span: 3566..3567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 187,
        column: 8,
        span: 3567..3568,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 187,
        column: 9,
        span: 3568..3569,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 187,
        column: 11,
        span: 3570..3571,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 187,
        column: 20,
        span: 3572..3580,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 21,
        span: 3580..3581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 187,
        column: 22,
        span: 3581..3582,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 23,
        span: 3582..3583,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 188,
        column: 12,
        span: 3590..3595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 188,
        column: 14,
        span: 3596..3597,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 188,
        column: 16,
        span: 3598..3599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 188,
        column: 18,
        span: 3600..3601,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 188,
        column: 19,
        span: 3601..3602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 188,
        column: 21,
        span: 3603..3604,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 188,
        column: 23,
        span: 3605..3606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 188,
        column: 25,
        span: 3607..3608,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 188,
        column: 26,
        span: 3608..3609,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 188,
        column: 33,
        span: 3610..3616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 188,
        column: 0,
        span: 3617..3618,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 189,
        column: 0,
        span: 3623..3626,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 190,
        column: 9,
        span: 3629..3635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 190,
        column: 11,
        span: 3636..3637,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 190,
        column: 13,
        span: 3638..3639,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
        column: 15,
        span: 3639..3641,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 190,
        column: 18,
        span: 3642..3644,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
        column: 20,
        span: 3644..3646,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 190,
        column: 0,
        span: 3647..3651,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 191,
        column: 10,
        span: 3656..3661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 191,
        column: 0,
        span: 3662..3663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 194,
        column: 6,
        span: 3670..3671,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 194,
        column: 7,
        span: 3671..3672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 194,
        column: 8,
        span: 3672..3673,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 194,
        column: 9,
        span: 3673..3674,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 194,
        column: 11,
        span: 3675..3676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 194,
        column: 13,
        span: 3677..3678,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 194,
        column: 14,
        span: 3678..3679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 195,
        column: 10,
        span: 3684..3689,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 11,
        span: 3689..3690,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"should never be here!\"",
        ),
        line: 195,
        column: 34,
        span: 3690..3713,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 35,
        span: 3713..3714,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 197,
        column: 10,
        span: 3720..3725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 197,
        column: 12,
        span: 3726..3727,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 197,
        column: 14,
        span: 3728..3729,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 197,
        column: 0,
        span: 3729..3731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 198,
        column: 6,
        span: 3736..3737,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 198,
        column: 8,
        span: 3738..3739,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 198,
        column: 17,
        span: 3740..3748,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 18,
        span: 3748..3749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 198,
        column: 19,
        span: 3749..3750,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 20,
        span: 3750..3751,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 199,
        column: 12,
        span: 3758..3763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 199,
        column: 14,
        span: 3764..3765,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 199,
        column: 16,
        span: 3766..3767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 199,
        column: 18,
        span: 3768..3769,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 199,
        column: 19,
        span: 3769..3770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 199,
        column: 21,
        span: 3771..3772,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 199,
        column: 23,
        span: 3773..3774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 199,
        column: 25,
        span: 3775..3776,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 199,
        column: 26,
        span: 3776..3777,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 199,
        column: 33,
        span: 3778..3784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 199,
        column: 0,
        span: 3785..3786,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 200,
        column: 0,
        span: 3791..3794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 202,
        column: 10,
        span: 3800..3805,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 11,
        span: 3805..3806,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"should never be here!\"",
        ),
        line: 202,
        column: 34,
        span: 3806..3829,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 35,
        span: 3829..3830,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 203,
        column: 0,
        span: 3833..3836,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 204,
        column: 0,
        span: 3837..3840,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 206,
        column: 4,
        span: 3842..3845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 206,
        column: 6,
        span: 3846..3847,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 206,
        column: 8,
        span: 3848..3849,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 206,
        column: 10,
        span: 3849..3851,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 206,
        column: 11,
        span: 3851..3852,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 206,
        column: 14,
        span: 3852..3855,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 206,
        column: 0,
        span: 3856..3858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 207,
        column: 9,
        span: 3861..3867,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 10,
        span: 3867..3868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 207,
        column: 11,
        span: 3868..3869,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 207,
        column: 12,
        span: 3869..3870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 207,
        column: 13,
        span: 3870..3871,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 207,
        column: 14,
        span: 3871..3872,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 15,
        span: 3872..3873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 207,
        column: 16,
        span: 3873..3874,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 207,
        column: 18,
        span: 3875..3876,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 207,
        column: 21,
        span: 3876..3879,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 22,
        span: 3879..3880,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 207,
        column: 25,
        span: 3881..3883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 207,
        column: 27,
        span: 3884..3885,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 207,
        column: 29,
        span: 3886..3887,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 207,
        column: 31,
        span: 3887..3889,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 207,
        column: 35,
        span: 3890..3893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 207,
        column: 37,
        span: 3894..3895,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 207,
        column: 38,
        span: 3895..3896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 207,
        column: 39,
        span: 3896..3897,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 207,
        column: 40,
        span: 3897..3898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 41,
        span: 3898..3899,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 42,
        span: 3899..3900,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 207,
        column: 45,
        span: 3901..3903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 207,
        column: 47,
        span: 3904..3905,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 207,
        column: 49,
        span: 3906..3907,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 207,
        column: 52,
        span: 3907..3910,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 53,
        span: 3910..3911,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 208,
        column: 0,
        span: 3912..3915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 210,
        column: 6,
        span: 3917..3922,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 210,
        column: 10,
        span: 3923..3926,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 214,
        column: 6,
        span: 4002..4007,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 214,
        column: 15,
        span: 4008..4016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 214,
        column: 17,
        span: 4017..4018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 18,
        span: 4018..4019,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 19,
        span: 4019..4020,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 215,
        column: 8,
        span: 4023..4028,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 215,
        column: 17,
        span: 4029..4037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 215,
        column: 19,
        span: 4038..4039,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 20,
        span: 4039..4040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 215,
        column: 21,
        span: 4040..4041,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 215,
        column: 22,
        span: 4041..4042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 215,
        column: 24,
        span: 4043..4044,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 25,
        span: 4044..4045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 215,
        column: 32,
        span: 4046..4052,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 33,
        span: 4052..4053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 215,
        column: 34,
        span: 4053..4054,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 215,
        column: 37,
        span: 4055..4057,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"test\"",
        ),
        line: 215,
        column: 44,
        span: 4058..4064,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 215,
        column: 48,
        span: 4065..4068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 215,
        column: 50,
        span: 4069..4070,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 215,
        column: 53,
        span: 4071..4073,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        line: 215,
        column: 58,
        span: 4074..4078,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 59,
        span: 4078..4079,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 215,
        column: 0,
        span: 4080..4083,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 216,
        column: 8,
        span: 4086..4091,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 216,
        column: 17,
        span: 4092..4100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 216,
        column: 19,
        span: 4101..4102,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 20,
        span: 4102..4103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 216,
        column: 21,
        span: 4103..4104,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
        column: 22,
        span: 4104..4105,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 216,
        column: 26,
        span: 4106..4109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 27,
        span: 4109..4110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 216,
        column: 29,
        span: 4111..4112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 30,
        span: 4112..4113,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"test\"",
        ),
        line: 216,
        column: 36,
        span: 4113..4119,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
        column: 37,
        span: 4119..4120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 216,
        column: 39,
        span: 4121..4122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 40,
        span: 4122..4123,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 41,
        span: 4123..4124,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 216,
        column: 44,
        span: 4125..4127,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 46,
        span: 4127..4129,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 216,
        column: 50,
        span: 4130..4133,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"FAILED\"",
        ),
        line: 216,
        column: 59,
        span: 4134..4142,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 216,
        column: 62,
        span: 4143..4145,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        line: 216,
        column: 67,
        span: 4146..4150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 68,
        span: 4150..4151,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 216,
        column: 0,
        span: 4152..4155,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 217,
        column: 8,
        span: 4158..4163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 217,
        column: 10,
        span: 4164..4165,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 217,
        column: 12,
        span: 4166..4167,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
        column: 0,
        span: 4167..4169,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 218,
        column: 9,
        span: 4172..4178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 218,
        column: 11,
        span: 4179..4180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 12,
        span: 4180..4181,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 218,
        column: 20,
        span: 4181..4189,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 21,
        span: 4189..4190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 22,
        span: 4190..4191,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 218,
        column: 29,
        span: 4192..4198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 218,
        column: 31,
        span: 4199..4200,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 218,
        column: 35,
        span: 4201..4204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 36,
        span: 4204..4205,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 219,
        column: 0,
        span: 4206..4209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 220,
        column: 2,
        span: 4210..4211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 3,
        span: 4211..4212,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 4,
        span: 4212..4213,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 224,
        column: 6,
        span: 4259..4264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 224,
        column: 12,
        span: 4265..4270,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 224,
        column: 14,
        span: 4271..4272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 224,
        column: 22,
        span: 4273..4280,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'debug'",
        ),
        line: 224,
        column: 30,
        span: 4281..4288,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 226,
        column: 0,
        span: 4290..4292,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 227,
        column: 8,
        span: 4295..4300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 227,
        column: 10,
        span: 4301..4302,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
        column: 11,
        span: 4302..4303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 227,
        column: 13,
        span: 4304..4305,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
        column: 14,
        span: 4305..4306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 227,
        column: 16,
        span: 4307..4308,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 227,
        column: 18,
        span: 4309..4310,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
        column: 20,
        span: 4310..4312,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
        column: 21,
        span: 4312..4313,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
        column: 23,
        span: 4313..4315,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
        column: 24,
        span: 4315..4316,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
        column: 0,
        span: 4316..4318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 228,
        column: 7,
        span: 4321..4325,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 228,
        column: 9,
        span: 4326..4327,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 228,
        column: 18,
        span: 4328..4336,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 19,
        span: 4336..4337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 20,
        span: 4337..4338,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 228,
        column: 27,
        span: 4339..4345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 228,
        column: 29,
        span: 4346..4347,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 228,
        column: 31,
        span: 4348..4349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 228,
        column: 33,
        span: 4350..4351,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 228,
        column: 37,
        span: 4352..4355,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 228,
        column: 38,
        span: 4355..4356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 229,
        column: 7,
        span: 4359..4363,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 229,
        column: 9,
        span: 4364..4365,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 229,
        column: 18,
        span: 4366..4374,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
        column: 19,
        span: 4374..4375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
        column: 20,
        span: 4375..4376,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 229,
        column: 27,
        span: 4377..4383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 229,
        column: 29,
        span: 4384..4385,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 229,
        column: 31,
        span: 4386..4387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 229,
        column: 33,
        span: 4388..4389,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 229,
        column: 37,
        span: 4390..4393,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 229,
        column: 38,
        span: 4393..4394,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 230,
        column: 0,
        span: 4397..4399,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 231,
        column: 10,
        span: 4404..4409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 231,
        column: 12,
        span: 4410..4411,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 231,
        column: 14,
        span: 4412..4413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 0,
        span: 4413..4416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo3",
        ),
        line: 232,
        column: 9,
        span: 4421..4425,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 232,
        column: 11,
        span: 4426..4427,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 232,
        column: 20,
        span: 4428..4436,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
        column: 21,
        span: 4436..4437,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
        column: 22,
        span: 4437..4438,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 232,
        column: 29,
        span: 4439..4445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 232,
        column: 31,
        span: 4446..4447,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 232,
        column: 33,
        span: 4448..4449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 232,
        column: 35,
        span: 4450..4451,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 232,
        column: 39,
        span: 4452..4455,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 232,
        column: 40,
        span: 4455..4456,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 233,
        column: 0,
        span: 4459..4462,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 234,
        column: 0,
        span: 4463..4466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 236,
        column: 7,
        span: 4468..4474,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 8,
        span: 4474..4475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 236,
        column: 13,
        span: 4475..4480,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 236,
        column: 14,
        span: 4480..4481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 236,
        column: 23,
        span: 4481..4490,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 24,
        span: 4490..4491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 236,
        column: 28,
        span: 4491..4495,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 236,
        column: 29,
        span: 4495..4496,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 236,
        column: 31,
        span: 4496..4498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 32,
        span: 4498..4499,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 33,
        span: 4499..4500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 237,
        column: 7,
        span: 4501..4507,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 8,
        span: 4507..4508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 237,
        column: 13,
        span: 4508..4513,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 237,
        column: 14,
        span: 4513..4514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 237,
        column: 23,
        span: 4514..4523,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 24,
        span: 4523..4524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 237,
        column: 28,
        span: 4524..4528,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 29,
        span: 4528..4529,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 237,
        column: 31,
        span: 4529..4531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 32,
        span: 4531..4532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 33,
        span: 4532..4533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 238,
        column: 7,
        span: 4534..4540,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 8,
        span: 4540..4541,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 238,
        column: 11,
        span: 4541..4544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 238,
        column: 17,
        span: 4545..4550,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 18,
        span: 4550..4551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 238,
        column: 23,
        span: 4551..4556,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 238,
        column: 24,
        span: 4556..4557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 238,
        column: 33,
        span: 4557..4566,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 238,
        column: 34,
        span: 4566..4567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 238,
        column: 39,
        span: 4568..4572,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 238,
        column: 40,
        span: 4572..4573,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 238,
        column: 42,
        span: 4573..4575,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 43,
        span: 4575..4576,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 44,
        span: 4576..4577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 239,
        column: 7,
        span: 4578..4584,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 8,
        span: 4584..4585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 239,
        column: 13,
        span: 4585..4590,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 239,
        column: 14,
        span: 4590..4591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 239,
        column: 23,
        span: 4591..4600,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 24,
        span: 4600..4601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 239,
        column: 28,
        span: 4601..4605,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 239,
        column: 29,
        span: 4605..4606,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
        column: 31,
        span: 4606..4608,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 32,
        span: 4608..4609,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 239,
        column: 35,
        span: 4610..4612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 239,
        column: 41,
        span: 4613..4618,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 239,
        column: 42,
        span: 4618..4619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 239,
        column: 51,
        span: 4619..4628,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 52,
        span: 4628..4629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 239,
        column: 56,
        span: 4629..4633,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 239,
        column: 57,
        span: 4633..4634,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
        column: 59,
        span: 4634..4636,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 60,
        span: 4636..4637,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 61,
        span: 4637..4638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 240,
        column: 7,
        span: 4639..4645,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 8,
        span: 4645..4646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 240,
        column: 13,
        span: 4646..4651,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 240,
        column: 14,
        span: 4651..4652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 240,
        column: 23,
        span: 4652..4661,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 24,
        span: 4661..4662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 240,
        column: 28,
        span: 4662..4666,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 240,
        column: 29,
        span: 4666..4667,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 240,
        column: 31,
        span: 4667..4669,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 32,
        span: 4669..4670,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 240,
        column: 35,
        span: 4671..4673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 240,
        column: 41,
        span: 4674..4679,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 240,
        column: 42,
        span: 4679..4680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 240,
        column: 51,
        span: 4680..4689,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 52,
        span: 4689..4690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 240,
        column: 56,
        span: 4690..4694,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 240,
        column: 57,
        span: 4694..4695,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 240,
        column: 59,
        span: 4695..4697,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 60,
        span: 4697..4698,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 61,
        span: 4698..4699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 241,
        column: 7,
        span: 4700..4706,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 8,
        span: 4706..4707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 241,
        column: 13,
        span: 4707..4712,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 241,
        column: 14,
        span: 4712..4713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 241,
        column: 23,
        span: 4713..4722,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 24,
        span: 4722..4723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo3",
        ),
        line: 241,
        column: 28,
        span: 4723..4727,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 241,
        column: 29,
        span: 4727..4728,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 241,
        column: 31,
        span: 4728..4730,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 32,
        span: 4730..4731,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 33,
        span: 4731..4732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 242,
        column: 7,
        span: 4733..4739,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 8,
        span: 4739..4740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 242,
        column: 13,
        span: 4740..4745,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 242,
        column: 14,
        span: 4745..4746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 242,
        column: 23,
        span: 4746..4755,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 24,
        span: 4755..4756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 242,
        column: 28,
        span: 4756..4760,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 29,
        span: 4760..4761,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 242,
        column: 31,
        span: 4761..4763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 32,
        span: 4763..4764,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 242,
        column: 35,
        span: 4765..4767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 242,
        column: 41,
        span: 4768..4773,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 242,
        column: 42,
        span: 4773..4774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 242,
        column: 51,
        span: 4774..4783,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 52,
        span: 4783..4784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo3",
        ),
        line: 242,
        column: 56,
        span: 4784..4788,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 57,
        span: 4788..4789,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 242,
        column: 59,
        span: 4789..4791,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 60,
        span: 4791..4792,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 61,
        span: 4792..4793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 243,
        column: 7,
        span: 4794..4800,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 8,
        span: 4800..4801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 243,
        column: 13,
        span: 4801..4806,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 243,
        column: 14,
        span: 4806..4807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 243,
        column: 23,
        span: 4807..4816,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 24,
        span: 4816..4817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 243,
        column: 28,
        span: 4817..4821,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
        column: 29,
        span: 4821..4822,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 243,
        column: 31,
        span: 4822..4824,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 32,
        span: 4824..4825,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 243,
        column: 35,
        span: 4826..4828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 243,
        column: 41,
        span: 4829..4834,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 243,
        column: 42,
        span: 4834..4835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 243,
        column: 51,
        span: 4835..4844,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 52,
        span: 4844..4845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo3",
        ),
        line: 243,
        column: 56,
        span: 4845..4849,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
        column: 57,
        span: 4849..4850,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 243,
        column: 59,
        span: 4850..4852,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 60,
        span: 4852..4853,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 61,
        span: 4853..4854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 245,
        column: 7,
        span: 4856..4862,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 8,
        span: 4862..4863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 245,
        column: 13,
        span: 4863..4868,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 245,
        column: 14,
        span: 4868..4869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 245,
        column: 23,
        span: 4869..4878,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 24,
        span: 4878..4879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 245,
        column: 30,
        span: 4879..4885,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 245,
        column: 31,
        span: 4885..4886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 245,
        column: 37,
        span: 4886..4892,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 38,
        span: 4892..4893,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 245,
        column: 41,
        span: 4893..4896,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 42,
        span: 4896..4897,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 245,
        column: 46,
        span: 4898..4901,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 47,
        span: 4901..4902,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 48,
        span: 4902..4903,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
        column: 50,
        span: 4903..4905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 51,
        span: 4905..4906,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 245,
        column: 54,
        span: 4907..4909,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 245,
        column: 58,
        span: 4910..4913,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 59,
        span: 4913..4914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 247,
        column: 7,
        span: 4916..4922,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 8,
        span: 4922..4923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 247,
        column: 12,
        span: 4923..4927,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 13,
        span: 4927..4928,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 14,
        span: 4928..4929,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 247,
        column: 17,
        span: 4930..4932,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 247,
        column: 19,
        span: 4932..4934,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 247,
        column: 21,
        span: 4935..4936,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 247,
        column: 23,
        span: 4936..4938,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 247,
        column: 27,
        span: 4939..4942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 247,
        column: 32,
        span: 4943..4947,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 33,
        span: 4947..4948,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 34,
        span: 4948..4949,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 247,
        column: 37,
        span: 4950..4952,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 247,
        column: 39,
        span: 4952..4954,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 247,
        column: 41,
        span: 4955..4956,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 247,
        column: 43,
        span: 4956..4958,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 44,
        span: 4958..4959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 248,
        column: 6,
        span: 4960..4965,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 248,
        column: 7,
        span: 4965..4966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvaluejoin",
        ),
        line: 248,
        column: 18,
        span: 4966..4977,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
        column: 19,
        span: 4977..4978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 248,
        column: 23,
        span: 4978..4982,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 248,
        column: 24,
        span: 4982..4983,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 248,
        column: 26,
        span: 4983..4985,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 248,
        column: 27,
        span: 4985..4986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 248,
        column: 32,
        span: 4987..4991,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 248,
        column: 33,
        span: 4991..4992,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 248,
        column: 35,
        span: 4992..4994,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
        column: 36,
        span: 4994..4995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 249,
        column: 7,
        span: 4996..5002,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 8,
        span: 5002..5003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 249,
        column: 12,
        span: 5003..5007,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 13,
        span: 5007..5008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 14,
        span: 5008..5009,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 249,
        column: 17,
        span: 5010..5012,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 249,
        column: 19,
        span: 5012..5014,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 249,
        column: 21,
        span: 5015..5016,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 249,
        column: 23,
        span: 5016..5018,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 249,
        column: 27,
        span: 5019..5022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 249,
        column: 32,
        span: 5023..5027,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 33,
        span: 5027..5028,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 34,
        span: 5028..5029,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 249,
        column: 37,
        span: 5030..5032,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 249,
        column: 39,
        span: 5032..5034,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 249,
        column: 41,
        span: 5035..5036,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 249,
        column: 43,
        span: 5036..5038,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 44,
        span: 5038..5039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 250,
        column: 7,
        span: 5040..5046,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 8,
        span: 5046..5047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo3",
        ),
        line: 250,
        column: 12,
        span: 5047..5051,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 13,
        span: 5051..5052,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 14,
        span: 5052..5053,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 250,
        column: 17,
        span: 5054..5056,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 250,
        column: 20,
        span: 5056..5059,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 250,
        column: 22,
        span: 5060..5061,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 250,
        column: 24,
        span: 5061..5063,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 25,
        span: 5063..5064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 251,
        column: 6,
        span: 5065..5070,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 251,
        column: 7,
        span: 5070..5071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvaluejoin",
        ),
        line: 251,
        column: 18,
        span: 5071..5082,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 19,
        span: 5082..5083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo3",
        ),
        line: 251,
        column: 23,
        span: 5083..5087,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 251,
        column: 24,
        span: 5087..5088,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 251,
        column: 26,
        span: 5088..5090,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 251,
        column: 27,
        span: 5090..5091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 251,
        column: 32,
        span: 5092..5096,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 251,
        column: 33,
        span: 5096..5097,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 251,
        column: 35,
        span: 5097..5099,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 36,
        span: 5099..5100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 252,
        column: 7,
        span: 5101..5107,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 8,
        span: 5107..5108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo3",
        ),
        line: 252,
        column: 12,
        span: 5108..5112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 13,
        span: 5112..5113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 14,
        span: 5113..5114,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 252,
        column: 17,
        span: 5115..5117,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 252,
        column: 20,
        span: 5117..5120,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 252,
        column: 22,
        span: 5121..5122,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 252,
        column: 24,
        span: 5122..5124,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 25,
        span: 5124..5125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 253,
        column: 6,
        span: 5126..5131,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 253,
        column: 7,
        span: 5131..5132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvaluejoin",
        ),
        line: 253,
        column: 18,
        span: 5132..5143,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 19,
        span: 5143..5144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo3",
        ),
        line: 253,
        column: 23,
        span: 5144..5148,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 24,
        span: 5148..5149,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 26,
        span: 5149..5151,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 27,
        span: 5151..5152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 253,
        column: 32,
        span: 5153..5157,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 33,
        span: 5157..5158,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 35,
        span: 5158..5160,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 36,
        span: 5160..5161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 254,
        column: 7,
        span: 5162..5168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 8,
        span: 5168..5169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo3",
        ),
        line: 254,
        column: 12,
        span: 5169..5173,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 13,
        span: 5173..5174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 14,
        span: 5174..5175,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 254,
        column: 17,
        span: 5176..5178,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 20,
        span: 5178..5181,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 254,
        column: 22,
        span: 5182..5183,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 24,
        span: 5183..5185,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 25,
        span: 5185..5186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 256,
        column: 7,
        span: 5188..5194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 8,
        span: 5194..5195,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 256,
        column: 11,
        span: 5195..5198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 256,
        column: 17,
        span: 5199..5204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 18,
        span: 5204..5205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 256,
        column: 23,
        span: 5205..5210,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 256,
        column: 24,
        span: 5210..5211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvaluejoin",
        ),
        line: 256,
        column: 35,
        span: 5211..5222,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 36,
        span: 5222..5223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 256,
        column: 41,
        span: 5224..5228,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 42,
        span: 5228..5229,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 256,
        column: 44,
        span: 5229..5231,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 45,
        span: 5231..5232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 256,
        column: 50,
        span: 5233..5237,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 51,
        span: 5237..5238,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 256,
        column: 53,
        span: 5238..5240,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 54,
        span: 5240..5241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 55,
        span: 5241..5242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 257,
        column: 7,
        span: 5243..5249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 8,
        span: 5249..5250,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 257,
        column: 11,
        span: 5250..5253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 257,
        column: 17,
        span: 5254..5259,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 18,
        span: 5259..5260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 257,
        column: 23,
        span: 5260..5265,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 257,
        column: 24,
        span: 5265..5266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvaluejoin",
        ),
        line: 257,
        column: 35,
        span: 5266..5277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 36,
        span: 5277..5278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 257,
        column: 41,
        span: 5279..5283,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 42,
        span: 5283..5284,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 44,
        span: 5284..5286,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 45,
        span: 5286..5287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 257,
        column: 50,
        span: 5288..5292,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 51,
        span: 5292..5293,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 53,
        span: 5293..5295,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 54,
        span: 5295..5296,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 55,
        span: 5296..5297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 258,
        column: 7,
        span: 5298..5304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 8,
        span: 5304..5305,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 258,
        column: 11,
        span: 5305..5308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 258,
        column: 17,
        span: 5309..5314,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 18,
        span: 5314..5315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 258,
        column: 23,
        span: 5315..5320,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 258,
        column: 24,
        span: 5320..5321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvaluejoin",
        ),
        line: 258,
        column: 35,
        span: 5321..5332,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 36,
        span: 5332..5333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 258,
        column: 41,
        span: 5334..5338,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 42,
        span: 5338..5339,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 44,
        span: 5339..5341,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 45,
        span: 5341..5342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 258,
        column: 50,
        span: 5343..5347,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 51,
        span: 5347..5348,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 53,
        span: 5348..5350,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 54,
        span: 5350..5351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 55,
        span: 5351..5352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 259,
        column: 7,
        span: 5353..5359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 8,
        span: 5359..5360,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 259,
        column: 11,
        span: 5360..5363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 259,
        column: 17,
        span: 5364..5369,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 18,
        span: 5369..5370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 259,
        column: 23,
        span: 5370..5375,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 259,
        column: 24,
        span: 5375..5376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvaluejoin",
        ),
        line: 259,
        column: 35,
        span: 5376..5387,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 36,
        span: 5387..5388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 259,
        column: 42,
        span: 5389..5394,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 43,
        span: 5394..5395,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 45,
        span: 5395..5397,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 46,
        span: 5397..5398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 259,
        column: 51,
        span: 5399..5403,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 52,
        span: 5403..5404,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 54,
        span: 5404..5406,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 55,
        span: 5406..5407,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 56,
        span: 5407..5408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 260,
        column: 7,
        span: 5409..5415,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
        column: 8,
        span: 5415..5416,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 260,
        column: 11,
        span: 5416..5419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 260,
        column: 17,
        span: 5420..5425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
        column: 18,
        span: 5425..5426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 260,
        column: 23,
        span: 5426..5431,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 260,
        column: 24,
        span: 5431..5432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvaluejoin",
        ),
        line: 260,
        column: 35,
        span: 5432..5443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 260,
        column: 36,
        span: 5443..5444,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 260,
        column: 38,
        span: 5445..5446,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 260,
        column: 39,
        span: 5446..5447,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 260,
        column: 40,
        span: 5447..5448,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 260,
        column: 42,
        span: 5448..5450,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 260,
        column: 43,
        span: 5450..5451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 260,
        column: 48,
        span: 5452..5456,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 260,
        column: 49,
        span: 5456..5457,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 260,
        column: 51,
        span: 5457..5459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
        column: 52,
        span: 5459..5460,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
        column: 53,
        span: 5460..5461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 261,
        column: 7,
        span: 5462..5468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 261,
        column: 8,
        span: 5468..5469,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 261,
        column: 11,
        span: 5469..5472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 261,
        column: 17,
        span: 5473..5478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 261,
        column: 18,
        span: 5478..5479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 261,
        column: 23,
        span: 5479..5484,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 261,
        column: 24,
        span: 5484..5485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvaluejoin",
        ),
        line: 261,
        column: 35,
        span: 5485..5496,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 36,
        span: 5496..5497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 261,
        column: 41,
        span: 5498..5502,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 42,
        span: 5502..5503,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 261,
        column: 44,
        span: 5503..5505,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 45,
        span: 5505..5506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 261,
        column: 51,
        span: 5507..5512,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 52,
        span: 5512..5513,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 261,
        column: 54,
        span: 5513..5515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 261,
        column: 55,
        span: 5515..5516,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 261,
        column: 56,
        span: 5516..5517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 263,
        column: 6,
        span: 5519..5524,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 263,
        column: 11,
        span: 5525..5529,
    },
]
