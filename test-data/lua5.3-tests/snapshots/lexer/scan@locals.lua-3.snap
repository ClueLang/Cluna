---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/locals.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 4,
            column: 6,
            span: 101..106,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 4,
            column: 7,
            span: 106..107,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing local variables and environments'",
        ),
        position: Position {
            line: 4,
            column: 49,
            span: 107..149,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 4,
            column: 50,
            span: 149..150,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 6,
            column: 6,
            span: 152..157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 6,
            column: 12,
            span: 158..163,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 6,
            column: 14,
            span: 164..165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 6,
            column: 22,
            span: 166..173,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        position: Position {
            line: 6,
            column: 29,
            span: 173..180,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 11,
            column: 6,
            span: 199..204,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 11,
            column: 15,
            span: 205..213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 11,
            column: 17,
            span: 214..215,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 11,
            column: 18,
            span: 215..216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 11,
            column: 19,
            span: 216..217,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 11,
            column: 20,
            span: 217..218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 11,
            column: 22,
            span: 219..220,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 11,
            column: 24,
            span: 221..222,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 11,
            column: 28,
            span: 223..226,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 11,
            column: 29,
            span: 226..227,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 11,
            column: 36,
            span: 228..234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 11,
            column: 38,
            span: 235..236,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 11,
            column: 0,
            span: 237..240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 12,
            column: 7,
            span: 241..247,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 12,
            column: 8,
            span: 247..248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 12,
            column: 9,
            span: 248..249,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 12,
            column: 10,
            span: 249..250,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 12,
            column: 12,
            span: 249..252,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 12,
            column: 13,
            span: 252..253,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 12,
            column: 16,
            span: 254..256,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 12,
            column: 20,
            span: 257..260,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 12,
            column: 21,
            span: 260..261,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 14,
            column: 6,
            span: 263..268,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 14,
            column: 15,
            span: 269..277,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 14,
            column: 17,
            span: 278..279,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 14,
            column: 18,
            span: 279..280,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 14,
            column: 19,
            span: 280..281,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 14,
            column: 25,
            span: 282..287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 14,
            column: 27,
            span: 288..289,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 14,
            column: 28,
            span: 289..290,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 14,
            column: 35,
            span: 291..297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 14,
            column: 37,
            span: 298..299,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 14,
            column: 0,
            span: 300..303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 15,
            column: 7,
            span: 304..310,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 15,
            column: 8,
            span: 310..311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 15,
            column: 9,
            span: 311..312,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 15,
            column: 10,
            span: 312..313,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 15,
            column: 12,
            span: 312..315,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 15,
            column: 13,
            span: 315..316,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 15,
            column: 16,
            span: 317..319,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 15,
            column: 20,
            span: 320..323,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 15,
            column: 21,
            span: 323..324,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 17,
            column: 6,
            span: 326..331,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 17,
            column: 15,
            span: 332..340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 17,
            column: 17,
            span: 341..342,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 17,
            column: 18,
            span: 342..343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 17,
            column: 19,
            span: 343..344,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 17,
            column: 20,
            span: 344..345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 17,
            column: 22,
            span: 346..347,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 17,
            column: 24,
            span: 348..349,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 17,
            column: 28,
            span: 350..353,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 17,
            column: 29,
            span: 353..354,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 17,
            column: 35,
            span: 355..360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 17,
            column: 37,
            span: 361..362,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 17,
            column: 38,
            span: 362..363,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 17,
            column: 45,
            span: 364..370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 17,
            column: 47,
            span: 371..372,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 17,
            column: 48,
            span: 372..373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 17,
            column: 50,
            span: 374..375,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 17,
            column: 0,
            span: 376..379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 18,
            column: 7,
            span: 380..386,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 8,
            span: 386..387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 18,
            column: 9,
            span: 387..388,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 10,
            span: 388..389,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 18,
            column: 12,
            span: 388..391,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 13,
            span: 391..392,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 18,
            column: 16,
            span: 393..395,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 18,
            column: 20,
            span: 396..399,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 18,
            column: 24,
            span: 400..403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        position: Position {
            line: 18,
            column: 31,
            span: 404..410,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 32,
            span: 410..411,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 18,
            column: 33,
            span: 410..412,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 18,
            column: 34,
            span: 412..413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 18,
            column: 36,
            span: 414..415,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 37,
            span: 415..416,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 18,
            column: 39,
            span: 415..418,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 40,
            span: 418..419,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 41,
            span: 419..420,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 18,
            column: 44,
            span: 421..423,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 18,
            column: 48,
            span: 424..427,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 49,
            span: 427..428,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 20,
            column: 0,
            span: 430..432,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 21,
            column: 8,
            span: 435..440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 21,
            column: 10,
            span: 441..442,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 21,
            column: 12,
            span: 443..444,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 21,
            column: 0,
            span: 444..447,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 22,
            column: 5,
            span: 450..452,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 22,
            column: 11,
            span: 453..458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 22,
            column: 13,
            span: 459..460,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 22,
            column: 15,
            span: 461..462,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 22,
            column: 19,
            span: 462..466,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 22,
            column: 20,
            span: 466..467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 22,
            column: 27,
            span: 468..474,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 22,
            column: 28,
            span: 474..475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 22,
            column: 29,
            span: 475..476,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 22,
            column: 31,
            span: 476..478,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 22,
            column: 34,
            span: 477..481,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 22,
            column: 35,
            span: 481..482,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 22,
            column: 0,
            span: 483..486,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 23,
            column: 5,
            span: 489..491,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 23,
            column: 11,
            span: 492..497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 23,
            column: 13,
            span: 498..499,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 23,
            column: 15,
            span: 500..501,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 23,
            column: 20,
            span: 501..506,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 23,
            column: 21,
            span: 506..507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 23,
            column: 28,
            span: 508..514,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 23,
            column: 29,
            span: 514..515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 23,
            column: 30,
            span: 515..516,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 23,
            column: 32,
            span: 516..518,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 23,
            column: 36,
            span: 517..522,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 23,
            column: 37,
            span: 522..523,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 23,
            column: 0,
            span: 524..527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 24,
            column: 9,
            span: 530..536,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 24,
            column: 10,
            span: 536..537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 24,
            column: 11,
            span: 537..538,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 24,
            column: 14,
            span: 539..541,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 24,
            column: 17,
            span: 541..544,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 24,
            column: 18,
            span: 544..545,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 25,
            column: 5,
            span: 548..550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 25,
            column: 7,
            span: 551..552,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 25,
            column: 10,
            span: 553..555,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 25,
            column: 13,
            span: 555..558,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 25,
            column: 0,
            span: 559..563,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 26,
            column: 10,
            span: 568..573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 26,
            column: 12,
            span: 574..575,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 26,
            column: 14,
            span: 576..577,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 26,
            column: 0,
            span: 577..580,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 27,
            column: 0,
            span: 583..587,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 28,
            column: 10,
            span: 592..597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 28,
            column: 12,
            span: 598..599,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 28,
            column: 14,
            span: 600..601,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 28,
            column: 0,
            span: 601..604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 29,
            column: 11,
            span: 609..615,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 29,
            column: 12,
            span: 615..616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 29,
            column: 13,
            span: 616..617,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 29,
            column: 16,
            span: 618..620,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 29,
            column: 19,
            span: 620..623,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 20,
            span: 623..624,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 30,
            column: 0,
            span: 627..630,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 31,
            column: 0,
            span: 631..634,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 35,
            column: 2,
            span: 638..639,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 35,
            column: 4,
            span: 640..641,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 35,
            column: 0,
            span: 642..645,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 37,
            column: 6,
            span: 647..652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 37,
            column: 0,
            span: 653..654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 38,
            column: 2,
            span: 655..656,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 38,
            column: 4,
            span: 657..658,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 38,
            column: 0,
            span: 658..660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 40,
            column: 2,
            span: 662..663,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 40,
            column: 4,
            span: 664..665,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 40,
            column: 0,
            span: 666..669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 41,
            column: 5,
            span: 670..674,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 6,
            span: 674..675,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'local a = {}'",
        ),
        position: Position {
            line: 41,
            column: 20,
            span: 675..689,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 21,
            span: 689..690,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 22,
            span: 690..691,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 23,
            span: 691..692,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 42,
            column: 7,
            span: 693..699,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 42,
            column: 8,
            span: 699..700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 42,
            column: 9,
            span: 700..701,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 42,
            column: 12,
            span: 702..704,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 42,
            column: 16,
            span: 705..708,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 42,
            column: 17,
            span: 708..709,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 44,
            column: 9,
            span: 711..719,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 44,
            column: 11,
            span: 720..721,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 44,
            column: 13,
            span: 722..723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 44,
            column: 14,
            span: 723..724,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 44,
            column: 15,
            span: 724..725,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 45,
            column: 8,
            span: 728..733,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_1",
        ),
        position: Position {
            line: 45,
            column: 11,
            span: 734..736,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 12,
            span: 736..737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_2",
        ),
        position: Position {
            line: 45,
            column: 15,
            span: 738..740,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 16,
            span: 740..741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_3",
        ),
        position: Position {
            line: 45,
            column: 19,
            span: 742..744,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 20,
            span: 744..745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_4",
        ),
        position: Position {
            line: 45,
            column: 23,
            span: 746..748,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 24,
            span: 748..749,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_5",
        ),
        position: Position {
            line: 45,
            column: 0,
            span: 750..752,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 46,
            column: 8,
            span: 755..760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_6",
        ),
        position: Position {
            line: 46,
            column: 11,
            span: 761..763,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 12,
            span: 763..764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_7",
        ),
        position: Position {
            line: 46,
            column: 15,
            span: 765..767,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 16,
            span: 767..768,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_8",
        ),
        position: Position {
            line: 46,
            column: 19,
            span: 769..771,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 20,
            span: 771..772,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_9",
        ),
        position: Position {
            line: 46,
            column: 23,
            span: 773..775,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 24,
            span: 775..776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_10",
        ),
        position: Position {
            line: 46,
            column: 0,
            span: 777..780,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 47,
            column: 8,
            span: 783..788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 47,
            column: 10,
            span: 789..790,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 47,
            column: 12,
            span: 791..792,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 47,
            column: 0,
            span: 792..794,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 48,
            column: 8,
            span: 797..802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 48,
            column: 10,
            span: 803..804,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 48,
            column: 12,
            span: 805..806,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 48,
            column: 0,
            span: 807..808,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 49,
            column: 8,
            span: 811..816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 49,
            column: 10,
            span: 817..818,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 49,
            column: 11,
            span: 818..819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 49,
            column: 12,
            span: 819..820,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 49,
            column: 14,
            span: 821..822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 49,
            column: 16,
            span: 823..824,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 49,
            column: 17,
            span: 824..825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 49,
            column: 0,
            span: 825..826,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 50,
            column: 5,
            span: 829..831,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 7,
            span: 832..833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 50,
            column: 8,
            span: 833..834,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 50,
            column: 11,
            span: 835..837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 50,
            column: 13,
            span: 838..839,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 14,
            span: 839..840,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 50,
            column: 0,
            span: 841..845,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 51,
            column: 10,
            span: 850..855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 51,
            column: 12,
            span: 856..857,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 51,
            column: 14,
            span: 858..859,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'q'",
        ),
        position: Position {
            line: 51,
            column: 18,
            span: 860..863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 52,
            column: 6,
            span: 868..869,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 52,
            column: 8,
            span: 870..871,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 52,
            column: 0,
            span: 872..873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 53,
            column: 11,
            span: 878..884,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 12,
            span: 884..885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 53,
            column: 13,
            span: 885..886,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 53,
            column: 16,
            span: 887..889,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 53,
            column: 18,
            span: 889..891,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 19,
            span: 891..892,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 54,
            column: 0,
            span: 895..899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 55,
            column: 11,
            span: 904..910,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 12,
            span: 910..911,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 55,
            column: 15,
            span: 911..914,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 16,
            span: 914..915,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 56,
            column: 0,
            span: 918..921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 57,
            column: 9,
            span: 924..930,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 10,
            span: 930..931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 57,
            column: 11,
            span: 931..932,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 57,
            column: 14,
            span: 933..935,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 57,
            column: 16,
            span: 935..937,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 17,
            span: 937..938,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 58,
            column: 8,
            span: 941..946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 58,
            column: 10,
            span: 947..948,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 58,
            column: 12,
            span: 949..950,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 58,
            column: 0,
            span: 950..953,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 59,
            column: 0,
            span: 954..957,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 61,
            column: 6,
            span: 959..964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 61,
            column: 8,
            span: 965..966,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 61,
            column: 9,
            span: 966..967,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 61,
            column: 0,
            span: 966..969,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 62,
            column: 6,
            span: 970..975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 62,
            column: 8,
            span: 976..977,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 62,
            column: 9,
            span: 977..978,
        },
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        position: Position {
            line: 62,
            column: 16,
            span: 979..985,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 62,
            column: 22,
            span: 986..991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 62,
            column: 24,
            span: 992..993,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 62,
            column: 25,
            span: 993..994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 62,
            column: 27,
            span: 995..996,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 62,
            column: 28,
            span: 996..997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 62,
            column: 29,
            span: 997..998,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 62,
            column: 30,
            span: 998..999,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 62,
            column: 31,
            span: 998..1000,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 62,
            column: 32,
            span: 1000..1001,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 62,
            column: 33,
            span: 1000..1002,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 62,
            column: 34,
            span: 1002..1003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 62,
            column: 41,
            span: 1004..1010,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 42,
            span: 1010..1011,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 62,
            column: 43,
            span: 1011..1012,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 62,
            column: 44,
            span: 1012..1013,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 62,
            column: 45,
            span: 1012..1014,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 62,
            column: 47,
            span: 1014..1016,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 62,
            column: 48,
            span: 1016..1017,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 49,
            span: 1017..1018,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 62,
            column: 50,
            span: 1018..1019,
        },
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        position: Position {
            line: 62,
            column: 56,
            span: 1020..1025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 62,
            column: 58,
            span: 1026..1027,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 62,
            column: 59,
            span: 1027..1028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 62,
            column: 60,
            span: 1028..1029,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 62,
            column: 62,
            span: 1029..1031,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 62,
            column: 0,
            span: 1030..1032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 65,
            column: 7,
            span: 1035..1041,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 8,
            span: 1041..1042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 65,
            column: 9,
            span: 1042..1043,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 65,
            column: 12,
            span: 1044..1046,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 65,
            column: 14,
            span: 1046..1048,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 15,
            span: 1048..1049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 67,
            column: 2,
            span: 1051..1052,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 3,
            span: 1052..1053,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 4,
            span: 1052..1054,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 5,
            span: 1054..1055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 68,
            column: 7,
            span: 1056..1062,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 8,
            span: 1062..1063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 68,
            column: 12,
            span: 1063..1067,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 13,
            span: 1067..1068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 68,
            column: 14,
            span: 1068..1069,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 15,
            span: 1069..1070,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 68,
            column: 18,
            span: 1071..1073,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'function'",
        ),
        position: Position {
            line: 68,
            column: 29,
            span: 1074..1084,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 30,
            span: 1084..1085,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 71,
            column: 6,
            span: 1088..1093,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 71,
            column: 15,
            span: 1094..1102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getenv",
        ),
        position: Position {
            line: 71,
            column: 22,
            span: 1103..1109,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 71,
            column: 24,
            span: 1110..1111,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 71,
            column: 25,
            span: 1111..1112,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 71,
            column: 26,
            span: 1112..1113,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 72,
            column: 8,
            span: 1116..1121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 72,
            column: 10,
            span: 1122..1123,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 72,
            column: 11,
            span: 1123..1124,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 72,
            column: 12,
            span: 1124..1125,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 72,
            column: 14,
            span: 1126..1127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 72,
            column: 20,
            span: 1128..1133,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 72,
            column: 21,
            span: 1133..1134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        position: Position {
            line: 72,
            column: 31,
            span: 1134..1144,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 72,
            column: 32,
            span: 1144..1145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 72,
            column: 33,
            span: 1145..1146,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 72,
            column: 34,
            span: 1146..1147,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 72,
            column: 36,
            span: 1147..1149,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 72,
            column: 37,
            span: 1149..1150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 73,
            column: 9,
            span: 1153..1159,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 10,
            span: 1159..1160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 73,
            column: 11,
            span: 1160..1161,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 73,
            column: 14,
            span: 1162..1164,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'_ENV'",
        ),
        position: Position {
            line: 73,
            column: 21,
            span: 1165..1171,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 22,
            span: 1171..1172,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 74,
            column: 9,
            span: 1175..1181,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 74,
            column: 0,
            span: 1182..1183,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 75,
            column: 0,
            span: 1184..1187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 78,
            column: 7,
            span: 1231..1237,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 8,
            span: 1237..1238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getenv",
        ),
        position: Position {
            line: 78,
            column: 14,
            span: 1238..1244,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 15,
            span: 1244..1245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 78,
            column: 19,
            span: 1245..1249,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=3\"",
        ),
        position: Position {
            line: 78,
            column: 24,
            span: 1249..1254,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 25,
            span: 1254..1255,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 78,
            column: 28,
            span: 1256..1258,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 78,
            column: 31,
            span: 1259..1261,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 32,
            span: 1261..1262,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 79,
            column: 6,
            span: 1263..1268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 79,
            column: 8,
            span: 1269..1270,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 79,
            column: 10,
            span: 1271..1272,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 79,
            column: 12,
            span: 1273..1274,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 79,
            column: 13,
            span: 1274..1275,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 79,
            column: 14,
            span: 1275..1276,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 79,
            column: 20,
            span: 1277..1282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 79,
            column: 22,
            span: 1283..1284,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 79,
            column: 24,
            span: 1285..1286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 79,
            column: 29,
            span: 1287..1291,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 79,
            column: 30,
            span: 1291..1292,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = 3\"",
        ),
        position: Position {
            line: 79,
            column: 37,
            span: 1292..1299,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 79,
            column: 38,
            span: 1299..1300,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 79,
            column: 42,
            span: 1301..1304,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 79,
            column: 43,
            span: 1304..1305,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 79,
            column: 47,
            span: 1306..1309,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 79,
            column: 48,
            span: 1309..1310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 79,
            column: 50,
            span: 1311..1312,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 79,
            column: 51,
            span: 1312..1313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 80,
            column: 7,
            span: 1314..1320,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 8,
            span: 1320..1321,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getenv",
        ),
        position: Position {
            line: 80,
            column: 14,
            span: 1321..1327,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 15,
            span: 1327..1328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 80,
            column: 16,
            span: 1328..1329,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 17,
            span: 1329..1330,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 80,
            column: 20,
            span: 1331..1333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 80,
            column: 22,
            span: 1334..1335,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 23,
            span: 1335..1336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 81,
            column: 7,
            span: 1337..1343,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 8,
            span: 1343..1344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 81,
            column: 9,
            span: 1344..1345,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 81,
            column: 10,
            span: 1345..1346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 81,
            column: 11,
            span: 1346..1347,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 81,
            column: 14,
            span: 1348..1350,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 81,
            column: 18,
            span: 1351..1354,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 19,
            span: 1354..1355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 82,
            column: 2,
            span: 1356..1357,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 3,
            span: 1357..1358,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 4,
            span: 1358..1359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 83,
            column: 7,
            span: 1360..1366,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 83,
            column: 8,
            span: 1366..1367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 83,
            column: 9,
            span: 1367..1368,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 83,
            column: 10,
            span: 1368..1369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 83,
            column: 11,
            span: 1369..1370,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 83,
            column: 14,
            span: 1371..1373,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 83,
            column: 16,
            span: 1373..1375,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 83,
            column: 17,
            span: 1375..1376,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 86,
            column: 0,
            span: 1452..1454,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 87,
            column: 8,
            span: 1457..1462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 87,
            column: 10,
            span: 1463..1464,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 87,
            column: 12,
            span: 1465..1466,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 87,
            column: 0,
            span: 1466..1468,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 88,
            column: 8,
            span: 1471..1476,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 88,
            column: 10,
            span: 1477..1478,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 88,
            column: 12,
            span: 1479..1480,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 88,
            column: 14,
            span: 1480..1482,
        },
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        position: Position {
            line: 89,
            column: 0,
            span: 1500..1506,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 90,
            column: 8,
            span: 1511..1514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 90,
            column: 10,
            span: 1515..1516,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 90,
            column: 11,
            span: 1516..1517,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 90,
            column: 12,
            span: 1517..1518,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 90,
            column: 13,
            span: 1517..1519,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 90,
            column: 14,
            span: 1519..1520,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 90,
            column: 15,
            span: 1519..1521,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 90,
            column: 0,
            span: 1522..1524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 91,
            column: 13,
            span: 1531..1537,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 91,
            column: 14,
            span: 1537..1538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 91,
            column: 18,
            span: 1538..1542,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 91,
            column: 19,
            span: 1542..1543,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 91,
            column: 25,
            span: 1543..1549,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 91,
            column: 26,
            span: 1549..1550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 91,
            column: 32,
            span: 1550..1556,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 91,
            column: 33,
            span: 1556..1557,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[local a=%s;\n                                        a=a+%s;\n                                        assert(a ==2^%s)]]",
        ),
        position: Position {
            line: 93,
            column: 59,
            span: 1557..1677,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 93,
            column: 60,
            span: 1677..1678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 93,
            column: 62,
            span: 1679..1680,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 93,
            column: 63,
            span: 1680..1681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 93,
            column: 65,
            span: 1682..1683,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 93,
            column: 66,
            span: 1683..1684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 93,
            column: 67,
            span: 1684..1685,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 93,
            column: 68,
            span: 1685..1686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 93,
            column: 70,
            span: 1687..1688,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 93,
            column: 71,
            span: 1688..1689,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 93,
            column: 72,
            span: 1689..1690,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 93,
            column: 75,
            span: 1691..1693,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 93,
            column: 76,
            span: 1693..1694,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 93,
            column: 77,
            span: 1694..1695,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 93,
            column: 79,
            span: 1696..1697,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 93,
            column: 80,
            span: 1697..1698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 94,
            column: 13,
            span: 1705..1711,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 94,
            column: 14,
            span: 1711..1712,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 94,
            column: 18,
            span: 1712..1716,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 94,
            column: 19,
            span: 1716..1717,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 94,
            column: 25,
            span: 1717..1723,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 94,
            column: 26,
            span: 1723..1724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 94,
            column: 32,
            span: 1724..1730,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 94,
            column: 33,
            span: 1730..1731,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[local a=%s;\n                                        a=a-%s;\n                                        assert(a==-2^%s)]]",
        ),
        position: Position {
            line: 96,
            column: 59,
            span: 1731..1851,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 60,
            span: 1851..1852,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 96,
            column: 62,
            span: 1853..1854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 96,
            column: 63,
            span: 1854..1855,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 64,
            span: 1855..1856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 96,
            column: 66,
            span: 1857..1858,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 96,
            column: 67,
            span: 1858..1859,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 96,
            column: 68,
            span: 1859..1860,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 69,
            span: 1860..1861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 96,
            column: 71,
            span: 1862..1863,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 96,
            column: 72,
            span: 1863..1864,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 73,
            span: 1864..1865,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 96,
            column: 76,
            span: 1866..1868,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 96,
            column: 77,
            span: 1868..1869,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 96,
            column: 78,
            span: 1869..1870,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 96,
            column: 80,
            span: 1871..1872,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 96,
            column: 81,
            span: 1872..1873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 97,
            column: 13,
            span: 1880..1886,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 14,
            span: 1886..1887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 97,
            column: 18,
            span: 1887..1891,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 19,
            span: 1891..1892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 97,
            column: 25,
            span: 1892..1898,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 97,
            column: 26,
            span: 1898..1899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 97,
            column: 32,
            span: 1899..1905,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 33,
            span: 1905..1906,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[local a,b=0,%s;\n                                        a=b-%s;\n                                        assert(a==-2^%s)]]",
        ),
        position: Position {
            line: 99,
            column: 59,
            span: 1906..2030,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 99,
            column: 60,
            span: 2030..2031,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 99,
            column: 62,
            span: 2032..2033,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 99,
            column: 63,
            span: 2033..2034,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 99,
            column: 64,
            span: 2034..2035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 99,
            column: 66,
            span: 2036..2037,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 99,
            column: 67,
            span: 2037..2038,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 99,
            column: 68,
            span: 2038..2039,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 99,
            column: 69,
            span: 2039..2040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 99,
            column: 71,
            span: 2041..2042,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 99,
            column: 72,
            span: 2042..2043,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 99,
            column: 73,
            span: 2043..2044,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 99,
            column: 76,
            span: 2045..2047,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 99,
            column: 77,
            span: 2047..2048,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 99,
            column: 78,
            span: 2048..2049,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 99,
            column: 80,
            span: 2050..2051,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 99,
            column: 81,
            span: 2051..2052,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 100,
            column: 0,
            span: 2057..2060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 101,
            column: 6,
            span: 2065..2066,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 101,
            column: 8,
            span: 2067..2068,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 101,
            column: 10,
            span: 2068..2070,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 101,
            column: 12,
            span: 2071..2072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 101,
            column: 14,
            span: 2073..2074,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 101,
            column: 15,
            span: 2074..2075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 101,
            column: 18,
            span: 2077..2078,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 101,
            column: 20,
            span: 2079..2080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 101,
            column: 22,
            span: 2081..2082,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 101,
            column: 24,
            span: 2083..2084,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 101,
            column: 0,
            span: 2084..2086,
        },
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        position: Position {
            line: 102,
            column: 8,
            span: 2089..2094,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 102,
            column: 10,
            span: 2095..2096,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 102,
            column: 13,
            span: 2097..2099,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 102,
            column: 0,
            span: 2099..2101,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 103,
            column: 0,
            span: 2102..2105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 105,
            column: 6,
            span: 2107..2112,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 105,
            column: 9,
            span: 2112..2115,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 108,
            column: 3,
            span: 2118..2120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        position: Position {
            line: 108,
            column: 10,
            span: 2121..2127,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 11,
            span: 2127..2128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 108,
            column: 13,
            span: 2128..2130,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 108,
            column: 14,
            span: 2130..2131,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"querytab\"",
        ),
        position: Position {
            line: 108,
            column: 25,
            span: 2132..2142,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 26,
            span: 2142..2143,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 108,
            column: 0,
            span: 2144..2148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 110,
            column: 17,
            span: 2202..2216,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 110,
            column: 18,
            span: 2216..2217,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        position: Position {
            line: 110,
            column: 24,
            span: 2217..2223,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 25,
            span: 2223..2224,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 111,
            column: 8,
            span: 2240..2245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 111,
            column: 10,
            span: 2246..2247,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 111,
            column: 12,
            span: 2248..2249,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 111,
            column: 14,
            span: 2250..2251,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 111,
            column: 15,
            span: 2251..2252,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 111,
            column: 16,
            span: 2252..2253,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 111,
            column: 17,
            span: 2253..2254,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 111,
            column: 18,
            span: 2254..2255,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 111,
            column: 20,
            span: 2256..2257,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 111,
            column: 22,
            span: 2257..2259,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 23,
            span: 2259..2260,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 111,
            column: 25,
            span: 2261..2262,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 111,
            column: 26,
            span: 2261..2263,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 111,
            column: 27,
            span: 2263..2264,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 111,
            column: 29,
            span: 2265..2266,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 111,
            column: 31,
            span: 2266..2268,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 32,
            span: 2268..2269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "alo",
        ),
        position: Position {
            line: 111,
            column: 36,
            span: 2270..2273,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 111,
            column: 38,
            span: 2274..2275,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 111,
            column: 40,
            span: 2275..2277,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 41,
            span: 2277..2278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1234567890123456789012345678901234567890",
        ),
        position: Position {
            line: 112,
            column: 55,
            span: 2293..2334,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 112,
            column: 57,
            span: 2335..2336,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 112,
            column: 60,
            span: 2336..2339,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 112,
            column: 61,
            span: 2339..2340,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 114,
            column: 8,
            span: 2344..2349,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 114,
            column: 10,
            span: 2350..2351,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 114,
            column: 12,
            span: 2352..2353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "querytab",
        ),
        position: Position {
            line: 114,
            column: 21,
            span: 2354..2362,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 114,
            column: 22,
            span: 2362..2363,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 114,
            column: 23,
            span: 2363..2364,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 114,
            column: 24,
            span: 2364..2365,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 116,
            column: 6,
            span: 2369..2372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 116,
            column: 8,
            span: 2373..2374,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 9,
            span: 2374..2375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 116,
            column: 10,
            span: 2375..2376,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 116,
            column: 13,
            span: 2377..2379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 116,
            column: 19,
            span: 2380..2385,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 116,
            column: 20,
            span: 2385..2386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 116,
            column: 21,
            span: 2386..2387,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 116,
            column: 22,
            span: 2387..2388,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 116,
            column: 25,
            span: 2389..2391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 116,
            column: 27,
            span: 2392..2393,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 116,
            column: 28,
            span: 2393..2394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 116,
            column: 29,
            span: 2394..2395,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 116,
            column: 30,
            span: 2395..2396,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 116,
            column: 32,
            span: 2397..2398,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 116,
            column: 36,
            span: 2399..2402,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 116,
            column: 0,
            span: 2403..2406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 117,
            column: 17,
            span: 2409..2423,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 117,
            column: 18,
            span: 2423..2424,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 117,
            column: 19,
            span: 2424..2425,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 118,
            column: 6,
            span: 2474..2477,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 118,
            column: 8,
            span: 2478..2479,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 118,
            column: 9,
            span: 2479..2480,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 118,
            column: 10,
            span: 2479..2481,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 118,
            column: 11,
            span: 2481..2482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 118,
            column: 12,
            span: 2482..2483,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 118,
            column: 13,
            span: 2483..2484,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 118,
            column: 14,
            span: 2483..2485,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 118,
            column: 0,
            span: 2486..2488,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 119,
            column: 10,
            span: 2493..2498,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 119,
            column: 12,
            span: 2499..2500,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 119,
            column: 14,
            span: 2501..2502,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "querytab",
        ),
        position: Position {
            line: 119,
            column: 23,
            span: 2503..2511,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 24,
            span: 2511..2512,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 119,
            column: 25,
            span: 2512..2513,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 119,
            column: 26,
            span: 2513..2514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 119,
            column: 28,
            span: 2515..2516,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 29,
            span: 2516..2517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 120,
            column: 11,
            span: 2522..2528,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 120,
            column: 12,
            span: 2528..2529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 120,
            column: 13,
            span: 2529..2530,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 120,
            column: 16,
            span: 2531..2533,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 120,
            column: 20,
            span: 2534..2537,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 120,
            column: 23,
            span: 2538..2540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 120,
            column: 28,
            span: 2541..2545,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 120,
            column: 29,
            span: 2545..2546,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 120,
            column: 30,
            span: 2546..2547,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 120,
            column: 31,
            span: 2547..2548,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 120,
            column: 34,
            span: 2549..2551,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'number'",
        ),
        position: Position {
            line: 120,
            column: 43,
            span: 2552..2560,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 120,
            column: 46,
            span: 2561..2563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 120,
            column: 48,
            span: 2564..2565,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 120,
            column: 51,
            span: 2566..2568,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 120,
            column: 57,
            span: 2569..2574,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 120,
            column: 58,
            span: 2574..2575,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 121,
            column: 0,
            span: 2578..2581,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 122,
            column: 0,
            span: 2582..2585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 127,
            column: 7,
            span: 2621..2627,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 8,
            span: 2627..2628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 127,
            column: 12,
            span: 2628..2632,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 127,
            column: 15,
            span: 2633..2635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 127,
            column: 18,
            span: 2636..2638,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 19,
            span: 2638..2639,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 129,
            column: 0,
            span: 2641..2643,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 130,
            column: 6,
            span: 2644..2649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        position: Position {
            line: 130,
            column: 0,
            span: 2650..2655,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 131,
            column: 6,
            span: 2656..2661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 131,
            column: 11,
            span: 2662..2666,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 131,
            column: 13,
            span: 2667..2668,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 131,
            column: 15,
            span: 2669..2670,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 131,
            column: 23,
            span: 2670..2678,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 131,
            column: 25,
            span: 2679..2680,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 131,
            column: 28,
            span: 2680..2683,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 131,
            column: 29,
            span: 2683..2684,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 131,
            column: 36,
            span: 2685..2691,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 131,
            column: 40,
            span: 2692..2695,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 131,
            column: 44,
            span: 2696..2699,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 131,
            column: 45,
            span: 2699..2700,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 131,
            column: 46,
            span: 2700..2701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 131,
            column: 48,
            span: 2701..2703,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 131,
            column: 49,
            span: 2703..2704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        position: Position {
            line: 131,
            column: 55,
            span: 2705..2710,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 131,
            column: 56,
            span: 2710..2711,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 133,
            column: 3,
            span: 2720..2722,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 133,
            column: 9,
            span: 2723..2728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 133,
            column: 14,
            span: 2729..2733,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 133,
            column: 16,
            span: 2734..2735,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 133,
            column: 18,
            span: 2736..2737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 133,
            column: 24,
            span: 2737..2743,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 133,
            column: 25,
            span: 2743..2744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 133,
            column: 31,
            span: 2744..2750,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 133,
            column: 32,
            span: 2750..2751,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 133,
            column: 33,
            span: 2751..2752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 133,
            column: 40,
            span: 2753..2759,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 133,
            column: 41,
            span: 2759..2760,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 133,
            column: 45,
            span: 2760..2764,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 133,
            column: 46,
            span: 2764..2765,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 133,
            column: 0,
            span: 2766..2769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 134,
            column: 3,
            span: 2770..2772,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 134,
            column: 5,
            span: 2773..2774,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 134,
            column: 7,
            span: 2775..2776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 134,
            column: 9,
            span: 2776..2778,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 134,
            column: 11,
            span: 2779..2780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 134,
            column: 14,
            span: 2781..2783,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 134,
            column: 15,
            span: 2783..2784,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 135,
            column: 6,
            span: 2785..2790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 135,
            column: 10,
            span: 2791..2794,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 135,
            column: 11,
            span: 2794..2795,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 135,
            column: 0,
            span: 2795..2796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 136,
            column: 2,
            span: 2797..2798,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 136,
            column: 4,
            span: 2799..2800,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 136,
            column: 10,
            span: 2801..2806,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 137,
            column: 3,
            span: 2825..2827,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 137,
            column: 9,
            span: 2828..2833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 137,
            column: 14,
            span: 2834..2838,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 137,
            column: 16,
            span: 2839..2840,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 137,
            column: 0,
            span: 2841..2843,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 138,
            column: 11,
            span: 2846..2854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 138,
            column: 15,
            span: 2855..2858,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 138,
            column: 17,
            span: 2859..2860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 138,
            column: 18,
            span: 2860..2861,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 138,
            column: 19,
            span: 2861..2862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 139,
            column: 6,
            span: 2867..2868,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 139,
            column: 8,
            span: 2869..2870,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 139,
            column: 0,
            span: 2871..2872,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 140,
            column: 7,
            span: 2877..2879,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 140,
            column: 13,
            span: 2880..2885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 140,
            column: 18,
            span: 2886..2890,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 140,
            column: 20,
            span: 2891..2892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 140,
            column: 24,
            span: 2894..2896,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 140,
            column: 25,
            span: 2896..2897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 140,
            column: 27,
            span: 2898..2899,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 140,
            column: 29,
            span: 2900..2901,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 34,
            span: 2901..2906,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 140,
            column: 0,
            span: 2907..2910,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 141,
            column: 11,
            span: 2915..2921,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 141,
            column: 20,
            span: 2922..2930,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 141,
            column: 22,
            span: 2931..2932,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 141,
            column: 23,
            span: 2932..2933,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 141,
            column: 24,
            span: 2933..2934,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 141,
            column: 31,
            span: 2935..2941,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 141,
            column: 33,
            span: 2942..2943,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 141,
            column: 36,
            span: 2944..2946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 141,
            column: 38,
            span: 2947..2948,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 141,
            column: 0,
            span: 2949..2952,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 142,
            column: 0,
            span: 2955..2958,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 143,
            column: 0,
            span: 2959..2962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 144,
            column: 7,
            span: 2963..2969,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 8,
            span: 2969..2970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getenv",
        ),
        position: Position {
            line: 144,
            column: 14,
            span: 2970..2976,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 15,
            span: 2976..2977,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 144,
            column: 18,
            span: 2977..2980,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 144,
            column: 19,
            span: 2980..2981,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 144,
            column: 22,
            span: 2982..2984,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 144,
            column: 25,
            span: 2985..2987,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 144,
            column: 26,
            span: 2987..2988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 145,
            column: 2,
            span: 2989..2990,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 145,
            column: 4,
            span: 2991..2992,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 145,
            column: 8,
            span: 2993..2996,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 145,
            column: 9,
            span: 2996..2997,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'hi'",
        ),
        position: Position {
            line: 145,
            column: 13,
            span: 2997..3001,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 145,
            column: 14,
            span: 3001..3002,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 145,
            column: 15,
            span: 3002..3003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 145,
            column: 22,
            span: 3004..3010,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 145,
            column: 23,
            span: 3010..3011,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 145,
            column: 25,
            span: 3011..3013,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 145,
            column: 26,
            span: 3013..3014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 145,
            column: 27,
            span: 3014..3015,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 145,
            column: 30,
            span: 3016..3018,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'hi'",
        ),
        position: Position {
            line: 145,
            column: 35,
            span: 3019..3023,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 145,
            column: 39,
            span: 3024..3027,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 145,
            column: 41,
            span: 3028..3029,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 145,
            column: 44,
            span: 3030..3032,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 145,
            column: 49,
            span: 3032..3037,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 145,
            column: 50,
            span: 3037..3038,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 146,
            column: 7,
            span: 3039..3045,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 146,
            column: 8,
            span: 3045..3046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 146,
            column: 9,
            span: 3046..3047,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 146,
            column: 10,
            span: 3047..3048,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*'",
        ),
        position: Position {
            line: 146,
            column: 13,
            span: 3048..3051,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 146,
            column: 14,
            span: 3051..3052,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 146,
            column: 17,
            span: 3053..3055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 146,
            column: 20,
            span: 3056..3058,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 146,
            column: 21,
            span: 3058..3059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 146,
            column: 22,
            span: 3059..3060,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 146,
            column: 25,
            span: 3061..3063,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*'",
        ),
        position: Position {
            line: 146,
            column: 29,
            span: 3064..3067,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 146,
            column: 30,
            span: 3067..3068,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 148,
            column: 3,
            span: 3070..3072,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 148,
            column: 9,
            span: 3073..3078,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 148,
            column: 14,
            span: 3079..3083,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 148,
            column: 16,
            span: 3084..3085,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 148,
            column: 18,
            span: 3086..3087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 148,
            column: 24,
            span: 3087..3093,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 148,
            column: 25,
            span: 3093..3094,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 148,
            column: 31,
            span: 3094..3100,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 148,
            column: 32,
            span: 3100..3101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 148,
            column: 34,
            span: 3102..3103,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 148,
            column: 35,
            span: 3103..3104,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 148,
            column: 37,
            span: 3103..3106,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 148,
            column: 38,
            span: 3106..3107,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 148,
            column: 39,
            span: 3107..3108,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 149,
            column: 5,
            span: 3111..3113,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 149,
            column: 11,
            span: 3114..3119,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 149,
            column: 16,
            span: 3120..3124,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 149,
            column: 18,
            span: 3125..3126,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 149,
            column: 20,
            span: 3127..3128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 149,
            column: 26,
            span: 3128..3134,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 149,
            column: 27,
            span: 3134..3135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 149,
            column: 33,
            span: 3135..3141,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 34,
            span: 3141..3142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 149,
            column: 36,
            span: 3143..3144,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 149,
            column: 37,
            span: 3144..3145,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 39,
            span: 3144..3147,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 149,
            column: 40,
            span: 3147..3148,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 149,
            column: 41,
            span: 3148..3149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 150,
            column: 11,
            span: 3154..3160,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 150,
            column: 12,
            span: 3160..3161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 150,
            column: 13,
            span: 3161..3162,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 150,
            column: 15,
            span: 3162..3164,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 150,
            column: 17,
            span: 3163..3166,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 150,
            column: 18,
            span: 3166..3167,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 150,
            column: 19,
            span: 3167..3168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 150,
            column: 20,
            span: 3168..3169,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 150,
            column: 21,
            span: 3169..3170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 150,
            column: 0,
            span: 3170..3171,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 151,
            column: 0,
            span: 3174..3177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 152,
            column: 9,
            span: 3180..3186,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 152,
            column: 10,
            span: 3186..3187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 152,
            column: 11,
            span: 3187..3188,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 152,
            column: 13,
            span: 3188..3190,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 15,
            span: 3189..3192,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 152,
            column: 19,
            span: 3193..3196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 152,
            column: 21,
            span: 3197..3198,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 152,
            column: 23,
            span: 3198..3200,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 25,
            span: 3199..3202,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 152,
            column: 26,
            span: 3202..3203,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 153,
            column: 0,
            span: 3204..3207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 154,
            column: 7,
            span: 3208..3214,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 154,
            column: 8,
            span: 3214..3215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 154,
            column: 9,
            span: 3215..3216,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 154,
            column: 11,
            span: 3216..3218,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 154,
            column: 13,
            span: 3217..3220,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 154,
            column: 14,
            span: 3220..3221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 157,
            column: 6,
            span: 3224..3229,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 157,
            column: 7,
            span: 3229..3230,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        position: Position {
            line: 157,
            column: 11,
            span: 3230..3234,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 157,
            column: 12,
            span: 3234..3235,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 159,
            column: 7,
            span: 3237..3243,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 159,
            column: 9,
            span: 3243..3245,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 159,
            column: 10,
            span: 3245..3246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 159,
            column: 0,
            span: 3246..3247,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 161,
            column: 4,
            span: 3249..3252,
        },
    },
]
