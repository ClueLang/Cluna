---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/gc.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
        column: 6,
        span: 97..102,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
        column: 7,
        span: 102..103,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing garbage collection'",
        ),
        line: 4,
        column: 35,
        span: 103..131,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
        column: 36,
        span: 131..132,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 6,
        span: 134..139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 6,
        column: 12,
        span: 140..145,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 14,
        span: 146..147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 6,
        column: 22,
        span: 148..155,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        line: 6,
        column: 29,
        span: 155..162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 8,
        column: 15,
        span: 164..178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 16,
        span: 178..179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 17,
        span: 179..180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 10,
        column: 7,
        span: 182..188,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 8,
        span: 188..189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 10,
        column: 22,
        span: 189..203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 23,
        span: 203..204,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"isrunning\"",
        ),
        line: 10,
        column: 34,
        span: 204..215,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 35,
        span: 215..216,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 36,
        span: 216..217,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 12,
        column: 6,
        span: 219..224,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 12,
        column: 15,
        span: 225..233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcinfo",
        ),
        line: 12,
        column: 22,
        span: 234..240,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 24,
        span: 241..242,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 25,
        span: 242..243,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 12,
        column: 32,
        span: 244..250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 12,
        column: 47,
        span: 251..265,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 12,
        column: 54,
        span: 265..272,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 12,
        column: 56,
        span: 273..274,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1024",
                    after_decimal: "",
                },
            ),
        ),
        line: 12,
        column: 61,
        span: 274..279,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 12,
        column: 0,
        span: 280..283,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 16,
        column: 0,
        span: 311..313,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 18,
        column: 8,
        span: 346..351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 18,
        column: 10,
        span: 352..353,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 18,
        column: 12,
        span: 354..355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 18,
        column: 27,
        span: 356..370,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 28,
        span: 370..371,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"setpause\"",
        ),
        line: 18,
        column: 38,
        span: 371..381,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 18,
        column: 39,
        span: 381..382,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 18,
        column: 43,
        span: 382..386,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 44,
        span: 386..387,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 19,
        column: 8,
        span: 390..395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 19,
        column: 10,
        span: 396..397,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 19,
        column: 12,
        span: 398..399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 19,
        column: 27,
        span: 400..414,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 28,
        span: 414..415,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"setstepmul\"",
        ),
        line: 19,
        column: 40,
        span: 415..427,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
        column: 41,
        span: 427..428,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 19,
        column: 45,
        span: 428..432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 46,
        span: 432..433,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 20,
        column: 8,
        span: 436..441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 20,
        column: 10,
        span: 442..443,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 20,
        column: 12,
        span: 444..445,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 20,
        column: 14,
        span: 446..447,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 15,
        span: 446..448,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 16,
        span: 448..449,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 18,
        span: 449..451,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 19,
        span: 451..452,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 22,
        span: 452..455,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 23,
        span: 455..456,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 26,
        span: 456..459,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 27,
        span: 459..460,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 31,
        span: 460..464,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 32,
        span: 464..465,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5000",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 37,
        span: 465..470,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 38,
        span: 470..471,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30000",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 44,
        span: 471..477,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 45,
        span: 477..478,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7ffffffe",
            ),
        ),
        line: 20,
        column: 56,
        span: 478..489,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 20,
        column: 57,
        span: 489..490,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 21,
        column: 6,
        span: 493..496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 21,
        column: 8,
        span: 497..498,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
        column: 10,
        span: 499..500,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 21,
        column: 12,
        span: 500..502,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 13,
        span: 502..503,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 21,
        column: 15,
        span: 504..505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 21,
        column: 16,
        span: 505..506,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 21,
        column: 0,
        span: 507..509,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 22,
        column: 10,
        span: 514..519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 22,
        column: 12,
        span: 520..521,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 22,
        column: 14,
        span: 522..523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 22,
        column: 16,
        span: 524..525,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 22,
        column: 17,
        span: 525..526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 22,
        column: 18,
        span: 526..527,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 22,
        column: 19,
        span: 527..528,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 23,
        column: 8,
        span: 533..536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 23,
        column: 10,
        span: 537..538,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 23,
        column: 12,
        span: 539..540,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 23,
        column: 14,
        span: 540..542,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 23,
        column: 15,
        span: 542..543,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 23,
        column: 17,
        span: 544..545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 23,
        column: 18,
        span: 545..546,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 23,
        column: 0,
        span: 547..549,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 24,
        column: 12,
        span: 556..561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 24,
        column: 14,
        span: 562..563,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 16,
        span: 564..565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 24,
        column: 18,
        span: 566..567,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 24,
        column: 19,
        span: 567..568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 24,
        column: 20,
        span: 568..569,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 24,
        column: 21,
        span: 569..570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 25,
        column: 21,
        span: 577..591,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 22,
        span: 591..592,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"setpause\"",
        ),
        line: 25,
        column: 32,
        span: 592..602,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 33,
        span: 602..603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 25,
        column: 35,
        span: 604..605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 36,
        span: 605..606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 26,
        column: 21,
        span: 613..627,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 22,
        span: 627..628,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"setstepmul\"",
        ),
        line: 26,
        column: 34,
        span: 628..640,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 35,
        span: 640..641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 26,
        column: 37,
        span: 642..643,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 38,
        span: 643..644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 27,
        column: 21,
        span: 651..665,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 22,
        span: 665..666,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"step\"",
        ),
        line: 27,
        column: 28,
        span: 666..672,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
        column: 29,
        span: 672..673,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 27,
        column: 31,
        span: 673..675,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 32,
        span: 675..676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 28,
        column: 21,
        span: 683..697,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 22,
        span: 697..698,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"step\"",
        ),
        line: 28,
        column: 28,
        span: 698..704,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 29,
        span: 704..705,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 35,
        span: 705..711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 36,
        span: 711..712,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 29,
        column: 0,
        span: 717..720,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 30,
        column: 0,
        span: 723..726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 32,
        column: 17,
        span: 762..776,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 18,
        span: 776..777,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"setpause\"",
        ),
        line: 32,
        column: 28,
        span: 777..787,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 29,
        span: 787..788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 32,
        column: 31,
        span: 789..790,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 32,
        span: 790..791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 33,
        column: 17,
        span: 794..808,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 18,
        span: 808..809,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"setstepmul\"",
        ),
        line: 33,
        column: 30,
        span: 809..821,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 31,
        span: 821..822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 33,
        column: 33,
        span: 823..824,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 34,
        span: 824..825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 34,
        column: 17,
        span: 828..842,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 18,
        span: 842..843,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 19,
        span: 843..844,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 35,
        column: 0,
        span: 845..848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 38,
        column: 3,
        span: 851..853,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 38,
        column: 4,
        span: 853..854,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"while\"",
        ),
        line: 38,
        column: 11,
        span: 854..861,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 38,
        column: 12,
        span: 861..862,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 38,
        column: 14,
        span: 863..864,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "234",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 0,
        span: 864..868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 40,
        column: 6,
        span: 870..875,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 40,
        column: 8,
        span: 876..877,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5000",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 0,
        span: 877..882,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 43,
        column: 6,
        span: 885..890,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 43,
        column: 15,
        span: 891..899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "GC1",
        ),
        line: 43,
        column: 19,
        span: 900..903,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 21,
        span: 904..905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 22,
        span: 905..906,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 44,
        column: 8,
        span: 909..914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 44,
        column: 0,
        span: 915..916,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 45,
        column: 8,
        span: 919..924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 45,
        column: 10,
        span: 925..926,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 46,
        column: 8,
        span: 993..998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 46,
        column: 15,
        span: 999..1005,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 46,
        column: 17,
        span: 1006..1007,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 46,
        column: 0,
        span: 1008..1013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 47,
        column: 4,
        span: 1016..1017,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 47,
        column: 6,
        span: 1018..1019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 47,
        column: 19,
        span: 1020..1032,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 20,
        span: 1032..1033,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 47,
        column: 21,
        span: 1033..1034,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 47,
        column: 22,
        span: 1034..1035,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 47,
        column: 23,
        span: 1035..1036,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 47,
        column: 25,
        span: 1037..1038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 47,
        column: 29,
        span: 1038..1042,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 47,
        column: 31,
        span: 1043..1044,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 47,
        column: 40,
        span: 1045..1053,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 42,
        span: 1054..1055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 43,
        span: 1055..1056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 47,
        column: 50,
        span: 1057..1063,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 47,
        column: 52,
        span: 1064..1065,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 47,
        column: 57,
        span: 1066..1070,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 47,
        column: 61,
        span: 1071..1074,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 47,
        column: 62,
        span: 1074..1075,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 63,
        span: 1075..1076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 48,
        column: 4,
        span: 1079..1080,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 48,
        column: 6,
        span: 1081..1082,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 48,
        column: 8,
        span: 1083..1084,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 48,
        column: 10,
        span: 1083..1086,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 48,
        column: 11,
        span: 1086..1087,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 49,
        column: 9,
        span: 1090..1096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 49,
        column: 11,
        span: 1097..1098,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 49,
        column: 13,
        span: 1099..1100,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 49,
        column: 15,
        span: 1101..1102,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 49,
        column: 16,
        span: 1102..1103,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 49,
        column: 22,
        span: 1104..1109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 49,
        column: 0,
        span: 1110..1116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 50,
        column: 9,
        span: 1119..1125,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 10,
        span: 1125..1126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 50,
        column: 11,
        span: 1126..1127,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 50,
        column: 12,
        span: 1127..1128,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 13,
        span: 1127..1129,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 50,
        column: 14,
        span: 1129..1130,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 50,
        column: 17,
        span: 1131..1133,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 20,
        span: 1133..1136,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 21,
        span: 1136..1137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 52,
        column: 9,
        span: 1181..1187,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 52,
        column: 11,
        span: 1188..1189,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 52,
        column: 17,
        span: 1190..1195,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 52,
        column: 18,
        span: 1195..1196,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 52,
        column: 24,
        span: 1197..1202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 52,
        column: 26,
        span: 1203..1204,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 52,
        column: 28,
        span: 1205..1206,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 52,
        column: 0,
        span: 1206..1208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 53,
        column: 4,
        span: 1211..1212,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 53,
        column: 6,
        span: 1213..1214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 53,
        column: 19,
        span: 1215..1227,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 20,
        span: 1227..1228,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 53,
        column: 21,
        span: 1228..1229,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 53,
        column: 22,
        span: 1229..1230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 23,
        span: 1230..1231,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 53,
        column: 25,
        span: 1232..1233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 53,
        column: 29,
        span: 1233..1237,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 53,
        column: 31,
        span: 1238..1239,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 53,
        column: 40,
        span: 1240..1248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 42,
        span: 1249..1250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 43,
        span: 1250..1251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 53,
        column: 50,
        span: 1252..1258,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 53,
        column: 52,
        span: 1259..1260,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 53,
        column: 57,
        span: 1261..1265,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 53,
        column: 61,
        span: 1266..1269,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 53,
        column: 62,
        span: 1269..1270,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 63,
        span: 1270..1271,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 54,
        column: 9,
        span: 1274..1280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 54,
        column: 11,
        span: 1281..1282,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 54,
        column: 13,
        span: 1283..1284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 54,
        column: 15,
        span: 1285..1286,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 54,
        column: 17,
        span: 1287..1288,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 54,
        column: 19,
        span: 1288..1290,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 54,
        column: 20,
        span: 1290..1291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 54,
        column: 22,
        span: 1292..1293,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 54,
        column: 24,
        span: 1294..1295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 54,
        column: 33,
        span: 1296..1304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 34,
        span: 1304..1305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 54,
        column: 35,
        span: 1305..1306,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 36,
        span: 1306..1307,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 54,
        column: 39,
        span: 1308..1310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 54,
        column: 48,
        span: 1311..1319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 49,
        span: 1319..1320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 54,
        column: 50,
        span: 1320..1321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 51,
        span: 1321..1322,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 54,
        column: 57,
        span: 1323..1328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 54,
        column: 0,
        span: 1329..1335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 55,
        column: 9,
        span: 1338..1344,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 10,
        span: 1344..1345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 55,
        column: 11,
        span: 1345..1346,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 55,
        column: 12,
        span: 1346..1347,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 55,
        column: 13,
        span: 1346..1348,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 55,
        column: 14,
        span: 1348..1349,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 55,
        column: 17,
        span: 1350..1352,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 55,
        column: 20,
        span: 1352..1355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 21,
        span: 1355..1356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 57,
        column: 9,
        span: 1400..1406,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 57,
        column: 11,
        span: 1407..1408,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 57,
        column: 0,
        span: 1409..1414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 58,
        column: 4,
        span: 1417..1418,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
        column: 6,
        span: 1419..1420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 58,
        column: 19,
        span: 1421..1433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 20,
        span: 1433..1434,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 58,
        column: 21,
        span: 1434..1435,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 58,
        column: 22,
        span: 1435..1436,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 23,
        span: 1436..1437,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 58,
        column: 25,
        span: 1438..1439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 58,
        column: 29,
        span: 1439..1443,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
        column: 31,
        span: 1444..1445,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 58,
        column: 40,
        span: 1446..1454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 42,
        span: 1455..1456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 43,
        span: 1456..1457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 58,
        column: 50,
        span: 1458..1464,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
        column: 52,
        span: 1465..1466,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 58,
        column: 57,
        span: 1467..1471,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 58,
        column: 61,
        span: 1472..1475,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 58,
        column: 62,
        span: 1475..1476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 63,
        span: 1476..1477,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 59,
        column: 9,
        span: 1480..1486,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 59,
        column: 15,
        span: 1487..1492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 59,
        column: 17,
        span: 1493..1494,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 59,
        column: 18,
        span: 1494..1495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 59,
        column: 20,
        span: 1496..1497,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 59,
        column: 22,
        span: 1498..1499,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 59,
        column: 31,
        span: 1500..1508,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 33,
        span: 1509..1510,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 34,
        span: 1510..1511,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 59,
        column: 41,
        span: 1512..1518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 59,
        column: 43,
        span: 1519..1520,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 59,
        column: 47,
        span: 1521..1524,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 59,
        column: 53,
        span: 1525..1530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 59,
        column: 0,
        span: 1531..1537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 60,
        column: 9,
        span: 1540..1546,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 10,
        span: 1546..1547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 60,
        column: 11,
        span: 1547..1548,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 60,
        column: 12,
        span: 1548..1549,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
        column: 13,
        span: 1548..1550,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 60,
        column: 14,
        span: 1550..1551,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 60,
        column: 17,
        span: 1552..1554,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
        column: 20,
        span: 1554..1557,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 21,
        span: 1557..1558,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 61,
        column: 0,
        span: 1599..1602,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 63,
        column: 6,
        span: 1604..1609,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 63,
        column: 15,
        span: 1610..1618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "GC2",
        ),
        line: 63,
        column: 19,
        span: 1619..1622,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 21,
        span: 1623..1624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 22,
        span: 1624..1625,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 64,
        column: 8,
        span: 1628..1633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 64,
        column: 0,
        span: 1634..1635,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 65,
        column: 8,
        span: 1638..1643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 65,
        column: 15,
        span: 1644..1650,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 65,
        column: 17,
        span: 1651..1652,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 65,
        column: 0,
        span: 1653..1658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 66,
        column: 4,
        span: 1661..1662,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 66,
        column: 6,
        span: 1663..1664,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 66,
        column: 8,
        span: 1665..1666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 66,
        column: 20,
        span: 1666..1678,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 21,
        span: 1678..1679,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 66,
        column: 22,
        span: 1679..1680,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 66,
        column: 23,
        span: 1680..1681,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 24,
        span: 1681..1682,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 66,
        column: 26,
        span: 1683..1684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 66,
        column: 30,
        span: 1684..1688,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 66,
        column: 32,
        span: 1689..1690,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 66,
        column: 41,
        span: 1691..1699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 43,
        span: 1700..1701,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 44,
        span: 1701..1702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 66,
        column: 51,
        span: 1703..1709,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 66,
        column: 53,
        span: 1710..1711,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 66,
        column: 58,
        span: 1712..1716,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 66,
        column: 62,
        span: 1717..1720,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 66,
        column: 63,
        span: 1720..1721,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 64,
        span: 1721..1722,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 66,
        column: 65,
        span: 1722..1723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 67,
        column: 4,
        span: 1726..1727,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 67,
        column: 6,
        span: 1728..1729,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 67,
        column: 8,
        span: 1730..1731,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 67,
        column: 10,
        span: 1730..1733,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 67,
        column: 11,
        span: 1733..1734,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 68,
        column: 9,
        span: 1737..1743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 68,
        column: 11,
        span: 1744..1745,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 68,
        column: 13,
        span: 1746..1747,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 68,
        column: 15,
        span: 1748..1749,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 68,
        column: 16,
        span: 1749..1750,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 68,
        column: 17,
        span: 1750..1751,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 68,
        column: 18,
        span: 1751..1752,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 68,
        column: 24,
        span: 1753..1758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 68,
        column: 0,
        span: 1759..1765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 69,
        column: 9,
        span: 1768..1774,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 10,
        span: 1774..1775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 69,
        column: 11,
        span: 1775..1776,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 69,
        column: 12,
        span: 1776..1777,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 13,
        span: 1776..1778,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 69,
        column: 14,
        span: 1778..1779,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 69,
        column: 17,
        span: 1780..1782,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 20,
        span: 1782..1785,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 21,
        span: 1785..1786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 71,
        column: 9,
        span: 1830..1836,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 71,
        column: 11,
        span: 1837..1838,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 71,
        column: 17,
        span: 1839..1844,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 71,
        column: 18,
        span: 1844..1845,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 71,
        column: 24,
        span: 1846..1851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 71,
        column: 26,
        span: 1852..1853,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 71,
        column: 28,
        span: 1854..1855,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 0,
        span: 1855..1857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 72,
        column: 4,
        span: 1860..1861,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 72,
        column: 6,
        span: 1862..1863,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 72,
        column: 8,
        span: 1864..1865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 72,
        column: 20,
        span: 1865..1877,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 21,
        span: 1877..1878,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 72,
        column: 22,
        span: 1878..1879,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 72,
        column: 23,
        span: 1879..1880,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 24,
        span: 1880..1881,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 72,
        column: 26,
        span: 1882..1883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 72,
        column: 30,
        span: 1883..1887,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 72,
        column: 32,
        span: 1888..1889,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 72,
        column: 41,
        span: 1890..1898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 43,
        span: 1899..1900,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 44,
        span: 1900..1901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 72,
        column: 51,
        span: 1902..1908,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 72,
        column: 53,
        span: 1909..1910,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 72,
        column: 58,
        span: 1911..1915,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 72,
        column: 62,
        span: 1916..1919,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 72,
        column: 63,
        span: 1919..1920,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 64,
        span: 1920..1921,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 72,
        column: 65,
        span: 1921..1922,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 73,
        column: 9,
        span: 1925..1931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 73,
        column: 11,
        span: 1932..1933,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 73,
        column: 13,
        span: 1934..1935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 73,
        column: 15,
        span: 1936..1937,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 73,
        column: 17,
        span: 1938..1939,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 19,
        span: 1939..1941,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 73,
        column: 20,
        span: 1941..1942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 73,
        column: 22,
        span: 1943..1944,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 73,
        column: 24,
        span: 1945..1946,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 73,
        column: 26,
        span: 1947..1948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 73,
        column: 34,
        span: 1948..1956,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 35,
        span: 1956..1957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 73,
        column: 36,
        span: 1957..1958,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 37,
        span: 1958..1959,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 73,
        column: 40,
        span: 1960..1962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 73,
        column: 49,
        span: 1963..1971,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 50,
        span: 1971..1972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 73,
        column: 51,
        span: 1972..1973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 52,
        span: 1973..1974,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 73,
        column: 53,
        span: 1974..1975,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 73,
        column: 59,
        span: 1976..1981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 73,
        column: 0,
        span: 1982..1988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 74,
        column: 9,
        span: 1991..1997,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 10,
        span: 1997..1998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 74,
        column: 11,
        span: 1998..1999,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 74,
        column: 12,
        span: 1999..2000,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 13,
        span: 1999..2001,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 74,
        column: 14,
        span: 2001..2002,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 74,
        column: 17,
        span: 2003..2005,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 20,
        span: 2005..2008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 21,
        span: 2008..2009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 76,
        column: 9,
        span: 2053..2059,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 76,
        column: 11,
        span: 2060..2061,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 76,
        column: 0,
        span: 2062..2067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 77,
        column: 4,
        span: 2070..2071,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 77,
        column: 6,
        span: 2072..2073,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 77,
        column: 8,
        span: 2074..2075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 77,
        column: 20,
        span: 2075..2087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 21,
        span: 2087..2088,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 77,
        column: 22,
        span: 2088..2089,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 77,
        column: 23,
        span: 2089..2090,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
        column: 24,
        span: 2090..2091,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 77,
        column: 26,
        span: 2092..2093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 77,
        column: 30,
        span: 2093..2097,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 77,
        column: 32,
        span: 2098..2099,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 77,
        column: 41,
        span: 2100..2108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 43,
        span: 2109..2110,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 44,
        span: 2110..2111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 77,
        column: 51,
        span: 2112..2118,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 77,
        column: 53,
        span: 2119..2120,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 77,
        column: 58,
        span: 2121..2125,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 77,
        column: 62,
        span: 2126..2129,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 77,
        column: 63,
        span: 2129..2130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 64,
        span: 2130..2131,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 77,
        column: 65,
        span: 2131..2132,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 78,
        column: 9,
        span: 2135..2141,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 78,
        column: 15,
        span: 2142..2147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 78,
        column: 17,
        span: 2148..2149,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 78,
        column: 18,
        span: 2149..2150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 78,
        column: 20,
        span: 2151..2152,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 78,
        column: 22,
        span: 2153..2154,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 78,
        column: 24,
        span: 2155..2156,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 78,
        column: 32,
        span: 2156..2164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 34,
        span: 2165..2166,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 35,
        span: 2166..2167,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 78,
        column: 42,
        span: 2168..2174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 78,
        column: 44,
        span: 2175..2176,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 78,
        column: 48,
        span: 2177..2180,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 78,
        column: 49,
        span: 2180..2181,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 78,
        column: 55,
        span: 2182..2187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "finish",
        ),
        line: 78,
        column: 0,
        span: 2188..2194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 79,
        column: 9,
        span: 2197..2203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 10,
        span: 2203..2204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 79,
        column: 11,
        span: 2204..2205,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 79,
        column: 12,
        span: 2205..2206,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 79,
        column: 13,
        span: 2205..2207,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 79,
        column: 14,
        span: 2207..2208,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 79,
        column: 17,
        span: 2209..2211,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 79,
        column: 20,
        span: 2211..2214,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 21,
        span: 2214..2215,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 80,
        column: 0,
        span: 2256..2259,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 82,
        column: 6,
        span: 2261..2266,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 82,
        column: 15,
        span: 2267..2275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "GC",
        ),
        line: 82,
        column: 18,
        span: 2276..2278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 19,
        span: 2278..2279,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 20,
        span: 2279..2280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "GC1",
        ),
        line: 82,
        column: 25,
        span: 2282..2285,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 26,
        span: 2285..2286,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 27,
        span: 2286..2287,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 82,
        column: 28,
        span: 2287..2288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "GC2",
        ),
        line: 82,
        column: 32,
        span: 2289..2292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 33,
        span: 2292..2293,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 34,
        span: 2293..2294,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 82,
        column: 0,
        span: 2295..2298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "contCreate",
        ),
        line: 85,
        column: 11,
        span: 2301..2311,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 85,
        column: 13,
        span: 2312..2313,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 0,
        span: 2313..2315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 87,
        column: 6,
        span: 2317..2322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 7,
        span: 2322..2323,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'tables'",
        ),
        line: 87,
        column: 15,
        span: 2323..2331,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 16,
        span: 2331..2332,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 88,
        column: 6,
        span: 2333..2338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "contCreate",
        ),
        line: 88,
        column: 17,
        span: 2339..2349,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 88,
        column: 20,
        span: 2350..2352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 88,
        column: 26,
        span: 2353..2358,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 88,
        column: 0,
        span: 2359..2361,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 89,
        column: 8,
        span: 2364..2369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 89,
        column: 10,
        span: 2370..2371,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 89,
        column: 12,
        span: 2372..2373,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 89,
        column: 14,
        span: 2374..2375,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 89,
        column: 15,
        span: 2375..2376,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 89,
        column: 16,
        span: 2376..2377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 89,
        column: 18,
        span: 2378..2379,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 89,
        column: 20,
        span: 2380..2381,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 89,
        column: 0,
        span: 2382..2385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "contCreate",
        ),
        line: 90,
        column: 13,
        span: 2388..2398,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 90,
        column: 15,
        span: 2399..2400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "contCreate",
        ),
        line: 90,
        column: 26,
        span: 2401..2411,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 90,
        column: 27,
        span: 2411..2412,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
        column: 0,
        span: 2411..2413,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 91,
        column: 0,
        span: 2414..2417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 93,
        column: 2,
        span: 2419..2420,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 93,
        column: 4,
        span: 2421..2422,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 93,
        column: 8,
        span: 2423..2426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "contCreate",
        ),
        line: 95,
        column: 11,
        span: 2428..2438,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 95,
        column: 13,
        span: 2439..2440,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
        column: 0,
        span: 2440..2442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 96,
        column: 6,
        span: 2443..2448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 7,
        span: 2448..2449,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'strings'",
        ),
        line: 96,
        column: 16,
        span: 2449..2458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 17,
        span: 2458..2459,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 97,
        column: 6,
        span: 2460..2465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "contCreate",
        ),
        line: 97,
        column: 17,
        span: 2466..2476,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 97,
        column: 20,
        span: 2477..2479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 97,
        column: 26,
        span: 2480..2485,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 97,
        column: 0,
        span: 2486..2488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 98,
        column: 4,
        span: 2491..2492,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 98,
        column: 6,
        span: 2493..2494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "contCreate",
        ),
        line: 98,
        column: 17,
        span: 2495..2505,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 98,
        column: 20,
        span: 2506..2508,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 98,
        column: 24,
        span: 2509..2512,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 98,
        column: 25,
        span: 2512..2513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 99,
        column: 4,
        span: 2516..2517,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 99,
        column: 6,
        span: 2518..2519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 99,
        column: 13,
        span: 2520..2526,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 99,
        column: 14,
        span: 2526..2527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 99,
        column: 18,
        span: 2527..2531,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 19,
        span: 2531..2532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 99,
        column: 20,
        span: 2532..2533,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
        column: 21,
        span: 2533..2534,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(%d%d*)'",
        ),
        line: 99,
        column: 31,
        span: 2535..2544,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
        column: 32,
        span: 2544..2545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 99,
        column: 39,
        span: 2546..2552,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 99,
        column: 40,
        span: 2552..2553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upper",
        ),
        line: 99,
        column: 45,
        span: 2553..2558,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 46,
        span: 2558..2559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 100,
        column: 4,
        span: 2562..2563,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 100,
        column: 6,
        span: 2564..2565,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 100,
        column: 10,
        span: 2566..2569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "contCreate",
        ),
        line: 101,
        column: 13,
        span: 2572..2582,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 101,
        column: 15,
        span: 2583..2584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "contCreate",
        ),
        line: 101,
        column: 26,
        span: 2585..2595,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 101,
        column: 27,
        span: 2595..2596,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 0,
        span: 2595..2597,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 102,
        column: 0,
        span: 2598..2601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "contCreate",
        ),
        line: 105,
        column: 11,
        span: 2604..2614,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 105,
        column: 13,
        span: 2615..2616,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 0,
        span: 2616..2618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 107,
        column: 2,
        span: 2620..2621,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 107,
        column: 4,
        span: 2622..2623,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 107,
        column: 6,
        span: 2624..2625,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 107,
        column: 7,
        span: 2625..2626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 109,
        column: 6,
        span: 2628..2633,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 7,
        span: 2633..2634,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'functions'",
        ),
        line: 109,
        column: 18,
        span: 2634..2645,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 19,
        span: 2645..2646,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 110,
        column: 9,
        span: 2647..2655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 110,
        column: 11,
        span: 2656..2657,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 110,
        column: 12,
        span: 2657..2658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 110,
        column: 16,
        span: 2658..2662,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 18,
        span: 2663..2664,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 19,
        span: 2664..2665,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 111,
        column: 8,
        span: 2668..2673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "contCreate",
        ),
        line: 111,
        column: 19,
        span: 2674..2684,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 111,
        column: 22,
        span: 2685..2687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 111,
        column: 28,
        span: 2688..2693,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 111,
        column: 0,
        span: 2694..2696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 112,
        column: 9,
        span: 2701..2705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 10,
        span: 2705..2706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 112,
        column: 16,
        span: 2706..2712,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 112,
        column: 17,
        span: 2712..2713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 112,
        column: 23,
        span: 2713..2719,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 24,
        span: 2719..2720,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function temp(a) return 'a%d' end\"",
        ),
        line: 112,
        column: 59,
        span: 2720..2755,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 112,
        column: 60,
        span: 2755..2756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "contCreate",
        ),
        line: 112,
        column: 71,
        span: 2757..2767,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 72,
        span: 2767..2768,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 112,
        column: 73,
        span: 2768..2769,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 112,
        column: 76,
        span: 2770..2772,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 77,
        span: 2772..2773,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 78,
        span: 2773..2774,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 79,
        span: 2774..2775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 113,
        column: 11,
        span: 2780..2786,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 12,
        span: 2786..2787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "temp",
        ),
        line: 113,
        column: 16,
        span: 2787..2791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 17,
        span: 2791..2792,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 18,
        span: 2792..2793,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 113,
        column: 21,
        span: 2794..2796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 113,
        column: 28,
        span: 2797..2803,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 113,
        column: 29,
        span: 2803..2804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 113,
        column: 35,
        span: 2804..2810,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 36,
        span: 2810..2811,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a%d'",
        ),
        line: 113,
        column: 41,
        span: 2811..2816,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 113,
        column: 42,
        span: 2816..2817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "contCreate",
        ),
        line: 113,
        column: 53,
        span: 2818..2828,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 54,
        span: 2828..2829,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 55,
        span: 2829..2830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "contCreate",
        ),
        line: 114,
        column: 15,
        span: 2835..2845,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 114,
        column: 17,
        span: 2846..2847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "contCreate",
        ),
        line: 114,
        column: 28,
        span: 2848..2858,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 114,
        column: 29,
        span: 2858..2859,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 0,
        span: 2858..2860,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 115,
        column: 0,
        span: 2863..2866,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 116,
        column: 0,
        span: 2867..2870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 118,
        column: 2,
        span: 2872..2873,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 118,
        column: 3,
        span: 2873..2874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 118,
        column: 7,
        span: 2874..2878,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 8,
        span: 2878..2879,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 9,
        span: 2879..2880,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 121,
        column: 3,
        span: 2939..2941,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 121,
        column: 9,
        span: 2942..2947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 121,
        column: 11,
        span: 2948..2949,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 121,
        column: 13,
        span: 2950..2951,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 121,
        column: 22,
        span: 2952..2960,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 24,
        span: 2961..2962,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 25,
        span: 2962..2963,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 121,
        column: 29,
        span: 2964..2967,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 121,
        column: 0,
        span: 2968..2971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 124,
        column: 6,
        span: 2974..2979,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 7,
        span: 2979..2980,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"functions with errors\"",
        ),
        line: 124,
        column: 30,
        span: 2980..3003,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 31,
        span: 3003..3004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 125,
        column: 5,
        span: 3005..3009,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 125,
        column: 7,
        span: 3010..3011,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\ndo\n  a = 10;\n  function foo(x,y)\n    a = sin(a+0.456-0.23e-12);\n    return function (z) return sin(%x+z) end\n  end\n  local x = function (w) a=a+w; end\nend\n]]",
        ),
        line: 134,
        column: 3,
        span: 3012..3172,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 135,
        column: 0,
        span: 3173..3175,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 136,
        column: 8,
        span: 3178..3183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "step",
        ),
        line: 136,
        column: 13,
        span: 3184..3188,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 136,
        column: 15,
        span: 3189..3190,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 136,
        column: 0,
        span: 3190..3192,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 137,
        column: 5,
        span: 3195..3197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 137,
        column: 11,
        span: 3198..3203,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 137,
        column: 16,
        span: 3204..3208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "step",
        ),
        line: 137,
        column: 21,
        span: 3209..3213,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 137,
        column: 23,
        span: 3214..3215,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 26,
        span: 3215..3218,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 137,
        column: 0,
        span: 3219..3222,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 138,
        column: 6,
        span: 3225..3228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 138,
        column: 8,
        span: 3229..3230,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 138,
        column: 9,
        span: 3230..3231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 10,
        span: 3230..3232,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 11,
        span: 3232..3233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 138,
        column: 18,
        span: 3234..3240,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 138,
        column: 19,
        span: 3240..3241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 138,
        column: 22,
        span: 3241..3244,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 23,
        span: 3244..3245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 138,
        column: 27,
        span: 3245..3249,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 28,
        span: 3249..3250,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 29,
        span: 3250..3251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "step",
        ),
        line: 138,
        column: 34,
        span: 3252..3256,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 138,
        column: 0,
        span: 3257..3259,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 139,
        column: 8,
        span: 3264..3267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 139,
        column: 10,
        span: 3268..3269,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 139,
        column: 11,
        span: 3269..3270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 139,
        column: 12,
        span: 3270..3271,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 13,
        span: 3271..3272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 139,
        column: 20,
        span: 3273..3279,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 139,
        column: 21,
        span: 3279..3280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 139,
        column: 24,
        span: 3280..3283,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 25,
        span: 3283..3284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 139,
        column: 29,
        span: 3284..3288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 30,
        span: 3288..3289,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 31,
        span: 3289..3290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "step",
        ),
        line: 139,
        column: 36,
        span: 3291..3295,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 139,
        column: 0,
        span: 3296..3298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 140,
        column: 12,
        span: 3305..3310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 13,
        span: 3310..3311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 140,
        column: 17,
        span: 3311..3315,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 18,
        span: 3315..3316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 140,
        column: 24,
        span: 3316..3322,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 140,
        column: 25,
        span: 3322..3323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 140,
        column: 28,
        span: 3323..3326,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 29,
        span: 3326..3327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 140,
        column: 33,
        span: 3327..3331,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 34,
        span: 3331..3332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 140,
        column: 36,
        span: 3333..3334,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 37,
        span: 3334..3335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 140,
        column: 39,
        span: 3336..3337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 40,
        span: 3337..3338,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 41,
        span: 3338..3339,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 140,
        column: 44,
        span: 3340..3342,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 45,
        span: 3342..3343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 46,
        span: 3343..3344,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 141,
        column: 0,
        span: 3349..3352,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 142,
        column: 0,
        span: 3355..3358,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 143,
        column: 0,
        span: 3359..3362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 145,
        column: 4,
        span: 3364..3367,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 145,
        column: 6,
        span: 3368..3369,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 145,
        column: 0,
        span: 3370..3373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 146,
        column: 6,
        span: 3374..3379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 7,
        span: 3379..3380,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'long strings'",
        ),
        line: 146,
        column: 21,
        span: 3380..3394,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 22,
        span: 3394..3395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 147,
        column: 2,
        span: 3396..3397,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 147,
        column: 4,
        span: 3398..3399,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"01234567890123456789012345678901234567890123456789012345678901234567890123456789\"",
        ),
        line: 147,
        column: 87,
        span: 3400..3482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 148,
        column: 7,
        span: 3483..3489,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 8,
        span: 3489..3490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 148,
        column: 14,
        span: 3490..3496,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 148,
        column: 15,
        span: 3496..3497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 148,
        column: 18,
        span: 3497..3500,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 19,
        span: 3500..3501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 148,
        column: 20,
        span: 3501..3502,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 21,
        span: 3502..3503,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 148,
        column: 23,
        span: 3503..3505,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "80",
                    after_decimal: "",
                },
            ),
        ),
        line: 148,
        column: 25,
        span: 3504..3507,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 26,
        span: 3507..3508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 149,
        column: 2,
        span: 3509..3510,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 149,
        column: 4,
        span: 3511..3512,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 149,
        column: 7,
        span: 3513..3515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 150,
        column: 2,
        span: 3516..3517,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 150,
        column: 4,
        span: 3518..3519,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 0,
        span: 3519..3521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 151,
        column: 2,
        span: 3522..3523,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 151,
        column: 4,
        span: 3524..3525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 151,
        column: 9,
        span: 3526..3530,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 151,
        column: 10,
        span: 3530..3531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 151,
        column: 13,
        span: 3531..3534,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 14,
        span: 3534..3535,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 151,
        column: 17,
        span: 3534..3538,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
        column: 18,
        span: 3538..3539,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 20,
        span: 3540..3541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 151,
        column: 24,
        span: 3541..3545,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 151,
        column: 25,
        span: 3545..3546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxinteger",
        ),
        line: 151,
        column: 35,
        span: 3546..3556,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 151,
        column: 38,
        span: 3557..3559,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "80",
                    after_decimal: "",
                },
            ),
        ),
        line: 151,
        column: 41,
        span: 3559..3562,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 42,
        span: 3562..3563,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 151,
        column: 45,
        span: 3564..3566,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 151,
        column: 47,
        span: 3566..3568,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 48,
        span: 3568..3569,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 152,
        column: 6,
        span: 3570..3575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 152,
        column: 8,
        span: 3576..3577,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 152,
        column: 10,
        span: 3578..3579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 152,
        column: 12,
        span: 3580..3581,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 152,
        column: 15,
        span: 3582..3584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 152,
        column: 17,
        span: 3585..3586,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 152,
        column: 19,
        span: 3587..3588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 152,
        column: 21,
        span: 3589..3590,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 152,
        column: 23,
        span: 3590..3592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 152,
        column: 24,
        span: 3592..3593,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 152,
        column: 25,
        span: 3593..3594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 152,
        column: 27,
        span: 3595..3596,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 152,
        column: 28,
        span: 3596..3597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 152,
        column: 29,
        span: 3597..3598,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 152,
        column: 30,
        span: 3598..3599,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 152,
        column: 31,
        span: 3598..3600,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 152,
        column: 32,
        span: 3600..3601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 152,
        column: 34,
        span: 3602..3603,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 152,
        column: 35,
        span: 3603..3604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 152,
        column: 43,
        span: 3604..3612,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 44,
        span: 3612..3613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 152,
        column: 45,
        span: 3613..3614,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 46,
        span: 3614..3615,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 152,
        column: 0,
        span: 3617..3620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 153,
        column: 7,
        span: 3621..3627,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 8,
        span: 3627..3628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 153,
        column: 14,
        span: 3628..3634,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 153,
        column: 15,
        span: 3634..3635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 153,
        column: 18,
        span: 3635..3638,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 19,
        span: 3638..3639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 153,
        column: 20,
        span: 3639..3640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 21,
        span: 3640..3641,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 153,
        column: 24,
        span: 3642..3644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 153,
        column: 26,
        span: 3645..3646,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 153,
        column: 27,
        span: 3646..3647,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "80",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 29,
        span: 3646..3649,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 30,
        span: 3649..3650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 154,
        column: 2,
        span: 3651..3652,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 154,
        column: 4,
        span: 3653..3654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 154,
        column: 11,
        span: 3655..3661,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 154,
        column: 12,
        span: 3661..3662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 154,
        column: 15,
        span: 3662..3665,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 16,
        span: 3665..3666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 154,
        column: 17,
        span: 3666..3667,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 18,
        span: 3667..3668,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 20,
        span: 3668..3670,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 21,
        span: 3670..3671,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 27,
        span: 3671..3677,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 28,
        span: 3677..3678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 155,
        column: 2,
        span: 3679..3680,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 3,
        span: 3680..3681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 155,
        column: 5,
        span: 3682..3683,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 155,
        column: 7,
        span: 3684..3685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 155,
        column: 14,
        span: 3686..3692,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 155,
        column: 15,
        span: 3692..3693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 155,
        column: 19,
        span: 3693..3697,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 20,
        span: 3697..3698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 155,
        column: 21,
        span: 3698..3699,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 22,
        span: 3699..3700,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(%d%d%d%d)'",
        ),
        line: 155,
        column: 35,
        span: 3701..3713,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 36,
        span: 3713..3714,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 155,
        column: 39,
        span: 3715..3717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 40,
        span: 3717..3718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 156,
        column: 7,
        span: 3719..3725,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 8,
        span: 3725..3726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 156,
        column: 9,
        span: 3726..3727,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 156,
        column: 11,
        span: 3727..3729,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 16,
        span: 3728..3734,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 156,
        column: 19,
        span: 3735..3737,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 21,
        span: 3737..3739,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 22,
        span: 3739..3740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 157,
        column: 2,
        span: 3741..3742,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 157,
        column: 4,
        span: 3743..3744,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 157,
        column: 0,
        span: 3745..3748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 158,
        column: 2,
        span: 3749..3750,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 158,
        column: 4,
        span: 3751..3752,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 158,
        column: 0,
        span: 3753..3756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 160,
        column: 7,
        span: 3758..3764,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 8,
        span: 3764..3765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 160,
        column: 10,
        span: 3765..3767,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 160,
        column: 11,
        span: 3767..3768,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"while\"",
        ),
        line: 160,
        column: 18,
        span: 3768..3775,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 160,
        column: 19,
        span: 3775..3776,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 160,
        column: 22,
        span: 3777..3779,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "234",
                    after_decimal: "",
                },
            ),
        ),
        line: 160,
        column: 26,
        span: 3779..3783,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 27,
        span: 3783..3784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 163,
        column: 6,
        span: 3787..3792,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 7,
        span: 3792..3793,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"steps\"",
        ),
        line: 163,
        column: 14,
        span: 3793..3800,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 15,
        span: 3800..3801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 165,
        column: 6,
        span: 3803..3808,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 7,
        span: 3808..3809,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"steps (2)\"",
        ),
        line: 165,
        column: 18,
        span: 3809..3820,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 19,
        span: 3820..3821,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 167,
        column: 6,
        span: 3823..3828,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 167,
        column: 15,
        span: 3829..3837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dosteps",
        ),
        line: 167,
        column: 23,
        span: 3838..3845,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 25,
        span: 3846..3847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "siz",
        ),
        line: 167,
        column: 28,
        span: 3847..3850,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 29,
        span: 3850..3851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 168,
        column: 9,
        span: 3854..3860,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 10,
        span: 3860..3861,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 168,
        column: 13,
        span: 3861..3864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 168,
        column: 28,
        span: 3865..3879,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 29,
        span: 3879..3880,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"isrunning\"",
        ),
        line: 168,
        column: 40,
        span: 3880..3891,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 41,
        span: 3891..3892,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 42,
        span: 3892..3893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 169,
        column: 17,
        span: 3896..3910,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 18,
        span: 3910..3911,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 19,
        span: 3911..3912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 170,
        column: 9,
        span: 3915..3921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 10,
        span: 3921..3922,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 170,
        column: 13,
        span: 3922..3925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 170,
        column: 28,
        span: 3926..3940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 29,
        span: 3940..3941,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"isrunning\"",
        ),
        line: 170,
        column: 40,
        span: 3941..3952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 41,
        span: 3952..3953,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 42,
        span: 3953..3954,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 171,
        column: 8,
        span: 3957..3962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 171,
        column: 10,
        span: 3963..3964,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 171,
        column: 12,
        span: 3965..3966,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 171,
        column: 14,
        span: 3967..3968,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 171,
        column: 15,
        span: 3968..3969,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 172,
        column: 6,
        span: 3972..3975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 172,
        column: 8,
        span: 3976..3977,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 172,
        column: 9,
        span: 3977..3978,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 172,
        column: 10,
        span: 3977..3979,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 172,
        column: 11,
        span: 3979..3980,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 172,
        column: 14,
        span: 3979..3983,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 172,
        column: 17,
        span: 3984..3986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 172,
        column: 19,
        span: 3987..3988,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 172,
        column: 20,
        span: 3988..3989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 172,
        column: 21,
        span: 3989..3990,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 172,
        column: 22,
        span: 3990..3991,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 172,
        column: 24,
        span: 3992..3993,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 172,
        column: 26,
        span: 3994..3995,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 172,
        column: 27,
        span: 3995..3996,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 172,
        column: 28,
        span: 3996..3997,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 172,
        column: 29,
        span: 3997..3998,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 172,
        column: 30,
        span: 3998..3999,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 172,
        column: 36,
        span: 4000..4005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 172,
        column: 38,
        span: 4006..4007,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 172,
        column: 40,
        span: 4008..4009,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 172,
        column: 42,
        span: 4010..4011,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 172,
        column: 43,
        span: 4011..4012,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 172,
        column: 0,
        span: 4013..4016,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 173,
        column: 8,
        span: 4019..4024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 173,
        column: 10,
        span: 4025..4026,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 173,
        column: 12,
        span: 4027..4028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcinfo",
        ),
        line: 173,
        column: 19,
        span: 4029..4035,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 20,
        span: 4035..4036,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 21,
        span: 4036..4037,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 174,
        column: 8,
        span: 4040..4045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 174,
        column: 10,
        span: 4046..4047,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 174,
        column: 12,
        span: 4048..4049,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 0,
        span: 4049..4051,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 175,
        column: 9,
        span: 4054..4060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 176,
        column: 6,
        span: 4117..4118,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 176,
        column: 8,
        span: 4119..4120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 176,
        column: 10,
        span: 4121..4122,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 176,
        column: 11,
        span: 4122..4123,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 0,
        span: 4122..4124,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 177,
        column: 8,
        span: 4127..4132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 177,
        column: 23,
        span: 4133..4147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 24,
        span: 4147..4148,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"step\"",
        ),
        line: 177,
        column: 30,
        span: 4148..4154,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 31,
        span: 4154..4155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "siz",
        ),
        line: 177,
        column: 35,
        span: 4156..4159,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 36,
        span: 4159..4160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 178,
        column: 9,
        span: 4163..4169,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 10,
        span: 4169..4170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcinfo",
        ),
        line: 178,
        column: 16,
        span: 4170..4176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 17,
        span: 4176..4177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 18,
        span: 4177..4178,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 178,
        column: 20,
        span: 4179..4180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 178,
        column: 22,
        span: 4181..4182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 23,
        span: 4182..4183,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 179,
        column: 9,
        span: 4186..4192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 179,
        column: 0,
        span: 4193..4194,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 180,
        column: 0,
        span: 4195..4198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 182,
        column: 15,
        span: 4200..4214,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 182,
        column: 21,
        span: 4214..4220,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 184,
        column: 3,
        span: 4222..4224,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 184,
        column: 7,
        span: 4225..4228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 184,
        column: 13,
        span: 4229..4234,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 184,
        column: 0,
        span: 4235..4239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 186,
        column: 9,
        span: 4305..4311,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 10,
        span: 4311..4312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dosteps",
        ),
        line: 186,
        column: 17,
        span: 4312..4319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 18,
        span: 4319..4320,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 19,
        span: 4319..4321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 20,
        span: 4321..4322,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 186,
        column: 22,
        span: 4323..4324,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 25,
        span: 4324..4327,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 26,
        span: 4327..4328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 187,
        column: 9,
        span: 4331..4337,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 10,
        span: 4337..4338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dosteps",
        ),
        line: 187,
        column: 17,
        span: 4338..4345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 18,
        span: 4345..4346,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 20,
        span: 4345..4348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 21,
        span: 4348..4349,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 187,
        column: 23,
        span: 4350..4351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dosteps",
        ),
        line: 187,
        column: 31,
        span: 4352..4359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 32,
        span: 4359..4360,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 33,
        span: 4359..4361,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 34,
        span: 4361..4362,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 35,
        span: 4362..4363,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 188,
        column: 0,
        span: 4364..4367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 191,
        column: 7,
        span: 4429..4435,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 8,
        span: 4435..4436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dosteps",
        ),
        line: 191,
        column: 15,
        span: 4436..4443,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 16,
        span: 4443..4444,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20000",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 21,
        span: 4443..4449,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 22,
        span: 4449..4450,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 191,
        column: 25,
        span: 4451..4453,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 27,
        span: 4453..4455,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 28,
        span: 4455..4456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 192,
        column: 7,
        span: 4457..4463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 8,
        span: 4463..4464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 192,
        column: 22,
        span: 4464..4478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 23,
        span: 4478..4479,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"step\"",
        ),
        line: 192,
        column: 29,
        span: 4479..4485,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 30,
        span: 4485..4486,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20000",
                    after_decimal: "",
                },
            ),
        ),
        line: 192,
        column: 36,
        span: 4486..4492,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 37,
        span: 4492..4493,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 192,
        column: 40,
        span: 4494..4496,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 192,
        column: 45,
        span: 4497..4501,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 46,
        span: 4501..4502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 193,
        column: 7,
        span: 4503..4509,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 8,
        span: 4509..4510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 193,
        column: 22,
        span: 4510..4524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 23,
        span: 4524..4525,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"step\"",
        ),
        line: 193,
        column: 29,
        span: 4525..4531,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
        column: 30,
        span: 4531..4532,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20000",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 36,
        span: 4532..4538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 37,
        span: 4538..4539,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 193,
        column: 40,
        span: 4540..4542,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 193,
        column: 45,
        span: 4543..4547,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 46,
        span: 4547..4548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 195,
        column: 7,
        span: 4550..4556,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 8,
        span: 4556..4557,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 195,
        column: 11,
        span: 4557..4560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 195,
        column: 26,
        span: 4561..4575,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 27,
        span: 4575..4576,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"isrunning\"",
        ),
        line: 195,
        column: 38,
        span: 4576..4587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 39,
        span: 4587..4588,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 40,
        span: 4588..4589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 196,
        column: 15,
        span: 4590..4604,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        line: 196,
        column: 24,
        span: 4604..4613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 197,
        column: 7,
        span: 4614..4620,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 8,
        span: 4620..4621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 197,
        column: 22,
        span: 4621..4635,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 23,
        span: 4635..4636,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"isrunning\"",
        ),
        line: 197,
        column: 34,
        span: 4636..4647,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 35,
        span: 4647..4648,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 36,
        span: 4648..4649,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 200,
        column: 3,
        span: 4652..4654,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 200,
        column: 7,
        span: 4655..4658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 200,
        column: 13,
        span: 4659..4664,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 200,
        column: 0,
        span: 4665..4669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 202,
        column: 17,
        span: 4708..4722,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 18,
        span: 4722..4723,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 19,
        span: 4723..4724,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 202,
        column: 20,
        span: 4724..4725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 202,
        column: 35,
        span: 4726..4740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 36,
        span: 4740..4741,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 37,
        span: 4741..4742,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 203,
        column: 8,
        span: 4745..4750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 203,
        column: 10,
        span: 4751..4752,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 203,
        column: 12,
        span: 4753..4754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcinfo",
        ),
        line: 203,
        column: 19,
        span: 4755..4761,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 20,
        span: 4761..4762,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 21,
        span: 4762..4763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 204,
        column: 17,
        span: 4766..4780,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 204,
        column: 23,
        span: 4780..4786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 205,
        column: 9,
        span: 4789..4795,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 10,
        span: 4795..4796,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 205,
        column: 13,
        span: 4796..4799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 205,
        column: 28,
        span: 4800..4814,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 29,
        span: 4814..4815,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"isrunning\"",
        ),
        line: 205,
        column: 40,
        span: 4815..4826,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 41,
        span: 4826..4827,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 42,
        span: 4827..4828,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 206,
        column: 0,
        span: 4831..4837,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 207,
        column: 10,
        span: 4842..4847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 207,
        column: 12,
        span: 4848..4849,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 207,
        column: 14,
        span: 4850..4851,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 207,
        column: 16,
        span: 4852..4853,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 207,
        column: 17,
        span: 4853..4854,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 208,
        column: 8,
        span: 4857..4862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcinfo",
        ),
        line: 208,
        column: 15,
        span: 4863..4869,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 16,
        span: 4869..4870,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 17,
        span: 4870..4871,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 208,
        column: 19,
        span: 4872..4873,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 21,
        span: 4873..4875,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 208,
        column: 23,
        span: 4876..4877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 208,
        column: 0,
        span: 4878..4879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 209,
        column: 17,
        span: 4882..4896,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        line: 209,
        column: 26,
        span: 4896..4905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 210,
        column: 9,
        span: 4908..4914,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 10,
        span: 4914..4915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 210,
        column: 24,
        span: 4915..4929,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 25,
        span: 4929..4930,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"isrunning\"",
        ),
        line: 210,
        column: 36,
        span: 4930..4941,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 37,
        span: 4941..4942,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 38,
        span: 4942..4943,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 211,
        column: 0,
        span: 4946..4952,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 212,
        column: 10,
        span: 4957..4962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 212,
        column: 12,
        span: 4963..4964,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 212,
        column: 14,
        span: 4965..4966,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 212,
        column: 16,
        span: 4967..4968,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 212,
        column: 17,
        span: 4968..4969,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 213,
        column: 8,
        span: 4972..4977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcinfo",
        ),
        line: 213,
        column: 15,
        span: 4978..4984,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 16,
        span: 4984..4985,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 17,
        span: 4985..4986,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 213,
        column: 20,
        span: 4987..4989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 213,
        column: 22,
        span: 4990..4991,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 213,
        column: 24,
        span: 4992..4993,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 213,
        column: 0,
        span: 4993..4995,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 214,
        column: 0,
        span: 4996..4999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 217,
        column: 6,
        span: 5002..5007,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 7,
        span: 5007..5008,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"clearing tables\"",
        ),
        line: 217,
        column: 24,
        span: 5008..5025,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 25,
        span: 5025..5026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 218,
        column: 4,
        span: 5027..5030,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 218,
        column: 6,
        span: 5031..5032,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 218,
        column: 0,
        span: 5032..5035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 219,
        column: 2,
        span: 5036..5037,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 219,
        column: 4,
        span: 5038..5039,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 219,
        column: 6,
        span: 5040..5041,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 219,
        column: 7,
        span: 5041..5042,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 221,
        column: 4,
        span: 5080..5083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 221,
        column: 6,
        span: 5084..5085,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 221,
        column: 7,
        span: 5085..5086,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
        column: 8,
        span: 5085..5087,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 221,
        column: 9,
        span: 5087..5088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 221,
        column: 12,
        span: 5088..5091,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 221,
        column: 15,
        span: 5092..5094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 221,
        column: 17,
        span: 5095..5096,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 221,
        column: 18,
        span: 5096..5097,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 221,
        column: 19,
        span: 5097..5098,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 221,
        column: 20,
        span: 5098..5099,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 221,
        column: 21,
        span: 5099..5100,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 221,
        column: 23,
        span: 5101..5102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 221,
        column: 25,
        span: 5103..5104,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 221,
        column: 0,
        span: 5105..5108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 222,
        column: 2,
        span: 5109..5110,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 222,
        column: 4,
        span: 5111..5112,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 222,
        column: 6,
        span: 5113..5114,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 222,
        column: 7,
        span: 5114..5115,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 223,
        column: 4,
        span: 5116..5119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 223,
        column: 6,
        span: 5120..5121,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 7,
        span: 5121..5122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 223,
        column: 8,
        span: 5122..5123,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 223,
        column: 11,
        span: 5124..5126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 223,
        column: 17,
        span: 5127..5132,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 18,
        span: 5132..5133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 223,
        column: 19,
        span: 5133..5134,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 20,
        span: 5134..5135,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 223,
        column: 23,
        span: 5136..5138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 223,
        column: 25,
        span: 5139..5140,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 223,
        column: 26,
        span: 5140..5141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 223,
        column: 27,
        span: 5141..5142,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 223,
        column: 28,
        span: 5142..5143,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 223,
        column: 29,
        span: 5143..5144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 223,
        column: 30,
        span: 5144..5145,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 223,
        column: 0,
        span: 5146..5149,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 225,
        column: 4,
        span: 5189..5192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 225,
        column: 6,
        span: 5193..5194,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 225,
        column: 9,
        span: 5195..5197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 225,
        column: 15,
        span: 5198..5203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 16,
        span: 5203..5204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 225,
        column: 17,
        span: 5204..5205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 18,
        span: 5205..5206,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 225,
        column: 0,
        span: 5207..5209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 226,
        column: 4,
        span: 5212..5213,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 226,
        column: 5,
        span: 5213..5214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 226,
        column: 6,
        span: 5214..5215,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 226,
        column: 7,
        span: 5215..5216,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 226,
        column: 9,
        span: 5217..5218,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 226,
        column: 0,
        span: 5219..5222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 227,
        column: 9,
        span: 5225..5231,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 10,
        span: 5231..5232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 227,
        column: 14,
        span: 5232..5236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 15,
        span: 5236..5237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 227,
        column: 16,
        span: 5237..5238,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 17,
        span: 5238..5239,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 227,
        column: 20,
        span: 5240..5242,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 227,
        column: 28,
        span: 5243..5250,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 227,
        column: 32,
        span: 5251..5254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 227,
        column: 37,
        span: 5255..5259,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 38,
        span: 5259..5260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 227,
        column: 39,
        span: 5260..5261,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 40,
        span: 5261..5262,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 227,
        column: 43,
        span: 5263..5265,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 227,
        column: 47,
        span: 5266..5269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 48,
        span: 5269..5270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 228,
        column: 17,
        span: 5273..5287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 18,
        span: 5287..5288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 19,
        span: 5288..5289,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 229,
        column: 0,
        span: 5290..5293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 230,
        column: 2,
        span: 5294..5295,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 230,
        column: 4,
        span: 5296..5297,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 230,
        column: 0,
        span: 5298..5301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 231,
        column: 15,
        span: 5302..5316,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 16,
        span: 5316..5317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 17,
        span: 5317..5318,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 232,
        column: 4,
        span: 5319..5322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 232,
        column: 6,
        span: 5323..5324,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 232,
        column: 9,
        span: 5325..5327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 232,
        column: 15,
        span: 5328..5333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
        column: 16,
        span: 5333..5334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 232,
        column: 17,
        span: 5334..5335,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
        column: 18,
        span: 5335..5336,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 232,
        column: 21,
        span: 5337..5339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 232,
        column: 27,
        span: 5340..5345,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'cannot be here'",
        ),
        line: 232,
        column: 43,
        span: 5345..5361,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 232,
        column: 0,
        span: 5362..5365,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 233,
        column: 4,
        span: 5366..5369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 233,
        column: 6,
        span: 5370..5371,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 233,
        column: 7,
        span: 5371..5372,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 8,
        span: 5371..5373,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 9,
        span: 5373..5374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 233,
        column: 12,
        span: 5374..5377,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 233,
        column: 15,
        span: 5378..5380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 233,
        column: 17,
        span: 5381..5382,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 233,
        column: 18,
        span: 5382..5383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 233,
        column: 19,
        span: 5383..5384,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 233,
        column: 20,
        span: 5384..5385,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 233,
        column: 22,
        span: 5386..5387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 233,
        column: 24,
        span: 5388..5389,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 233,
        column: 0,
        span: 5390..5393,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 234,
        column: 4,
        span: 5394..5397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 234,
        column: 6,
        span: 5398..5399,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 234,
        column: 7,
        span: 5399..5400,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 234,
        column: 8,
        span: 5399..5401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 234,
        column: 9,
        span: 5401..5402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 234,
        column: 12,
        span: 5402..5405,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 234,
        column: 15,
        span: 5406..5408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 234,
        column: 22,
        span: 5409..5415,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 23,
        span: 5415..5416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 234,
        column: 24,
        span: 5416..5417,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 234,
        column: 25,
        span: 5417..5418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 234,
        column: 26,
        span: 5418..5419,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 234,
        column: 27,
        span: 5419..5420,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 234,
        column: 30,
        span: 5421..5423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 234,
        column: 32,
        span: 5424..5425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 33,
        span: 5425..5426,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 234,
        column: 0,
        span: 5427..5430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 237,
        column: 6,
        span: 5433..5438,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 7,
        span: 5438..5439,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'weak tables'",
        ),
        line: 237,
        column: 20,
        span: 5439..5452,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 21,
        span: 5452..5453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 238,
        column: 2,
        span: 5454..5455,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 238,
        column: 4,
        span: 5456..5457,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 238,
        column: 6,
        span: 5458..5459,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 238,
        column: 7,
        span: 5459..5460,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 238,
        column: 8,
        span: 5460..5461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 238,
        column: 21,
        span: 5462..5474,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 22,
        span: 5474..5475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 238,
        column: 23,
        span: 5475..5476,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 238,
        column: 24,
        span: 5476..5477,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 238,
        column: 26,
        span: 5478..5479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 238,
        column: 32,
        span: 5479..5485,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 238,
        column: 34,
        span: 5486..5487,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'k'",
        ),
        line: 238,
        column: 38,
        span: 5488..5491,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 238,
        column: 39,
        span: 5491..5492,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 40,
        span: 5492..5493,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 238,
        column: 41,
        span: 5493..5494,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 240,
        column: 4,
        span: 5537..5540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 240,
        column: 6,
        span: 5541..5542,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 240,
        column: 7,
        span: 5542..5543,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 240,
        column: 8,
        span: 5542..5544,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 240,
        column: 9,
        span: 5544..5545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 240,
        column: 12,
        span: 5545..5548,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 240,
        column: 15,
        span: 5549..5551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 240,
        column: 17,
        span: 5552..5553,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 240,
        column: 18,
        span: 5553..5554,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 240,
        column: 19,
        span: 5554..5555,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 240,
        column: 20,
        span: 5555..5556,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 240,
        column: 21,
        span: 5556..5557,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 240,
        column: 23,
        span: 5558..5559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 240,
        column: 25,
        span: 5560..5561,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 240,
        column: 0,
        span: 5562..5565,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 242,
        column: 4,
        span: 5599..5602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 242,
        column: 6,
        span: 5603..5604,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 242,
        column: 7,
        span: 5604..5605,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 242,
        column: 8,
        span: 5604..5606,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 9,
        span: 5606..5607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 242,
        column: 12,
        span: 5607..5610,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 242,
        column: 15,
        span: 5611..5613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 242,
        column: 17,
        span: 5614..5615,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 242,
        column: 18,
        span: 5615..5616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 242,
        column: 19,
        span: 5616..5617,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 242,
        column: 20,
        span: 5617..5618,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 242,
        column: 22,
        span: 5619..5620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 242,
        column: 24,
        span: 5621..5622,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 242,
        column: 0,
        span: 5623..5626,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 243,
        column: 4,
        span: 5627..5630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 243,
        column: 6,
        span: 5631..5632,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 243,
        column: 7,
        span: 5632..5633,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 243,
        column: 8,
        span: 5632..5634,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
        column: 9,
        span: 5634..5635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 243,
        column: 12,
        span: 5635..5638,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 243,
        column: 15,
        span: 5639..5641,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 243,
        column: 21,
        span: 5642..5647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 243,
        column: 23,
        span: 5648..5649,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 243,
        column: 24,
        span: 5649..5650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 243,
        column: 30,
        span: 5650..5656,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 243,
        column: 31,
        span: 5656..5657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 243,
        column: 34,
        span: 5657..5660,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 35,
        span: 5660..5661,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'@'",
        ),
        line: 243,
        column: 38,
        span: 5661..5664,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
        column: 39,
        span: 5664..5665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 243,
        column: 41,
        span: 5666..5667,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 42,
        span: 5667..5668,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 243,
        column: 43,
        span: 5668..5669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 243,
        column: 45,
        span: 5670..5671,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 243,
        column: 46,
        span: 5671..5672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 243,
        column: 47,
        span: 5672..5673,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 243,
        column: 48,
        span: 5673..5674,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 243,
        column: 50,
        span: 5675..5676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 243,
        column: 52,
        span: 5677..5678,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 243,
        column: 54,
        span: 5678..5680,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'#'",
        ),
        line: 243,
        column: 57,
        span: 5680..5683,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 243,
        column: 0,
        span: 5684..5687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 244,
        column: 15,
        span: 5688..5702,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
        column: 16,
        span: 5702..5703,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 17,
        span: 5703..5704,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 245,
        column: 6,
        span: 5705..5710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 245,
        column: 8,
        span: 5711..5712,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 245,
        column: 10,
        span: 5713..5714,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
        column: 0,
        span: 5714..5716,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 246,
        column: 4,
        span: 5717..5720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 246,
        column: 6,
        span: 5721..5722,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 7,
        span: 5722..5723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 246,
        column: 8,
        span: 5723..5724,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 246,
        column: 11,
        span: 5725..5727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 246,
        column: 17,
        span: 5728..5733,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 18,
        span: 5733..5734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 246,
        column: 19,
        span: 5734..5735,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 20,
        span: 5735..5736,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 246,
        column: 23,
        span: 5737..5739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 246,
        column: 30,
        span: 5740..5746,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 31,
        span: 5746..5747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 246,
        column: 32,
        span: 5747..5748,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 246,
        column: 34,
        span: 5748..5750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 246,
        column: 35,
        span: 5750..5751,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 246,
        column: 38,
        span: 5752..5754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 246,
        column: 40,
        span: 5755..5756,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 246,
        column: 42,
        span: 5756..5758,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'#'",
        ),
        line: 246,
        column: 45,
        span: 5758..5761,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 246,
        column: 47,
        span: 5761..5763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 246,
        column: 48,
        span: 5763..5764,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 49,
        span: 5764..5765,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 246,
        column: 50,
        span: 5765..5766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 246,
        column: 52,
        span: 5767..5768,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 246,
        column: 53,
        span: 5768..5769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 246,
        column: 54,
        span: 5769..5770,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 246,
        column: 55,
        span: 5770..5771,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 246,
        column: 56,
        span: 5770..5772,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 246,
        column: 0,
        span: 5773..5776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 247,
        column: 7,
        span: 5777..5783,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 8,
        span: 5783..5784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 247,
        column: 9,
        span: 5784..5785,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 247,
        column: 12,
        span: 5786..5788,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 247,
        column: 14,
        span: 5788..5790,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 247,
        column: 15,
        span: 5790..5791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 247,
        column: 18,
        span: 5791..5794,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 19,
        span: 5794..5795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 249,
        column: 2,
        span: 5797..5798,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 249,
        column: 4,
        span: 5799..5800,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 249,
        column: 6,
        span: 5801..5802,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 249,
        column: 7,
        span: 5802..5803,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 249,
        column: 8,
        span: 5803..5804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 249,
        column: 21,
        span: 5805..5817,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 22,
        span: 5817..5818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 249,
        column: 23,
        span: 5818..5819,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 24,
        span: 5819..5820,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 249,
        column: 26,
        span: 5821..5822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 249,
        column: 32,
        span: 5822..5828,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 249,
        column: 34,
        span: 5829..5830,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'v'",
        ),
        line: 249,
        column: 38,
        span: 5831..5834,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 249,
        column: 39,
        span: 5834..5835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 40,
        span: 5835..5836,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 249,
        column: 41,
        span: 5836..5837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 250,
        column: 2,
        span: 5838..5839,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 250,
        column: 3,
        span: 5839..5840,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 250,
        column: 4,
        span: 5839..5841,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 250,
        column: 5,
        span: 5841..5842,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 250,
        column: 7,
        span: 5843..5844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 250,
        column: 14,
        span: 5845..5851,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 250,
        column: 15,
        span: 5851..5852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 250,
        column: 18,
        span: 5852..5855,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 19,
        span: 5855..5856,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 250,
        column: 22,
        span: 5856..5859,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 250,
        column: 23,
        span: 5859..5860,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "21",
                    after_decimal: "",
                },
            ),
        ),
        line: 250,
        column: 26,
        span: 5860..5863,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 27,
        span: 5863..5864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 251,
        column: 15,
        span: 5865..5879,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 16,
        span: 5879..5880,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 17,
        span: 5880..5881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 252,
        column: 7,
        span: 5882..5888,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 8,
        span: 5888..5889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 252,
        column: 9,
        span: 5889..5890,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 252,
        column: 10,
        span: 5890..5891,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 252,
        column: 11,
        span: 5890..5892,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 252,
        column: 12,
        span: 5892..5893,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 13,
        span: 5893..5894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 253,
        column: 2,
        span: 5921..5922,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 253,
        column: 3,
        span: 5922..5923,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 4,
        span: 5922..5924,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 253,
        column: 5,
        span: 5924..5925,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 253,
        column: 7,
        span: 5926..5927,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 253,
        column: 0,
        span: 5928..5931,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 255,
        column: 4,
        span: 6002..6005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 255,
        column: 6,
        span: 6006..6007,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 255,
        column: 7,
        span: 6007..6008,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 255,
        column: 8,
        span: 6007..6009,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 9,
        span: 6009..6010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 255,
        column: 12,
        span: 6010..6013,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 255,
        column: 15,
        span: 6014..6016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 255,
        column: 17,
        span: 6017..6018,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 255,
        column: 18,
        span: 6018..6019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 255,
        column: 19,
        span: 6019..6020,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 255,
        column: 20,
        span: 6020..6021,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 255,
        column: 22,
        span: 6022..6023,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 255,
        column: 24,
        span: 6024..6025,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 255,
        column: 25,
        span: 6025..6026,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 255,
        column: 0,
        span: 6027..6030,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 256,
        column: 4,
        span: 6031..6034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 256,
        column: 6,
        span: 6035..6036,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 256,
        column: 7,
        span: 6036..6037,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 256,
        column: 8,
        span: 6036..6038,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 9,
        span: 6038..6039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 256,
        column: 12,
        span: 6039..6042,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 256,
        column: 15,
        span: 6043..6045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 256,
        column: 17,
        span: 6046..6047,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 256,
        column: 18,
        span: 6047..6048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 256,
        column: 19,
        span: 6048..6049,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 256,
        column: 21,
        span: 6049..6051,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 256,
        column: 24,
        span: 6051..6054,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 256,
        column: 25,
        span: 6054..6055,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 256,
        column: 27,
        span: 6056..6057,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 256,
        column: 29,
        span: 6058..6059,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 256,
        column: 30,
        span: 6059..6060,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 256,
        column: 0,
        span: 6061..6064,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 258,
        column: 4,
        span: 6098..6101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 258,
        column: 6,
        span: 6102..6103,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 258,
        column: 7,
        span: 6103..6104,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 8,
        span: 6103..6105,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 9,
        span: 6105..6106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 258,
        column: 12,
        span: 6106..6109,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 258,
        column: 15,
        span: 6110..6112,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 258,
        column: 21,
        span: 6113..6118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 258,
        column: 23,
        span: 6119..6120,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 258,
        column: 24,
        span: 6120..6121,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 258,
        column: 25,
        span: 6121..6122,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 258,
        column: 26,
        span: 6122..6123,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 258,
        column: 27,
        span: 6123..6124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 258,
        column: 29,
        span: 6125..6126,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 258,
        column: 30,
        span: 6126..6127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 258,
        column: 31,
        span: 6127..6128,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 258,
        column: 32,
        span: 6128..6129,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 258,
        column: 33,
        span: 6129..6130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 258,
        column: 34,
        span: 6130..6131,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 258,
        column: 0,
        span: 6132..6135,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 259,
        column: 4,
        span: 6136..6139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 259,
        column: 6,
        span: 6140..6141,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 259,
        column: 7,
        span: 6141..6142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 8,
        span: 6141..6143,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 9,
        span: 6143..6144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 259,
        column: 12,
        span: 6144..6147,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 259,
        column: 15,
        span: 6148..6150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 259,
        column: 17,
        span: 6151..6152,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 259,
        column: 18,
        span: 6152..6153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 259,
        column: 19,
        span: 6153..6154,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 259,
        column: 20,
        span: 6154..6155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 259,
        column: 23,
        span: 6155..6158,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 259,
        column: 24,
        span: 6158..6159,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 259,
        column: 25,
        span: 6159..6160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 259,
        column: 26,
        span: 6160..6161,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 259,
        column: 28,
        span: 6161..6163,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 259,
        column: 31,
        span: 6163..6166,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 259,
        column: 0,
        span: 6167..6170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 260,
        column: 15,
        span: 6171..6185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
        column: 16,
        span: 6185..6186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
        column: 17,
        span: 6186..6187,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 261,
        column: 6,
        span: 6188..6193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 261,
        column: 8,
        span: 6194..6195,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 261,
        column: 10,
        span: 6196..6197,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 261,
        column: 0,
        span: 6197..6199,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 262,
        column: 4,
        span: 6200..6203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 262,
        column: 6,
        span: 6204..6205,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
        column: 7,
        span: 6205..6206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 262,
        column: 8,
        span: 6206..6207,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 262,
        column: 11,
        span: 6208..6210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 262,
        column: 17,
        span: 6211..6216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 18,
        span: 6216..6217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 262,
        column: 19,
        span: 6217..6218,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 20,
        span: 6218..6219,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 262,
        column: 23,
        span: 6220..6222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 262,
        column: 30,
        span: 6223..6229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 31,
        span: 6229..6230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 262,
        column: 32,
        span: 6230..6231,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 262,
        column: 34,
        span: 6231..6233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 262,
        column: 35,
        span: 6233..6234,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 262,
        column: 38,
        span: 6235..6237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 262,
        column: 40,
        span: 6238..6239,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 262,
        column: 41,
        span: 6239..6240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 262,
        column: 44,
        span: 6240..6243,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 262,
        column: 46,
        span: 6243..6245,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 262,
        column: 49,
        span: 6245..6248,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 262,
        column: 52,
        span: 6249..6251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 262,
        column: 54,
        span: 6252..6253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 55,
        span: 6253..6254,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 262,
        column: 56,
        span: 6254..6255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 262,
        column: 58,
        span: 6256..6257,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 262,
        column: 59,
        span: 6257..6258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 262,
        column: 60,
        span: 6258..6259,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 262,
        column: 61,
        span: 6259..6260,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
        column: 62,
        span: 6259..6261,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 262,
        column: 0,
        span: 6262..6265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 263,
        column: 7,
        span: 6266..6272,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 8,
        span: 6272..6273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 263,
        column: 9,
        span: 6273..6274,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 263,
        column: 12,
        span: 6275..6277,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 263,
        column: 14,
        span: 6277..6279,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 263,
        column: 15,
        span: 6279..6280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 263,
        column: 18,
        span: 6280..6283,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 19,
        span: 6283..6284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 265,
        column: 2,
        span: 6286..6287,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 265,
        column: 4,
        span: 6288..6289,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 265,
        column: 6,
        span: 6290..6291,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 265,
        column: 7,
        span: 6291..6292,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 265,
        column: 8,
        span: 6292..6293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 265,
        column: 21,
        span: 6294..6306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 22,
        span: 6306..6307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 265,
        column: 23,
        span: 6307..6308,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 265,
        column: 24,
        span: 6308..6309,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 265,
        column: 26,
        span: 6310..6311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 265,
        column: 32,
        span: 6311..6317,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 265,
        column: 34,
        span: 6318..6319,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'vk'",
        ),
        line: 265,
        column: 39,
        span: 6320..6324,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 265,
        column: 40,
        span: 6324..6325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 41,
        span: 6325..6326,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 265,
        column: 42,
        span: 6326..6327,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 266,
        column: 6,
        span: 6328..6333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 266,
        column: 8,
        span: 6334..6335,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 266,
        column: 9,
        span: 6335..6336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 266,
        column: 11,
        span: 6337..6338,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 266,
        column: 12,
        span: 6338..6339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 266,
        column: 14,
        span: 6340..6341,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 266,
        column: 16,
        span: 6342..6343,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 266,
        column: 18,
        span: 6344..6345,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 266,
        column: 19,
        span: 6345..6346,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 266,
        column: 20,
        span: 6346..6347,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 266,
        column: 22,
        span: 6348..6349,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 266,
        column: 23,
        span: 6349..6350,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 266,
        column: 24,
        span: 6350..6351,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 266,
        column: 26,
        span: 6352..6353,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 266,
        column: 27,
        span: 6353..6354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 268,
        column: 2,
        span: 6379..6380,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 268,
        column: 3,
        span: 6380..6381,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 268,
        column: 4,
        span: 6380..6382,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 268,
        column: 5,
        span: 6382..6383,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
        column: 6,
        span: 6383..6384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 268,
        column: 8,
        span: 6385..6386,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 268,
        column: 9,
        span: 6386..6387,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 268,
        column: 10,
        span: 6386..6388,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 268,
        column: 11,
        span: 6388..6389,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
        column: 12,
        span: 6389..6390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 268,
        column: 14,
        span: 6391..6392,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 268,
        column: 15,
        span: 6392..6393,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 268,
        column: 16,
        span: 6392..6394,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 268,
        column: 17,
        span: 6394..6395,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 268,
        column: 19,
        span: 6396..6397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 268,
        column: 21,
        span: 6398..6399,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
        column: 22,
        span: 6399..6400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 268,
        column: 24,
        span: 6401..6402,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
        column: 25,
        span: 6402..6403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 268,
        column: 0,
        span: 6404..6405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 269,
        column: 2,
        span: 6406..6407,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 269,
        column: 3,
        span: 6407..6408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 269,
        column: 9,
        span: 6408..6414,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 269,
        column: 10,
        span: 6414..6415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 269,
        column: 13,
        span: 6415..6418,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 14,
        span: 6418..6419,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$'",
        ),
        line: 269,
        column: 17,
        span: 6419..6422,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 18,
        span: 6422..6423,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
        column: 21,
        span: 6423..6426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 22,
        span: 6426..6427,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 269,
        column: 23,
        span: 6427..6428,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 269,
        column: 25,
        span: 6429..6430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 269,
        column: 32,
        span: 6431..6437,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 269,
        column: 33,
        span: 6437..6438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 269,
        column: 36,
        span: 6438..6441,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 37,
        span: 6441..6442,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$'",
        ),
        line: 269,
        column: 40,
        span: 6442..6445,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 41,
        span: 6445..6446,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
        column: 44,
        span: 6446..6449,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 45,
        span: 6449..6450,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 271,
        column: 4,
        span: 6492..6495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 271,
        column: 6,
        span: 6496..6497,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 271,
        column: 7,
        span: 6497..6498,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 271,
        column: 8,
        span: 6497..6499,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 271,
        column: 9,
        span: 6499..6500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 271,
        column: 12,
        span: 6500..6503,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 271,
        column: 15,
        span: 6504..6506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 271,
        column: 17,
        span: 6507..6508,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 271,
        column: 18,
        span: 6508..6509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 271,
        column: 19,
        span: 6509..6510,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 271,
        column: 20,
        span: 6510..6511,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 271,
        column: 22,
        span: 6512..6513,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 271,
        column: 24,
        span: 6514..6515,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 271,
        column: 25,
        span: 6515..6516,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 271,
        column: 0,
        span: 6517..6520,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 272,
        column: 4,
        span: 6521..6524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 272,
        column: 6,
        span: 6525..6526,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 272,
        column: 7,
        span: 6526..6527,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 272,
        column: 8,
        span: 6526..6528,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 272,
        column: 9,
        span: 6528..6529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 272,
        column: 12,
        span: 6529..6532,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 272,
        column: 15,
        span: 6533..6535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 272,
        column: 17,
        span: 6536..6537,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 272,
        column: 18,
        span: 6537..6538,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 272,
        column: 19,
        span: 6538..6539,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 272,
        column: 20,
        span: 6539..6540,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 272,
        column: 21,
        span: 6540..6541,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 272,
        column: 23,
        span: 6542..6543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 272,
        column: 25,
        span: 6544..6545,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 272,
        column: 0,
        span: 6546..6549,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 273,
        column: 4,
        span: 6550..6553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 273,
        column: 6,
        span: 6554..6555,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 273,
        column: 7,
        span: 6555..6556,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 273,
        column: 8,
        span: 6555..6557,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 273,
        column: 9,
        span: 6557..6558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 273,
        column: 12,
        span: 6558..6561,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 273,
        column: 15,
        span: 6562..6564,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 273,
        column: 21,
        span: 6565..6570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 273,
        column: 23,
        span: 6571..6572,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 273,
        column: 24,
        span: 6572..6573,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 273,
        column: 25,
        span: 6573..6574,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 273,
        column: 26,
        span: 6574..6575,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 273,
        column: 27,
        span: 6575..6576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 273,
        column: 29,
        span: 6577..6578,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 273,
        column: 30,
        span: 6578..6579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 273,
        column: 31,
        span: 6579..6580,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 273,
        column: 32,
        span: 6580..6581,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 273,
        column: 33,
        span: 6581..6582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 273,
        column: 34,
        span: 6582..6583,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 273,
        column: 0,
        span: 6584..6587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 274,
        column: 15,
        span: 6588..6602,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 16,
        span: 6602..6603,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 17,
        span: 6603..6604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 275,
        column: 7,
        span: 6605..6611,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 8,
        span: 6611..6612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 275,
        column: 12,
        span: 6612..6616,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 13,
        span: 6616..6617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 275,
        column: 14,
        span: 6617..6618,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 15,
        span: 6618..6619,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 275,
        column: 18,
        span: 6620..6622,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 275,
        column: 22,
        span: 6623..6626,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 23,
        span: 6626..6627,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 276,
        column: 6,
        span: 6628..6633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 276,
        column: 8,
        span: 6634..6635,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 276,
        column: 10,
        span: 6636..6637,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
        column: 0,
        span: 6637..6639,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 277,
        column: 4,
        span: 6640..6643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 277,
        column: 6,
        span: 6644..6645,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 7,
        span: 6645..6646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 277,
        column: 8,
        span: 6646..6647,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 277,
        column: 11,
        span: 6648..6650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 277,
        column: 17,
        span: 6651..6656,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 18,
        span: 6656..6657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 277,
        column: 19,
        span: 6657..6658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 20,
        span: 6658..6659,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 277,
        column: 0,
        span: 6660..6662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 278,
        column: 9,
        span: 6665..6671,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 10,
        span: 6671..6672,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 11,
        span: 6672..6673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 278,
        column: 12,
        span: 6673..6674,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 278,
        column: 15,
        span: 6675..6677,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 278,
        column: 17,
        span: 6677..6679,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 278,
        column: 21,
        span: 6680..6683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 278,
        column: 23,
        span: 6684..6685,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 278,
        column: 26,
        span: 6686..6688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 278,
        column: 28,
        span: 6689..6690,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 29,
        span: 6690..6691,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 278,
        column: 0,
        span: 6692..6694,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 11,
        span: 6704..6705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 279,
        column: 12,
        span: 6705..6706,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 279,
        column: 15,
        span: 6707..6709,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 279,
        column: 17,
        span: 6709..6711,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 279,
        column: 21,
        span: 6712..6715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 279,
        column: 23,
        span: 6716..6717,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 279,
        column: 26,
        span: 6718..6720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 279,
        column: 28,
        span: 6721..6722,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 29,
        span: 6722..6723,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 279,
        column: 0,
        span: 6724..6726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 11,
        span: 6736..6737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 280,
        column: 12,
        span: 6737..6738,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 280,
        column: 15,
        span: 6739..6741,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 280,
        column: 17,
        span: 6741..6743,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 280,
        column: 21,
        span: 6744..6747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 280,
        column: 23,
        span: 6748..6749,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 280,
        column: 26,
        span: 6750..6752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 280,
        column: 28,
        span: 6753..6754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
        column: 29,
        span: 6754..6755,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 280,
        column: 32,
        span: 6756..6758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 280,
        column: 34,
        span: 6759..6760,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 280,
        column: 36,
        span: 6760..6762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 280,
        column: 37,
        span: 6762..6763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
        column: 38,
        span: 6763..6764,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 280,
        column: 39,
        span: 6764..6765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 281,
        column: 4,
        span: 6768..6769,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 281,
        column: 6,
        span: 6770..6771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 281,
        column: 8,
        span: 6772..6773,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 281,
        column: 9,
        span: 6773..6774,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 281,
        column: 0,
        span: 6773..6775,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 282,
        column: 0,
        span: 6776..6779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 283,
        column: 7,
        span: 6780..6786,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
        column: 8,
        span: 6786..6787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 283,
        column: 9,
        span: 6787..6788,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 283,
        column: 12,
        span: 6789..6791,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 283,
        column: 14,
        span: 6791..6793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
        column: 15,
        span: 6793..6794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 284,
        column: 2,
        span: 6795..6796,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 284,
        column: 3,
        span: 6796..6797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 284,
        column: 4,
        span: 6797..6798,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 284,
        column: 5,
        span: 6798..6799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 284,
        column: 6,
        span: 6799..6800,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 284,
        column: 7,
        span: 6800..6801,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 284,
        column: 0,
        span: 6801..6804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 285,
        column: 15,
        span: 6805..6819,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 285,
        column: 16,
        span: 6819..6820,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 285,
        column: 17,
        span: 6820..6821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 286,
        column: 7,
        span: 6822..6828,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 8,
        span: 6828..6829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 286,
        column: 12,
        span: 6829..6833,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 13,
        span: 6833..6834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 286,
        column: 14,
        span: 6834..6835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 15,
        span: 6835..6836,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 286,
        column: 18,
        span: 6837..6839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 286,
        column: 25,
        span: 6840..6846,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 286,
        column: 26,
        span: 6846..6847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 286,
        column: 29,
        span: 6847..6850,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 30,
        span: 6850..6851,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$'",
        ),
        line: 286,
        column: 33,
        span: 6851..6854,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
        column: 34,
        span: 6854..6855,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 37,
        span: 6855..6858,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 38,
        span: 6858..6859,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 39,
        span: 6859..6860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 290,
        column: 2,
        span: 6879..6880,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 290,
        column: 4,
        span: 6881..6882,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 290,
        column: 6,
        span: 6883..6884,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 290,
        column: 7,
        span: 6884..6885,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 291,
        column: 6,
        span: 6886..6891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 291,
        column: 8,
        span: 6892..6893,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 291,
        column: 10,
        span: 6894..6895,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 291,
        column: 12,
        span: 6896..6897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 291,
        column: 13,
        span: 6897..6898,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 291,
        column: 15,
        span: 6899..6900,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 291,
        column: 18,
        span: 6900..6903,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 291,
        column: 19,
        span: 6903..6904,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 292,
        column: 6,
        span: 6905..6910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 292,
        column: 8,
        span: 6911..6912,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 292,
        column: 10,
        span: 6913..6914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 292,
        column: 23,
        span: 6915..6927,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
        column: 24,
        span: 6927..6928,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 292,
        column: 25,
        span: 6928..6929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key",
        ),
        line: 292,
        column: 28,
        span: 6929..6932,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 292,
        column: 30,
        span: 6933..6934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 292,
        column: 32,
        span: 6935..6936,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 292,
        column: 33,
        span: 6936..6937,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 292,
        column: 34,
        span: 6937..6938,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 292,
        column: 36,
        span: 6939..6940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 292,
        column: 42,
        span: 6940..6946,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 292,
        column: 44,
        span: 6947..6948,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'v'",
        ),
        line: 292,
        column: 48,
        span: 6949..6952,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 292,
        column: 49,
        span: 6952..6953,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
        column: 50,
        span: 6953..6954,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 293,
        column: 6,
        span: 6955..6960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C1",
        ),
        line: 293,
        column: 9,
        span: 6961..6963,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 293,
        column: 11,
        span: 6964..6965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 293,
        column: 24,
        span: 6966..6978,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
        column: 25,
        span: 6978..6979,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 293,
        column: 26,
        span: 6979..6980,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 293,
        column: 27,
        span: 6980..6981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 293,
        column: 28,
        span: 6981..6982,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 293,
        column: 29,
        span: 6982..6983,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 293,
        column: 31,
        span: 6984..6985,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
        column: 33,
        span: 6985..6987,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 293,
        column: 34,
        span: 6987..6988,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 293,
        column: 35,
        span: 6988..6989,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 293,
        column: 37,
        span: 6990..6991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 293,
        column: 43,
        span: 6991..6997,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 293,
        column: 45,
        span: 6998..6999,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'k'",
        ),
        line: 293,
        column: 49,
        span: 7000..7003,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 293,
        column: 50,
        span: 7003..7004,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
        column: 51,
        span: 7004..7005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 294,
        column: 2,
        span: 7006..7007,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 294,
        column: 3,
        span: 7007..7008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 294,
        column: 4,
        span: 7008..7009,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 294,
        column: 6,
        span: 7010..7011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 294,
        column: 8,
        span: 7012..7013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 297,
        column: 13,
        span: 7127..7139,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 14,
        span: 7139..7140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 297,
        column: 15,
        span: 7140..7141,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 297,
        column: 16,
        span: 7141..7142,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 297,
        column: 18,
        span: 7143..7144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 297,
        column: 22,
        span: 7144..7148,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 297,
        column: 24,
        span: 7149..7150,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 297,
        column: 33,
        span: 7151..7159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 35,
        span: 7160..7161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 297,
        column: 36,
        span: 7161..7162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 37,
        span: 7162..7163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 298,
        column: 33,
        span: 7190..7196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 34,
        span: 7196..7197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 298,
        column: 35,
        span: 7197..7198,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 298,
        column: 36,
        span: 7198..7199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key",
        ),
        line: 298,
        column: 39,
        span: 7199..7202,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 298,
        column: 42,
        span: 7203..7205,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 298,
        column: 46,
        span: 7206..7209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 47,
        span: 7209..7210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 299,
        column: 33,
        span: 7237..7243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 34,
        span: 7243..7244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 299,
        column: 38,
        span: 7244..7248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 39,
        span: 7248..7249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 299,
        column: 43,
        span: 7249..7253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 44,
        span: 7253..7254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C1",
        ),
        line: 299,
        column: 46,
        span: 7254..7256,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 47,
        span: 7256..7257,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 48,
        span: 7257..7258,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 299,
        column: 51,
        span: 7259..7261,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 299,
        column: 59,
        span: 7262..7269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 60,
        span: 7269..7270,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 300,
        column: 30,
        span: 7297..7300,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 300,
        column: 31,
        span: 7300..7301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 300,
        column: 32,
        span: 7301..7302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 302,
        column: 2,
        span: 7304..7305,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 302,
        column: 3,
        span: 7305..7306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 302,
        column: 5,
        span: 7307..7308,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 302,
        column: 7,
        span: 7309..7310,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 302,
        column: 0,
        span: 7311..7314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 303,
        column: 15,
        span: 7315..7329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 16,
        span: 7329..7330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 17,
        span: 7330..7331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 304,
        column: 15,
        span: 7332..7346,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 16,
        span: 7346..7347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
        column: 17,
        span: 7347..7348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 305,
        column: 7,
        span: 7349..7355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 305,
        column: 8,
        span: 7355..7356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 305,
        column: 12,
        span: 7356..7360,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 305,
        column: 13,
        span: 7360..7361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 305,
        column: 14,
        span: 7361..7362,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 305,
        column: 15,
        span: 7362..7363,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 305,
        column: 18,
        span: 7364..7366,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 305,
        column: 22,
        span: 7367..7370,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 305,
        column: 26,
        span: 7371..7374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 305,
        column: 31,
        span: 7375..7379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 305,
        column: 32,
        span: 7379..7380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C1",
        ),
        line: 305,
        column: 34,
        span: 7380..7382,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 305,
        column: 35,
        span: 7382..7383,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 305,
        column: 38,
        span: 7384..7386,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 305,
        column: 42,
        span: 7387..7390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 305,
        column: 43,
        span: 7390..7391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 306,
        column: 2,
        span: 7392..7393,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 306,
        column: 3,
        span: 7393..7394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C1",
        ),
        line: 306,
        column: 6,
        span: 7395..7397,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 306,
        column: 8,
        span: 7398..7399,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 306,
        column: 0,
        span: 7400..7403,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 310,
        column: 6,
        span: 7420..7425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 310,
        column: 9,
        span: 7426..7428,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 310,
        column: 11,
        span: 7429..7430,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 310,
        column: 13,
        span: 7431..7432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 310,
        column: 19,
        span: 7432..7438,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 310,
        column: 21,
        span: 7439..7440,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'k'",
        ),
        line: 310,
        column: 25,
        span: 7441..7444,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 310,
        column: 26,
        span: 7444..7445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 311,
        column: 2,
        span: 7446..7447,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 311,
        column: 4,
        span: 7448..7449,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 311,
        column: 6,
        span: 7450..7451,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 311,
        column: 7,
        span: 7451..7452,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 9,
        span: 7451..7454,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 311,
        column: 10,
        span: 7454..7455,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 11,
        span: 7455..7456,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 311,
        column: 12,
        span: 7456..7457,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 14,
        span: 7456..7459,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 311,
        column: 15,
        span: 7459..7460,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 16,
        span: 7460..7461,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 311,
        column: 17,
        span: 7461..7462,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 19,
        span: 7461..7464,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 311,
        column: 20,
        span: 7464..7465,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 21,
        span: 7465..7466,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 311,
        column: 22,
        span: 7466..7467,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 24,
        span: 7466..7469,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 311,
        column: 25,
        span: 7469..7470,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 311,
        column: 26,
        span: 7470..7471,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 311,
        column: 27,
        span: 7471..7472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 311,
        column: 40,
        span: 7473..7485,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 41,
        span: 7485..7486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 311,
        column: 42,
        span: 7486..7487,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 43,
        span: 7487..7488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 311,
        column: 46,
        span: 7489..7491,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 47,
        span: 7491..7492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 312,
        column: 2,
        span: 7493..7494,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 312,
        column: 4,
        span: 7495..7496,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 312,
        column: 0,
        span: 7497..7500,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 313,
        column: 4,
        span: 7501..7504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 313,
        column: 6,
        span: 7505..7506,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 313,
        column: 8,
        span: 7507..7508,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 313,
        column: 10,
        span: 7508..7510,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 313,
        column: 11,
        span: 7510..7511,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 313,
        column: 15,
        span: 7511..7515,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 313,
        column: 18,
        span: 7516..7518,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 313,
        column: 24,
        span: 7519..7524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 313,
        column: 26,
        span: 7525..7526,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 313,
        column: 28,
        span: 7527..7528,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 313,
        column: 30,
        span: 7529..7530,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 313,
        column: 31,
        span: 7530..7531,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 313,
        column: 32,
        span: 7531..7532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 313,
        column: 34,
        span: 7533..7534,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 313,
        column: 35,
        span: 7534..7535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 313,
        column: 36,
        span: 7535..7536,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 313,
        column: 37,
        span: 7536..7537,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 313,
        column: 39,
        span: 7538..7539,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 313,
        column: 41,
        span: 7540..7541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 313,
        column: 42,
        span: 7541..7542,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 313,
        column: 44,
        span: 7543..7544,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 313,
        column: 46,
        span: 7545..7546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 313,
        column: 47,
        span: 7546..7547,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 313,
        column: 48,
        span: 7547..7548,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 313,
        column: 49,
        span: 7548..7549,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 313,
        column: 50,
        span: 7549..7550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 313,
        column: 52,
        span: 7551..7552,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 313,
        column: 54,
        span: 7553..7554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 313,
        column: 56,
        span: 7555..7556,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 313,
        column: 0,
        span: 7557..7560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "GC",
        ),
        line: 314,
        column: 3,
        span: 7561..7563,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
        column: 4,
        span: 7563..7564,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 314,
        column: 5,
        span: 7564..7565,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 315,
        column: 6,
        span: 7566..7571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 315,
        column: 8,
        span: 7572..7573,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 315,
        column: 10,
        span: 7574..7575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 315,
        column: 0,
        span: 7576..7577,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 316,
        column: 6,
        span: 7578..7583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 316,
        column: 8,
        span: 7584..7585,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 316,
        column: 10,
        span: 7586..7587,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
        column: 0,
        span: 7587..7589,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 317,
        column: 6,
        span: 7590..7595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 317,
        column: 8,
        span: 7596..7597,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 317,
        column: 11,
        span: 7598..7600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 317,
        column: 13,
        span: 7601..7602,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 317,
        column: 15,
        span: 7603..7604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 317,
        column: 17,
        span: 7605..7606,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 317,
        column: 18,
        span: 7606..7607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 317,
        column: 19,
        span: 7607..7608,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 317,
        column: 20,
        span: 7608..7609,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 317,
        column: 21,
        span: 7609..7610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 317,
        column: 22,
        span: 7610..7611,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 317,
        column: 23,
        span: 7611..7612,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
        column: 24,
        span: 7611..7613,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 317,
        column: 25,
        span: 7613..7614,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 317,
        column: 26,
        span: 7614..7615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 317,
        column: 28,
        span: 7616..7617,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 317,
        column: 30,
        span: 7618..7619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 317,
        column: 32,
        span: 7620..7621,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 317,
        column: 34,
        span: 7622..7623,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
        column: 36,
        span: 7623..7625,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 317,
        column: 0,
        span: 7626..7629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 318,
        column: 7,
        span: 7630..7636,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
        column: 8,
        span: 7636..7637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 318,
        column: 9,
        span: 7637..7638,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 318,
        column: 12,
        span: 7639..7641,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
        column: 16,
        span: 7641..7645,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
        column: 17,
        span: 7645..7646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 319,
        column: 2,
        span: 7647..7648,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 319,
        column: 4,
        span: 7649..7650,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 319,
        column: 0,
        span: 7651..7654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "GC",
        ),
        line: 320,
        column: 3,
        span: 7655..7657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
        column: 4,
        span: 7657..7658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
        column: 5,
        span: 7658..7659,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 321,
        column: 4,
        span: 7660..7663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 321,
        column: 6,
        span: 7664..7665,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 321,
        column: 8,
        span: 7666..7667,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 321,
        column: 10,
        span: 7667..7669,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 321,
        column: 11,
        span: 7669..7670,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 321,
        column: 13,
        span: 7670..7672,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 321,
        column: 16,
        span: 7673..7675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 321,
        column: 23,
        span: 7676..7682,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 24,
        span: 7682..7683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 321,
        column: 25,
        span: 7683..7684,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 321,
        column: 26,
        span: 7684..7685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 321,
        column: 27,
        span: 7685..7686,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 321,
        column: 28,
        span: 7686..7687,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 321,
        column: 29,
        span: 7687..7688,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 321,
        column: 30,
        span: 7687..7689,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 321,
        column: 31,
        span: 7689..7690,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 321,
        column: 34,
        span: 7691..7693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 321,
        column: 36,
        span: 7694..7695,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 321,
        column: 38,
        span: 7696..7697,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 321,
        column: 41,
        span: 7697..7700,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 42,
        span: 7700..7701,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 321,
        column: 43,
        span: 7701..7702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 321,
        column: 45,
        span: 7703..7704,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 321,
        column: 46,
        span: 7704..7705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 321,
        column: 47,
        span: 7705..7706,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 321,
        column: 48,
        span: 7706..7707,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 321,
        column: 50,
        span: 7708..7709,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 321,
        column: 54,
        span: 7710..7713,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 321,
        column: 0,
        span: 7714..7717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 322,
        column: 7,
        span: 7718..7724,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 8,
        span: 7724..7725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 322,
        column: 12,
        span: 7725..7729,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 13,
        span: 7729..7730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 322,
        column: 14,
        span: 7730..7731,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 15,
        span: 7731..7732,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 322,
        column: 18,
        span: 7733..7735,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 322,
        column: 22,
        span: 7736..7739,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 23,
        span: 7739..7740,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 324,
        column: 6,
        span: 7742..7747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "K",
        ),
        line: 324,
        column: 8,
        span: 7748..7749,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 324,
        column: 10,
        span: 7750..7751,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 324,
        column: 12,
        span: 7752..7753,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 324,
        column: 13,
        span: 7753..7754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 325,
        column: 2,
        span: 7755..7756,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 325,
        column: 3,
        span: 7756..7757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "K",
        ),
        line: 325,
        column: 4,
        span: 7757..7758,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 325,
        column: 5,
        span: 7758..7759,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 325,
        column: 7,
        span: 7760..7761,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 325,
        column: 9,
        span: 7762..7763,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 325,
        column: 10,
        span: 7763..7764,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 326,
        column: 4,
        span: 7765..7768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 326,
        column: 6,
        span: 7769..7770,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 326,
        column: 7,
        span: 7770..7771,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 326,
        column: 8,
        span: 7770..7772,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 326,
        column: 9,
        span: 7772..7773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 326,
        column: 11,
        span: 7772..7775,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 326,
        column: 14,
        span: 7776..7778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 326,
        column: 16,
        span: 7779..7780,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 326,
        column: 17,
        span: 7780..7781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "K",
        ),
        line: 326,
        column: 18,
        span: 7781..7782,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 326,
        column: 19,
        span: 7782..7783,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 326,
        column: 20,
        span: 7783..7784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 326,
        column: 21,
        span: 7784..7785,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 326,
        column: 22,
        span: 7785..7786,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 326,
        column: 24,
        span: 7787..7788,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 326,
        column: 26,
        span: 7789..7790,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 326,
        column: 27,
        span: 7790..7791,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 326,
        column: 28,
        span: 7791..7792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 326,
        column: 30,
        span: 7793..7794,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 326,
        column: 31,
        span: 7794..7795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 326,
        column: 32,
        span: 7795..7796,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 326,
        column: 33,
        span: 7796..7797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "K",
        ),
        line: 326,
        column: 34,
        span: 7797..7798,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 326,
        column: 35,
        span: 7798..7799,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 326,
        column: 36,
        span: 7799..7800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 326,
        column: 37,
        span: 7800..7801,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 326,
        column: 38,
        span: 7801..7802,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 326,
        column: 39,
        span: 7802..7803,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 326,
        column: 41,
        span: 7804..7805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 326,
        column: 54,
        span: 7806..7818,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
        column: 55,
        span: 7818..7819,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 326,
        column: 56,
        span: 7819..7820,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 326,
        column: 57,
        span: 7820..7821,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 326,
        column: 58,
        span: 7821..7822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 326,
        column: 61,
        span: 7823..7825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
        column: 62,
        span: 7825..7826,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 326,
        column: 0,
        span: 7827..7830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 327,
        column: 2,
        span: 7831..7832,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 327,
        column: 4,
        span: 7833..7834,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 327,
        column: 0,
        span: 7835..7838,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 328,
        column: 6,
        span: 7839..7844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 328,
        column: 8,
        span: 7845..7846,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 328,
        column: 10,
        span: 7847..7848,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 328,
        column: 0,
        span: 7848..7850,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 329,
        column: 4,
        span: 7851..7854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 329,
        column: 6,
        span: 7855..7856,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 329,
        column: 8,
        span: 7857..7858,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 329,
        column: 10,
        span: 7858..7860,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 329,
        column: 11,
        span: 7860..7861,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 329,
        column: 14,
        span: 7860..7864,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 329,
        column: 0,
        span: 7865..7867,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 330,
        column: 8,
        span: 7870..7875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 330,
        column: 10,
        span: 7876..7877,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 330,
        column: 12,
        span: 7878..7879,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 330,
        column: 14,
        span: 7880..7881,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 330,
        column: 15,
        span: 7881..7882,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 330,
        column: 16,
        span: 7882..7883,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 330,
        column: 22,
        span: 7884..7889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nk",
        ),
        line: 330,
        column: 25,
        span: 7890..7892,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 330,
        column: 27,
        span: 7893..7894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 330,
        column: 29,
        span: 7895..7896,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 330,
        column: 30,
        span: 7896..7897,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 330,
        column: 32,
        span: 7896..7899,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 330,
        column: 34,
        span: 7900..7901,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 330,
        column: 0,
        span: 7901..7903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 331,
        column: 4,
        span: 7906..7907,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 331,
        column: 5,
        span: 7907..7908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 331,
        column: 6,
        span: 7908..7909,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 331,
        column: 7,
        span: 7909..7910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "K",
        ),
        line: 331,
        column: 8,
        span: 7910..7911,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 331,
        column: 9,
        span: 7911..7912,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 331,
        column: 10,
        span: 7912..7913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nk",
        ),
        line: 331,
        column: 12,
        span: 7913..7915,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 331,
        column: 13,
        span: 7915..7916,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 331,
        column: 14,
        span: 7916..7917,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 331,
        column: 15,
        span: 7917..7918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 331,
        column: 16,
        span: 7918..7919,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 331,
        column: 17,
        span: 7919..7920,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 331,
        column: 19,
        span: 7921..7922,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 331,
        column: 21,
        span: 7923..7924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 331,
        column: 22,
        span: 7924..7925,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 331,
        column: 23,
        span: 7925..7926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 331,
        column: 25,
        span: 7927..7928,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 331,
        column: 27,
        span: 7929..7930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 331,
        column: 29,
        span: 7931..7932,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 331,
        column: 30,
        span: 7932..7933,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 331,
        column: 31,
        span: 7933..7934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 331,
        column: 33,
        span: 7935..7936,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 331,
        column: 35,
        span: 7937..7938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 331,
        column: 37,
        span: 7939..7940,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 331,
        column: 38,
        span: 7940..7941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 331,
        column: 40,
        span: 7942..7943,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 331,
        column: 42,
        span: 7944..7945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nk",
        ),
        line: 331,
        column: 0,
        span: 7946..7948,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 332,
        column: 0,
        span: 7949..7952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "GC",
        ),
        line: 333,
        column: 3,
        span: 7953..7955,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
        column: 4,
        span: 7955..7956,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
        column: 5,
        span: 7956..7957,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 334,
        column: 6,
        span: 7958..7963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 334,
        column: 8,
        span: 7964..7965,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 334,
        column: 10,
        span: 7966..7967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 334,
        column: 0,
        span: 7968..7969,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 335,
        column: 6,
        span: 7970..7975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 335,
        column: 8,
        span: 7976..7977,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 335,
        column: 10,
        span: 7978..7979,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 335,
        column: 0,
        span: 7979..7981,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 336,
        column: 6,
        span: 7982..7987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 336,
        column: 8,
        span: 7988..7989,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 336,
        column: 11,
        span: 7990..7992,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 336,
        column: 17,
        span: 7993..7998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 336,
        column: 19,
        span: 7999..8000,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 336,
        column: 21,
        span: 8001..8002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 336,
        column: 23,
        span: 8003..8004,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 336,
        column: 24,
        span: 8004..8005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 336,
        column: 25,
        span: 8005..8006,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 336,
        column: 26,
        span: 8006..8007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "K",
        ),
        line: 336,
        column: 27,
        span: 8007..8008,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 336,
        column: 28,
        span: 8008..8009,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 336,
        column: 29,
        span: 8009..8010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 336,
        column: 30,
        span: 8010..8011,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 336,
        column: 31,
        span: 8011..8012,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 336,
        column: 32,
        span: 8012..8013,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 336,
        column: 33,
        span: 8013..8014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 336,
        column: 34,
        span: 8014..8015,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 336,
        column: 35,
        span: 8015..8016,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 336,
        column: 36,
        span: 8016..8017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 336,
        column: 38,
        span: 8018..8019,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 336,
        column: 40,
        span: 8020..8021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 336,
        column: 42,
        span: 8022..8023,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 336,
        column: 43,
        span: 8023..8024,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 336,
        column: 44,
        span: 8023..8025,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 336,
        column: 45,
        span: 8025..8026,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 336,
        column: 46,
        span: 8026..8027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 336,
        column: 48,
        span: 8028..8029,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 336,
        column: 50,
        span: 8030..8031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 336,
        column: 52,
        span: 8032..8033,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 336,
        column: 53,
        span: 8033..8034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 336,
        column: 54,
        span: 8034..8035,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 336,
        column: 55,
        span: 8035..8036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 336,
        column: 57,
        span: 8037..8038,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 336,
        column: 59,
        span: 8039..8040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 336,
        column: 61,
        span: 8041..8042,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 336,
        column: 63,
        span: 8043..8044,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 336,
        column: 65,
        span: 8044..8046,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 336,
        column: 0,
        span: 8047..8050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 337,
        column: 7,
        span: 8051..8057,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 337,
        column: 8,
        span: 8057..8058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 337,
        column: 9,
        span: 8058..8059,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 337,
        column: 12,
        span: 8060..8062,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 337,
        column: 16,
        span: 8062..8066,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 337,
        column: 17,
        span: 8066..8067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "K",
        ),
        line: 338,
        column: 2,
        span: 8068..8069,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 338,
        column: 4,
        span: 8070..8071,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 338,
        column: 0,
        span: 8072..8075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "GC",
        ),
        line: 339,
        column: 3,
        span: 8076..8078,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 339,
        column: 4,
        span: 8078..8079,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 339,
        column: 5,
        span: 8079..8080,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 344,
        column: 0,
        span: 8137..8139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 345,
        column: 15,
        span: 8140..8154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 345,
        column: 16,
        span: 8154..8155,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 345,
        column: 22,
        span: 8155..8161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 345,
        column: 23,
        span: 8161..8162,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 346,
        column: 6,
        span: 8184..8189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 346,
        column: 8,
        span: 8190..8191,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 346,
        column: 10,
        span: 8192..8193,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 346,
        column: 12,
        span: 8194..8195,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 346,
        column: 13,
        span: 8195..8196,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 347,
        column: 6,
        span: 8197..8202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 347,
        column: 8,
        span: 8203..8204,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 347,
        column: 10,
        span: 8205..8206,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 347,
        column: 12,
        span: 8207..8208,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 347,
        column: 13,
        span: 8208..8209,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 347,
        column: 14,
        span: 8209..8210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 347,
        column: 27,
        span: 8211..8223,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 28,
        span: 8223..8224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 347,
        column: 29,
        span: 8224..8225,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
        column: 30,
        span: 8225..8226,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 347,
        column: 32,
        span: 8227..8228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 347,
        column: 38,
        span: 8228..8234,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 347,
        column: 40,
        span: 8235..8236,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'k'",
        ),
        line: 347,
        column: 44,
        span: 8237..8240,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 347,
        column: 45,
        span: 8240..8241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 46,
        span: 8241..8242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 348,
        column: 13,
        span: 8243..8255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 14,
        span: 8255..8256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 348,
        column: 15,
        span: 8256..8257,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 348,
        column: 16,
        span: 8257..8258,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 348,
        column: 18,
        span: 8259..8260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 348,
        column: 22,
        span: 8260..8264,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 348,
        column: 24,
        span: 8265..8266,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 348,
        column: 33,
        span: 8267..8275,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 35,
        span: 8276..8277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 348,
        column: 36,
        span: 8277..8278,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 37,
        span: 8278..8279,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 349,
        column: 8,
        span: 8282..8287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 349,
        column: 10,
        span: 8288..8289,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 349,
        column: 12,
        span: 8290..8291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 349,
        column: 14,
        span: 8292..8293,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 349,
        column: 15,
        span: 8293..8294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 349,
        column: 16,
        span: 8294..8295,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 349,
        column: 17,
        span: 8295..8296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 350,
        column: 4,
        span: 8299..8300,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 350,
        column: 5,
        span: 8300..8301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 350,
        column: 6,
        span: 8301..8302,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 350,
        column: 7,
        span: 8302..8303,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 350,
        column: 9,
        span: 8304..8305,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 350,
        column: 0,
        span: 8306..8310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 351,
        column: 9,
        span: 8313..8319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
        column: 10,
        span: 8319..8320,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 351,
        column: 13,
        span: 8320..8323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 351,
        column: 15,
        span: 8324..8325,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 351,
        column: 16,
        span: 8325..8326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 351,
        column: 17,
        span: 8326..8327,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 351,
        column: 19,
        span: 8328..8329,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 351,
        column: 21,
        span: 8329..8331,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 351,
        column: 22,
        span: 8331..8332,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
        column: 23,
        span: 8332..8333,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 352,
        column: 5,
        span: 8373..8375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 352,
        column: 7,
        span: 8376..8377,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 352,
        column: 10,
        span: 8378..8380,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 352,
        column: 12,
        span: 8380..8382,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 352,
        column: 17,
        span: 8383..8387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 352,
        column: 23,
        span: 8388..8393,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 24,
        span: 8393..8394,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"here\"",
        ),
        line: 352,
        column: 30,
        span: 8394..8400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 31,
        span: 8400..8401,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 352,
        column: 35,
        span: 8402..8405,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 353,
        column: 4,
        span: 8427..8430,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 353,
        column: 5,
        span: 8430..8431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
        column: 6,
        span: 8431..8432,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 355,
        column: 4,
        span: 8434..8437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 355,
        column: 6,
        span: 8438..8439,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 355,
        column: 8,
        span: 8440..8441,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 355,
        column: 10,
        span: 8441..8443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 355,
        column: 11,
        span: 8443..8444,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 355,
        column: 14,
        span: 8444..8447,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 355,
        column: 0,
        span: 8448..8450,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 356,
        column: 8,
        span: 8453..8458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 356,
        column: 10,
        span: 8459..8460,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 356,
        column: 12,
        span: 8461..8462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 356,
        column: 25,
        span: 8463..8475,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 26,
        span: 8475..8476,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 356,
        column: 27,
        span: 8476..8477,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 356,
        column: 28,
        span: 8477..8478,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 356,
        column: 29,
        span: 8478..8479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 356,
        column: 42,
        span: 8480..8492,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 43,
        span: 8492..8493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 356,
        column: 44,
        span: 8493..8494,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 45,
        span: 8494..8495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 46,
        span: 8495..8496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 357,
        column: 4,
        span: 8499..8500,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 357,
        column: 5,
        span: 8500..8501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 357,
        column: 6,
        span: 8501..8502,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 357,
        column: 7,
        span: 8502..8503,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 357,
        column: 9,
        span: 8504..8505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 357,
        column: 0,
        span: 8506..8507,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 358,
        column: 0,
        span: 8508..8511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 360,
        column: 7,
        span: 8513..8519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 8,
        span: 8519..8520,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 360,
        column: 11,
        span: 8520..8523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 360,
        column: 17,
        span: 8524..8529,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 18,
        span: 8529..8530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 360,
        column: 32,
        span: 8530..8544,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 33,
        span: 8544..8545,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 34,
        span: 8545..8546,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 361,
        column: 4,
        span: 8547..8550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 361,
        column: 6,
        span: 8551..8552,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 361,
        column: 8,
        span: 8553..8554,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 361,
        column: 10,
        span: 8554..8556,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 361,
        column: 11,
        span: 8556..8557,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 361,
        column: 14,
        span: 8557..8560,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 361,
        column: 17,
        span: 8561..8563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 361,
        column: 24,
        span: 8564..8570,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
        column: 25,
        span: 8570..8571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 361,
        column: 26,
        span: 8571..8572,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 361,
        column: 27,
        span: 8572..8573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 361,
        column: 28,
        span: 8573..8574,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 361,
        column: 29,
        span: 8574..8575,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 361,
        column: 30,
        span: 8575..8576,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 361,
        column: 0,
        span: 8577..8580,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 363,
        column: 4,
        span: 8582..8585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 363,
        column: 6,
        span: 8586..8587,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 363,
        column: 8,
        span: 8588..8589,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 363,
        column: 10,
        span: 8589..8591,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 363,
        column: 11,
        span: 8591..8592,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 363,
        column: 13,
        span: 8592..8594,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 363,
        column: 0,
        span: 8595..8597,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 364,
        column: 8,
        span: 8600..8605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 364,
        column: 10,
        span: 8606..8607,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 364,
        column: 12,
        span: 8608..8609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 364,
        column: 25,
        span: 8610..8622,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 364,
        column: 26,
        span: 8622..8623,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 364,
        column: 27,
        span: 8623..8624,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 364,
        column: 28,
        span: 8624..8625,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 364,
        column: 29,
        span: 8625..8626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 364,
        column: 42,
        span: 8627..8639,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 364,
        column: 43,
        span: 8639..8640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 364,
        column: 44,
        span: 8640..8641,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 364,
        column: 45,
        span: 8641..8642,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 364,
        column: 46,
        span: 8642..8643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 365,
        column: 4,
        span: 8646..8647,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 365,
        column: 5,
        span: 8647..8648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 365,
        column: 6,
        span: 8648..8649,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 365,
        column: 7,
        span: 8649..8650,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 365,
        column: 9,
        span: 8651..8652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 365,
        column: 0,
        span: 8653..8654,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 366,
        column: 0,
        span: 8655..8658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 368,
        column: 15,
        span: 8660..8674,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 368,
        column: 16,
        span: 8674..8675,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 368,
        column: 17,
        span: 8675..8676,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 369,
        column: 4,
        span: 8677..8680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 369,
        column: 6,
        span: 8681..8682,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 369,
        column: 8,
        span: 8683..8684,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 369,
        column: 10,
        span: 8684..8686,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 369,
        column: 11,
        span: 8686..8687,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 369,
        column: 14,
        span: 8687..8690,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 369,
        column: 17,
        span: 8691..8693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 369,
        column: 24,
        span: 8694..8700,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 369,
        column: 25,
        span: 8700..8701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 369,
        column: 26,
        span: 8701..8702,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 369,
        column: 27,
        span: 8702..8703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 369,
        column: 28,
        span: 8703..8704,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 369,
        column: 29,
        span: 8704..8705,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 369,
        column: 30,
        span: 8705..8706,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 369,
        column: 0,
        span: 8707..8710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 371,
        column: 13,
        span: 8712..8724,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
        column: 14,
        span: 8724..8725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 371,
        column: 15,
        span: 8725..8726,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
        column: 16,
        span: 8726..8727,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 371,
        column: 17,
        span: 8727..8728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 371,
        column: 21,
        span: 8728..8732,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 371,
        column: 23,
        span: 8733..8734,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 371,
        column: 0,
        span: 8735..8740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 375,
        column: 13,
        span: 8783..8795,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 375,
        column: 14,
        span: 8795..8796,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 375,
        column: 15,
        span: 8796..8797,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 375,
        column: 16,
        span: 8797..8798,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 375,
        column: 17,
        span: 8798..8799,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 375,
        column: 19,
        span: 8800..8801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 375,
        column: 23,
        span: 8801..8805,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 375,
        column: 25,
        span: 8806..8807,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 375,
        column: 34,
        span: 8808..8816,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 375,
        column: 36,
        span: 8817..8818,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 375,
        column: 37,
        span: 8818..8819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 375,
        column: 43,
        span: 8820..8825,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 375,
        column: 44,
        span: 8825..8826,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 375,
        column: 45,
        span: 8826..8827,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 375,
        column: 49,
        span: 8828..8831,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 375,
        column: 50,
        span: 8831..8832,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 375,
        column: 51,
        span: 8832..8833,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 376,
        column: 6,
        span: 8834..8839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 376,
        column: 8,
        span: 8840..8841,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
        column: 9,
        span: 8841..8842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 376,
        column: 11,
        span: 8843..8844,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 376,
        column: 13,
        span: 8845..8846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 376,
        column: 19,
        span: 8847..8852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
        column: 20,
        span: 8852..8853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 376,
        column: 34,
        span: 8853..8867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
        column: 35,
        span: 8867..8868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 377,
        column: 7,
        span: 8869..8875,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 8,
        span: 8875..8876,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 377,
        column: 11,
        span: 8876..8879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 377,
        column: 13,
        span: 8880..8881,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 377,
        column: 17,
        span: 8882..8885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 377,
        column: 22,
        span: 8886..8890,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 23,
        span: 8890..8891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 377,
        column: 24,
        span: 8891..8892,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 25,
        span: 8892..8893,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 377,
        column: 28,
        span: 8894..8896,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 377,
        column: 37,
        span: 8897..8905,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 377,
        column: 41,
        span: 8906..8909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 377,
        column: 48,
        span: 8910..8916,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 377,
        column: 49,
        span: 8916..8917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 377,
        column: 53,
        span: 8917..8921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 54,
        span: 8921..8922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 377,
        column: 55,
        span: 8922..8923,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 377,
        column: 56,
        span: 8923..8924,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error in __gc\"",
        ),
        line: 377,
        column: 72,
        span: 8925..8940,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 73,
        span: 8940..8941,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 74,
        span: 8941..8942,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 379,
        column: 0,
        span: 8944..8947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 380,
        column: 6,
        span: 8948..8953,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 380,
        column: 10,
        span: 8954..8957,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 384,
        column: 3,
        span: 8980..8982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 384,
        column: 5,
        span: 8983..8984,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 384,
        column: 7,
        span: 8984..8986,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 384,
        column: 10,
        span: 8986..8989,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 384,
        column: 0,
        span: 8990..8994,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 385,
        column: 4,
        span: 8997..8998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        line: 385,
        column: 11,
        span: 8998..9005,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 385,
        column: 14,
        span: 9006..9008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 385,
        column: 20,
        span: 9009..9014,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 385,
        column: 21,
        span: 9014..9015,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 385,
        column: 22,
        span: 9015..9016,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n >>> testC not active: skipping userdata GC tests <<<\\n'",
        ),
        line: 385,
        column: 81,
        span: 9016..9075,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 385,
        column: 82,
        span: 9075..9076,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 387,
        column: 0,
        span: 9078..9082,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 389,
        column: 8,
        span: 9086..9091,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 389,
        column: 17,
        span: 9092..9100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newproxy",
        ),
        line: 389,
        column: 26,
        span: 9101..9109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 389,
        column: 27,
        span: 9109..9110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 389,
        column: 28,
        span: 9110..9111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 389,
        column: 29,
        span: 9111..9112,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 390,
        column: 11,
        span: 9117..9123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 390,
        column: 17,
        span: 9124..9129,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 390,
        column: 18,
        span: 9129..9130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 390,
        column: 30,
        span: 9130..9142,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
        column: 31,
        span: 9142..9143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 390,
        column: 32,
        span: 9143..9144,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 390,
        column: 33,
        span: 9144..9145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 390,
        column: 44,
        span: 9145..9156,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
        column: 45,
        span: 9156..9157,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
        column: 46,
        span: 9156..9158,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
        column: 47,
        span: 9158..9159,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
        column: 48,
        span: 9159..9160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 390,
        column: 54,
        span: 9161..9166,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 390,
        column: 55,
        span: 9166..9167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 390,
        column: 67,
        span: 9167..9179,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
        column: 68,
        span: 9179..9180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 390,
        column: 69,
        span: 9180..9181,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
        column: 70,
        span: 9181..9182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
        column: 71,
        span: 9182..9183,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 391,
        column: 0,
        span: 9186..9189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 393,
        column: 17,
        span: 9193..9207,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
        column: 18,
        span: 9207..9208,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 393,
        column: 24,
        span: 9208..9214,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
        column: 25,
        span: 9214..9215,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 394,
        column: 8,
        span: 9239..9244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 394,
        column: 10,
        span: 9245..9246,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 394,
        column: 12,
        span: 9247..9248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newproxy",
        ),
        line: 394,
        column: 21,
        span: 9249..9257,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 394,
        column: 22,
        span: 9257..9258,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 394,
        column: 25,
        span: 9258..9261,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 394,
        column: 26,
        span: 9261..9262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 395,
        column: 8,
        span: 9265..9270,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 395,
        column: 9,
        span: 9270..9271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 395,
        column: 21,
        span: 9271..9283,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 22,
        span: 9283..9284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 395,
        column: 23,
        span: 9284..9285,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 395,
        column: 24,
        span: 9285..9286,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 395,
        column: 26,
        span: 9287..9288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 395,
        column: 30,
        span: 9288..9292,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 395,
        column: 32,
        span: 9293..9294,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 395,
        column: 37,
        span: 9295..9299,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 395,
        column: 38,
        span: 9299..9300,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 39,
        span: 9300..9301,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 396,
        column: 8,
        span: 9304..9309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 396,
        column: 10,
        span: 9310..9311,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 396,
        column: 12,
        span: 9312..9313,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
        column: 0,
        span: 9313..9315,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 397,
        column: 8,
        span: 9318..9323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 397,
        column: 10,
        span: 9324..9325,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 397,
        column: 12,
        span: 9326..9327,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 397,
        column: 14,
        span: 9328..9329,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 397,
        column: 15,
        span: 9329..9330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 397,
        column: 16,
        span: 9330..9331,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 397,
        column: 17,
        span: 9331..9332,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 397,
        column: 19,
        span: 9333..9334,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
        column: 21,
        span: 9334..9336,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 397,
        column: 22,
        span: 9336..9337,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 397,
        column: 23,
        span: 9337..9338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 397,
        column: 36,
        span: 9339..9351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 37,
        span: 9351..9352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 397,
        column: 38,
        span: 9352..9353,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 39,
        span: 9353..9354,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 397,
        column: 41,
        span: 9355..9356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 397,
        column: 47,
        span: 9356..9362,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 397,
        column: 49,
        span: 9363..9364,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'vk'",
        ),
        line: 397,
        column: 54,
        span: 9365..9369,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 397,
        column: 55,
        span: 9369..9370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 56,
        span: 9370..9371,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 398,
        column: 6,
        span: 9374..9377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 398,
        column: 8,
        span: 9378..9379,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 398,
        column: 9,
        span: 9379..9380,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 10,
        span: 9379..9381,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 398,
        column: 11,
        span: 9381..9382,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 13,
        span: 9381..9384,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 398,
        column: 16,
        span: 9385..9387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 398,
        column: 18,
        span: 9388..9389,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 398,
        column: 19,
        span: 9389..9390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newproxy",
        ),
        line: 398,
        column: 27,
        span: 9390..9398,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 28,
        span: 9398..9399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 398,
        column: 29,
        span: 9399..9400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
        column: 30,
        span: 9400..9401,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 398,
        column: 31,
        span: 9401..9402,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 398,
        column: 33,
        span: 9403..9404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 398,
        column: 35,
        span: 9405..9406,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 398,
        column: 0,
        span: 9407..9410,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 399,
        column: 6,
        span: 9413..9416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 399,
        column: 8,
        span: 9417..9418,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 399,
        column: 11,
        span: 9419..9421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 399,
        column: 17,
        span: 9422..9427,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
        column: 18,
        span: 9427..9428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 399,
        column: 19,
        span: 9428..9429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 20,
        span: 9429..9430,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 399,
        column: 23,
        span: 9431..9433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 399,
        column: 30,
        span: 9434..9440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
        column: 31,
        span: 9440..9441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 399,
        column: 43,
        span: 9441..9453,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
        column: 44,
        span: 9453..9454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 399,
        column: 45,
        span: 9454..9455,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 46,
        span: 9455..9456,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 399,
        column: 49,
        span: 9457..9459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 399,
        column: 62,
        span: 9460..9472,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
        column: 63,
        span: 9472..9473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 399,
        column: 64,
        span: 9473..9474,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 65,
        span: 9474..9475,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 66,
        span: 9475..9476,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 399,
        column: 0,
        span: 9477..9480,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 400,
        column: 8,
        span: 9483..9488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 400,
        column: 11,
        span: 9489..9491,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 400,
        column: 13,
        span: 9492..9493,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 400,
        column: 15,
        span: 9494..9495,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 400,
        column: 16,
        span: 9495..9496,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 400,
        column: 17,
        span: 9496..9497,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 400,
        column: 21,
        span: 9498..9501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 400,
        column: 23,
        span: 9502..9503,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 400,
        column: 24,
        span: 9503..9504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 400,
        column: 25,
        span: 9504..9505,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 400,
        column: 28,
        span: 9506..9508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 400,
        column: 34,
        span: 9509..9514,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 400,
        column: 35,
        span: 9514..9515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 400,
        column: 36,
        span: 9515..9516,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 400,
        column: 37,
        span: 9516..9517,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 400,
        column: 40,
        span: 9518..9520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 400,
        column: 43,
        span: 9521..9523,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 400,
        column: 44,
        span: 9523..9524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 400,
        column: 45,
        span: 9524..9525,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 400,
        column: 46,
        span: 9525..9526,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 400,
        column: 48,
        span: 9527..9528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 400,
        column: 50,
        span: 9529..9530,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 400,
        column: 0,
        span: 9531..9534,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 401,
        column: 6,
        span: 9537..9540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 401,
        column: 8,
        span: 9541..9542,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 401,
        column: 9,
        span: 9542..9543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 401,
        column: 10,
        span: 9543..9544,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 401,
        column: 13,
        span: 9545..9547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 401,
        column: 19,
        span: 9548..9553,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 401,
        column: 20,
        span: 9553..9554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 401,
        column: 22,
        span: 9554..9556,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 401,
        column: 23,
        span: 9556..9557,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 401,
        column: 26,
        span: 9558..9560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 401,
        column: 28,
        span: 9561..9562,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 401,
        column: 29,
        span: 9562..9563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 401,
        column: 30,
        span: 9563..9564,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 401,
        column: 31,
        span: 9564..9565,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 401,
        column: 33,
        span: 9566..9567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 401,
        column: 35,
        span: 9568..9569,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 401,
        column: 0,
        span: 9570..9573,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 402,
        column: 6,
        span: 9576..9579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 402,
        column: 8,
        span: 9580..9581,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 402,
        column: 10,
        span: 9582..9583,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 402,
        column: 11,
        span: 9582..9584,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 402,
        column: 12,
        span: 9584..9585,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 402,
        column: 14,
        span: 9584..9587,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 402,
        column: 17,
        span: 9588..9590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 402,
        column: 24,
        span: 9591..9597,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 402,
        column: 25,
        span: 9597..9598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 402,
        column: 26,
        span: 9598..9599,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 402,
        column: 27,
        span: 9599..9600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 402,
        column: 28,
        span: 9600..9601,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 402,
        column: 29,
        span: 9601..9602,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 402,
        column: 30,
        span: 9602..9603,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 402,
        column: 0,
        span: 9604..9607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 403,
        column: 15,
        span: 9610..9622,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 403,
        column: 16,
        span: 9622..9623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 403,
        column: 17,
        span: 9623..9624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 403,
        column: 18,
        span: 9624..9625,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 403,
        column: 19,
        span: 9625..9626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 403,
        column: 20,
        span: 9626..9627,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 403,
        column: 22,
        span: 9628..9629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 403,
        column: 0,
        span: 9630..9632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 404,
        column: 15,
        span: 9635..9647,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 404,
        column: 16,
        span: 9647..9648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 404,
        column: 17,
        span: 9648..9649,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 404,
        column: 18,
        span: 9649..9650,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 404,
        column: 19,
        span: 9650..9651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 404,
        column: 20,
        span: 9651..9652,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 404,
        column: 22,
        span: 9653..9654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 404,
        column: 0,
        span: 9655..9656,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 405,
        column: 0,
        span: 9659..9661,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 406,
        column: 10,
        span: 9666..9671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 406,
        column: 12,
        span: 9672..9673,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 406,
        column: 14,
        span: 9674..9675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 406,
        column: 0,
        span: 9676..9677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 407,
        column: 17,
        span: 9682..9694,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
        column: 18,
        span: 9694..9695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 407,
        column: 19,
        span: 9695..9696,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 407,
        column: 20,
        span: 9696..9697,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 407,
        column: 21,
        span: 9697..9698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 407,
        column: 25,
        span: 9698..9702,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 407,
        column: 27,
        span: 9703..9704,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 407,
        column: 36,
        span: 9705..9713,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
        column: 38,
        span: 9714..9715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 407,
        column: 39,
        span: 9715..9716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 407,
        column: 40,
        span: 9716..9717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 408,
        column: 13,
        span: 9724..9730,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
        column: 14,
        span: 9730..9731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 408,
        column: 15,
        span: 9731..9732,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 408,
        column: 16,
        span: 9732..9733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 408,
        column: 17,
        span: 9733..9734,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 408,
        column: 18,
        span: 9734..9735,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 408,
        column: 21,
        span: 9736..9738,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 408,
        column: 24,
        span: 9738..9741,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 408,
        column: 25,
        span: 9741..9742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 408,
        column: 26,
        span: 9742..9743,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
        column: 27,
        span: 9743..9744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 409,
        column: 13,
        span: 9751..9757,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
        column: 14,
        span: 9757..9758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 409,
        column: 15,
        span: 9758..9759,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 409,
        column: 16,
        span: 9759..9760,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 409,
        column: 18,
        span: 9759..9762,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 409,
        column: 19,
        span: 9762..9763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 409,
        column: 20,
        span: 9763..9764,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 409,
        column: 21,
        span: 9764..9765,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 409,
        column: 24,
        span: 9766..9768,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 409,
        column: 28,
        span: 9769..9772,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 29,
        span: 9772..9773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 410,
        column: 13,
        span: 9821..9827,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 14,
        span: 9827..9828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 410,
        column: 26,
        span: 9828..9840,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 27,
        span: 9840..9841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 410,
        column: 28,
        span: 9841..9842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 29,
        span: 9842..9843,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 410,
        column: 32,
        span: 9844..9846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 410,
        column: 45,
        span: 9847..9859,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 46,
        span: 9859..9860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 410,
        column: 47,
        span: 9860..9861,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 48,
        span: 9861..9862,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 49,
        span: 9862..9863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 411,
        column: 11,
        span: 9868..9874,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 12,
        span: 9874..9875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 411,
        column: 24,
        span: 9875..9887,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 25,
        span: 9887..9888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 411,
        column: 26,
        span: 9888..9889,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 27,
        span: 9889..9890,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 411,
        column: 28,
        span: 9890..9891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 411,
        column: 29,
        span: 9891..9892,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 411,
        column: 30,
        span: 9892..9893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 411,
        column: 31,
        span: 9893..9894,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 411,
        column: 32,
        span: 9894..9895,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 411,
        column: 35,
        span: 9896..9898,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
        column: 38,
        span: 9898..9901,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 411,
        column: 39,
        span: 9901..9902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 411,
        column: 40,
        span: 9902..9903,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 41,
        span: 9903..9904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 412,
        column: 8,
        span: 9911..9912,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 412,
        column: 9,
        span: 9912..9913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 412,
        column: 10,
        span: 9913..9914,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 412,
        column: 11,
        span: 9914..9915,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
        column: 0,
        span: 9914..9916,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 413,
        column: 0,
        span: 9921..9924,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 414,
        column: 0,
        span: 9927..9930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 415,
        column: 5,
        span: 9933..9935,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 415,
        column: 6,
        span: 9935..9936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 415,
        column: 8,
        span: 9937..9938,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 415,
        column: 10,
        span: 9939..9940,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 415,
        column: 0,
        span: 9941..9944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 416,
        column: 9,
        span: 9947..9953,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 416,
        column: 10,
        span: 9953..9954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 416,
        column: 14,
        span: 9954..9958,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 416,
        column: 15,
        span: 9958..9959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 416,
        column: 16,
        span: 9959..9960,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 416,
        column: 17,
        span: 9960..9961,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 416,
        column: 20,
        span: 9962..9964,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 416,
        column: 24,
        span: 9965..9968,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 416,
        column: 25,
        span: 9968..9969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 417,
        column: 17,
        span: 9972..9986,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
        column: 18,
        span: 9986..9987,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
        column: 19,
        span: 9987..9988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 418,
        column: 9,
        span: 9991..9997,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 10,
        span: 9997..9998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 418,
        column: 11,
        span: 9998..9999,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 418,
        column: 13,
        span: 9999..10001,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 418,
        column: 15,
        span: 10000..10003,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 16,
        span: 10003..10004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 419,
        column: 17,
        span: 10007..10021,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 419,
        column: 18,
        span: 10021..10022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 419,
        column: 19,
        span: 10022..10023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 420,
        column: 9,
        span: 10026..10032,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 420,
        column: 10,
        span: 10032..10033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 420,
        column: 14,
        span: 10033..10037,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 420,
        column: 15,
        span: 10037..10038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 420,
        column: 16,
        span: 10038..10039,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 420,
        column: 17,
        span: 10039..10040,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 420,
        column: 20,
        span: 10041..10043,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 420,
        column: 24,
        span: 10044..10047,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 420,
        column: 25,
        span: 10047..10048,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 421,
        column: 0,
        span: 10094..10097,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 425,
        column: 6,
        span: 10122..10127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 425,
        column: 8,
        span: 10128..10129,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 425,
        column: 10,
        span: 10130..10131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 425,
        column: 23,
        span: 10132..10144,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 425,
        column: 24,
        span: 10144..10145,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 425,
        column: 25,
        span: 10145..10146,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 425,
        column: 26,
        span: 10146..10147,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 425,
        column: 27,
        span: 10147..10148,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 425,
        column: 29,
        span: 10149..10150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 425,
        column: 33,
        span: 10150..10154,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 425,
        column: 35,
        span: 10155..10156,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 425,
        column: 40,
        span: 10157..10161,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 425,
        column: 41,
        span: 10161..10162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
        column: 42,
        span: 10162..10163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 427,
        column: 13,
        span: 10218..10230,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
        column: 14,
        span: 10230..10231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 427,
        column: 26,
        span: 10231..10243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
        column: 27,
        span: 10243..10244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 427,
        column: 28,
        span: 10244..10245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
        column: 29,
        span: 10245..10246,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 427,
        column: 30,
        span: 10246..10247,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 427,
        column: 32,
        span: 10248..10249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 427,
        column: 38,
        span: 10249..10255,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 427,
        column: 40,
        span: 10256..10257,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"v\"",
        ),
        line: 427,
        column: 44,
        span: 10258..10261,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 427,
        column: 45,
        span: 10261..10262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
        column: 46,
        span: 10262..10263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 428,
        column: 13,
        span: 10264..10276,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
        column: 14,
        span: 10276..10277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 428,
        column: 15,
        span: 10277..10278,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
        column: 16,
        span: 10278..10279,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 428,
        column: 17,
        span: 10279..10280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 428,
        column: 21,
        span: 10280..10284,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 428,
        column: 23,
        span: 10285..10286,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 428,
        column: 32,
        span: 10287..10295,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
        column: 34,
        span: 10296..10297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 428,
        column: 35,
        span: 10297..10298,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
        column: 36,
        span: 10298..10299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 428,
        column: 39,
        span: 10300..10302,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 428,
        column: 40,
        span: 10302..10303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "exit",
        ),
        line: 428,
        column: 44,
        span: 10303..10307,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
        column: 45,
        span: 10307..10308,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 428,
        column: 46,
        span: 10307..10309,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
        column: 47,
        span: 10309..10310,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 428,
        column: 51,
        span: 10311..10314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 429,
        column: 2,
        span: 10333..10334,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 429,
        column: 4,
        span: 10335..10336,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 429,
        column: 0,
        span: 10337..10340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 430,
        column: 15,
        span: 10341..10355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 430,
        column: 16,
        span: 10355..10356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 430,
        column: 17,
        span: 10356..10357,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 432,
        column: 6,
        span: 10359..10364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 432,
        column: 8,
        span: 10365..10366,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 432,
        column: 10,
        span: 10367..10368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 432,
        column: 23,
        span: 10369..10381,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
        column: 24,
        span: 10381..10382,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 432,
        column: 25,
        span: 10382..10383,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 432,
        column: 26,
        span: 10383..10384,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 432,
        column: 27,
        span: 10384..10385,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 432,
        column: 29,
        span: 10386..10387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 432,
        column: 33,
        span: 10387..10391,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 432,
        column: 35,
        span: 10392..10393,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 432,
        column: 40,
        span: 10394..10398,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 432,
        column: 41,
        span: 10398..10399,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
        column: 42,
        span: 10399..10400,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 433,
        column: 6,
        span: 10401..10406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 433,
        column: 8,
        span: 10407..10408,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 433,
        column: 10,
        span: 10409..10410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 433,
        column: 23,
        span: 10411..10423,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 433,
        column: 24,
        span: 10423..10424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 433,
        column: 25,
        span: 10424..10425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 433,
        column: 26,
        span: 10425..10426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 434,
        column: 2,
        span: 10427..10428,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 434,
        column: 3,
        span: 10428..10429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 434,
        column: 4,
        span: 10429..10430,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 434,
        column: 6,
        span: 10431..10432,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 434,
        column: 8,
        span: 10433..10434,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 434,
        column: 9,
        span: 10434..10435,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 434,
        column: 10,
        span: 10435..10436,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 434,
        column: 11,
        span: 10435..10437,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 434,
        column: 12,
        span: 10437..10438,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 434,
        column: 13,
        span: 10438..10439,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 434,
        column: 15,
        span: 10440..10441,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 434,
        column: 17,
        span: 10441..10443,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 434,
        column: 18,
        span: 10443..10444,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 434,
        column: 20,
        span: 10445..10446,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 434,
        column: 21,
        span: 10445..10447,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 434,
        column: 22,
        span: 10447..10448,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 434,
        column: 24,
        span: 10449..10450,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 434,
        column: 26,
        span: 10451..10452,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 434,
        column: 27,
        span: 10451..10453,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 434,
        column: 28,
        span: 10453..10454,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 434,
        column: 29,
        span: 10454..10455,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 434,
        column: 30,
        span: 10455..10456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 434,
        column: 43,
        span: 10457..10469,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
        column: 44,
        span: 10469..10470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 434,
        column: 45,
        span: 10470..10471,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 434,
        column: 46,
        span: 10471..10472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 434,
        column: 47,
        span: 10472..10473,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
        column: 48,
        span: 10473..10474,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 434,
        column: 50,
        span: 10475..10476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 434,
        column: 56,
        span: 10476..10482,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 434,
        column: 58,
        span: 10483..10484,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"kv\"",
        ),
        line: 434,
        column: 63,
        span: 10485..10489,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 434,
        column: 64,
        span: 10489..10490,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
        column: 65,
        span: 10490..10491,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 434,
        column: 66,
        span: 10491..10492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 435,
        column: 2,
        span: 10493..10494,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 435,
        column: 3,
        span: 10494..10495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 435,
        column: 7,
        span: 10495..10499,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 435,
        column: 9,
        span: 10500..10501,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 435,
        column: 18,
        span: 10502..10510,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 435,
        column: 20,
        span: 10511..10512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 435,
        column: 21,
        span: 10512..10513,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 435,
        column: 22,
        span: 10513..10514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 436,
        column: 9,
        span: 10517..10523,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 436,
        column: 10,
        span: 10523..10524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 436,
        column: 14,
        span: 10524..10528,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 436,
        column: 15,
        span: 10528..10529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 436,
        column: 27,
        span: 10529..10541,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 436,
        column: 28,
        span: 10541..10542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 436,
        column: 29,
        span: 10542..10543,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 436,
        column: 30,
        span: 10543..10544,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 436,
        column: 31,
        span: 10544..10545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 436,
        column: 32,
        span: 10545..10546,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 436,
        column: 33,
        span: 10546..10547,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 436,
        column: 36,
        span: 10548..10550,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 436,
        column: 40,
        span: 10551..10554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 436,
        column: 41,
        span: 10554..10555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 437,
        column: 4,
        span: 10558..10559,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 437,
        column: 6,
        span: 10560..10561,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 437,
        column: 0,
        span: 10561..10564,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 438,
        column: 0,
        span: 10565..10568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 439,
        column: 2,
        span: 10569..10570,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 439,
        column: 3,
        span: 10570..10571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 439,
        column: 5,
        span: 10572..10573,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 439,
        column: 7,
        span: 10574..10575,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 439,
        column: 0,
        span: 10576..10579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 440,
        column: 15,
        span: 10580..10594,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 440,
        column: 16,
        span: 10594..10595,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 440,
        column: 17,
        span: 10595..10596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 441,
        column: 7,
        span: 10597..10603,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 441,
        column: 8,
        span: 10603..10604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 441,
        column: 9,
        span: 10604..10605,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 441,
        column: 11,
        span: 10605..10607,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 441,
        column: 13,
        span: 10606..10609,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 441,
        column: 14,
        span: 10609..10610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 445,
        column: 2,
        span: 10641..10642,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 445,
        column: 4,
        span: 10643..10644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 445,
        column: 17,
        span: 10645..10657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 445,
        column: 18,
        span: 10657..10658,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 445,
        column: 19,
        span: 10658..10659,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 445,
        column: 20,
        span: 10659..10660,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 445,
        column: 21,
        span: 10660..10661,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 445,
        column: 23,
        span: 10662..10663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 445,
        column: 27,
        span: 10663..10667,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 445,
        column: 29,
        span: 10668..10669,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 445,
        column: 38,
        span: 10670..10678,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 445,
        column: 40,
        span: 10679..10680,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 445,
        column: 41,
        span: 10680..10681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 445,
        column: 47,
        span: 10682..10687,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!!!\"",
        ),
        line: 445,
        column: 53,
        span: 10688..10693,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 445,
        column: 57,
        span: 10694..10697,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 445,
        column: 58,
        span: 10697..10698,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 445,
        column: 59,
        span: 10698..10699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 446,
        column: 2,
        span: 10700..10701,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 446,
        column: 4,
        span: 10702..10703,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 446,
        column: 0,
        span: 10704..10707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 447,
        column: 7,
        span: 10708..10714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 447,
        column: 8,
        span: 10714..10715,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 447,
        column: 11,
        span: 10715..10718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 447,
        column: 17,
        span: 10719..10724,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 447,
        column: 18,
        span: 10724..10725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 447,
        column: 32,
        span: 10725..10739,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 447,
        column: 33,
        span: 10739..10740,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 447,
        column: 34,
        span: 10740..10741,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 450,
        column: 3,
        span: 10744..10746,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 450,
        column: 7,
        span: 10747..10750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 450,
        column: 13,
        span: 10751..10756,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 450,
        column: 0,
        span: 10757..10761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 451,
        column: 8,
        span: 10764..10769,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 9,
        span: 10769..10770,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"deep structures\"",
        ),
        line: 451,
        column: 26,
        span: 10770..10787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 27,
        span: 10787..10788,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 452,
        column: 8,
        span: 10791..10796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 452,
        column: 10,
        span: 10797..10798,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 452,
        column: 12,
        span: 10799..10800,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 452,
        column: 14,
        span: 10801..10802,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 452,
        column: 15,
        span: 10802..10803,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 453,
        column: 6,
        span: 10806..10809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 453,
        column: 8,
        span: 10810..10811,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 453,
        column: 10,
        span: 10812..10813,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 453,
        column: 12,
        span: 10813..10815,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 453,
        column: 13,
        span: 10815..10816,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200000",
                    after_decimal: "",
                },
            ),
        ),
        line: 453,
        column: 19,
        span: 10815..10822,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 453,
        column: 0,
        span: 10823..10825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 454,
        column: 6,
        span: 10830..10831,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 454,
        column: 8,
        span: 10832..10833,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 454,
        column: 10,
        span: 10834..10835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 454,
        column: 14,
        span: 10835..10839,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 454,
        column: 16,
        span: 10840..10841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 454,
        column: 18,
        span: 10842..10843,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 454,
        column: 19,
        span: 10843..10844,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 455,
        column: 0,
        span: 10847..10850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 456,
        column: 17,
        span: 10853..10867,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
        column: 18,
        span: 10867..10868,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
        column: 19,
        span: 10868..10869,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 457,
        column: 0,
        span: 10870..10873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 460,
        column: 6,
        span: 10937..10942,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 460,
        column: 7,
        span: 10942..10943,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"self-referenced threads\"",
        ),
        line: 460,
        column: 32,
        span: 10943..10968,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 460,
        column: 33,
        span: 10968..10969,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 461,
        column: 6,
        span: 10970..10975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "thread_id",
        ),
        line: 461,
        column: 16,
        span: 10976..10985,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 461,
        column: 18,
        span: 10986..10987,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 461,
        column: 0,
        span: 10987..10989,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 462,
        column: 6,
        span: 10990..10995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "threads",
        ),
        line: 462,
        column: 14,
        span: 10996..11003,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 462,
        column: 16,
        span: 11004..11005,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 462,
        column: 18,
        span: 11006..11007,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 462,
        column: 19,
        span: 11007..11008,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 464,
        column: 6,
        span: 11010..11015,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 464,
        column: 15,
        span: 11016..11024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fn",
        ),
        line: 464,
        column: 18,
        span: 11025..11027,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 464,
        column: 20,
        span: 11028..11029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "thread",
        ),
        line: 464,
        column: 26,
        span: 11029..11035,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
        column: 27,
        span: 11035..11036,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 465,
        column: 10,
        span: 11041..11046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 465,
        column: 12,
        span: 11047..11048,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 465,
        column: 14,
        span: 11049..11050,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 465,
        column: 16,
        span: 11051..11052,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 465,
        column: 17,
        span: 11052..11053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "threads",
        ),
        line: 466,
        column: 12,
        span: 11058..11065,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 466,
        column: 13,
        span: 11065..11066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "thread_id",
        ),
        line: 466,
        column: 22,
        span: 11066..11075,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 466,
        column: 23,
        span: 11075..11076,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 466,
        column: 25,
        span: 11077..11078,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 466,
        column: 34,
        span: 11079..11087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 466,
        column: 35,
        span: 11087..11088,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
        column: 36,
        span: 11088..11089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "thread",
        ),
        line: 467,
        column: 36,
        span: 11119..11125,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 467,
        column: 38,
        span: 11126..11127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 467,
        column: 0,
        span: 11128..11129,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 468,
        column: 0,
        span: 11155..11158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 469,
        column: 14,
        span: 11163..11172,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 469,
        column: 15,
        span: 11172..11173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 469,
        column: 20,
        span: 11173..11178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 469,
        column: 21,
        span: 11178..11179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 469,
        column: 22,
        span: 11179..11180,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 470,
        column: 0,
        span: 11181..11184,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 472,
        column: 6,
        span: 11186..11191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "thread_id",
        ),
        line: 472,
        column: 16,
        span: 11192..11201,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 472,
        column: 18,
        span: 11202..11203,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 472,
        column: 23,
        span: 11203..11208,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 472,
        column: 0,
        span: 11209..11211,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 473,
        column: 10,
        span: 11216..11221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "thread",
        ),
        line: 473,
        column: 17,
        span: 11222..11228,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 473,
        column: 19,
        span: 11229..11230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 473,
        column: 29,
        span: 11231..11240,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 473,
        column: 30,
        span: 11240..11241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 473,
        column: 36,
        span: 11241..11247,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 473,
        column: 37,
        span: 11247..11248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fn",
        ),
        line: 473,
        column: 39,
        span: 11248..11250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 473,
        column: 40,
        span: 11250..11251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 474,
        column: 14,
        span: 11256..11265,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 474,
        column: 15,
        span: 11265..11266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 474,
        column: 21,
        span: 11266..11272,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 474,
        column: 22,
        span: 11272..11273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "thread",
        ),
        line: 474,
        column: 28,
        span: 11273..11279,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 474,
        column: 29,
        span: 11279..11280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "thread",
        ),
        line: 474,
        column: 36,
        span: 11281..11287,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 474,
        column: 37,
        span: 11287..11288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "thread_id",
        ),
        line: 475,
        column: 14,
        span: 11293..11302,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 475,
        column: 16,
        span: 11303..11304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "thread_id",
        ),
        line: 475,
        column: 26,
        span: 11305..11314,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 475,
        column: 28,
        span: 11315..11316,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 475,
        column: 0,
        span: 11316..11318,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 476,
        column: 0,
        span: 11319..11322,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 484,
        column: 0,
        span: 11616..11618,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 485,
        column: 8,
        span: 11621..11626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collected",
        ),
        line: 485,
        column: 18,
        span: 11627..11636,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 485,
        column: 20,
        span: 11637..11638,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 485,
        column: 26,
        span: 11639..11644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 486,
        column: 17,
        span: 11673..11687,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 486,
        column: 18,
        span: 11687..11688,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 486,
        column: 19,
        span: 11688..11689,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 486,
        column: 20,
        span: 11689..11690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 486,
        column: 35,
        span: 11691..11705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 486,
        column: 36,
        span: 11705..11706,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 486,
        column: 42,
        span: 11706..11712,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 486,
        column: 43,
        span: 11712..11713,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 487,
        column: 0,
        span: 11716..11718,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 488,
        column: 10,
        span: 11723..11728,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 488,
        column: 19,
        span: 11729..11737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 488,
        column: 21,
        span: 11738..11739,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 488,
        column: 23,
        span: 11740..11741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "param",
        ),
        line: 488,
        column: 28,
        span: 11741..11746,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 488,
        column: 29,
        span: 11746..11747,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 489,
        column: 8,
        span: 11755..11756,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 489,
        column: 9,
        span: 11756..11757,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 489,
        column: 17,
        span: 11757..11765,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 489,
        column: 19,
        span: 11766..11767,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 489,
        column: 20,
        span: 11767..11768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 490,
        column: 15,
        span: 11777..11783,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 490,
        column: 16,
        span: 11783..11784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 490,
        column: 20,
        span: 11784..11788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 490,
        column: 21,
        span: 11788..11789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 490,
        column: 22,
        span: 11789..11790,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 490,
        column: 23,
        span: 11790..11791,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 490,
        column: 26,
        span: 11792..11794,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'function'",
        ),
        line: 490,
        column: 37,
        span: 11795..11805,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 490,
        column: 41,
        span: 11806..11809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 490,
        column: 46,
        span: 11810..11814,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 490,
        column: 47,
        span: 11814..11815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "param",
        ),
        line: 490,
        column: 52,
        span: 11815..11820,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 490,
        column: 53,
        span: 11820..11821,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 490,
        column: 56,
        span: 11822..11824,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'thread'",
        ),
        line: 490,
        column: 65,
        span: 11825..11833,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 490,
        column: 66,
        span: 11833..11834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "param",
        ),
        line: 491,
        column: 14,
        span: 11843..11848,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 491,
        column: 16,
        span: 11849..11850,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 491,
        column: 18,
        span: 11851..11852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "param",
        ),
        line: 491,
        column: 23,
        span: 11852..11857,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 491,
        column: 24,
        span: 11857..11858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 491,
        column: 26,
        span: 11859..11860,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 491,
        column: 27,
        span: 11860..11861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 492,
        column: 21,
        span: 11870..11882,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 492,
        column: 22,
        span: 11882..11883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "param",
        ),
        line: 492,
        column: 27,
        span: 11883..11888,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 492,
        column: 28,
        span: 11888..11889,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 492,
        column: 30,
        span: 11890..11891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 492,
        column: 34,
        span: 11891..11895,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 492,
        column: 36,
        span: 11896..11897,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 492,
        column: 45,
        span: 11898..11906,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 492,
        column: 47,
        span: 11907..11908,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 492,
        column: 48,
        span: 11908..11909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collected",
        ),
        line: 492,
        column: 58,
        span: 11910..11919,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 492,
        column: 60,
        span: 11920..11921,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 492,
        column: 65,
        span: 11922..11926,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 492,
        column: 69,
        span: 11927..11930,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 492,
        column: 70,
        span: 11930..11931,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 492,
        column: 71,
        span: 11931..11932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 493,
        column: 18,
        span: 11941..11950,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 493,
        column: 19,
        span: 11950..11951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 493,
        column: 24,
        span: 11951..11956,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 493,
        column: 25,
        span: 11956..11957,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 493,
        column: 28,
        span: 11956..11960,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 493,
        column: 29,
        span: 11960..11961,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 494,
        column: 10,
        span: 11968..11971,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 494,
        column: 11,
        span: 11971..11972,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 494,
        column: 12,
        span: 11972..11973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 494,
        column: 13,
        span: 11973..11974,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 495,
        column: 0,
        span: 11979..11982,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 496,
        column: 10,
        span: 11987..11992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 496,
        column: 13,
        span: 11993..11995,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 496,
        column: 15,
        span: 11996..11997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 496,
        column: 25,
        span: 11998..12007,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 496,
        column: 26,
        span: 12007..12008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 496,
        column: 32,
        span: 12008..12014,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 496,
        column: 33,
        span: 12014..12015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 496,
        column: 34,
        span: 12015..12016,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 496,
        column: 35,
        span: 12016..12017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 497,
        column: 11,
        span: 12022..12028,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 497,
        column: 12,
        span: 12028..12029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 497,
        column: 21,
        span: 12029..12038,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 497,
        column: 22,
        span: 12038..12039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 497,
        column: 28,
        span: 12039..12045,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 497,
        column: 29,
        span: 12045..12046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 497,
        column: 31,
        span: 12046..12048,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 497,
        column: 32,
        span: 12048..12049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 497,
        column: 35,
        span: 12050..12052,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 497,
        column: 36,
        span: 12052..12053,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 497,
        column: 37,
        span: 12053..12054,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 498,
        column: 0,
        span: 12057..12060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 501,
        column: 17,
        span: 12168..12182,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 501,
        column: 18,
        span: 12182..12183,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 501,
        column: 19,
        span: 12183..12184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 502,
        column: 9,
        span: 12187..12193,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 502,
        column: 10,
        span: 12193..12194,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 502,
        column: 13,
        span: 12194..12197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collected",
        ),
        line: 502,
        column: 23,
        span: 12198..12207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 502,
        column: 24,
        span: 12207..12208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 503,
        column: 17,
        span: 12211..12225,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 503,
        column: 18,
        span: 12225..12226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 503,
        column: 19,
        span: 12226..12227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 504,
        column: 9,
        span: 12230..12236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 504,
        column: 10,
        span: 12236..12237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collected",
        ),
        line: 504,
        column: 19,
        span: 12237..12246,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 504,
        column: 20,
        span: 12246..12247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 505,
        column: 17,
        span: 12250..12264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 505,
        column: 18,
        span: 12264..12265,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        line: 505,
        column: 27,
        span: 12265..12274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 505,
        column: 28,
        span: 12274..12275,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 506,
        column: 0,
        span: 12276..12279,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 509,
        column: 0,
        span: 12282..12284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 510,
        column: 17,
        span: 12287..12301,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 510,
        column: 18,
        span: 12301..12302,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 510,
        column: 19,
        span: 12302..12303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 511,
        column: 17,
        span: 12306..12320,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 511,
        column: 23,
        span: 12320..12326,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 512,
        column: 8,
        span: 12329..12334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 512,
        column: 10,
        span: 12335..12336,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 512,
        column: 12,
        span: 12337..12338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcinfo",
        ),
        line: 512,
        column: 19,
        span: 12339..12345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 512,
        column: 20,
        span: 12345..12346,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 512,
        column: 21,
        span: 12346..12347,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 513,
        column: 0,
        span: 12350..12356,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 514,
        column: 8,
        span: 12361..12364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 514,
        column: 10,
        span: 12365..12366,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 514,
        column: 11,
        span: 12366..12367,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 514,
        column: 12,
        span: 12366..12368,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 514,
        column: 13,
        span: 12368..12369,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 514,
        column: 17,
        span: 12368..12373,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 514,
        column: 20,
        span: 12374..12376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 514,
        column: 25,
        span: 12377..12381,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 514,
        column: 26,
        span: 12381..12382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 514,
        column: 27,
        span: 12382..12383,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 514,
        column: 29,
        span: 12384..12385,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 514,
        column: 31,
        span: 12386..12387,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 514,
        column: 32,
        span: 12387..12388,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 514,
        column: 0,
        span: 12389..12392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 515,
        column: 19,
        span: 12397..12411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 515,
        column: 20,
        span: 12411..12412,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"step\"",
        ),
        line: 515,
        column: 26,
        span: 12412..12418,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 515,
        column: 27,
        span: 12418..12419,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 515,
        column: 29,
        span: 12419..12421,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 515,
        column: 30,
        span: 12421..12422,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 516,
        column: 8,
        span: 12469..12474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcinfo",
        ),
        line: 516,
        column: 15,
        span: 12475..12481,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 516,
        column: 16,
        span: 12481..12482,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 516,
        column: 17,
        span: 12482..12483,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 516,
        column: 19,
        span: 12484..12485,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 516,
        column: 21,
        span: 12485..12487,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 516,
        column: 23,
        span: 12488..12489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 516,
        column: 0,
        span: 12490..12491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 517,
        column: 17,
        span: 12494..12508,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        line: 517,
        column: 26,
        span: 12508..12517,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 518,
        column: 0,
        span: 12518..12521,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 521,
        column: 3,
        span: 12524..12526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 521,
        column: 5,
        span: 12527..12528,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 521,
        column: 10,
        span: 12529..12533,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 523,
        column: 8,
        span: 12584..12589,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 523,
        column: 17,
        span: 12590..12598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 523,
        column: 21,
        span: 12599..12602,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 523,
        column: 23,
        span: 12603..12604,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 523,
        column: 24,
        span: 12604..12605,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 524,
        column: 10,
        span: 12610..12615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 524,
        column: 12,
        span: 12616..12617,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 524,
        column: 14,
        span: 12618..12619,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 524,
        column: 16,
        span: 12620..12621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 524,
        column: 17,
        span: 12621..12622,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 524,
        column: 19,
        span: 12623..12624,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 524,
        column: 22,
        span: 12624..12627,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 524,
        column: 23,
        span: 12627..12628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 525,
        column: 14,
        span: 12633..12642,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 525,
        column: 15,
        span: 12642..12643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 525,
        column: 20,
        span: 12643..12648,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 525,
        column: 21,
        span: 12648..12649,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 525,
        column: 29,
        span: 12649..12657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 525,
        column: 31,
        span: 12658..12659,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 525,
        column: 32,
        span: 12659..12660,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 525,
        column: 39,
        span: 12661..12667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 525,
        column: 41,
        span: 12668..12669,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 525,
        column: 42,
        span: 12669..12670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 525,
        column: 43,
        span: 12670..12671,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 525,
        column: 47,
        span: 12672..12675,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 525,
        column: 48,
        span: 12675..12676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 526,
        column: 11,
        span: 12704..12710,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 526,
        column: 12,
        span: 12710..12711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 526,
        column: 13,
        span: 12711..12712,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 526,
        column: 14,
        span: 12712..12713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 526,
        column: 15,
        span: 12713..12714,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 526,
        column: 18,
        span: 12715..12717,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 526,
        column: 21,
        span: 12717..12720,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 526,
        column: 22,
        span: 12720..12721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 527,
        column: 6,
        span: 12743..12744,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 527,
        column: 8,
        span: 12745..12746,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 527,
        column: 10,
        span: 12747..12748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 527,
        column: 11,
        span: 12748..12749,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 527,
        column: 13,
        span: 12750..12751,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 527,
        column: 16,
        span: 12751..12754,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 527,
        column: 17,
        span: 12754..12755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 528,
        column: 11,
        span: 12785..12791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 528,
        column: 12,
        span: 12791..12792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 528,
        column: 13,
        span: 12792..12793,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 528,
        column: 14,
        span: 12793..12794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gccolor",
        ),
        line: 528,
        column: 21,
        span: 12794..12801,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 528,
        column: 22,
        span: 12801..12802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 528,
        column: 23,
        span: 12802..12803,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 528,
        column: 24,
        span: 12803..12804,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 528,
        column: 27,
        span: 12805..12807,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"white\"",
        ),
        line: 528,
        column: 35,
        span: 12808..12815,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 528,
        column: 36,
        span: 12815..12816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 529,
        column: 14,
        span: 12849..12858,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 529,
        column: 15,
        span: 12858..12859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 529,
        column: 20,
        span: 12859..12864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
        column: 21,
        span: 12864..12865,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 529,
        column: 24,
        span: 12864..12868,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
        column: 25,
        span: 12868..12869,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 530,
        column: 0,
        span: 12911..12914,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 532,
        column: 8,
        span: 12918..12923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 532,
        column: 10,
        span: 12924..12925,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 532,
        column: 12,
        span: 12926..12927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 532,
        column: 25,
        span: 12928..12940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
        column: 26,
        span: 12940..12941,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 532,
        column: 27,
        span: 12941..12942,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 532,
        column: 28,
        span: 12942..12943,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 532,
        column: 29,
        span: 12943..12944,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 532,
        column: 31,
        span: 12945..12946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 532,
        column: 37,
        span: 12946..12952,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 532,
        column: 39,
        span: 12953..12954,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"kv\"",
        ),
        line: 532,
        column: 44,
        span: 12955..12959,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 532,
        column: 45,
        span: 12959..12960,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
        column: 46,
        span: 12960..12961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 533,
        column: 17,
        span: 12964..12978,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
        column: 18,
        span: 12978..12979,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
        column: 19,
        span: 12979..12980,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 533,
        column: 20,
        span: 12980..12981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 533,
        column: 35,
        span: 12982..12996,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
        column: 36,
        span: 12996..12997,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'stop'",
        ),
        line: 533,
        column: 42,
        span: 12997..13003,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
        column: 43,
        span: 13003..13004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 535,
        column: 4,
        span: 13073..13074,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 535,
        column: 5,
        span: 13074..13075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 535,
        column: 7,
        span: 13075..13077,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 535,
        column: 9,
        span: 13078..13079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 535,
        column: 19,
        span: 13080..13089,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 535,
        column: 20,
        span: 13089..13090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 535,
        column: 24,
        span: 13090..13094,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 535,
        column: 25,
        span: 13094..13095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 535,
        column: 28,
        span: 13095..13098,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 535,
        column: 29,
        span: 13098..13099,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 536,
        column: 8,
        span: 13102..13107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 536,
        column: 10,
        span: 13108..13109,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 536,
        column: 12,
        span: 13110..13111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 536,
        column: 14,
        span: 13112..13113,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 536,
        column: 15,
        span: 13113..13114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 536,
        column: 17,
        span: 13114..13116,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 536,
        column: 18,
        span: 13116..13117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 536,
        column: 19,
        span: 13117..13118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 537,
        column: 4,
        span: 13162..13163,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 537,
        column: 5,
        span: 13163..13164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcstate",
        ),
        line: 537,
        column: 12,
        span: 13164..13171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 537,
        column: 13,
        span: 13171..13172,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"atomic\"",
        ),
        line: 537,
        column: 21,
        span: 13172..13180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 537,
        column: 22,
        span: 13180..13181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 538,
        column: 9,
        span: 13222..13228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 538,
        column: 10,
        span: 13228..13229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 538,
        column: 11,
        span: 13229..13230,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 538,
        column: 12,
        span: 13230..13231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcstate",
        ),
        line: 538,
        column: 19,
        span: 13231..13238,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 538,
        column: 20,
        span: 13238..13239,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 538,
        column: 21,
        span: 13239..13240,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 538,
        column: 24,
        span: 13241..13243,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"atomic\"",
        ),
        line: 538,
        column: 33,
        span: 13244..13252,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 538,
        column: 34,
        span: 13252..13253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 539,
        column: 9,
        span: 13256..13262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 539,
        column: 10,
        span: 13262..13263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 539,
        column: 11,
        span: 13263..13264,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 539,
        column: 12,
        span: 13264..13265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 539,
        column: 14,
        span: 13265..13267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 539,
        column: 15,
        span: 13267..13268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 539,
        column: 16,
        span: 13268..13269,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 539,
        column: 19,
        span: 13270..13272,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 539,
        column: 23,
        span: 13272..13276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 539,
        column: 24,
        span: 13276..13277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 540,
        column: 9,
        span: 13330..13336,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 540,
        column: 10,
        span: 13336..13337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 540,
        column: 11,
        span: 13337..13338,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 540,
        column: 12,
        span: 13338..13339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gccolor",
        ),
        line: 540,
        column: 19,
        span: 13339..13346,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 540,
        column: 20,
        span: 13346..13347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 540,
        column: 21,
        span: 13347..13348,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 540,
        column: 22,
        span: 13348..13349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 540,
        column: 24,
        span: 13349..13351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 540,
        column: 25,
        span: 13351..13352,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 540,
        column: 28,
        span: 13353..13355,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"white\"",
        ),
        line: 540,
        column: 36,
        span: 13356..13363,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 540,
        column: 37,
        span: 13363..13364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 541,
        column: 4,
        span: 13396..13397,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 541,
        column: 5,
        span: 13397..13398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcstate",
        ),
        line: 541,
        column: 12,
        span: 13398..13405,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 541,
        column: 13,
        span: 13405..13406,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pause\"",
        ),
        line: 541,
        column: 20,
        span: 13406..13413,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 541,
        column: 21,
        span: 13413..13414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 542,
        column: 9,
        span: 13470..13476,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 542,
        column: 10,
        span: 13476..13477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 542,
        column: 11,
        span: 13477..13478,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 542,
        column: 12,
        span: 13478..13479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 542,
        column: 14,
        span: 13479..13481,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 542,
        column: 17,
        span: 13482..13484,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 542,
        column: 21,
        span: 13485..13488,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 542,
        column: 25,
        span: 13489..13492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 542,
        column: 27,
        span: 13493..13494,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 542,
        column: 28,
        span: 13494..13495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 542,
        column: 29,
        span: 13495..13496,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 542,
        column: 32,
        span: 13497..13499,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 542,
        column: 35,
        span: 13499..13502,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 542,
        column: 36,
        span: 13502..13503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 544,
        column: 17,
        span: 13541..13555,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 544,
        column: 18,
        span: 13555..13556,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        line: 544,
        column: 27,
        span: 13556..13565,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 544,
        column: 28,
        span: 13565..13566,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 547,
        column: 8,
        span: 13642..13647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 547,
        column: 10,
        span: 13648..13649,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 547,
        column: 12,
        span: 13650..13651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 547,
        column: 14,
        span: 13652..13653,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 547,
        column: 15,
        span: 13653..13654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 547,
        column: 26,
        span: 13654..13665,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 547,
        column: 27,
        span: 13665..13666,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 547,
        column: 28,
        span: 13665..13667,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 547,
        column: 29,
        span: 13667..13668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 548,
        column: 17,
        span: 13694..13708,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 548,
        column: 18,
        span: 13708..13709,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 548,
        column: 19,
        span: 13709..13710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 549,
        column: 17,
        span: 13713..13727,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 549,
        column: 23,
        span: 13727..13733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 550,
        column: 4,
        span: 13736..13737,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 550,
        column: 5,
        span: 13737..13738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcstate",
        ),
        line: 550,
        column: 12,
        span: 13738..13745,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"atomic\"",
        ),
        line: 550,
        column: 20,
        span: 13745..13753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 551,
        column: 4,
        span: 13756..13757,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 551,
        column: 5,
        span: 13757..13758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcstate",
        ),
        line: 551,
        column: 12,
        span: 13758..13765,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sweepallgc\"",
        ),
        line: 551,
        column: 24,
        span: 13765..13777,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 552,
        column: 8,
        span: 13780..13785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 552,
        column: 10,
        span: 13786..13787,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 552,
        column: 12,
        span: 13788..13789,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 552,
        column: 14,
        span: 13790..13791,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 552,
        column: 15,
        span: 13791..13792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 553,
        column: 9,
        span: 13795..13801,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 553,
        column: 10,
        span: 13801..13802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 553,
        column: 11,
        span: 13802..13803,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 553,
        column: 12,
        span: 13803..13804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gccolor",
        ),
        line: 553,
        column: 19,
        span: 13804..13811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 553,
        column: 20,
        span: 13811..13812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 553,
        column: 21,
        span: 13812..13813,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 553,
        column: 22,
        span: 13813..13814,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 553,
        column: 25,
        span: 13815..13817,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"black\"",
        ),
        line: 553,
        column: 33,
        span: 13818..13825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 553,
        column: 34,
        span: 13825..13826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 554,
        column: 9,
        span: 13859..13865,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 554,
        column: 10,
        span: 13865..13866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 554,
        column: 11,
        span: 13866..13867,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 554,
        column: 12,
        span: 13867..13868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gccolor",
        ),
        line: 554,
        column: 19,
        span: 13868..13875,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 554,
        column: 20,
        span: 13875..13876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 554,
        column: 21,
        span: 13876..13877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 554,
        column: 22,
        span: 13877..13878,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 554,
        column: 25,
        span: 13879..13881,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"white\"",
        ),
        line: 554,
        column: 33,
        span: 13882..13889,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 554,
        column: 34,
        span: 13889..13890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 555,
        column: 8,
        span: 13921..13926,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 555,
        column: 9,
        span: 13926..13927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        line: 555,
        column: 21,
        span: 13927..13939,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 555,
        column: 22,
        span: 13939..13940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 555,
        column: 23,
        span: 13940..13941,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 555,
        column: 24,
        span: 13941..13942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 555,
        column: 26,
        span: 13943..13944,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 555,
        column: 27,
        span: 13944..13945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 556,
        column: 9,
        span: 13976..13982,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 556,
        column: 10,
        span: 13982..13983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 556,
        column: 11,
        span: 13983..13984,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 556,
        column: 12,
        span: 13984..13985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gccolor",
        ),
        line: 556,
        column: 19,
        span: 13985..13992,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 556,
        column: 20,
        span: 13992..13993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 556,
        column: 21,
        span: 13993..13994,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 556,
        column: 22,
        span: 13994..13995,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 556,
        column: 25,
        span: 13996..13998,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"white\"",
        ),
        line: 556,
        column: 33,
        span: 13999..14006,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 556,
        column: 34,
        span: 14006..14007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 557,
        column: 17,
        span: 14040..14054,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        line: 557,
        column: 26,
        span: 14054..14063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 559,
        column: 8,
        span: 14067..14072,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 559,
        column: 11,
        span: 14072..14075,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 560,
        column: 0,
        span: 14076..14079,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 563,
        column: 3,
        span: 14082..14084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 563,
        column: 5,
        span: 14085..14086,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 563,
        column: 0,
        span: 14087..14091,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 564,
        column: 8,
        span: 14094..14099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 564,
        column: 14,
        span: 14100..14105,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 564,
        column: 16,
        span: 14106..14107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 564,
        column: 24,
        span: 14108..14115,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        line: 564,
        column: 32,
        span: 14116..14123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 565,
        column: 17,
        span: 14126..14140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 565,
        column: 18,
        span: 14140..14141,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 565,
        column: 24,
        span: 14141..14147,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 565,
        column: 25,
        span: 14147..14148,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 566,
        column: 8,
        span: 14151..14156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 566,
        column: 10,
        span: 14157..14158,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 566,
        column: 12,
        span: 14159..14160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 566,
        column: 14,
        span: 14161..14162,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 566,
        column: 15,
        span: 14162..14163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 566,
        column: 26,
        span: 14163..14174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 566,
        column: 27,
        span: 14174..14175,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 566,
        column: 28,
        span: 14174..14176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 566,
        column: 29,
        span: 14176..14177,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 567,
        column: 8,
        span: 14180..14185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 567,
        column: 10,
        span: 14186..14187,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 567,
        column: 12,
        span: 14188..14189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 567,
        column: 14,
        span: 14190..14191,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 567,
        column: 15,
        span: 14191..14192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 567,
        column: 26,
        span: 14192..14203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 567,
        column: 27,
        span: 14203..14204,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 567,
        column: 28,
        span: 14203..14205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 567,
        column: 29,
        span: 14205..14206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 568,
        column: 8,
        span: 14209..14214,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 568,
        column: 9,
        span: 14214..14215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 568,
        column: 21,
        span: 14215..14227,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 568,
        column: 22,
        span: 14227..14228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 568,
        column: 23,
        span: 14228..14229,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 568,
        column: 24,
        span: 14229..14230,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 568,
        column: 26,
        span: 14231..14232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 568,
        column: 30,
        span: 14232..14236,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 568,
        column: 32,
        span: 14237..14238,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 568,
        column: 37,
        span: 14239..14243,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 568,
        column: 38,
        span: 14243..14244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 568,
        column: 39,
        span: 14244..14245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 569,
        column: 8,
        span: 14283..14288,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 569,
        column: 9,
        span: 14288..14289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 569,
        column: 21,
        span: 14289..14301,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 569,
        column: 22,
        span: 14301..14302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 569,
        column: 23,
        span: 14302..14303,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 569,
        column: 24,
        span: 14303..14304,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 569,
        column: 26,
        span: 14305..14306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 569,
        column: 30,
        span: 14306..14310,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 569,
        column: 32,
        span: 14311..14312,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 569,
        column: 37,
        span: 14313..14317,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 569,
        column: 38,
        span: 14317..14318,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 569,
        column: 39,
        span: 14318..14319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 570,
        column: 9,
        span: 14342..14348,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 570,
        column: 10,
        span: 14348..14349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 570,
        column: 11,
        span: 14349..14350,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 570,
        column: 12,
        span: 14350..14351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gccolor",
        ),
        line: 570,
        column: 19,
        span: 14351..14358,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 570,
        column: 20,
        span: 14358..14359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 570,
        column: 21,
        span: 14359..14360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 570,
        column: 22,
        span: 14360..14361,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 570,
        column: 25,
        span: 14362..14364,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"white\"",
        ),
        line: 570,
        column: 33,
        span: 14365..14372,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 570,
        column: 34,
        span: 14372..14373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 571,
        column: 4,
        span: 14376..14377,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 571,
        column: 5,
        span: 14377..14378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmemory",
        ),
        line: 571,
        column: 16,
        span: 14378..14389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 571,
        column: 17,
        span: 14389..14390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 571,
        column: 18,
        span: 14390..14391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 572,
        column: 17,
        span: 14394..14408,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 572,
        column: 18,
        span: 14408..14409,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        line: 572,
        column: 27,
        span: 14409..14418,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 572,
        column: 28,
        span: 14418..14419,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 573,
        column: 0,
        span: 14420..14423,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 576,
        column: 3,
        span: 14426..14428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 576,
        column: 5,
        span: 14429..14430,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 576,
        column: 0,
        span: 14431..14435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 577,
        column: 8,
        span: 14438..14443,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 577,
        column: 9,
        span: 14443..14444,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"emergency collections\"",
        ),
        line: 577,
        column: 32,
        span: 14444..14467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 577,
        column: 33,
        span: 14467..14468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 578,
        column: 17,
        span: 14471..14485,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 578,
        column: 18,
        span: 14485..14486,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 578,
        column: 19,
        span: 14486..14487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 579,
        column: 17,
        span: 14490..14504,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 579,
        column: 18,
        span: 14504..14505,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 579,
        column: 19,
        span: 14505..14506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 580,
        column: 4,
        span: 14509..14510,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 580,
        column: 5,
        span: 14510..14511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 580,
        column: 13,
        span: 14511..14519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 580,
        column: 14,
        span: 14519..14520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 580,
        column: 15,
        span: 14520..14521,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 580,
        column: 16,
        span: 14521..14522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 580,
        column: 24,
        span: 14522..14530,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 580,
        column: 25,
        span: 14530..14531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 580,
        column: 26,
        span: 14531..14532,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 580,
        column: 28,
        span: 14533..14534,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 580,
        column: 32,
        span: 14534..14538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 580,
        column: 33,
        span: 14538..14539,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 581,
        column: 6,
        span: 14542..14545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 581,
        column: 8,
        span: 14546..14547,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 581,
        column: 9,
        span: 14547..14548,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 581,
        column: 10,
        span: 14547..14549,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 581,
        column: 11,
        span: 14549..14550,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 581,
        column: 14,
        span: 14549..14553,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 581,
        column: 17,
        span: 14554..14556,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 581,
        column: 23,
        span: 14557..14562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 581,
        column: 25,
        span: 14563..14564,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 581,
        column: 27,
        span: 14565..14566,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 581,
        column: 29,
        span: 14567..14568,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 581,
        column: 30,
        span: 14568..14569,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 581,
        column: 0,
        span: 14570..14573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 582,
        column: 4,
        span: 14576..14577,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 582,
        column: 5,
        span: 14577..14578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 582,
        column: 13,
        span: 14578..14586,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 582,
        column: 14,
        span: 14586..14587,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 582,
        column: 15,
        span: 14586..14588,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 582,
        column: 16,
        span: 14588..14589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 583,
        column: 17,
        span: 14592..14606,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 583,
        column: 18,
        span: 14606..14607,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 583,
        column: 19,
        span: 14607..14608,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 584,
        column: 8,
        span: 14611..14616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 584,
        column: 10,
        span: 14617..14618,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 584,
        column: 12,
        span: 14619..14620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 584,
        column: 14,
        span: 14621..14622,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 584,
        column: 15,
        span: 14622..14623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 584,
        column: 23,
        span: 14623..14631,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 584,
        column: 24,
        span: 14631..14632,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 584,
        column: 31,
        span: 14632..14639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 584,
        column: 32,
        span: 14639..14640,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 585,
        column: 8,
        span: 14643..14648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 585,
        column: 10,
        span: 14649..14650,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 585,
        column: 12,
        span: 14651..14652,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 585,
        column: 14,
        span: 14653..14654,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 585,
        column: 15,
        span: 14654..14655,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 585,
        column: 16,
        span: 14655..14656,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 585,
        column: 17,
        span: 14656..14657,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 585,
        column: 19,
        span: 14658..14659,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 585,
        column: 20,
        span: 14659..14660,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 585,
        column: 21,
        span: 14660..14661,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 585,
        column: 23,
        span: 14662..14663,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 585,
        column: 24,
        span: 14663..14664,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 585,
        column: 25,
        span: 14664..14665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 586,
        column: 9,
        span: 14693..14699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 586,
        column: 10,
        span: 14699..14700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 586,
        column: 11,
        span: 14700..14701,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 586,
        column: 12,
        span: 14701..14702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 586,
        column: 20,
        span: 14702..14710,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 586,
        column: 21,
        span: 14710..14711,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 586,
        column: 28,
        span: 14711..14718,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 586,
        column: 29,
        span: 14718..14719,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 586,
        column: 32,
        span: 14720..14722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 586,
        column: 34,
        span: 14723..14724,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 586,
        column: 36,
        span: 14725..14726,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 586,
        column: 38,
        span: 14726..14728,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 586,
        column: 39,
        span: 14728..14729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 587,
        column: 4,
        span: 14732..14733,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 587,
        column: 6,
        span: 14734..14735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 587,
        column: 8,
        span: 14736..14737,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 587,
        column: 9,
        span: 14737..14738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 587,
        column: 17,
        span: 14738..14746,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 587,
        column: 18,
        span: 14746..14747,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        line: 587,
        column: 28,
        span: 14747..14757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 587,
        column: 29,
        span: 14757..14758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 588,
        column: 4,
        span: 14761..14762,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 588,
        column: 6,
        span: 14763..14764,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 588,
        column: 15,
        span: 14765..14773,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 588,
        column: 17,
        span: 14774..14775,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 588,
        column: 18,
        span: 14775..14776,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 588,
        column: 22,
        span: 14777..14780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 589,
        column: 9,
        span: 14809..14815,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 589,
        column: 10,
        span: 14815..14816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 589,
        column: 11,
        span: 14816..14817,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 589,
        column: 12,
        span: 14817..14818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 589,
        column: 20,
        span: 14818..14826,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 589,
        column: 21,
        span: 14826..14827,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        line: 589,
        column: 31,
        span: 14827..14837,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 589,
        column: 32,
        span: 14837..14838,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 589,
        column: 35,
        span: 14839..14841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 589,
        column: 37,
        span: 14842..14843,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 589,
        column: 39,
        span: 14844..14845,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 589,
        column: 41,
        span: 14845..14847,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 589,
        column: 42,
        span: 14847..14848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 590,
        column: 4,
        span: 14851..14852,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 590,
        column: 6,
        span: 14853..14854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 590,
        column: 8,
        span: 14855..14856,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 590,
        column: 9,
        span: 14856..14857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 590,
        column: 17,
        span: 14857..14865,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 590,
        column: 18,
        span: 14865..14866,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"thread\"",
        ),
        line: 590,
        column: 26,
        span: 14866..14874,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 590,
        column: 27,
        span: 14874..14875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 591,
        column: 4,
        span: 14878..14879,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 591,
        column: 6,
        span: 14880..14881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 591,
        column: 16,
        span: 14882..14891,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 591,
        column: 17,
        span: 14891..14892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 591,
        column: 23,
        span: 14892..14898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 591,
        column: 24,
        span: 14898..14899,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 591,
        column: 32,
        span: 14899..14907,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 591,
        column: 34,
        span: 14908..14909,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 591,
        column: 35,
        span: 14909..14910,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 591,
        column: 39,
        span: 14911..14914,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 591,
        column: 40,
        span: 14914..14915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 592,
        column: 9,
        span: 14946..14952,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 592,
        column: 10,
        span: 14952..14953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 592,
        column: 11,
        span: 14953..14954,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 592,
        column: 12,
        span: 14954..14955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 592,
        column: 20,
        span: 14955..14963,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 592,
        column: 21,
        span: 14963..14964,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"thread\"",
        ),
        line: 592,
        column: 29,
        span: 14964..14972,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 592,
        column: 30,
        span: 14972..14973,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 592,
        column: 33,
        span: 14974..14976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 592,
        column: 35,
        span: 14977..14978,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 592,
        column: 37,
        span: 14979..14980,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 592,
        column: 39,
        span: 14980..14982,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 592,
        column: 40,
        span: 14982..14983,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 593,
        column: 0,
        span: 14984..14987,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 596,
        column: 0,
        span: 15046..15048,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 597,
        column: 8,
        span: 15051..15056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 597,
        column: 21,
        span: 15057..15069,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 597,
        column: 22,
        span: 15069..15070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 597,
        column: 28,
        span: 15070..15076,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 597,
        column: 29,
        span: 15076..15077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 597,
        column: 33,
        span: 15077..15081,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 597,
        column: 34,
        span: 15081..15082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 597,
        column: 39,
        span: 15082..15087,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 597,
        column: 40,
        span: 15087..15088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 597,
        column: 52,
        span: 15088..15100,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 597,
        column: 54,
        span: 15101..15102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 598,
        column: 21,
        span: 15111..15123,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 598,
        column: 22,
        span: 15123..15124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 598,
        column: 28,
        span: 15124..15130,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 598,
        column: 29,
        span: 15130..15131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 598,
        column: 33,
        span: 15131..15135,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 598,
        column: 34,
        span: 15135..15136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 598,
        column: 39,
        span: 15136..15141,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 598,
        column: 40,
        span: 15141..15142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 598,
        column: 0,
        span: 15142..15154,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 599,
        column: 8,
        span: 15157..15162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 599,
        column: 11,
        span: 15163..15165,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 599,
        column: 13,
        span: 15166..15167,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 599,
        column: 15,
        span: 15168..15169,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 599,
        column: 16,
        span: 15169..15170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 600,
        column: 5,
        span: 15173..15175,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 600,
        column: 6,
        span: 15175..15176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 600,
        column: 10,
        span: 15176..15180,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 600,
        column: 12,
        span: 15181..15182,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 600,
        column: 21,
        span: 15183..15191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 600,
        column: 23,
        span: 15192..15193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 600,
        column: 24,
        span: 15193..15194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 600,
        column: 25,
        span: 15194..15195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 601,
        column: 11,
        span: 15200..15206,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 601,
        column: 12,
        span: 15206..15207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 601,
        column: 24,
        span: 15207..15219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 601,
        column: 25,
        span: 15219..15220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 601,
        column: 26,
        span: 15220..15221,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 601,
        column: 27,
        span: 15221..15222,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 601,
        column: 30,
        span: 15223..15225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 601,
        column: 33,
        span: 15226..15228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 601,
        column: 34,
        span: 15228..15229,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 603,
        column: 10,
        span: 15270..15275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 603,
        column: 12,
        span: 15276..15277,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 603,
        column: 14,
        span: 15278..15279,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 603,
        column: 21,
        span: 15280..15286,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 603,
        column: 23,
        span: 15286..15288,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 603,
        column: 24,
        span: 15288..15289,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 603,
        column: 26,
        span: 15288..15291,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 603,
        column: 27,
        span: 15291..15292,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 603,
        column: 28,
        span: 15291..15293,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 603,
        column: 29,
        span: 15293..15294,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 603,
        column: 31,
        span: 15294..15296,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'joao'",
        ),
        line: 603,
        column: 37,
        span: 15296..15302,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 603,
        column: 38,
        span: 15302..15303,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 603,
        column: 40,
        span: 15304..15305,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 603,
        column: 41,
        span: 15305..15306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "___Glob",
        ),
        line: 604,
        column: 12,
        span: 15311..15318,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 604,
        column: 14,
        span: 15319..15320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 604,
        column: 16,
        span: 15321..15322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 605,
        column: 17,
        span: 15349..15361,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 605,
        column: 18,
        span: 15361..15362,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 605,
        column: 19,
        span: 15362..15363,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 605,
        column: 20,
        span: 15363..15364,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 605,
        column: 21,
        span: 15364..15365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 605,
        column: 24,
        span: 15366..15368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 605,
        column: 25,
        span: 15368..15369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 606,
        column: 10,
        span: 15416..15421,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 606,
        column: 11,
        span: 15421..15422,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">>> closing state \"",
        ),
        line: 606,
        column: 31,
        span: 15422..15442,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 606,
        column: 34,
        span: 15443..15445,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<<<\\n\"",
        ),
        line: 606,
        column: 42,
        span: 15446..15453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 606,
        column: 43,
        span: 15453..15454,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 607,
        column: 0,
        span: 15457..15460,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 608,
        column: 8,
        span: 15463..15468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 608,
        column: 10,
        span: 15469..15470,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 608,
        column: 12,
        span: 15471..15472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 608,
        column: 25,
        span: 15473..15485,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 608,
        column: 26,
        span: 15485..15486,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 608,
        column: 27,
        span: 15486..15487,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 608,
        column: 28,
        span: 15487..15488,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 608,
        column: 29,
        span: 15488..15489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 608,
        column: 32,
        span: 15490..15492,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 608,
        column: 33,
        span: 15492..15493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "___Glob",
        ),
        line: 609,
        column: 10,
        span: 15496..15503,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 609,
        column: 12,
        span: 15504..15505,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 609,
        column: 14,
        span: 15506..15507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 609,
        column: 15,
        span: 15507..15508,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 609,
        column: 16,
        span: 15508..15509,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 610,
        column: 0,
        span: 15563..15566,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 613,
        column: 0,
        span: 15645..15647,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 614,
        column: 8,
        span: 15650..15655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 614,
        column: 11,
        span: 15656..15658,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 614,
        column: 13,
        span: 15659..15660,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 614,
        column: 15,
        span: 15661..15662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 614,
        column: 19,
        span: 15662..15666,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 614,
        column: 21,
        span: 15667..15668,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 614,
        column: 30,
        span: 15669..15677,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 614,
        column: 32,
        span: 15678..15679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 614,
        column: 33,
        span: 15679..15680,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 614,
        column: 34,
        span: 15680..15681,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 614,
        column: 41,
        span: 15682..15688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 614,
        column: 43,
        span: 15689..15690,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 614,
        column: 45,
        span: 15691..15692,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 614,
        column: 47,
        span: 15692..15694,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 614,
        column: 51,
        span: 15695..15698,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 614,
        column: 52,
        span: 15698..15699,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 615,
        column: 6,
        span: 15702..15705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 615,
        column: 8,
        span: 15706..15707,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 615,
        column: 10,
        span: 15708..15709,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 615,
        column: 12,
        span: 15709..15711,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 615,
        column: 13,
        span: 15711..15712,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 615,
        column: 15,
        span: 15711..15714,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 615,
        column: 0,
        span: 15715..15717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 617,
        column: 10,
        span: 15773..15778,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 617,
        column: 11,
        span: 15778..15779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 617,
        column: 17,
        span: 15779..15785,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 617,
        column: 18,
        span: 15785..15786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "___Glob",
        ),
        line: 617,
        column: 25,
        span: 15786..15793,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 617,
        column: 26,
        span: 15793..15794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 617,
        column: 39,
        span: 15795..15807,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 617,
        column: 40,
        span: 15807..15808,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 617,
        column: 41,
        span: 15808..15809,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 617,
        column: 42,
        span: 15809..15810,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 617,
        column: 43,
        span: 15810..15811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 617,
        column: 46,
        span: 15812..15814,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 617,
        column: 47,
        span: 15814..15815,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 617,
        column: 48,
        span: 15815..15816,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 618,
        column: 0,
        span: 15819..15822,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 619,
        column: 0,
        span: 15823..15826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 622,
        column: 7,
        span: 15849..15855,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 622,
        column: 8,
        span: 15855..15856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 622,
        column: 22,
        span: 15856..15870,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'isrunning'",
        ),
        line: 622,
        column: 33,
        span: 15870..15881,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 622,
        column: 34,
        span: 15881..15882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 624,
        column: 6,
        span: 15884..15889,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 624,
        column: 7,
        span: 15889..15890,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 624,
        column: 11,
        span: 15890..15894,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 624,
        column: 12,
        span: 15894..15895,
    },
]
