---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/nextvar.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 4,
            column: 6,
            span: 102..107,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 4,
            column: 7,
            span: 107..108,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing tables, next, and for'",
        ),
        position: Position {
            line: 4,
            column: 38,
            span: 108..139,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 4,
            column: 39,
            span: 139..140,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 6,
            column: 6,
            span: 142..147,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 6,
            column: 15,
            span: 148..156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 6,
            column: 26,
            span: 157..167,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 6,
            column: 28,
            span: 168..169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 6,
            column: 31,
            span: 169..172,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 6,
            column: 32,
            span: 172..173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 6,
            column: 34,
            span: 174..175,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 6,
            column: 35,
            span: 175..176,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 6,
            column: 39,
            span: 177..180,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 6,
            column: 40,
            span: 180..181,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 7,
            column: 8,
            span: 184..189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 7,
            column: 10,
            span: 190..191,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 7,
            column: 11,
            span: 191..192,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 7,
            column: 15,
            span: 193..196,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 7,
            column: 17,
            span: 197..198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 7,
            column: 23,
            span: 199..204,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 7,
            column: 24,
            span: 204..205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 7,
            column: 25,
            span: 205..206,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 7,
            column: 26,
            span: 206..207,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 7,
            column: 30,
            span: 208..211,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 7,
            column: 31,
            span: 211..212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 8,
            column: 9,
            span: 215..221,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 8,
            column: 10,
            span: 221..222,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 8,
            column: 13,
            span: 222..225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 8,
            column: 15,
            span: 226..227,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 8,
            column: 19,
            span: 228..231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 8,
            column: 26,
            span: 232..238,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 8,
            column: 27,
            span: 238..239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 8,
            column: 31,
            span: 239..243,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 8,
            column: 32,
            span: 243..244,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 8,
            column: 35,
            span: 244..247,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 8,
            column: 36,
            span: 247..248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 8,
            column: 40,
            span: 249..252,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 8,
            column: 41,
            span: 252..253,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 8,
            column: 42,
            span: 253..254,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 9,
            column: 0,
            span: 255..258,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 12,
            column: 6,
            span: 261..266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 12,
            column: 8,
            span: 267..268,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 12,
            column: 10,
            span: 269..270,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 12,
            column: 12,
            span: 271..272,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 12,
            column: 13,
            span: 272..273,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 15,
            column: 4,
            span: 325..328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 15,
            column: 6,
            span: 329..330,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 15,
            column: 7,
            span: 330..331,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 15,
            column: 8,
            span: 330..332,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 15,
            column: 9,
            span: 332..333,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 15,
            column: 12,
            span: 332..336,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 15,
            column: 15,
            span: 337..339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 15,
            column: 17,
            span: 340..341,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 15,
            column: 18,
            span: 341..342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 15,
            column: 19,
            span: 342..343,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 15,
            column: 21,
            span: 343..345,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        position: Position {
            line: 15,
            column: 24,
            span: 345..348,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 15,
            column: 25,
            span: 348..349,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 15,
            column: 27,
            span: 350..351,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 15,
            column: 32,
            span: 352..356,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 15,
            column: 0,
            span: 357..360,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 16,
            column: 4,
            span: 361..364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 16,
            column: 6,
            span: 365..366,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 16,
            column: 7,
            span: 366..367,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 16,
            column: 8,
            span: 366..368,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 16,
            column: 9,
            span: 368..369,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 16,
            column: 12,
            span: 368..372,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 16,
            column: 15,
            span: 373..375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 16,
            column: 17,
            span: 376..377,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 16,
            column: 18,
            span: 377..378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 16,
            column: 19,
            span: 378..379,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 16,
            column: 21,
            span: 379..381,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        position: Position {
            line: 16,
            column: 24,
            span: 381..384,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 16,
            column: 25,
            span: 384..385,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 16,
            column: 27,
            span: 386..387,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 16,
            column: 31,
            span: 388..391,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 16,
            column: 0,
            span: 392..395,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 18,
            column: 4,
            span: 457..460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 18,
            column: 6,
            span: 461..462,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 18,
            column: 7,
            span: 462..463,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 18,
            column: 8,
            span: 462..464,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 18,
            column: 9,
            span: 464..465,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 18,
            column: 12,
            span: 464..468,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 18,
            column: 0,
            span: 469..471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 19,
            column: 4,
            span: 474..475,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 19,
            column: 5,
            span: 475..476,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 19,
            column: 6,
            span: 476..477,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 19,
            column: 7,
            span: 477..478,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 19,
            column: 9,
            span: 479..480,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 19,
            column: 0,
            span: 481..485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 20,
            column: 9,
            span: 488..494,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 20,
            column: 10,
            span: 494..495,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 20,
            column: 11,
            span: 495..496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 20,
            column: 12,
            span: 496..497,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 20,
            column: 15,
            span: 498..500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 20,
            column: 17,
            span: 501..502,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 20,
            column: 18,
            span: 502..503,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 21,
            column: 0,
            span: 504..507,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 24,
            column: 6,
            span: 527..532,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 24,
            column: 8,
            span: 533..534,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 24,
            column: 10,
            span: 535..536,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 24,
            column: 0,
            span: 536..538,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 25,
            column: 4,
            span: 539..542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 25,
            column: 6,
            span: 543..544,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 25,
            column: 7,
            span: 544..545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 25,
            column: 8,
            span: 545..546,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 25,
            column: 11,
            span: 547..549,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        position: Position {
            line: 25,
            column: 18,
            span: 550..556,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 25,
            column: 19,
            span: 556..557,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 25,
            column: 21,
            span: 556..559,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 25,
            column: 22,
            span: 559..560,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 25,
            column: 24,
            span: 559..562,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 25,
            column: 25,
            span: 562..563,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 25,
            column: 27,
            span: 562..565,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 25,
            column: 28,
            span: 565..566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 25,
            column: 29,
            span: 566..567,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 25,
            column: 30,
            span: 567..568,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 25,
            column: 32,
            span: 567..570,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 25,
            column: 33,
            span: 570..571,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 25,
            column: 0,
            span: 572..574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 26,
            column: 4,
            span: 577..578,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 26,
            column: 6,
            span: 579..580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 26,
            column: 8,
            span: 581..582,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 26,
            column: 10,
            span: 583..584,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 26,
            column: 0,
            span: 584..586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 27,
            column: 9,
            span: 589..595,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 27,
            column: 10,
            span: 595..596,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 27,
            column: 11,
            span: 596..597,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 27,
            column: 14,
            span: 598..600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 27,
            column: 16,
            span: 601..602,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 27,
            column: 20,
            span: 603..606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 27,
            column: 22,
            span: 607..608,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 27,
            column: 25,
            span: 609..611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 27,
            column: 27,
            span: 612..613,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 27,
            column: 29,
            span: 614..615,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 27,
            column: 32,
            span: 615..618,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 27,
            column: 33,
            span: 618..619,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 28,
            column: 0,
            span: 620..623,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 30,
            column: 4,
            span: 625..628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 30,
            column: 6,
            span: 629..630,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 30,
            column: 9,
            span: 631..633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        position: Position {
            line: 30,
            column: 16,
            span: 634..640,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 30,
            column: 17,
            span: 640..641,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 30,
            column: 18,
            span: 641..642,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 30,
            column: 19,
            span: 642..643,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 30,
            column: 21,
            span: 642..645,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 30,
            column: 22,
            span: 645..646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 30,
            column: 24,
            span: 647..648,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 30,
            column: 25,
            span: 648..649,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 30,
            column: 27,
            span: 648..651,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 30,
            column: 28,
            span: 651..652,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 30,
            column: 31,
            span: 653..655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 30,
            column: 38,
            span: 656..662,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 30,
            column: 39,
            span: 662..663,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 30,
            column: 42,
            span: 663..666,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 30,
            column: 43,
            span: 666..667,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 30,
            column: 0,
            span: 668..671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 33,
            column: 2,
            span: 701..702,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 33,
            column: 4,
            span: 703..704,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 33,
            column: 0,
            span: 705..710,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 34,
            column: 6,
            span: 711..716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 34,
            column: 8,
            span: 717..718,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 34,
            column: 10,
            span: 719..720,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 34,
            column: 0,
            span: 720..722,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 35,
            column: 4,
            span: 723..726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 35,
            column: 6,
            span: 727..728,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 35,
            column: 7,
            span: 728..729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 35,
            column: 8,
            span: 729..730,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 35,
            column: 11,
            span: 731..733,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        position: Position {
            line: 35,
            column: 18,
            span: 734..740,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 35,
            column: 19,
            span: 740..741,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 35,
            column: 23,
            span: 741..745,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 35,
            column: 24,
            span: 745..746,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 35,
            column: 29,
            span: 746..751,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 35,
            column: 30,
            span: 751..752,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 35,
            column: 34,
            span: 752..756,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 35,
            column: 35,
            span: 756..757,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 35,
            column: 40,
            span: 757..762,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 35,
            column: 41,
            span: 762..763,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 35,
            column: 0,
            span: 764..766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 36,
            column: 4,
            span: 769..770,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 36,
            column: 6,
            span: 771..772,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 36,
            column: 8,
            span: 773..774,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 36,
            column: 10,
            span: 775..776,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 36,
            column: 0,
            span: 776..778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 37,
            column: 4,
            span: 781..782,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 37,
            column: 6,
            span: 783..784,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 37,
            column: 10,
            span: 785..788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 37,
            column: 0,
            span: 789..790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 38,
            column: 9,
            span: 793..799,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 38,
            column: 10,
            span: 799..800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 38,
            column: 11,
            span: 800..801,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 38,
            column: 14,
            span: 802..804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 38,
            column: 16,
            span: 805..806,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 38,
            column: 17,
            span: 806..807,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 39,
            column: 0,
            span: 808..811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 40,
            column: 7,
            span: 812..818,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 8,
            span: 818..819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 40,
            column: 9,
            span: 819..820,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 40,
            column: 12,
            span: 821..823,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 14,
            span: 823..825,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 15,
            span: 825..826,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 43,
            column: 7,
            span: 868..874,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 8,
            span: 874..875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 43,
            column: 12,
            span: 875..879,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 13,
            span: 879..880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        position: Position {
            line: 43,
            column: 19,
            span: 880..886,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 43,
            column: 20,
            span: 886..887,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 43,
            column: 21,
            span: 887..888,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 22,
            span: 888..889,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 43,
            column: 25,
            span: 890..892,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'function'",
        ),
        position: Position {
            line: 43,
            column: 36,
            span: 893..903,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 43,
            column: 40,
            span: 904..907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        position: Position {
            line: 43,
            column: 47,
            span: 908..914,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 43,
            column: 48,
            span: 914..915,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 43,
            column: 49,
            span: 915..916,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 43,
            column: 52,
            span: 917..919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        position: Position {
            line: 43,
            column: 59,
            span: 920..926,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 43,
            column: 60,
            span: 926..927,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 43,
            column: 61,
            span: 927..928,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 62,
            span: 928..929,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 46,
            column: 3,
            span: 932..934,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 46,
            column: 7,
            span: 935..938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 46,
            column: 9,
            span: 939..940,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 46,
            column: 0,
            span: 941..945,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 4,
            span: 948..949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        position: Position {
            line: 47,
            column: 11,
            span: 949..956,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 47,
            column: 14,
            span: 957..959,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 47,
            column: 20,
            span: 960..965,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 21,
            span: 965..966,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 48,
            column: 6,
            span: 971..972,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n >>> testC not active: skipping tests for table sizes <<<\\n'",
        ),
        position: Position {
            line: 48,
            column: 69,
            span: 972..1035,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 48,
            column: 70,
            span: 1035..1036,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 49,
            column: 5,
            span: 1037..1041,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 52,
            column: 6,
            span: 1070..1075,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 52,
            column: 15,
            span: 1076..1084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log2",
        ),
        position: Position {
            line: 52,
            column: 20,
            span: 1085..1089,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 52,
            column: 22,
            span: 1090..1091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 52,
            column: 23,
            span: 1091..1092,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 52,
            column: 24,
            span: 1092..1093,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 52,
            column: 31,
            span: 1094..1100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 52,
            column: 36,
            span: 1101..1105,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 52,
            column: 37,
            span: 1105..1106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        position: Position {
            line: 52,
            column: 40,
            span: 1106..1109,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 52,
            column: 41,
            span: 1109..1110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 52,
            column: 42,
            span: 1110..1111,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 52,
            column: 43,
            span: 1111..1112,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 52,
            column: 45,
            span: 1112..1114,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 52,
            column: 46,
            span: 1114..1115,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 52,
            column: 0,
            span: 1116..1119,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 54,
            column: 6,
            span: 1121..1126,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 54,
            column: 15,
            span: 1127..1135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        position: Position {
            line: 54,
            column: 19,
            span: 1136..1139,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 21,
            span: 1140..1141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 54,
            column: 22,
            span: 1141..1142,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 23,
            span: 1142..1143,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 55,
            column: 8,
            span: 1175..1180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        position: Position {
            line: 55,
            column: 11,
            span: 1181..1183,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 55,
            column: 13,
            span: 1184..1185,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 55,
            column: 15,
            span: 1185..1187,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 55,
            column: 16,
            span: 1187..1188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 55,
            column: 20,
            span: 1188..1192,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 55,
            column: 21,
            span: 1192..1193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        position: Position {
            line: 55,
            column: 25,
            span: 1193..1197,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 26,
            span: 1197..1198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log2",
        ),
        position: Position {
            line: 55,
            column: 30,
            span: 1198..1202,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 31,
            span: 1202..1203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 55,
            column: 32,
            span: 1203..1204,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 33,
            span: 1204..1205,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 34,
            span: 1205..1206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 56,
            column: 9,
            span: 1209..1215,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 56,
            column: 10,
            span: 1215..1216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 56,
            column: 11,
            span: 1216..1217,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 56,
            column: 14,
            span: 1218..1220,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 56,
            column: 16,
            span: 1220..1222,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 56,
            column: 19,
            span: 1223..1225,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 56,
            column: 21,
            span: 1226..1227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        position: Position {
            line: 56,
            column: 23,
            span: 1227..1229,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 56,
            column: 24,
            span: 1229..1230,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 56,
            column: 25,
            span: 1229..1231,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 56,
            column: 27,
            span: 1232..1233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 56,
            column: 29,
            span: 1234..1235,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 56,
            column: 33,
            span: 1236..1239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 56,
            column: 35,
            span: 1240..1241,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 56,
            column: 38,
            span: 1242..1244,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        position: Position {
            line: 56,
            column: 41,
            span: 1245..1247,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 56,
            column: 42,
            span: 1247..1248,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 56,
            column: 43,
            span: 1248..1249,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 57,
            column: 9,
            span: 1252..1258,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        position: Position {
            line: 57,
            column: 0,
            span: 1259..1261,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 58,
            column: 0,
            span: 1262..1265,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 60,
            column: 6,
            span: 1267..1272,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 60,
            column: 15,
            span: 1273..1281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fb",
        ),
        position: Position {
            line: 60,
            column: 18,
            span: 1282..1284,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 20,
            span: 1285..1286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 60,
            column: 21,
            span: 1286..1287,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 22,
            span: 1287..1288,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 61,
            column: 8,
            span: 1291..1296,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 61,
            column: 10,
            span: 1297..1298,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 11,
            span: 1298..1299,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nn",
        ),
        position: Position {
            line: 61,
            column: 14,
            span: 1300..1302,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 61,
            column: 16,
            span: 1303..1304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 61,
            column: 18,
            span: 1305..1306,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 61,
            column: 19,
            span: 1306..1307,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "int2fb",
        ),
        position: Position {
            line: 61,
            column: 25,
            span: 1307..1313,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 26,
            span: 1313..1314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 61,
            column: 27,
            span: 1314..1315,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 28,
            span: 1315..1316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 62,
            column: 9,
            span: 1319..1325,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 10,
            span: 1325..1326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 62,
            column: 11,
            span: 1326..1327,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 62,
            column: 13,
            span: 1328..1329,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "256",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 62,
            column: 17,
            span: 1329..1333,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 18,
            span: 1333..1334,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 63,
            column: 9,
            span: 1337..1343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nn",
        ),
        position: Position {
            line: 63,
            column: 0,
            span: 1344..1346,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 64,
            column: 0,
            span: 1347..1350,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 67,
            column: 4,
            span: 1372..1375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 67,
            column: 6,
            span: 1376..1377,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 67,
            column: 8,
            span: 1378..1379,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 10,
            span: 1379..1381,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 11,
            span: 1381..1382,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 17,
            span: 1382..1388,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 67,
            column: 20,
            span: 1389..1391,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 68,
            column: 8,
            span: 1422..1427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 68,
            column: 10,
            span: 1428..1429,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 68,
            column: 12,
            span: 1430..1431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fb",
        ),
        position: Position {
            line: 68,
            column: 15,
            span: 1432..1434,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 16,
            span: 1434..1435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 68,
            column: 17,
            span: 1435..1436,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 18,
            span: 1436..1437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 69,
            column: 9,
            span: 1440..1446,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 10,
            span: 1446..1447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 69,
            column: 11,
            span: 1447..1448,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 69,
            column: 14,
            span: 1449..1451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 69,
            column: 16,
            span: 1452..1453,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 69,
            column: 20,
            span: 1454..1457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 69,
            column: 22,
            span: 1458..1459,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 69,
            column: 25,
            span: 1460..1462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 69,
            column: 27,
            span: 1463..1464,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 69,
            column: 28,
            span: 1464..1465,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".125",
                },
            ),
        ),
        position: Position {
            line: 69,
            column: 33,
            span: 1464..1470,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 34,
            span: 1470..1471,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 70,
            column: 0,
            span: 1472..1475,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 71,
            column: 6,
            span: 1476..1481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 71,
            column: 8,
            span: 1482..1483,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 71,
            column: 10,
            span: 1484..1485,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1024",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 71,
            column: 15,
            span: 1485..1490,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 72,
            column: 6,
            span: 1519..1524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 72,
            column: 10,
            span: 1525..1528,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 72,
            column: 12,
            span: 1529..1530,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 72,
            column: 14,
            span: 1530..1532,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 72,
            column: 15,
            span: 1532..1533,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 72,
            column: 0,
            span: 1532..1535,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 73,
            column: 6,
            span: 1536..1541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 73,
            column: 8,
            span: 1542..1543,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 73,
            column: 10,
            span: 1544..1545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 73,
            column: 14,
            span: 1546..1549,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 73,
            column: 0,
            span: 1550..1552,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 74,
            column: 8,
            span: 1555..1560,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 74,
            column: 10,
            span: 1561..1562,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 74,
            column: 12,
            span: 1563..1564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fb",
        ),
        position: Position {
            line: 74,
            column: 15,
            span: 1565..1567,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 16,
            span: 1567..1568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 74,
            column: 17,
            span: 1568..1569,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 18,
            span: 1569..1570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 75,
            column: 9,
            span: 1573..1579,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 10,
            span: 1579..1580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 75,
            column: 11,
            span: 1580..1581,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 75,
            column: 14,
            span: 1582..1584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 75,
            column: 16,
            span: 1585..1586,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 75,
            column: 20,
            span: 1587..1590,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 75,
            column: 22,
            span: 1591..1592,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 75,
            column: 25,
            span: 1593..1595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 75,
            column: 27,
            span: 1596..1597,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 75,
            column: 28,
            span: 1597..1598,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".125",
                },
            ),
        ),
        position: Position {
            line: 75,
            column: 33,
            span: 1597..1603,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 34,
            span: 1603..1604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 76,
            column: 4,
            span: 1607..1608,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 76,
            column: 6,
            span: 1609..1610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 76,
            column: 11,
            span: 1611..1615,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 76,
            column: 12,
            span: 1615..1616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        position: Position {
            line: 76,
            column: 16,
            span: 1616..1620,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 17,
            span: 1620..1621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 76,
            column: 18,
            span: 1621..1622,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 76,
            column: 19,
            span: 1622..1623,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        position: Position {
            line: 76,
            column: 22,
            span: 1622..1626,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 23,
            span: 1626..1627,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 77,
            column: 0,
            span: 1628..1631,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 80,
            column: 6,
            span: 1635..1640,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 80,
            column: 15,
            span: 1641..1649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 80,
            column: 21,
            span: 1650..1655,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 23,
            span: 1656..1657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 80,
            column: 24,
            span: 1657..1658,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 25,
            span: 1658..1659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        position: Position {
            line: 80,
            column: 28,
            span: 1660..1662,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 29,
            span: 1662..1663,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nh",
        ),
        position: Position {
            line: 80,
            column: 32,
            span: 1664..1666,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 33,
            span: 1666..1667,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 81,
            column: 8,
            span: 1670..1675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 81,
            column: 10,
            span: 1676..1677,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 81,
            column: 11,
            span: 1677..1678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 81,
            column: 13,
            span: 1679..1680,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 81,
            column: 15,
            span: 1681..1682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 81,
            column: 17,
            span: 1683..1684,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 81,
            column: 18,
            span: 1684..1685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "querytab",
        ),
        position: Position {
            line: 81,
            column: 26,
            span: 1685..1693,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 27,
            span: 1693..1694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 81,
            column: 28,
            span: 1694..1695,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 29,
            span: 1695..1696,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 82,
            column: 5,
            span: 1699..1701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 82,
            column: 7,
            span: 1702..1703,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 82,
            column: 10,
            span: 1704..1706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        position: Position {
            line: 82,
            column: 13,
            span: 1707..1709,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 82,
            column: 16,
            span: 1710..1712,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 82,
            column: 18,
            span: 1713..1714,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 82,
            column: 21,
            span: 1715..1717,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nh",
        ),
        position: Position {
            line: 82,
            column: 24,
            span: 1718..1720,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 82,
            column: 0,
            span: 1721..1725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 83,
            column: 10,
            span: 1730..1735,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 83,
            column: 11,
            span: 1735..1736,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        position: Position {
            line: 83,
            column: 13,
            span: 1736..1738,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 14,
            span: 1738..1739,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nh",
        ),
        position: Position {
            line: 83,
            column: 17,
            span: 1740..1742,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 18,
            span: 1742..1743,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 83,
            column: 20,
            span: 1744..1745,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 21,
            span: 1745..1746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 83,
            column: 23,
            span: 1747..1748,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 83,
            column: 24,
            span: 1748..1749,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 84,
            column: 11,
            span: 1754..1760,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 12,
            span: 1760..1761,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 84,
            column: 15,
            span: 1761..1764,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 16,
            span: 1764..1765,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 85,
            column: 0,
            span: 1768..1771,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 86,
            column: 0,
            span: 1772..1775,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 90,
            column: 0,
            span: 1805..1807,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 91,
            column: 8,
            span: 1810..1815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 91,
            column: 10,
            span: 1816..1817,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 91,
            column: 12,
            span: 1818..1819,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 91,
            column: 0,
            span: 1819..1821,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 92,
            column: 6,
            span: 1824..1827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 92,
            column: 8,
            span: 1828..1829,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 92,
            column: 11,
            span: 1830..1832,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 92,
            column: 17,
            span: 1833..1838,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 92,
            column: 18,
            span: 1838..1839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 92,
            column: 22,
            span: 1839..1843,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 92,
            column: 23,
            span: 1843..1844,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 92,
            column: 26,
            span: 1845..1847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 92,
            column: 28,
            span: 1848..1849,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 92,
            column: 30,
            span: 1850..1851,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 92,
            column: 32,
            span: 1852..1853,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 92,
            column: 34,
            span: 1854..1855,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 92,
            column: 36,
            span: 1855..1857,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 92,
            column: 0,
            span: 1858..1861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 93,
            column: 8,
            span: 1864..1869,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 93,
            column: 9,
            span: 1869..1870,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 93,
            column: 13,
            span: 1870..1874,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 93,
            column: 14,
            span: 1874..1875,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 93,
            column: 16,
            span: 1875..1877,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 93,
            column: 17,
            span: 1877..1878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        position: Position {
            line: 93,
            column: 21,
            span: 1879..1882,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 93,
            column: 22,
            span: 1882..1883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 93,
            column: 23,
            span: 1883..1884,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 93,
            column: 24,
            span: 1884..1885,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 93,
            column: 25,
            span: 1885..1886,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 94,
            column: 0,
            span: 1887..1890,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 98,
            column: 6,
            span: 1922..1927,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 98,
            column: 10,
            span: 1928..1931,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 98,
            column: 12,
            span: 1932..1933,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 0,
            span: 1933..1936,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 99,
            column: 6,
            span: 1937..1942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 99,
            column: 8,
            span: 1943..1944,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 99,
            column: 10,
            span: 1945..1946,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'return {'",
        ),
        position: Position {
            line: 99,
            column: 21,
            span: 1947..1957,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 100,
            column: 4,
            span: 1958..1961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 100,
            column: 6,
            span: 1962..1963,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 100,
            column: 7,
            span: 1963..1964,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 100,
            column: 8,
            span: 1963..1965,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 100,
            column: 9,
            span: 1965..1966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 100,
            column: 12,
            span: 1966..1969,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 100,
            column: 0,
            span: 1970..1972,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 101,
            column: 4,
            span: 1975..1976,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 101,
            column: 6,
            span: 1977..1978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 101,
            column: 8,
            span: 1979..1980,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 101,
            column: 10,
            span: 1980..1982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 101,
            column: 11,
            span: 1982..1983,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 101,
            column: 13,
            span: 1983..1985,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "','",
        ),
        position: Position {
            line: 101,
            column: 16,
            span: 1985..1988,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 102,
            column: 8,
            span: 1991..1996,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 102,
            column: 10,
            span: 1997..1998,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 102,
            column: 12,
            span: 1999..2000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 102,
            column: 0,
            span: 2001..2002,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 103,
            column: 6,
            span: 2005..2008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 103,
            column: 8,
            span: 2009..2010,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 103,
            column: 9,
            span: 2010..2011,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 103,
            column: 10,
            span: 2010..2012,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 11,
            span: 2012..2013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 103,
            column: 14,
            span: 2013..2016,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 103,
            column: 17,
            span: 2017..2019,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 104,
            column: 10,
            span: 2025..2030,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 104,
            column: 12,
            span: 2031..2032,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 104,
            column: 14,
            span: 2033..2034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 104,
            column: 19,
            span: 2035..2039,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 20,
            span: 2039..2040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 104,
            column: 21,
            span: 2040..2041,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 104,
            column: 23,
            span: 2041..2043,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'}'",
        ),
        position: Position {
            line: 104,
            column: 26,
            span: 2043..2046,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 104,
            column: 27,
            span: 2046..2047,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 104,
            column: 30,
            span: 2048..2050,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 31,
            span: 2050..2051,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 32,
            span: 2051..2052,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 33,
            span: 2052..2053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 105,
            column: 11,
            span: 2058..2064,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 105,
            column: 12,
            span: 2064..2065,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 105,
            column: 13,
            span: 2065..2066,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 105,
            column: 14,
            span: 2066..2067,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 105,
            column: 17,
            span: 2068..2070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 105,
            column: 19,
            span: 2071..2072,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 105,
            column: 20,
            span: 2072..2073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 106,
            column: 10,
            span: 2078..2083,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 106,
            column: 11,
            span: 2083..2084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 106,
            column: 12,
            span: 2084..2085,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 106,
            column: 13,
            span: 2085..2086,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fb",
        ),
        position: Position {
            line: 106,
            column: 16,
            span: 2087..2089,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 106,
            column: 17,
            span: 2089..2090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 106,
            column: 18,
            span: 2090..2091,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 106,
            column: 19,
            span: 2091..2092,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 106,
            column: 20,
            span: 2092..2093,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        position: Position {
            line: 106,
            column: 24,
            span: 2094..2097,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 106,
            column: 25,
            span: 2097..2098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 106,
            column: 26,
            span: 2098..2099,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 106,
            column: 27,
            span: 2099..2100,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 106,
            column: 28,
            span: 2100..2101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 107,
            column: 6,
            span: 2106..2107,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 107,
            column: 8,
            span: 2108..2109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 107,
            column: 15,
            span: 2110..2116,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 107,
            column: 16,
            span: 2116..2117,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 107,
            column: 22,
            span: 2117..2123,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 107,
            column: 23,
            span: 2123..2124,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%sa%d=%d,'",
        ),
        position: Position {
            line: 107,
            column: 34,
            span: 2124..2135,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 35,
            span: 2135..2136,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 107,
            column: 37,
            span: 2137..2138,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 38,
            span: 2138..2139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 107,
            column: 40,
            span: 2140..2141,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 41,
            span: 2141..2142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 107,
            column: 43,
            span: 2143..2144,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 107,
            column: 44,
            span: 2144..2145,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 108,
            column: 0,
            span: 2148..2151,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 109,
            column: 0,
            span: 2152..2155,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 113,
            column: 6,
            span: 2199..2204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 113,
            column: 8,
            span: 2205..2206,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 113,
            column: 10,
            span: 2207..2208,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 113,
            column: 12,
            span: 2209..2210,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 113,
            column: 13,
            span: 2210..2211,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 114,
            column: 4,
            span: 2212..2215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 114,
            column: 6,
            span: 2216..2217,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 114,
            column: 7,
            span: 2217..2218,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 114,
            column: 8,
            span: 2217..2219,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 114,
            column: 9,
            span: 2219..2220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 114,
            column: 12,
            span: 2220..2223,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 114,
            column: 15,
            span: 2224..2226,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 114,
            column: 17,
            span: 2227..2228,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 114,
            column: 18,
            span: 2228..2229,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 114,
            column: 19,
            span: 2229..2230,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 114,
            column: 20,
            span: 2230..2231,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 114,
            column: 22,
            span: 2232..2233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 114,
            column: 24,
            span: 2234..2235,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 114,
            column: 28,
            span: 2236..2239,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 115,
            column: 4,
            span: 2267..2270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 115,
            column: 6,
            span: 2271..2272,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 115,
            column: 7,
            span: 2272..2273,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 115,
            column: 8,
            span: 2272..2274,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 115,
            column: 9,
            span: 2274..2275,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 115,
            column: 12,
            span: 2275..2278,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 115,
            column: 0,
            span: 2279..2281,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 116,
            column: 8,
            span: 2284..2289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 116,
            column: 10,
            span: 2290..2291,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 116,
            column: 12,
            span: 2292..2293,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 116,
            column: 14,
            span: 2294..2295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 116,
            column: 19,
            span: 2295..2300,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 116,
            column: 20,
            span: 2300..2301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 116,
            column: 26,
            span: 2301..2307,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 116,
            column: 27,
            span: 2307..2308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 116,
            column: 28,
            span: 2308..2309,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 29,
            span: 2309..2310,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 116,
            column: 30,
            span: 2309..2311,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 31,
            span: 2311..2312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 116,
            column: 32,
            span: 2312..2313,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 116,
            column: 33,
            span: 2313..2314,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 116,
            column: 34,
            span: 2314..2315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 117,
            column: 9,
            span: 2318..2324,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 117,
            column: 10,
            span: 2324..2325,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 117,
            column: 11,
            span: 2325..2326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 117,
            column: 12,
            span: 2326..2327,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 117,
            column: 15,
            span: 2328..2330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 117,
            column: 17,
            span: 2331..2332,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 117,
            column: 18,
            span: 2332..2333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 118,
            column: 8,
            span: 2336..2341,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 118,
            column: 9,
            span: 2341..2342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 118,
            column: 10,
            span: 2342..2343,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 118,
            column: 11,
            span: 2343..2344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 118,
            column: 13,
            span: 2345..2346,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 118,
            column: 14,
            span: 2346..2347,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 118,
            column: 16,
            span: 2347..2349,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 118,
            column: 17,
            span: 2349..2350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 119,
            column: 4,
            span: 2353..2354,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 119,
            column: 6,
            span: 2355..2356,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 119,
            column: 8,
            span: 2357..2358,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 119,
            column: 9,
            span: 2357..2359,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 119,
            column: 10,
            span: 2359..2360,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 119,
            column: 11,
            span: 2359..2361,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 119,
            column: 12,
            span: 2361..2362,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 119,
            column: 13,
            span: 2361..2363,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 119,
            column: 14,
            span: 2363..2364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 119,
            column: 19,
            span: 2364..2369,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 119,
            column: 20,
            span: 2369..2370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 119,
            column: 26,
            span: 2370..2376,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 27,
            span: 2376..2377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 119,
            column: 28,
            span: 2377..2378,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 119,
            column: 29,
            span: 2378..2379,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 119,
            column: 30,
            span: 2378..2380,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 119,
            column: 31,
            span: 2380..2381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 119,
            column: 32,
            span: 2381..2382,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 33,
            span: 2382..2383,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 119,
            column: 34,
            span: 2383..2384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 120,
            column: 8,
            span: 2387..2392,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 120,
            column: 9,
            span: 2392..2393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 120,
            column: 10,
            span: 2393..2394,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 120,
            column: 11,
            span: 2394..2395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 120,
            column: 13,
            span: 2396..2397,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 120,
            column: 14,
            span: 2397..2398,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 120,
            column: 15,
            span: 2397..2399,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 120,
            column: 16,
            span: 2399..2400,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 120,
            column: 18,
            span: 2400..2402,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 120,
            column: 19,
            span: 2402..2403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 121,
            column: 9,
            span: 2406..2412,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 121,
            column: 10,
            span: 2412..2413,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 121,
            column: 11,
            span: 2413..2414,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 121,
            column: 12,
            span: 2414..2415,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 121,
            column: 15,
            span: 2416..2418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 121,
            column: 17,
            span: 2419..2420,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 121,
            column: 19,
            span: 2421..2422,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 121,
            column: 21,
            span: 2422..2424,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 121,
            column: 22,
            span: 2424..2425,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 122,
            column: 0,
            span: 2426..2429,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 126,
            column: 6,
            span: 2468..2473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 126,
            column: 10,
            span: 2474..2477,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 126,
            column: 12,
            span: 2478..2479,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "130",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 126,
            column: 0,
            span: 2479..2483,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 127,
            column: 6,
            span: 2484..2489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 127,
            column: 8,
            span: 2490..2491,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 127,
            column: 10,
            span: 2492..2493,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 127,
            column: 12,
            span: 2494..2495,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 127,
            column: 13,
            span: 2495..2496,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 127,
            column: 14,
            span: 2496..2497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 127,
            column: 16,
            span: 2498..2499,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 127,
            column: 17,
            span: 2499..2500,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 127,
            column: 18,
            span: 2499..2501,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 127,
            column: 19,
            span: 2501..2502,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 127,
            column: 21,
            span: 2503..2504,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 127,
            column: 23,
            span: 2504..2506,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 127,
            column: 24,
            span: 2506..2507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 127,
            column: 30,
            span: 2508..2513,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 31,
            span: 2513..2514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 127,
            column: 32,
            span: 2514..2515,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 127,
            column: 33,
            span: 2515..2516,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 127,
            column: 35,
            span: 2516..2518,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 127,
            column: 36,
            span: 2518..2519,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 127,
            column: 38,
            span: 2519..2521,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 39,
            span: 2521..2522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 128,
            column: 2,
            span: 2523..2524,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 128,
            column: 4,
            span: 2525..2526,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 128,
            column: 6,
            span: 2527..2528,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 128,
            column: 7,
            span: 2528..2529,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 128,
            column: 8,
            span: 2529..2530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 128,
            column: 10,
            span: 2531..2532,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 128,
            column: 11,
            span: 2532..2533,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 12,
            span: 2532..2534,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 128,
            column: 13,
            span: 2534..2535,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 128,
            column: 15,
            span: 2536..2537,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 17,
            span: 2537..2539,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 128,
            column: 18,
            span: 2539..2540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 128,
            column: 24,
            span: 2541..2546,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 25,
            span: 2546..2547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 128,
            column: 26,
            span: 2547..2548,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 27,
            span: 2548..2549,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 29,
            span: 2549..2551,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 30,
            span: 2551..2552,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 32,
            span: 2552..2554,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 33,
            span: 2554..2555,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 128,
            column: 34,
            span: 2555..2556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 128,
            column: 36,
            span: 2557..2558,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 128,
            column: 37,
            span: 2558..2559,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 38,
            span: 2558..2560,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 128,
            column: 39,
            span: 2560..2561,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 128,
            column: 41,
            span: 2562..2563,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 43,
            span: 2563..2565,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 128,
            column: 44,
            span: 2565..2566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 128,
            column: 50,
            span: 2567..2572,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 51,
            span: 2572..2573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 128,
            column: 52,
            span: 2573..2574,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 53,
            span: 2574..2575,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 55,
            span: 2575..2577,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 56,
            span: 2577..2578,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 58,
            span: 2578..2580,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 59,
            span: 2580..2581,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 129,
            column: 2,
            span: 2582..2583,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 129,
            column: 4,
            span: 2584..2585,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 129,
            column: 6,
            span: 2586..2587,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 129,
            column: 7,
            span: 2587..2588,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 129,
            column: 8,
            span: 2588..2589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 129,
            column: 10,
            span: 2590..2591,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 129,
            column: 11,
            span: 2591..2592,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 129,
            column: 12,
            span: 2591..2593,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 129,
            column: 13,
            span: 2593..2594,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 129,
            column: 15,
            span: 2595..2596,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 129,
            column: 17,
            span: 2596..2598,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 129,
            column: 18,
            span: 2598..2599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 129,
            column: 20,
            span: 2600..2601,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 129,
            column: 21,
            span: 2601..2602,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 129,
            column: 22,
            span: 2601..2603,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 129,
            column: 23,
            span: 2603..2604,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 129,
            column: 25,
            span: 2605..2606,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 129,
            column: 27,
            span: 2606..2608,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 129,
            column: 28,
            span: 2608..2609,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 129,
            column: 34,
            span: 2610..2615,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 35,
            span: 2615..2616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 129,
            column: 36,
            span: 2616..2617,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 37,
            span: 2617..2618,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 129,
            column: 39,
            span: 2618..2620,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 40,
            span: 2620..2621,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 129,
            column: 42,
            span: 2621..2623,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 43,
            span: 2623..2624,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 130,
            column: 2,
            span: 2625..2626,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 130,
            column: 4,
            span: 2627..2628,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 130,
            column: 6,
            span: 2629..2630,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 130,
            column: 7,
            span: 2630..2631,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 131,
            column: 4,
            span: 2632..2635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 131,
            column: 6,
            span: 2636..2637,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 131,
            column: 8,
            span: 2638..2639,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 131,
            column: 10,
            span: 2639..2641,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 131,
            column: 11,
            span: 2641..2642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 131,
            column: 14,
            span: 2642..2645,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 131,
            column: 0,
            span: 2646..2648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 132,
            column: 4,
            span: 2651..2652,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 132,
            column: 5,
            span: 2652..2653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 132,
            column: 6,
            span: 2653..2654,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 132,
            column: 7,
            span: 2654..2655,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 132,
            column: 9,
            span: 2656..2657,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 132,
            column: 0,
            span: 2657..2659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 133,
            column: 9,
            span: 2662..2668,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 133,
            column: 10,
            span: 2668..2669,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 133,
            column: 11,
            span: 2669..2670,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 133,
            column: 12,
            span: 2670..2671,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 133,
            column: 15,
            span: 2672..2674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 133,
            column: 17,
            span: 2675..2676,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 133,
            column: 18,
            span: 2676..2677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 134,
            column: 8,
            span: 2680..2685,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 134,
            column: 9,
            span: 2685..2686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 134,
            column: 10,
            span: 2686..2687,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 134,
            column: 11,
            span: 2687..2688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        position: Position {
            line: 134,
            column: 15,
            span: 2689..2692,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 134,
            column: 16,
            span: 2692..2693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 134,
            column: 17,
            span: 2693..2694,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 134,
            column: 18,
            span: 2694..2695,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 134,
            column: 19,
            span: 2695..2696,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 134,
            column: 21,
            span: 2696..2698,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 134,
            column: 22,
            span: 2698..2699,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 135,
            column: 0,
            span: 2700..2703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 137,
            column: 2,
            span: 2705..2706,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 137,
            column: 4,
            span: 2707..2708,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 137,
            column: 6,
            span: 2709..2710,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 137,
            column: 7,
            span: 2710..2711,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 138,
            column: 4,
            span: 2712..2715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 138,
            column: 6,
            span: 2716..2717,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 138,
            column: 8,
            span: 2718..2719,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 138,
            column: 10,
            span: 2719..2721,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 138,
            column: 11,
            span: 2721..2722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 138,
            column: 14,
            span: 2722..2725,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 138,
            column: 0,
            span: 2726..2728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 139,
            column: 4,
            span: 2731..2732,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 139,
            column: 5,
            span: 2732..2733,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 139,
            column: 8,
            span: 2733..2736,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 139,
            column: 10,
            span: 2736..2738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 139,
            column: 11,
            span: 2738..2739,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 139,
            column: 12,
            span: 2739..2740,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 139,
            column: 14,
            span: 2741..2742,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 139,
            column: 0,
            span: 2742..2744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 140,
            column: 9,
            span: 2747..2753,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 140,
            column: 10,
            span: 2753..2754,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 140,
            column: 11,
            span: 2754..2755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 140,
            column: 12,
            span: 2755..2756,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 140,
            column: 15,
            span: 2757..2759,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 17,
            span: 2759..2761,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 140,
            column: 18,
            span: 2761..2762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 141,
            column: 8,
            span: 2765..2770,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 141,
            column: 9,
            span: 2770..2771,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 141,
            column: 10,
            span: 2771..2772,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 141,
            column: 11,
            span: 2772..2773,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 141,
            column: 13,
            span: 2773..2775,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 141,
            column: 14,
            span: 2775..2776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        position: Position {
            line: 141,
            column: 18,
            span: 2777..2780,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 141,
            column: 19,
            span: 2780..2781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 141,
            column: 20,
            span: 2781..2782,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 141,
            column: 21,
            span: 2782..2783,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 141,
            column: 22,
            span: 2783..2784,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 142,
            column: 0,
            span: 2785..2788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 144,
            column: 2,
            span: 2790..2791,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 144,
            column: 4,
            span: 2792..2793,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 144,
            column: 6,
            span: 2794..2795,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 144,
            column: 7,
            span: 2795..2796,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 145,
            column: 4,
            span: 2797..2800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 145,
            column: 6,
            span: 2801..2802,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 145,
            column: 7,
            span: 2802..2803,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 145,
            column: 8,
            span: 2802..2804,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 145,
            column: 9,
            span: 2804..2805,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 145,
            column: 11,
            span: 2804..2807,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 145,
            column: 14,
            span: 2808..2810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 145,
            column: 16,
            span: 2811..2812,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 145,
            column: 17,
            span: 2812..2813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 145,
            column: 18,
            span: 2813..2814,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 145,
            column: 19,
            span: 2814..2815,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 145,
            column: 21,
            span: 2816..2817,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 145,
            column: 23,
            span: 2818..2819,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 145,
            column: 0,
            span: 2820..2823,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 146,
            column: 6,
            span: 2824..2829,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 146,
            column: 7,
            span: 2829..2830,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 146,
            column: 8,
            span: 2830..2831,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 9,
            span: 2831..2832,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 146,
            column: 12,
            span: 2832..2835,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 13,
            span: 2835..2836,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 146,
            column: 15,
            span: 2836..2838,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 146,
            column: 16,
            span: 2838..2839,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 147,
            column: 0,
            span: 2840..2842,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 148,
            column: 6,
            span: 2845..2848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 148,
            column: 8,
            span: 2849..2850,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 148,
            column: 9,
            span: 2850..2851,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 148,
            column: 10,
            span: 2850..2852,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 148,
            column: 11,
            span: 2852..2853,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 148,
            column: 13,
            span: 2852..2855,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 148,
            column: 16,
            span: 2856..2858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 148,
            column: 18,
            span: 2859..2860,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 148,
            column: 19,
            span: 2860..2861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 148,
            column: 20,
            span: 2861..2862,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 148,
            column: 21,
            span: 2862..2863,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 148,
            column: 23,
            span: 2864..2865,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 148,
            column: 27,
            span: 2866..2869,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 148,
            column: 0,
            span: 2870..2873,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 149,
            column: 6,
            span: 2876..2879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 149,
            column: 8,
            span: 2880..2881,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 149,
            column: 9,
            span: 2881..2882,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 11,
            span: 2881..2884,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 12,
            span: 2884..2885,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 14,
            span: 2884..2887,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 149,
            column: 17,
            span: 2888..2890,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 149,
            column: 19,
            span: 2891..2892,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 149,
            column: 20,
            span: 2892..2893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 149,
            column: 21,
            span: 2893..2894,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 149,
            column: 22,
            span: 2894..2895,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 149,
            column: 24,
            span: 2896..2897,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 149,
            column: 28,
            span: 2898..2901,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 149,
            column: 32,
            span: 2902..2905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 150,
            column: 8,
            span: 2932..2937,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 150,
            column: 9,
            span: 2937..2938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 150,
            column: 10,
            span: 2938..2939,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 150,
            column: 11,
            span: 2939..2940,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 150,
            column: 13,
            span: 2940..2942,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 150,
            column: 14,
            span: 2942..2943,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 150,
            column: 16,
            span: 2943..2945,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 150,
            column: 17,
            span: 2945..2946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 151,
            column: 4,
            span: 2983..2984,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 151,
            column: 5,
            span: 2984..2985,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 151,
            column: 7,
            span: 2984..2987,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 151,
            column: 8,
            span: 2987..2988,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 151,
            column: 10,
            span: 2989..2990,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 151,
            column: 0,
            span: 2990..2992,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 152,
            column: 6,
            span: 2995..2998,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 152,
            column: 8,
            span: 2999..3000,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 152,
            column: 9,
            span: 3000..3001,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 11,
            span: 3000..3003,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 12,
            span: 3003..3004,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 14,
            span: 3003..3006,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 152,
            column: 17,
            span: 3007..3009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 152,
            column: 19,
            span: 3010..3011,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 152,
            column: 20,
            span: 3011..3012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 152,
            column: 21,
            span: 3012..3013,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 152,
            column: 22,
            span: 3013..3014,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 152,
            column: 24,
            span: 3015..3016,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 152,
            column: 28,
            span: 3017..3020,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 152,
            column: 32,
            span: 3021..3024,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 153,
            column: 8,
            span: 3051..3056,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 9,
            span: 3056..3057,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 153,
            column: 10,
            span: 3057..3058,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 153,
            column: 11,
            span: 3058..3059,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 153,
            column: 13,
            span: 3059..3061,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 153,
            column: 14,
            span: 3061..3062,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 153,
            column: 16,
            span: 3062..3064,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 17,
            span: 3064..3065,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 154,
            column: 6,
            span: 3102..3105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 154,
            column: 8,
            span: 3106..3107,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 154,
            column: 9,
            span: 3107..3108,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 154,
            column: 10,
            span: 3107..3109,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 154,
            column: 11,
            span: 3109..3110,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 154,
            column: 13,
            span: 3109..3112,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 154,
            column: 16,
            span: 3113..3115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 154,
            column: 18,
            span: 3116..3117,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 154,
            column: 19,
            span: 3117..3118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 154,
            column: 20,
            span: 3118..3119,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 154,
            column: 21,
            span: 3119..3120,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 154,
            column: 23,
            span: 3121..3122,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 154,
            column: 27,
            span: 3123..3126,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 154,
            column: 0,
            span: 3127..3130,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 155,
            column: 6,
            span: 3133..3136,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 155,
            column: 8,
            span: 3137..3138,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 155,
            column: 9,
            span: 3138..3139,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "18",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 155,
            column: 11,
            span: 3138..3141,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 155,
            column: 12,
            span: 3141..3142,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 155,
            column: 14,
            span: 3141..3144,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 155,
            column: 17,
            span: 3145..3147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 155,
            column: 19,
            span: 3148..3149,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 155,
            column: 20,
            span: 3149..3150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 155,
            column: 21,
            span: 3150..3151,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 155,
            column: 22,
            span: 3151..3152,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 155,
            column: 24,
            span: 3153..3154,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 155,
            column: 28,
            span: 3155..3158,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 155,
            column: 32,
            span: 3159..3162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 156,
            column: 8,
            span: 3189..3194,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 9,
            span: 3194..3195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 156,
            column: 10,
            span: 3195..3196,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 11,
            span: 3196..3197,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 156,
            column: 13,
            span: 3197..3199,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 14,
            span: 3199..3200,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 156,
            column: 16,
            span: 3200..3202,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 17,
            span: 3202..3203,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 157,
            column: 0,
            span: 3241..3244,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 160,
            column: 4,
            span: 3265..3268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 160,
            column: 6,
            span: 3269..3270,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 160,
            column: 7,
            span: 3270..3271,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 160,
            column: 8,
            span: 3270..3272,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 160,
            column: 9,
            span: 3272..3273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 160,
            column: 12,
            span: 3273..3276,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 160,
            column: 0,
            span: 3277..3279,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 161,
            column: 8,
            span: 3282..3287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 161,
            column: 10,
            span: 3288..3289,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 161,
            column: 12,
            span: 3290..3291,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 161,
            column: 14,
            span: 3292..3293,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 161,
            column: 15,
            span: 3293..3294,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 162,
            column: 6,
            span: 3297..3300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 162,
            column: 8,
            span: 3301..3302,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 162,
            column: 9,
            span: 3302..3303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 162,
            column: 10,
            span: 3303..3304,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 11,
            span: 3304..3305,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 162,
            column: 12,
            span: 3304..3306,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 13,
            span: 3306..3307,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 162,
            column: 14,
            span: 3307..3308,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 162,
            column: 15,
            span: 3307..3309,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 162,
            column: 18,
            span: 3310..3312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 162,
            column: 20,
            span: 3313..3314,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 162,
            column: 21,
            span: 3314..3315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 162,
            column: 22,
            span: 3315..3316,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 162,
            column: 23,
            span: 3316..3317,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 162,
            column: 25,
            span: 3318..3319,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 162,
            column: 27,
            span: 3320..3321,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 162,
            column: 31,
            span: 3322..3325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 163,
            column: 8,
            span: 3349..3354,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 9,
            span: 3354..3355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 163,
            column: 10,
            span: 3355..3356,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 163,
            column: 11,
            span: 3356..3357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        position: Position {
            line: 163,
            column: 15,
            span: 3358..3361,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 16,
            span: 3361..3362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 163,
            column: 17,
            span: 3362..3363,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 18,
            span: 3363..3364,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 163,
            column: 19,
            span: 3364..3365,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 163,
            column: 21,
            span: 3365..3367,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 22,
            span: 3367..3368,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 164,
            column: 0,
            span: 3369..3372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 167,
            column: 4,
            span: 3399..3402,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 167,
            column: 6,
            span: 3403..3404,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 167,
            column: 0,
            span: 3404..3407,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 168,
            column: 9,
            span: 3408..3416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 168,
            column: 13,
            span: 3417..3420,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 15,
            span: 3421..3422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 168,
            column: 16,
            span: 3422..3423,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 168,
            column: 17,
            span: 3423..3424,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 168,
            column: 21,
            span: 3425..3428,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 22,
            span: 3428..3429,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 169,
            column: 8,
            span: 3432..3437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 169,
            column: 12,
            span: 3438..3441,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 169,
            column: 14,
            span: 3442..3443,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 169,
            column: 16,
            span: 3444..3445,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 169,
            column: 19,
            span: 3445..3448,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 169,
            column: 20,
            span: 3448..3449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 170,
            column: 8,
            span: 3452..3457,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 170,
            column: 9,
            span: 3457..3458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 170,
            column: 12,
            span: 3458..3461,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 170,
            column: 13,
            span: 3461..3462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 170,
            column: 15,
            span: 3463..3464,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 170,
            column: 16,
            span: 3464..3465,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 170,
            column: 18,
            span: 3465..3467,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 170,
            column: 19,
            span: 3467..3468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 171,
            column: 9,
            span: 3471..3477,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 10,
            span: 3477..3478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        position: Position {
            line: 171,
            column: 16,
            span: 3478..3484,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 17,
            span: 3484..3485,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'#'",
        ),
        position: Position {
            line: 171,
            column: 20,
            span: 3485..3488,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 171,
            column: 21,
            span: 3488..3489,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 171,
            column: 25,
            span: 3490..3493,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 26,
            span: 3493..3494,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 171,
            column: 29,
            span: 3495..3497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 171,
            column: 31,
            span: 3498..3499,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 32,
            span: 3499..3500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 172,
            column: 6,
            span: 3503..3506,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 172,
            column: 7,
            span: 3506..3507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 172,
            column: 8,
            span: 3507..3508,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 172,
            column: 9,
            span: 3508..3509,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 172,
            column: 10,
            span: 3508..3510,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 172,
            column: 11,
            span: 3510..3511,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 172,
            column: 13,
            span: 3512..3513,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 172,
            column: 0,
            span: 3514..3518,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 173,
            column: 8,
            span: 3521..3526,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 9,
            span: 3526..3527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 173,
            column: 12,
            span: 3527..3530,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 173,
            column: 13,
            span: 3530..3531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        position: Position {
            line: 173,
            column: 17,
            span: 3532..3535,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 18,
            span: 3535..3536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 173,
            column: 19,
            span: 3536..3537,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 173,
            column: 20,
            span: 3537..3538,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 173,
            column: 21,
            span: 3537..3539,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 22,
            span: 3539..3540,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 173,
            column: 23,
            span: 3540..3541,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 173,
            column: 25,
            span: 3541..3543,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 26,
            span: 3543..3544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 174,
            column: 6,
            span: 3547..3550,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 174,
            column: 7,
            span: 3550..3551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 174,
            column: 8,
            span: 3551..3552,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 174,
            column: 10,
            span: 3553..3554,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 174,
            column: 0,
            span: 3555..3559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 175,
            column: 8,
            span: 3562..3567,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 175,
            column: 9,
            span: 3567..3568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 175,
            column: 12,
            span: 3568..3571,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 175,
            column: 13,
            span: 3571..3572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        position: Position {
            line: 175,
            column: 17,
            span: 3573..3576,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 175,
            column: 18,
            span: 3576..3577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 175,
            column: 19,
            span: 3577..3578,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 175,
            column: 20,
            span: 3578..3579,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 175,
            column: 21,
            span: 3578..3580,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 175,
            column: 22,
            span: 3580..3581,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 175,
            column: 23,
            span: 3581..3582,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 175,
            column: 25,
            span: 3582..3584,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 175,
            column: 26,
            span: 3584..3585,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 176,
            column: 0,
            span: 3586..3589,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 177,
            column: 6,
            span: 3590..3595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 177,
            column: 8,
            span: 3596..3597,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 177,
            column: 10,
            span: 3598..3599,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 177,
            column: 12,
            span: 3600..3601,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 177,
            column: 13,
            span: 3601..3602,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 178,
            column: 4,
            span: 3603..3606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 178,
            column: 6,
            span: 3607..3608,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 178,
            column: 7,
            span: 3608..3609,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 8,
            span: 3608..3610,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 9,
            span: 3610..3611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 178,
            column: 12,
            span: 3611..3614,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 178,
            column: 15,
            span: 3615..3617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 178,
            column: 17,
            span: 3618..3619,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 178,
            column: 18,
            span: 3619..3620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 178,
            column: 19,
            span: 3620..3621,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 178,
            column: 20,
            span: 3621..3622,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 178,
            column: 22,
            span: 3623..3624,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 178,
            column: 27,
            span: 3625..3629,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 178,
            column: 28,
            span: 3629..3630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 178,
            column: 32,
            span: 3631..3634,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 178,
            column: 33,
            span: 3634..3635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 178,
            column: 34,
            span: 3635..3636,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 35,
            span: 3636..3637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 178,
            column: 41,
            span: 3638..3643,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 178,
            column: 42,
            span: 3643..3644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 178,
            column: 48,
            span: 3644..3650,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 178,
            column: 49,
            span: 3650..3651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 178,
            column: 50,
            span: 3651..3652,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 178,
            column: 51,
            span: 3652..3653,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 178,
            column: 52,
            span: 3653..3654,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 178,
            column: 0,
            span: 3655..3658,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 180,
            column: 4,
            span: 3660..3663,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 184,
            column: 7,
            span: 3710..3716,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 8,
            span: 3716..3717,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 184,
            column: 9,
            span: 3717..3718,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 184,
            column: 10,
            span: 3718..3719,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 184,
            column: 11,
            span: 3719..3720,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 184,
            column: 14,
            span: 3721..3723,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 184,
            column: 16,
            span: 3723..3725,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 17,
            span: 3725..3726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 185,
            column: 7,
            span: 3727..3733,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 185,
            column: 8,
            span: 3733..3734,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 185,
            column: 9,
            span: 3734..3735,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 185,
            column: 10,
            span: 3735..3736,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 185,
            column: 13,
            span: 3736..3739,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 185,
            column: 14,
            span: 3739..3740,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 185,
            column: 17,
            span: 3741..3743,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 185,
            column: 19,
            span: 3743..3745,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 185,
            column: 20,
            span: 3745..3746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 186,
            column: 7,
            span: 3747..3753,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 186,
            column: 8,
            span: 3753..3754,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 186,
            column: 9,
            span: 3754..3755,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 186,
            column: 10,
            span: 3755..3756,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 186,
            column: 13,
            span: 3756..3759,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 186,
            column: 14,
            span: 3759..3760,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 186,
            column: 18,
            span: 3761..3764,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 186,
            column: 19,
            span: 3764..3765,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 186,
            column: 22,
            span: 3766..3768,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 186,
            column: 24,
            span: 3768..3770,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 186,
            column: 25,
            span: 3770..3771,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 187,
            column: 7,
            span: 3772..3778,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 187,
            column: 8,
            span: 3778..3779,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 187,
            column: 9,
            span: 3779..3780,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 187,
            column: 10,
            span: 3780..3781,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 187,
            column: 13,
            span: 3781..3784,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 14,
            span: 3784..3785,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 187,
            column: 18,
            span: 3786..3789,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 19,
            span: 3789..3790,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 187,
            column: 23,
            span: 3791..3794,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 187,
            column: 24,
            span: 3794..3795,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 187,
            column: 27,
            span: 3796..3798,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 187,
            column: 29,
            span: 3798..3800,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 187,
            column: 30,
            span: 3800..3801,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 188,
            column: 7,
            span: 3802..3808,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 8,
            span: 3808..3809,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 188,
            column: 9,
            span: 3809..3810,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 188,
            column: 10,
            span: 3810..3811,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 188,
            column: 13,
            span: 3811..3814,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 188,
            column: 14,
            span: 3814..3815,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 188,
            column: 18,
            span: 3816..3819,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 188,
            column: 19,
            span: 3819..3820,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 188,
            column: 23,
            span: 3821..3824,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 188,
            column: 24,
            span: 3824..3825,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 188,
            column: 28,
            span: 3826..3829,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 188,
            column: 29,
            span: 3829..3830,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 188,
            column: 32,
            span: 3831..3833,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 188,
            column: 34,
            span: 3833..3835,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 35,
            span: 3835..3836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 189,
            column: 6,
            span: 3837..3842,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 189,
            column: 9,
            span: 3842..3845,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 192,
            column: 6,
            span: 3848..3853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nofind",
        ),
        position: Position {
            line: 192,
            column: 13,
            span: 3854..3860,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 192,
            column: 15,
            span: 3861..3862,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 192,
            column: 17,
            span: 3863..3864,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 192,
            column: 18,
            span: 3864..3865,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 194,
            column: 2,
            span: 3867..3868,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 194,
            column: 3,
            span: 3868..3869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 194,
            column: 4,
            span: 3869..3870,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 194,
            column: 5,
            span: 3870..3871,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 194,
            column: 6,
            span: 3871..3872,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 194,
            column: 8,
            span: 3873..3874,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 194,
            column: 10,
            span: 3874..3876,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 194,
            column: 11,
            span: 3876..3877,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 194,
            column: 12,
            span: 3876..3878,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 194,
            column: 13,
            span: 3878..3879,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 194,
            column: 0,
            span: 3878..3880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 195,
            column: 2,
            span: 3881..3882,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 195,
            column: 3,
            span: 3882..3883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 195,
            column: 4,
            span: 3883..3884,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 195,
            column: 5,
            span: 3884..3885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 195,
            column: 6,
            span: 3885..3886,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 195,
            column: 8,
            span: 3887..3888,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 195,
            column: 0,
            span: 3889..3892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 199,
            column: 7,
            span: 3944..3950,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 199,
            column: 8,
            span: 3950..3951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 199,
            column: 12,
            span: 3951..3955,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 199,
            column: 13,
            span: 3955..3956,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 199,
            column: 14,
            span: 3956..3957,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 199,
            column: 17,
            span: 3958..3960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 199,
            column: 22,
            span: 3961..3965,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 199,
            column: 23,
            span: 3965..3966,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 199,
            column: 24,
            span: 3966..3967,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 199,
            column: 25,
            span: 3967..3968,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 201,
            column: 6,
            span: 3970..3975,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 201,
            column: 15,
            span: 3976..3984,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 201,
            column: 20,
            span: 3985..3989,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 201,
            column: 22,
            span: 3990..3991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 201,
            column: 26,
            span: 3991..3995,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 201,
            column: 27,
            span: 3995..3996,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 202,
            column: 8,
            span: 3999..4004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 202,
            column: 10,
            span: 4005..4006,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 202,
            column: 11,
            span: 4006..4007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 202,
            column: 0,
            span: 4007..4008,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 203,
            column: 8,
            span: 4011..4016,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 203,
            column: 10,
            span: 4016..4018,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 203,
            column: 0,
            span: 4019..4021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 204,
            column: 6,
            span: 4026..4027,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 204,
            column: 7,
            span: 4027..4028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 204,
            column: 8,
            span: 4028..4029,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 204,
            column: 10,
            span: 4030..4031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 204,
            column: 15,
            span: 4032..4036,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 204,
            column: 16,
            span: 4036..4037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 204,
            column: 18,
            span: 4037..4039,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 204,
            column: 19,
            span: 4039..4040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 204,
            column: 21,
            span: 4041..4042,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 204,
            column: 22,
            span: 4042..4043,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 205,
            column: 7,
            span: 4048..4050,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 205,
            column: 11,
            span: 4051..4054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 205,
            column: 13,
            span: 4055..4056,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 205,
            column: 18,
            span: 4057..4061,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 205,
            column: 25,
            span: 4062..4068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nofind",
        ),
        position: Position {
            line: 205,
            column: 32,
            span: 4069..4075,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 205,
            column: 0,
            span: 4076..4079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 206,
            column: 11,
            span: 4084..4090,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 206,
            column: 12,
            span: 4090..4091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 206,
            column: 13,
            span: 4091..4092,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 206,
            column: 16,
            span: 4093..4095,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 206,
            column: 20,
            span: 4096..4099,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 206,
            column: 21,
            span: 4099..4100,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 207,
            column: 7,
            span: 4105..4107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 207,
            column: 9,
            span: 4108..4109,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 207,
            column: 12,
            span: 4110..4112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 207,
            column: 17,
            span: 4113..4117,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 207,
            column: 22,
            span: 4118..4122,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 207,
            column: 29,
            span: 4123..4129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 207,
            column: 31,
            span: 4130..4131,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 207,
            column: 0,
            span: 4132..4135,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 208,
            column: 0,
            span: 4138..4141,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 209,
            column: 0,
            span: 4142..4145,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 211,
            column: 6,
            span: 4147..4152,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 211,
            column: 15,
            span: 4153..4161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find1",
        ),
        position: Position {
            line: 211,
            column: 21,
            span: 4162..4167,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 211,
            column: 23,
            span: 4168..4169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 211,
            column: 27,
            span: 4169..4173,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 211,
            column: 28,
            span: 4173..4174,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 212,
            column: 6,
            span: 4177..4180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 212,
            column: 8,
            span: 4181..4182,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 9,
            span: 4182..4183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 212,
            column: 10,
            span: 4183..4184,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 212,
            column: 13,
            span: 4185..4187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 212,
            column: 19,
            span: 4188..4193,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 212,
            column: 20,
            span: 4193..4194,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 212,
            column: 22,
            span: 4194..4196,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 212,
            column: 23,
            span: 4196..4197,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 212,
            column: 0,
            span: 4198..4200,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 213,
            column: 7,
            span: 4205..4207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 213,
            column: 9,
            span: 4208..4209,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 213,
            column: 11,
            span: 4209..4211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 213,
            column: 15,
            span: 4211..4215,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 213,
            column: 20,
            span: 4216..4220,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 213,
            column: 27,
            span: 4221..4227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 213,
            column: 29,
            span: 4228..4229,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 213,
            column: 0,
            span: 4230..4233,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 214,
            column: 0,
            span: 4236..4239,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 215,
            column: 9,
            span: 4242..4248,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 215,
            column: 13,
            span: 4249..4252,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 216,
            column: 0,
            span: 4267..4270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 219,
            column: 7,
            span: 4273..4279,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 219,
            column: 8,
            span: 4279..4280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 219,
            column: 13,
            span: 4280..4285,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 219,
            column: 15,
            span: 4285..4287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 219,
            column: 19,
            span: 4287..4291,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 219,
            column: 20,
            span: 4291..4292,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print\"",
        ),
        position: Position {
            line: 219,
            column: 27,
            span: 4292..4299,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 219,
            column: 28,
            span: 4299..4300,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 219,
            column: 32,
            span: 4301..4304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 219,
            column: 38,
            span: 4305..4310,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 219,
            column: 41,
            span: 4311..4313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find1",
        ),
        position: Position {
            line: 219,
            column: 47,
            span: 4314..4319,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 219,
            column: 48,
            span: 4319..4320,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print\"",
        ),
        position: Position {
            line: 219,
            column: 55,
            span: 4320..4327,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 219,
            column: 56,
            span: 4327..4328,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 219,
            column: 57,
            span: 4328..4329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 220,
            column: 7,
            span: 4330..4336,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 220,
            column: 8,
            span: 4336..4337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 220,
            column: 10,
            span: 4337..4339,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 220,
            column: 11,
            span: 4339..4340,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print\"",
        ),
        position: Position {
            line: 220,
            column: 18,
            span: 4340..4347,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 220,
            column: 19,
            span: 4347..4348,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 220,
            column: 21,
            span: 4348..4350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 220,
            column: 25,
            span: 4350..4354,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 220,
            column: 26,
            span: 4354..4355,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print\"",
        ),
        position: Position {
            line: 220,
            column: 33,
            span: 4355..4362,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 220,
            column: 34,
            span: 4362..4363,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 220,
            column: 35,
            span: 4363..4364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 221,
            column: 7,
            span: 4365..4371,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 221,
            column: 8,
            span: 4371..4372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 221,
            column: 14,
            span: 4372..4378,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 221,
            column: 16,
            span: 4378..4380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find1",
        ),
        position: Position {
            line: 221,
            column: 21,
            span: 4380..4385,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 221,
            column: 22,
            span: 4385..4386,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert\"",
        ),
        position: Position {
            line: 221,
            column: 30,
            span: 4386..4394,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 221,
            column: 31,
            span: 4394..4395,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 221,
            column: 32,
            span: 4395..4396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 222,
            column: 7,
            span: 4397..4403,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 222,
            column: 8,
            span: 4403..4404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nofind",
        ),
        position: Position {
            line: 222,
            column: 14,
            span: 4404..4410,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 222,
            column: 16,
            span: 4410..4412,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 222,
            column: 20,
            span: 4412..4416,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 222,
            column: 21,
            span: 4416..4417,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        position: Position {
            line: 222,
            column: 29,
            span: 4417..4425,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 222,
            column: 30,
            span: 4425..4426,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 222,
            column: 31,
            span: 4426..4427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 223,
            column: 7,
            span: 4428..4434,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 223,
            column: 8,
            span: 4434..4435,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 223,
            column: 11,
            span: 4435..4438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find1",
        ),
        position: Position {
            line: 223,
            column: 17,
            span: 4439..4444,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 223,
            column: 18,
            span: 4444..4445,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        position: Position {
            line: 223,
            column: 26,
            span: 4445..4453,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 223,
            column: 27,
            span: 4453..4454,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 223,
            column: 28,
            span: 4454..4455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 224,
            column: 3,
            span: 4456..4458,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 224,
            column: 4,
            span: 4458..4459,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ret\"",
        ),
        position: Position {
            line: 224,
            column: 9,
            span: 4459..4464,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 224,
            column: 12,
            span: 4465..4467,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"urn\"",
        ),
        position: Position {
            line: 224,
            column: 18,
            span: 4468..4473,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 224,
            column: 19,
            span: 4473..4474,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 224,
            column: 21,
            span: 4475..4476,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 224,
            column: 0,
            span: 4477..4480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 225,
            column: 7,
            span: 4481..4487,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 225,
            column: 8,
            span: 4487..4488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nofind",
        ),
        position: Position {
            line: 225,
            column: 14,
            span: 4488..4494,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 225,
            column: 16,
            span: 4494..4496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 225,
            column: 20,
            span: 4496..4500,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 225,
            column: 21,
            span: 4500..4501,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        position: Position {
            line: 225,
            column: 29,
            span: 4501..4509,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 225,
            column: 30,
            span: 4509..4510,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 225,
            column: 31,
            span: 4510..4511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 226,
            column: 3,
            span: 4512..4514,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 226,
            column: 4,
            span: 4514..4515,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xxx\"",
        ),
        position: Position {
            line: 226,
            column: 9,
            span: 4515..4520,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 226,
            column: 10,
            span: 4520..4521,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 226,
            column: 12,
            span: 4522..4523,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 226,
            column: 0,
            span: 4523..4525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 227,
            column: 7,
            span: 4526..4532,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 227,
            column: 8,
            span: 4532..4533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xxx",
        ),
        position: Position {
            line: 227,
            column: 11,
            span: 4533..4536,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 227,
            column: 13,
            span: 4536..4538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 227,
            column: 17,
            span: 4538..4542,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 227,
            column: 18,
            span: 4542..4543,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xxx\"",
        ),
        position: Position {
            line: 227,
            column: 23,
            span: 4543..4548,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 227,
            column: 24,
            span: 4548..4549,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 227,
            column: 25,
            span: 4549..4550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 230,
            column: 11,
            span: 4577..4587,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 230,
            column: 12,
            span: 4587..4588,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid key\"",
        ),
        position: Position {
            line: 230,
            column: 25,
            span: 4588..4601,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 230,
            column: 26,
            span: 4601..4602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 230,
            column: 31,
            span: 4603..4607,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 230,
            column: 32,
            span: 4607..4608,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 230,
            column: 34,
            span: 4609..4610,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 230,
            column: 36,
            span: 4609..4612,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 230,
            column: 37,
            span: 4612..4613,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 230,
            column: 39,
            span: 4612..4615,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 230,
            column: 40,
            span: 4615..4616,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 230,
            column: 41,
            span: 4616..4617,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 230,
            column: 43,
            span: 4617..4619,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 44,
            span: 4619..4620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 233,
            column: 11,
            span: 4668..4678,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 233,
            column: 12,
            span: 4678..4679,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bad argument\"",
        ),
        position: Position {
            line: 233,
            column: 26,
            span: 4679..4693,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 233,
            column: 27,
            span: 4693..4694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 233,
            column: 33,
            span: 4695..4700,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 233,
            column: 34,
            span: 4700..4701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 234,
            column: 11,
            span: 4702..4712,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 234,
            column: 12,
            span: 4712..4713,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bad argument\"",
        ),
        position: Position {
            line: 234,
            column: 26,
            span: 4713..4727,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 27,
            span: 4727..4728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        position: Position {
            line: 234,
            column: 34,
            span: 4729..4735,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 234,
            column: 35,
            span: 4735..4736,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 236,
            column: 6,
            span: 4738..4743,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 236,
            column: 7,
            span: 4743..4744,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 236,
            column: 10,
            span: 4744..4747,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 236,
            column: 11,
            span: 4747..4748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 238,
            column: 2,
            span: 4750..4751,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 238,
            column: 4,
            span: 4752..4753,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 238,
            column: 6,
            span: 4754..4755,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 238,
            column: 7,
            span: 4755..4756,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 239,
            column: 4,
            span: 4757..4760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 239,
            column: 6,
            span: 4761..4762,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 239,
            column: 7,
            span: 4762..4763,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 239,
            column: 8,
            span: 4762..4764,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 239,
            column: 9,
            span: 4764..4765,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 239,
            column: 14,
            span: 4764..4770,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 239,
            column: 0,
            span: 4771..4773,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 240,
            column: 5,
            span: 4776..4778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 240,
            column: 10,
            span: 4779..4783,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 240,
            column: 11,
            span: 4783..4784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        position: Position {
            line: 240,
            column: 15,
            span: 4784..4788,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 240,
            column: 16,
            span: 4788..4789,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 240,
            column: 17,
            span: 4789..4790,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 240,
            column: 18,
            span: 4790..4791,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 240,
            column: 20,
            span: 4790..4793,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 240,
            column: 21,
            span: 4793..4794,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 240,
            column: 24,
            span: 4795..4797,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 240,
            column: 26,
            span: 4797..4799,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 240,
            column: 0,
            span: 4800..4804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 241,
            column: 6,
            span: 4809..4810,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 241,
            column: 7,
            span: 4810..4811,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        position: Position {
            line: 241,
            column: 10,
            span: 4811..4814,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 241,
            column: 12,
            span: 4814..4816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 241,
            column: 13,
            span: 4816..4817,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 241,
            column: 14,
            span: 4817..4818,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 241,
            column: 16,
            span: 4819..4820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 241,
            column: 0,
            span: 4821..4822,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 242,
            column: 0,
            span: 4825..4828,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 243,
            column: 0,
            span: 4829..4832,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 245,
            column: 2,
            span: 4834..4835,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 245,
            column: 4,
            span: 4836..4837,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 245,
            column: 6,
            span: 4838..4839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 245,
            column: 7,
            span: 4839..4840,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 245,
            column: 8,
            span: 4840..4841,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 245,
            column: 9,
            span: 4840..4842,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 245,
            column: 10,
            span: 4842..4843,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 246,
            column: 4,
            span: 4844..4847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 246,
            column: 6,
            span: 4848..4849,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 246,
            column: 7,
            span: 4849..4850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 246,
            column: 8,
            span: 4850..4851,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 246,
            column: 11,
            span: 4852..4854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 246,
            column: 17,
            span: 4855..4860,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 246,
            column: 18,
            span: 4860..4861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 246,
            column: 19,
            span: 4861..4862,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 246,
            column: 20,
            span: 4862..4863,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 246,
            column: 0,
            span: 4864..4866,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 247,
            column: 4,
            span: 4869..4870,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 247,
            column: 5,
            span: 4870..4871,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 247,
            column: 6,
            span: 4871..4872,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 247,
            column: 8,
            span: 4873..4874,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 247,
            column: 10,
            span: 4875..4876,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 247,
            column: 11,
            span: 4876..4877,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 247,
            column: 12,
            span: 4877..4878,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 247,
            column: 13,
            span: 4878..4879,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 247,
            column: 0,
            span: 4878..4880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 248,
            column: 9,
            span: 4883..4889,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 248,
            column: 10,
            span: 4889..4890,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 248,
            column: 11,
            span: 4890..4891,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 248,
            column: 15,
            span: 4892..4895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 248,
            column: 17,
            span: 4896..4897,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 248,
            column: 21,
            span: 4898..4901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 248,
            column: 23,
            span: 4902..4903,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 248,
            column: 24,
            span: 4903..4904,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 248,
            column: 25,
            span: 4904..4905,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 248,
            column: 26,
            span: 4905..4906,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 248,
            column: 29,
            span: 4907..4909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 248,
            column: 31,
            span: 4910..4911,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 248,
            column: 32,
            span: 4911..4912,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 249,
            column: 0,
            span: 4913..4916,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 250,
            column: 7,
            span: 4917..4923,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 250,
            column: 8,
            span: 4923..4924,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 250,
            column: 9,
            span: 4924..4925,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 250,
            column: 10,
            span: 4925..4926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 250,
            column: 11,
            span: 4926..4927,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 250,
            column: 14,
            span: 4928..4930,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 250,
            column: 19,
            span: 4930..4935,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 250,
            column: 20,
            span: 4935..4936,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 251,
            column: 2,
            span: 4937..4938,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 251,
            column: 4,
            span: 4939..4940,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 251,
            column: 0,
            span: 4941..4944,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 253,
            column: 3,
            span: 4946..4948,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 254,
            column: 8,
            span: 4975..4980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 254,
            column: 10,
            span: 4981..4982,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 254,
            column: 12,
            span: 4983..4984,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 254,
            column: 14,
            span: 4985..4986,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 254,
            column: 15,
            span: 4986..4987,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 255,
            column: 6,
            span: 4990..4993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 255,
            column: 8,
            span: 4994..4995,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 255,
            column: 9,
            span: 4995..4996,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 255,
            column: 10,
            span: 4996..4997,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 255,
            column: 13,
            span: 4998..5000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 255,
            column: 19,
            span: 5001..5006,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 255,
            column: 20,
            span: 5006..5007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 255,
            column: 22,
            span: 5007..5009,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 255,
            column: 23,
            span: 5009..5010,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 255,
            column: 26,
            span: 5011..5013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 255,
            column: 28,
            span: 5014..5015,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 255,
            column: 29,
            span: 5015..5016,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 255,
            column: 30,
            span: 5016..5017,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 255,
            column: 31,
            span: 5017..5018,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 255,
            column: 32,
            span: 5018..5019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 255,
            column: 33,
            span: 5019..5020,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 255,
            column: 0,
            span: 5021..5024,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 256,
            column: 6,
            span: 5027..5030,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 256,
            column: 8,
            span: 5031..5032,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 256,
            column: 9,
            span: 5032..5033,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 256,
            column: 10,
            span: 5033..5034,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 256,
            column: 13,
            span: 5035..5037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 256,
            column: 19,
            span: 5038..5043,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 256,
            column: 20,
            span: 5043..5044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 256,
            column: 21,
            span: 5044..5045,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 256,
            column: 22,
            span: 5045..5046,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 256,
            column: 0,
            span: 5047..5049,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 257,
            column: 7,
            span: 5054..5056,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 257,
            column: 11,
            span: 5057..5060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 257,
            column: 19,
            span: 5061..5068,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 257,
            column: 20,
            span: 5068..5069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        position: Position {
            line: 257,
            column: 26,
            span: 5069..5075,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 257,
            column: 27,
            span: 5075..5076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 257,
            column: 28,
            span: 5076..5077,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 257,
            column: 29,
            span: 5077..5078,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 257,
            column: 33,
            span: 5079..5082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 257,
            column: 38,
            span: 5083..5087,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 39,
            span: 5087..5088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 257,
            column: 40,
            span: 5088..5089,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 41,
            span: 5089..5090,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 257,
            column: 44,
            span: 5091..5093,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        position: Position {
            line: 257,
            column: 55,
            span: 5094..5104,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 257,
            column: 0,
            span: 5105..5108,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 258,
            column: 11,
            span: 5116..5119,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 258,
            column: 18,
            span: 5120..5126,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 258,
            column: 19,
            span: 5126..5127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 258,
            column: 23,
            span: 5127..5131,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 258,
            column: 24,
            span: 5131..5132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 258,
            column: 25,
            span: 5132..5133,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 258,
            column: 26,
            span: 5133..5134,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^[%u_]\"",
        ),
        position: Position {
            line: 258,
            column: 35,
            span: 5135..5143,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 258,
            column: 36,
            span: 5143..5144,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 258,
            column: 0,
            span: 5145..5149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 259,
            column: 8,
            span: 5155..5157,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 259,
            column: 9,
            span: 5157..5158,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 259,
            column: 10,
            span: 5158..5159,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 259,
            column: 11,
            span: 5159..5160,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 259,
            column: 13,
            span: 5161..5162,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 259,
            column: 0,
            span: 5163..5166,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 260,
            column: 0,
            span: 5171..5174,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 261,
            column: 19,
            span: 5179..5193,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 261,
            column: 20,
            span: 5193..5194,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 261,
            column: 21,
            span: 5194..5195,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 262,
            column: 0,
            span: 5198..5201,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 263,
            column: 0,
            span: 5202..5205,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 268,
            column: 6,
            span: 5213..5218,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 268,
            column: 15,
            span: 5219..5227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checknext",
        ),
        position: Position {
            line: 268,
            column: 25,
            span: 5228..5237,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 268,
            column: 27,
            span: 5238..5239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 268,
            column: 28,
            span: 5239..5240,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 268,
            column: 29,
            span: 5240..5241,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 269,
            column: 8,
            span: 5244..5249,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 269,
            column: 10,
            span: 5250..5251,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 269,
            column: 12,
            span: 5252..5253,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 269,
            column: 14,
            span: 5254..5255,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 269,
            column: 15,
            span: 5255..5256,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 270,
            column: 5,
            span: 5259..5261,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 270,
            column: 11,
            span: 5262..5267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 270,
            column: 13,
            span: 5268..5269,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 270,
            column: 14,
            span: 5269..5270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 270,
            column: 15,
            span: 5270..5271,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 270,
            column: 17,
            span: 5272..5273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 270,
            column: 22,
            span: 5274..5278,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 23,
            span: 5278..5279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 270,
            column: 24,
            span: 5279..5280,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 25,
            span: 5280..5281,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 270,
            column: 26,
            span: 5281..5282,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 270,
            column: 32,
            span: 5283..5288,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 270,
            column: 34,
            span: 5289..5290,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 270,
            column: 37,
            span: 5291..5293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 270,
            column: 39,
            span: 5294..5295,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 270,
            column: 40,
            span: 5295..5296,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 270,
            column: 41,
            span: 5296..5297,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 270,
            column: 42,
            span: 5297..5298,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 270,
            column: 44,
            span: 5299..5300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 270,
            column: 46,
            span: 5301..5302,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 270,
            column: 47,
            span: 5302..5303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 270,
            column: 49,
            span: 5304..5305,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 270,
            column: 50,
            span: 5305..5306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 270,
            column: 51,
            span: 5306..5307,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 270,
            column: 53,
            span: 5308..5309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 270,
            column: 58,
            span: 5310..5314,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 59,
            span: 5314..5315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 270,
            column: 60,
            span: 5315..5316,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 270,
            column: 61,
            span: 5316..5317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 270,
            column: 62,
            span: 5317..5318,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 63,
            span: 5318..5319,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 270,
            column: 67,
            span: 5320..5323,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 270,
            column: 0,
            span: 5324..5327,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 271,
            column: 6,
            span: 5330..5333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 271,
            column: 8,
            span: 5334..5335,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 271,
            column: 9,
            span: 5335..5336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 271,
            column: 10,
            span: 5336..5337,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 271,
            column: 13,
            span: 5338..5340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 271,
            column: 19,
            span: 5341..5346,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 271,
            column: 20,
            span: 5346..5347,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 271,
            column: 21,
            span: 5347..5348,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 271,
            column: 22,
            span: 5348..5349,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 271,
            column: 25,
            span: 5350..5352,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 271,
            column: 32,
            span: 5353..5359,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 271,
            column: 33,
            span: 5359..5360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 271,
            column: 34,
            span: 5360..5361,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 271,
            column: 35,
            span: 5361..5362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 271,
            column: 36,
            span: 5362..5363,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 271,
            column: 37,
            span: 5363..5364,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 271,
            column: 40,
            span: 5365..5367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 271,
            column: 42,
            span: 5368..5369,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 271,
            column: 43,
            span: 5369..5370,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 271,
            column: 0,
            span: 5371..5374,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 272,
            column: 6,
            span: 5377..5380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 272,
            column: 8,
            span: 5381..5382,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 272,
            column: 9,
            span: 5382..5383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 272,
            column: 10,
            span: 5383..5384,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 272,
            column: 13,
            span: 5385..5387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 272,
            column: 19,
            span: 5388..5393,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 272,
            column: 20,
            span: 5393..5394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 272,
            column: 21,
            span: 5394..5395,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 272,
            column: 22,
            span: 5395..5396,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 272,
            column: 25,
            span: 5397..5399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 272,
            column: 32,
            span: 5400..5406,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 272,
            column: 33,
            span: 5406..5407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 272,
            column: 34,
            span: 5407..5408,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 272,
            column: 35,
            span: 5408..5409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 272,
            column: 36,
            span: 5409..5410,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 272,
            column: 37,
            span: 5410..5411,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 272,
            column: 40,
            span: 5412..5414,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 272,
            column: 42,
            span: 5415..5416,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 272,
            column: 43,
            span: 5416..5417,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 272,
            column: 0,
            span: 5418..5421,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 273,
            column: 0,
            span: 5422..5425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checknext",
        ),
        position: Position {
            line: 275,
            column: 10,
            span: 5427..5436,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 275,
            column: 11,
            span: 5436..5437,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 275,
            column: 12,
            span: 5436..5438,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 275,
            column: 13,
            span: 5438..5439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 275,
            column: 14,
            span: 5439..5440,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 275,
            column: 15,
            span: 5440..5441,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 275,
            column: 16,
            span: 5440..5442,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 275,
            column: 17,
            span: 5442..5443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 275,
            column: 18,
            span: 5443..5444,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 275,
            column: 19,
            span: 5444..5445,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 275,
            column: 20,
            span: 5444..5446,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 275,
            column: 21,
            span: 5446..5447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 275,
            column: 22,
            span: 5447..5448,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 275,
            column: 23,
            span: 5448..5449,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 275,
            column: 24,
            span: 5448..5450,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 275,
            column: 25,
            span: 5450..5451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checknext",
        ),
        position: Position {
            line: 276,
            column: 10,
            span: 5452..5461,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 276,
            column: 11,
            span: 5461..5462,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 276,
            column: 12,
            span: 5461..5463,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 276,
            column: 13,
            span: 5463..5464,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 276,
            column: 14,
            span: 5463..5465,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 276,
            column: 15,
            span: 5465..5466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 276,
            column: 16,
            span: 5466..5467,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 276,
            column: 17,
            span: 5467..5468,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 276,
            column: 18,
            span: 5467..5469,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 276,
            column: 19,
            span: 5469..5470,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 276,
            column: 20,
            span: 5470..5471,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 276,
            column: 21,
            span: 5471..5472,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 276,
            column: 22,
            span: 5471..5473,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 276,
            column: 23,
            span: 5473..5474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 276,
            column: 24,
            span: 5474..5475,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 276,
            column: 25,
            span: 5475..5476,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 276,
            column: 26,
            span: 5475..5477,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 276,
            column: 27,
            span: 5477..5478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checknext",
        ),
        position: Position {
            line: 277,
            column: 10,
            span: 5479..5488,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 277,
            column: 11,
            span: 5488..5489,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 277,
            column: 12,
            span: 5488..5490,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 277,
            column: 13,
            span: 5490..5491,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 277,
            column: 14,
            span: 5490..5492,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 277,
            column: 15,
            span: 5492..5493,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 277,
            column: 16,
            span: 5492..5494,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 277,
            column: 17,
            span: 5494..5495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 277,
            column: 18,
            span: 5495..5496,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 277,
            column: 19,
            span: 5496..5497,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 277,
            column: 20,
            span: 5496..5498,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 277,
            column: 21,
            span: 5498..5499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 277,
            column: 22,
            span: 5499..5500,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 277,
            column: 23,
            span: 5500..5501,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 277,
            column: 24,
            span: 5500..5502,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 277,
            column: 25,
            span: 5502..5503,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 277,
            column: 26,
            span: 5503..5504,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 277,
            column: 27,
            span: 5504..5505,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 277,
            column: 28,
            span: 5504..5506,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 277,
            column: 29,
            span: 5506..5507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checknext",
        ),
        position: Position {
            line: 278,
            column: 10,
            span: 5508..5517,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 278,
            column: 11,
            span: 5517..5518,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 278,
            column: 12,
            span: 5517..5519,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 278,
            column: 13,
            span: 5519..5520,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 278,
            column: 14,
            span: 5519..5521,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 278,
            column: 15,
            span: 5521..5522,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 278,
            column: 16,
            span: 5521..5523,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 278,
            column: 17,
            span: 5523..5524,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 278,
            column: 18,
            span: 5523..5525,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 278,
            column: 19,
            span: 5525..5526,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 278,
            column: 20,
            span: 5526..5527,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 278,
            column: 21,
            span: 5527..5528,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 278,
            column: 22,
            span: 5527..5529,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 278,
            column: 23,
            span: 5529..5530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 278,
            column: 24,
            span: 5530..5531,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 278,
            column: 25,
            span: 5531..5532,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 278,
            column: 26,
            span: 5531..5533,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 278,
            column: 27,
            span: 5533..5534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 278,
            column: 28,
            span: 5534..5535,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 278,
            column: 29,
            span: 5535..5536,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 278,
            column: 30,
            span: 5535..5537,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 278,
            column: 31,
            span: 5537..5538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checknext",
        ),
        position: Position {
            line: 279,
            column: 10,
            span: 5539..5548,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 279,
            column: 11,
            span: 5548..5549,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 279,
            column: 12,
            span: 5548..5550,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 279,
            column: 13,
            span: 5550..5551,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 279,
            column: 14,
            span: 5550..5552,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 279,
            column: 15,
            span: 5552..5553,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 279,
            column: 16,
            span: 5552..5554,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 279,
            column: 17,
            span: 5554..5555,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 279,
            column: 18,
            span: 5554..5556,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 279,
            column: 19,
            span: 5556..5557,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 279,
            column: 20,
            span: 5556..5558,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 279,
            column: 21,
            span: 5558..5559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 279,
            column: 22,
            span: 5559..5560,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 279,
            column: 23,
            span: 5560..5561,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 279,
            column: 24,
            span: 5560..5562,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 279,
            column: 25,
            span: 5562..5563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 279,
            column: 26,
            span: 5563..5564,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 279,
            column: 27,
            span: 5564..5565,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 279,
            column: 28,
            span: 5564..5566,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 279,
            column: 29,
            span: 5566..5567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 279,
            column: 30,
            span: 5567..5568,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 279,
            column: 31,
            span: 5568..5569,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 279,
            column: 32,
            span: 5568..5570,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 279,
            column: 33,
            span: 5570..5571,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 281,
            column: 7,
            span: 5573..5579,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 8,
            span: 5579..5580,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 281,
            column: 9,
            span: 5580..5581,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 281,
            column: 10,
            span: 5581..5582,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 281,
            column: 11,
            span: 5582..5583,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 281,
            column: 14,
            span: 5584..5586,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 281,
            column: 16,
            span: 5586..5588,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 281,
            column: 17,
            span: 5588..5589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 282,
            column: 7,
            span: 5590..5596,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 282,
            column: 8,
            span: 5596..5597,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 282,
            column: 9,
            span: 5597..5598,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 282,
            column: 10,
            span: 5598..5599,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 282,
            column: 11,
            span: 5599..5600,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 282,
            column: 12,
            span: 5600..5601,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 282,
            column: 13,
            span: 5600..5602,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 282,
            column: 14,
            span: 5602..5603,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 282,
            column: 16,
            span: 5604..5605,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 282,
            column: 18,
            span: 5605..5607,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 282,
            column: 19,
            span: 5607..5608,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 282,
            column: 22,
            span: 5609..5611,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 282,
            column: 24,
            span: 5611..5613,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 282,
            column: 25,
            span: 5613..5614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 283,
            column: 7,
            span: 5615..5621,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 283,
            column: 8,
            span: 5621..5622,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 283,
            column: 9,
            span: 5622..5623,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 283,
            column: 10,
            span: 5623..5624,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 283,
            column: 11,
            span: 5623..5625,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 283,
            column: 12,
            span: 5625..5626,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 283,
            column: 13,
            span: 5625..5627,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 283,
            column: 14,
            span: 5627..5628,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 283,
            column: 15,
            span: 5627..5629,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 283,
            column: 16,
            span: 5629..5630,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 283,
            column: 19,
            span: 5630..5633,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 283,
            column: 20,
            span: 5633..5634,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 283,
            column: 23,
            span: 5634..5637,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 283,
            column: 24,
            span: 5637..5638,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 283,
            column: 27,
            span: 5639..5641,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 283,
            column: 29,
            span: 5641..5643,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 283,
            column: 30,
            span: 5643..5644,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 284,
            column: 4,
            span: 5645..5648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 284,
            column: 6,
            span: 5649..5650,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 284,
            column: 7,
            span: 5650..5651,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 284,
            column: 8,
            span: 5650..5652,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 284,
            column: 9,
            span: 5652..5653,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 284,
            column: 11,
            span: 5652..5655,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 284,
            column: 0,
            span: 5656..5658,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 285,
            column: 8,
            span: 5661..5666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 285,
            column: 10,
            span: 5667..5668,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 285,
            column: 12,
            span: 5669..5670,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 285,
            column: 14,
            span: 5671..5672,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 285,
            column: 15,
            span: 5672..5673,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 286,
            column: 6,
            span: 5676..5679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 286,
            column: 8,
            span: 5680..5681,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 286,
            column: 9,
            span: 5681..5682,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 286,
            column: 10,
            span: 5681..5683,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 286,
            column: 11,
            span: 5683..5684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 286,
            column: 12,
            span: 5684..5685,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 286,
            column: 15,
            span: 5686..5688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 286,
            column: 17,
            span: 5689..5690,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 286,
            column: 18,
            span: 5690..5691,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 286,
            column: 19,
            span: 5691..5692,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 286,
            column: 20,
            span: 5692..5693,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 286,
            column: 21,
            span: 5693..5694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 286,
            column: 22,
            span: 5694..5695,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 286,
            column: 0,
            span: 5696..5699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 287,
            column: 9,
            span: 5702..5708,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 287,
            column: 10,
            span: 5708..5709,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 287,
            column: 11,
            span: 5709..5710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 287,
            column: 12,
            span: 5710..5711,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 287,
            column: 15,
            span: 5712..5714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 287,
            column: 17,
            span: 5715..5716,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 287,
            column: 18,
            span: 5716..5717,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 288,
            column: 0,
            span: 5718..5721,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 291,
            column: 9,
            span: 5784..5792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 291,
            column: 15,
            span: 5793..5798,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 291,
            column: 16,
            span: 5798..5799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxn",
        ),
        position: Position {
            line: 291,
            column: 20,
            span: 5799..5803,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 291,
            column: 22,
            span: 5804..5805,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 291,
            column: 23,
            span: 5805..5806,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 291,
            column: 24,
            span: 5806..5807,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 292,
            column: 8,
            span: 5810..5815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 292,
            column: 12,
            span: 5816..5819,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 292,
            column: 14,
            span: 5820..5821,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 292,
            column: 0,
            span: 5821..5823,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 293,
            column: 6,
            span: 5826..5829,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 293,
            column: 8,
            span: 5830..5831,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 293,
            column: 11,
            span: 5832..5834,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 293,
            column: 17,
            span: 5835..5840,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 293,
            column: 18,
            span: 5840..5841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 293,
            column: 19,
            span: 5841..5842,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 293,
            column: 20,
            span: 5842..5843,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 293,
            column: 0,
            span: 5844..5846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 294,
            column: 8,
            span: 5851..5854,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 294,
            column: 10,
            span: 5855..5856,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 294,
            column: 12,
            span: 5857..5858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 294,
            column: 16,
            span: 5858..5862,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 294,
            column: 17,
            span: 5862..5863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 294,
            column: 18,
            span: 5863..5864,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 294,
            column: 19,
            span: 5864..5865,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 294,
            column: 22,
            span: 5866..5868,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'number'",
        ),
        position: Position {
            line: 294,
            column: 31,
            span: 5869..5877,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 294,
            column: 32,
            span: 5877..5878,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 294,
            column: 36,
            span: 5879..5882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 294,
            column: 41,
            span: 5883..5887,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 294,
            column: 42,
            span: 5887..5888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 294,
            column: 45,
            span: 5888..5891,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 294,
            column: 46,
            span: 5891..5892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 294,
            column: 49,
            span: 5892..5895,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 294,
            column: 50,
            span: 5895..5896,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 294,
            column: 52,
            span: 5897..5898,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 294,
            column: 53,
            span: 5898..5899,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 294,
            column: 56,
            span: 5900..5902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 294,
            column: 0,
            span: 5903..5906,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 295,
            column: 0,
            span: 5909..5912,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 296,
            column: 9,
            span: 5915..5921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 296,
            column: 0,
            span: 5922..5925,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 297,
            column: 0,
            span: 5926..5929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 299,
            column: 7,
            span: 5931..5937,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 299,
            column: 8,
            span: 5937..5938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 299,
            column: 13,
            span: 5938..5943,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 299,
            column: 14,
            span: 5943..5944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxn",
        ),
        position: Position {
            line: 299,
            column: 18,
            span: 5944..5948,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 299,
            column: 19,
            span: 5948..5949,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 299,
            column: 20,
            span: 5949..5950,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 299,
            column: 23,
            span: 5951..5953,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 299,
            column: 25,
            span: 5953..5955,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 299,
            column: 26,
            span: 5955..5956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 300,
            column: 7,
            span: 5957..5963,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 300,
            column: 8,
            span: 5963..5964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 300,
            column: 13,
            span: 5964..5969,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 300,
            column: 14,
            span: 5969..5970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxn",
        ),
        position: Position {
            line: 300,
            column: 18,
            span: 5970..5974,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 300,
            column: 19,
            span: 5974..5975,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 300,
            column: 20,
            span: 5975..5976,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1000\"",
        ),
        position: Position {
            line: 300,
            column: 26,
            span: 5976..5982,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 300,
            column: 27,
            span: 5982..5983,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 300,
            column: 29,
            span: 5984..5985,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 300,
            column: 34,
            span: 5986..5990,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 300,
            column: 35,
            span: 5990..5991,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 300,
            column: 38,
            span: 5992..5994,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 300,
            column: 40,
            span: 5994..5996,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 300,
            column: 41,
            span: 5996..5997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 301,
            column: 7,
            span: 5998..6004,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 301,
            column: 8,
            span: 6004..6005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 301,
            column: 13,
            span: 6005..6010,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 301,
            column: 14,
            span: 6010..6011,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxn",
        ),
        position: Position {
            line: 301,
            column: 18,
            span: 6011..6015,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 301,
            column: 19,
            span: 6015..6016,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 301,
            column: 20,
            span: 6016..6017,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1000\"",
        ),
        position: Position {
            line: 301,
            column: 26,
            span: 6017..6023,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 301,
            column: 27,
            span: 6023..6024,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 301,
            column: 29,
            span: 6025..6026,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 301,
            column: 34,
            span: 6027..6031,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 301,
            column: 35,
            span: 6031..6032,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 301,
            column: 37,
            span: 6033..6034,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: ".5",
                },
            ),
        ),
        position: Position {
            line: 301,
            column: 41,
            span: 6033..6038,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 301,
            column: 42,
            span: 6038..6039,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 301,
            column: 44,
            span: 6040..6041,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 301,
            column: 46,
            span: 6041..6043,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 301,
            column: 47,
            span: 6043..6044,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 301,
            column: 50,
            span: 6045..6047,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: ".5",
                },
            ),
        ),
        position: Position {
            line: 301,
            column: 55,
            span: 6047..6052,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 301,
            column: 56,
            span: 6052..6053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 302,
            column: 7,
            span: 6054..6060,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 302,
            column: 8,
            span: 6060..6061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 302,
            column: 13,
            span: 6061..6066,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 302,
            column: 14,
            span: 6066..6067,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxn",
        ),
        position: Position {
            line: 302,
            column: 18,
            span: 6067..6071,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 302,
            column: 19,
            span: 6071..6072,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 302,
            column: 20,
            span: 6072..6073,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 302,
            column: 24,
            span: 6072..6077,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 302,
            column: 25,
            span: 6077..6078,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 302,
            column: 27,
            span: 6079..6080,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 302,
            column: 32,
            span: 6081..6085,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 302,
            column: 33,
            span: 6085..6086,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 302,
            column: 36,
            span: 6087..6089,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 302,
            column: 41,
            span: 6089..6094,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 302,
            column: 42,
            span: 6094..6095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 303,
            column: 7,
            span: 6096..6102,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 303,
            column: 8,
            span: 6102..6103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 303,
            column: 13,
            span: 6103..6108,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 303,
            column: 14,
            span: 6108..6109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxn",
        ),
        position: Position {
            line: 303,
            column: 18,
            span: 6109..6113,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 303,
            column: 19,
            span: 6113..6114,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 303,
            column: 20,
            span: 6114..6115,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 303,
            column: 22,
            span: 6114..6117,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 303,
            column: 23,
            span: 6117..6118,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 303,
            column: 25,
            span: 6119..6120,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 303,
            column: 30,
            span: 6121..6125,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 303,
            column: 31,
            span: 6125..6126,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 303,
            column: 33,
            span: 6127..6128,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 303,
            column: 36,
            span: 6127..6131,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 303,
            column: 37,
            span: 6131..6132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 303,
            column: 41,
            span: 6132..6136,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 303,
            column: 42,
            span: 6136..6137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        position: Position {
            line: 303,
            column: 44,
            span: 6137..6139,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 303,
            column: 45,
            span: 6139..6140,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 303,
            column: 47,
            span: 6141..6142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 303,
            column: 53,
            span: 6143..6148,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 303,
            column: 54,
            span: 6148..6149,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 303,
            column: 57,
            span: 6150..6152,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 303,
            column: 61,
            span: 6152..6156,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 303,
            column: 62,
            span: 6156..6157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 303,
            column: 66,
            span: 6157..6161,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 303,
            column: 67,
            span: 6161..6162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        position: Position {
            line: 303,
            column: 69,
            span: 6162..6164,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 303,
            column: 70,
            span: 6164..6165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 305,
            column: 6,
            span: 6167..6172,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 305,
            column: 7,
            span: 6172..6173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxn",
        ),
        position: Position {
            line: 305,
            column: 11,
            span: 6173..6177,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 305,
            column: 13,
            span: 6178..6179,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 305,
            column: 0,
            span: 6180..6183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 308,
            column: 2,
            span: 6201..6202,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 308,
            column: 4,
            span: 6203..6204,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 308,
            column: 6,
            span: 6205..6206,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 308,
            column: 7,
            span: 6206..6207,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 309,
            column: 4,
            span: 6208..6211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 309,
            column: 6,
            span: 6212..6213,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 309,
            column: 7,
            span: 6213..6214,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 309,
            column: 8,
            span: 6213..6215,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 309,
            column: 9,
            span: 6215..6216,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 309,
            column: 11,
            span: 6215..6218,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 309,
            column: 14,
            span: 6219..6221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 309,
            column: 16,
            span: 6222..6223,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 309,
            column: 17,
            span: 6223..6224,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 309,
            column: 18,
            span: 6223..6225,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 309,
            column: 19,
            span: 6225..6226,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 309,
            column: 20,
            span: 6226..6227,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 309,
            column: 21,
            span: 6227..6228,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 309,
            column: 23,
            span: 6229..6230,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 309,
            column: 28,
            span: 6231..6235,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 309,
            column: 0,
            span: 6236..6239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 310,
            column: 7,
            span: 6240..6246,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 310,
            column: 8,
            span: 6246..6247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 310,
            column: 9,
            span: 6247..6248,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 310,
            column: 10,
            span: 6248..6249,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 310,
            column: 11,
            span: 6249..6250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 310,
            column: 12,
            span: 6250..6251,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 310,
            column: 13,
            span: 6251..6252,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 310,
            column: 14,
            span: 6252..6253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 312,
            column: 6,
            span: 6255..6260,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 312,
            column: 7,
            span: 6260..6261,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 312,
            column: 10,
            span: 6261..6264,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 312,
            column: 11,
            span: 6264..6265,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 316,
            column: 6,
            span: 6286..6291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 316,
            column: 8,
            span: 6292..6293,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 316,
            column: 10,
            span: 6294..6295,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 316,
            column: 12,
            span: 6296..6297,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 316,
            column: 13,
            span: 6297..6298,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 316,
            column: 14,
            span: 6298..6299,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 316,
            column: 15,
            span: 6298..6300,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 316,
            column: 16,
            span: 6300..6301,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 316,
            column: 17,
            span: 6301..6302,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 316,
            column: 19,
            span: 6303..6304,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 316,
            column: 21,
            span: 6304..6306,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 22,
            span: 6306..6307,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 316,
            column: 24,
            span: 6308..6309,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 316,
            column: 25,
            span: 6309..6310,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 316,
            column: 26,
            span: 6309..6311,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 316,
            column: 27,
            span: 6311..6312,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 316,
            column: 28,
            span: 6312..6313,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 316,
            column: 30,
            span: 6314..6315,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 316,
            column: 32,
            span: 6315..6317,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 33,
            span: 6317..6318,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 316,
            column: 35,
            span: 6319..6320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 316,
            column: 41,
            span: 6320..6326,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 316,
            column: 42,
            span: 6326..6327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 316,
            column: 45,
            span: 6327..6330,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 316,
            column: 46,
            span: 6330..6331,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x \"",
        ),
        position: Position {
            line: 316,
            column: 50,
            span: 6331..6335,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 51,
            span: 6335..6336,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 316,
            column: 53,
            span: 6336..6338,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 316,
            column: 54,
            span: 6338..6339,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 316,
            column: 55,
            span: 6339..6340,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 316,
            column: 57,
            span: 6341..6342,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 316,
            column: 59,
            span: 6342..6344,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 60,
            span: 6344..6345,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 317,
            column: 13,
            span: 6357..6358,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: ".3",
                },
            ),
        ),
        position: Position {
            line: 317,
            column: 18,
            span: 6357..6363,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 317,
            column: 19,
            span: 6363..6364,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 317,
            column: 21,
            span: 6365..6366,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 317,
            column: 23,
            span: 6366..6368,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 317,
            column: 24,
            span: 6368..6369,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 317,
            column: 26,
            span: 6370..6371,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 317,
            column: 27,
            span: 6370..6372,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 317,
            column: 28,
            span: 6372..6373,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 317,
            column: 30,
            span: 6374..6375,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 317,
            column: 32,
            span: 6375..6377,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 317,
            column: 33,
            span: 6377..6378,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 319,
            column: 6,
            span: 6380..6385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 319,
            column: 8,
            span: 6386..6387,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 319,
            column: 10,
            span: 6388..6389,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 319,
            column: 0,
            span: 6389..6391,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 320,
            column: 4,
            span: 6392..6395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 320,
            column: 6,
            span: 6396..6397,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 320,
            column: 7,
            span: 6397..6398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 320,
            column: 9,
            span: 6399..6400,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 320,
            column: 12,
            span: 6401..6403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 320,
            column: 18,
            span: 6404..6409,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 320,
            column: 19,
            span: 6409..6410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 320,
            column: 21,
            span: 6411..6412,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 320,
            column: 23,
            span: 6413..6414,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 320,
            column: 0,
            span: 6415..6417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 321,
            column: 4,
            span: 6420..6421,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 321,
            column: 6,
            span: 6422..6423,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 321,
            column: 8,
            span: 6424..6425,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 321,
            column: 9,
            span: 6425..6426,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 321,
            column: 0,
            span: 6425..6427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 322,
            column: 9,
            span: 6430..6436,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 322,
            column: 10,
            span: 6436..6437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 322,
            column: 11,
            span: 6437..6438,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 322,
            column: 12,
            span: 6438..6439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 322,
            column: 13,
            span: 6439..6440,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 322,
            column: 14,
            span: 6440..6441,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 322,
            column: 17,
            span: 6442..6444,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 322,
            column: 19,
            span: 6445..6446,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 322,
            column: 20,
            span: 6446..6447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 323,
            column: 4,
            span: 6450..6451,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 323,
            column: 5,
            span: 6451..6452,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 323,
            column: 6,
            span: 6452..6453,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 323,
            column: 7,
            span: 6453..6454,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 323,
            column: 9,
            span: 6455..6456,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 323,
            column: 0,
            span: 6457..6460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 324,
            column: 17,
            span: 6463..6477,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 324,
            column: 18,
            span: 6477..6478,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 324,
            column: 19,
            span: 6478..6479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 325,
            column: 9,
            span: 6482..6488,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 325,
            column: 10,
            span: 6488..6489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 325,
            column: 11,
            span: 6489..6490,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 325,
            column: 12,
            span: 6490..6491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 325,
            column: 13,
            span: 6491..6492,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 325,
            column: 14,
            span: 6492..6493,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 325,
            column: 17,
            span: 6494..6496,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 325,
            column: 21,
            span: 6497..6500,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 325,
            column: 22,
            span: 6500..6501,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 326,
            column: 0,
            span: 6502..6505,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 327,
            column: 7,
            span: 6506..6512,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 327,
            column: 8,
            span: 6512..6513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 327,
            column: 9,
            span: 6513..6514,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 327,
            column: 12,
            span: 6515..6517,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 327,
            column: 14,
            span: 6517..6519,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 327,
            column: 15,
            span: 6519..6520,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 330,
            column: 6,
            span: 6523..6528,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 330,
            column: 15,
            span: 6529..6537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 330,
            column: 20,
            span: 6538..6542,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 330,
            column: 22,
            span: 6543..6544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 330,
            column: 23,
            span: 6544..6545,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 330,
            column: 24,
            span: 6545..6546,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 331,
            column: 9,
            span: 6549..6555,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 331,
            column: 10,
            span: 6555..6556,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 331,
            column: 13,
            span: 6556..6559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 331,
            column: 19,
            span: 6560..6565,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 331,
            column: 20,
            span: 6565..6566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 331,
            column: 25,
            span: 6566..6571,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 331,
            column: 26,
            span: 6571..6572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 331,
            column: 32,
            span: 6572..6578,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 33,
            span: 6578..6579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 331,
            column: 35,
            span: 6580..6581,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 36,
            span: 6581..6582,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 331,
            column: 38,
            span: 6582..6584,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 39,
            span: 6584..6585,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 331,
            column: 42,
            span: 6585..6588,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 331,
            column: 43,
            span: 6588..6589,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 331,
            column: 44,
            span: 6589..6590,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 331,
            column: 45,
            span: 6590..6591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 332,
            column: 8,
            span: 6594..6599,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 332,
            column: 9,
            span: 6599..6600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 332,
            column: 15,
            span: 6600..6606,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 16,
            span: 6606..6607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 332,
            column: 17,
            span: 6607..6608,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 18,
            span: 6608..6609,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 332,
            column: 21,
            span: 6609..6612,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 22,
            span: 6612..6613,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 332,
            column: 23,
            span: 6613..6614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 332,
            column: 29,
            span: 6615..6620,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 332,
            column: 30,
            span: 6620..6621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 332,
            column: 36,
            span: 6621..6627,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 37,
            span: 6627..6628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 332,
            column: 38,
            span: 6628..6629,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 39,
            span: 6629..6630,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 332,
            column: 41,
            span: 6630..6632,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 42,
            span: 6632..6633,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 332,
            column: 45,
            span: 6633..6636,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 46,
            span: 6636..6637,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 332,
            column: 47,
            span: 6637..6638,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 333,
            column: 8,
            span: 6641..6646,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 333,
            column: 9,
            span: 6646..6647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 333,
            column: 15,
            span: 6647..6653,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 333,
            column: 16,
            span: 6653..6654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 333,
            column: 17,
            span: 6654..6655,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 333,
            column: 18,
            span: 6655..6656,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 333,
            column: 20,
            span: 6656..6658,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 333,
            column: 21,
            span: 6658..6659,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 333,
            column: 23,
            span: 6660..6661,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 333,
            column: 24,
            span: 6660..6662,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 333,
            column: 25,
            span: 6662..6663,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 333,
            column: 26,
            span: 6663..6664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 333,
            column: 32,
            span: 6665..6670,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 333,
            column: 33,
            span: 6670..6671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 333,
            column: 39,
            span: 6671..6677,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 333,
            column: 40,
            span: 6677..6678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 333,
            column: 41,
            span: 6678..6679,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 333,
            column: 42,
            span: 6679..6680,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 333,
            column: 45,
            span: 6680..6683,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 333,
            column: 46,
            span: 6683..6684,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 333,
            column: 47,
            span: 6684..6685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 334,
            column: 8,
            span: 6688..6693,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 334,
            column: 9,
            span: 6693..6694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 334,
            column: 15,
            span: 6694..6700,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 334,
            column: 16,
            span: 6700..6701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 334,
            column: 17,
            span: 6701..6702,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 334,
            column: 18,
            span: 6702..6703,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 334,
            column: 20,
            span: 6704..6705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 334,
            column: 21,
            span: 6705..6706,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 334,
            column: 22,
            span: 6706..6707,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 334,
            column: 23,
            span: 6706..6708,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 334,
            column: 24,
            span: 6708..6709,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 334,
            column: 27,
            span: 6709..6712,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 334,
            column: 28,
            span: 6712..6713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 335,
            column: 8,
            span: 6716..6721,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 335,
            column: 9,
            span: 6721..6722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 335,
            column: 15,
            span: 6722..6728,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 335,
            column: 16,
            span: 6728..6729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 335,
            column: 17,
            span: 6729..6730,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 335,
            column: 18,
            span: 6730..6731,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 335,
            column: 20,
            span: 6731..6733,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 335,
            column: 21,
            span: 6733..6734,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 335,
            column: 23,
            span: 6735..6736,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 335,
            column: 24,
            span: 6735..6737,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 335,
            column: 25,
            span: 6737..6738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 336,
            column: 9,
            span: 6741..6747,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 336,
            column: 10,
            span: 6747..6748,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 336,
            column: 13,
            span: 6748..6751,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 336,
            column: 19,
            span: 6752..6757,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 336,
            column: 20,
            span: 6757..6758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 336,
            column: 25,
            span: 6758..6763,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 336,
            column: 26,
            span: 6763..6764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 336,
            column: 32,
            span: 6764..6770,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 336,
            column: 33,
            span: 6770..6771,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 336,
            column: 35,
            span: 6772..6773,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 336,
            column: 36,
            span: 6773..6774,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 336,
            column: 38,
            span: 6774..6776,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 336,
            column: 39,
            span: 6776..6777,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 336,
            column: 42,
            span: 6777..6780,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 336,
            column: 43,
            span: 6780..6781,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 336,
            column: 44,
            span: 6781..6782,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 336,
            column: 45,
            span: 6782..6783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 337,
            column: 9,
            span: 6786..6792,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 337,
            column: 10,
            span: 6792..6793,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 337,
            column: 13,
            span: 6793..6796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 337,
            column: 19,
            span: 6797..6802,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 337,
            column: 20,
            span: 6802..6803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 337,
            column: 25,
            span: 6803..6808,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 337,
            column: 26,
            span: 6808..6809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 337,
            column: 32,
            span: 6809..6815,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 337,
            column: 33,
            span: 6815..6816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 337,
            column: 35,
            span: 6817..6818,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 337,
            column: 36,
            span: 6818..6819,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 337,
            column: 38,
            span: 6820..6821,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 337,
            column: 39,
            span: 6821..6822,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 337,
            column: 41,
            span: 6823..6824,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 337,
            column: 43,
            span: 6824..6826,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 337,
            column: 44,
            span: 6826..6827,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 337,
            column: 47,
            span: 6827..6830,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 337,
            column: 48,
            span: 6830..6831,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 337,
            column: 49,
            span: 6831..6832,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 337,
            column: 50,
            span: 6832..6833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 338,
            column: 9,
            span: 6836..6842,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 338,
            column: 10,
            span: 6842..6843,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 338,
            column: 15,
            span: 6843..6848,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 338,
            column: 16,
            span: 6848..6849,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 338,
            column: 22,
            span: 6849..6855,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 338,
            column: 23,
            span: 6855..6856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 338,
            column: 24,
            span: 6856..6857,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 338,
            column: 25,
            span: 6857..6858,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 338,
            column: 26,
            span: 6857..6859,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 338,
            column: 27,
            span: 6859..6860,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 338,
            column: 30,
            span: 6861..6863,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 338,
            column: 32,
            span: 6864..6865,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 338,
            column: 33,
            span: 6864..6866,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 338,
            column: 34,
            span: 6866..6867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 339,
            column: 9,
            span: 6870..6876,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 339,
            column: 10,
            span: 6876..6877,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 339,
            column: 15,
            span: 6877..6882,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 339,
            column: 16,
            span: 6882..6883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 339,
            column: 22,
            span: 6883..6889,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 339,
            column: 23,
            span: 6889..6890,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 339,
            column: 24,
            span: 6890..6891,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 339,
            column: 25,
            span: 6891..6892,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 339,
            column: 26,
            span: 6891..6893,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 339,
            column: 27,
            span: 6893..6894,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 339,
            column: 30,
            span: 6895..6897,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 339,
            column: 32,
            span: 6898..6899,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 339,
            column: 33,
            span: 6898..6900,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 339,
            column: 34,
            span: 6900..6901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 340,
            column: 9,
            span: 6904..6910,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 340,
            column: 10,
            span: 6910..6911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 340,
            column: 15,
            span: 6911..6916,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 340,
            column: 16,
            span: 6916..6917,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 340,
            column: 22,
            span: 6917..6923,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 340,
            column: 23,
            span: 6923..6924,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 340,
            column: 24,
            span: 6924..6925,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 340,
            column: 25,
            span: 6925..6926,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 340,
            column: 26,
            span: 6925..6927,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 340,
            column: 27,
            span: 6927..6928,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 340,
            column: 30,
            span: 6929..6931,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 340,
            column: 33,
            span: 6931..6934,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 340,
            column: 34,
            span: 6934..6935,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 341,
            column: 9,
            span: 6938..6944,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 341,
            column: 10,
            span: 6944..6945,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 341,
            column: 15,
            span: 6945..6950,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 341,
            column: 16,
            span: 6950..6951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 341,
            column: 22,
            span: 6951..6957,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 341,
            column: 23,
            span: 6957..6958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 341,
            column: 24,
            span: 6958..6959,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 341,
            column: 25,
            span: 6959..6960,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 341,
            column: 26,
            span: 6959..6961,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 341,
            column: 27,
            span: 6961..6962,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 341,
            column: 30,
            span: 6963..6965,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 341,
            column: 33,
            span: 6965..6968,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 341,
            column: 34,
            span: 6968..6969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 342,
            column: 9,
            span: 6972..6978,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 342,
            column: 10,
            span: 6978..6979,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 342,
            column: 15,
            span: 6979..6984,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 342,
            column: 16,
            span: 6984..6985,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 342,
            column: 22,
            span: 6985..6991,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 342,
            column: 23,
            span: 6991..6992,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 342,
            column: 24,
            span: 6992..6993,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 342,
            column: 25,
            span: 6993..6994,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 342,
            column: 26,
            span: 6993..6995,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 342,
            column: 27,
            span: 6995..6996,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 342,
            column: 30,
            span: 6997..6999,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 342,
            column: 33,
            span: 6999..7002,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 342,
            column: 34,
            span: 7002..7003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 343,
            column: 9,
            span: 7006..7012,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 343,
            column: 10,
            span: 7012..7013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 343,
            column: 15,
            span: 7013..7018,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 343,
            column: 16,
            span: 7018..7019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 343,
            column: 22,
            span: 7019..7025,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 343,
            column: 23,
            span: 7025..7026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 343,
            column: 24,
            span: 7026..7027,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 343,
            column: 25,
            span: 7027..7028,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 343,
            column: 26,
            span: 7027..7029,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 343,
            column: 27,
            span: 7029..7030,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 343,
            column: 30,
            span: 7031..7033,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 343,
            column: 33,
            span: 7033..7036,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 343,
            column: 34,
            span: 7036..7037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 344,
            column: 9,
            span: 7040..7046,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 344,
            column: 10,
            span: 7046..7047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 344,
            column: 15,
            span: 7047..7052,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 344,
            column: 16,
            span: 7052..7053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 344,
            column: 22,
            span: 7053..7059,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 344,
            column: 23,
            span: 7059..7060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 344,
            column: 24,
            span: 7060..7061,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 344,
            column: 25,
            span: 7061..7062,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 344,
            column: 26,
            span: 7061..7063,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 344,
            column: 27,
            span: 7063..7064,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 344,
            column: 30,
            span: 7065..7067,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 344,
            column: 34,
            span: 7068..7071,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 344,
            column: 35,
            span: 7071..7072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 345,
            column: 9,
            span: 7075..7081,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 345,
            column: 10,
            span: 7081..7082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 345,
            column: 15,
            span: 7082..7087,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 345,
            column: 16,
            span: 7087..7088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 345,
            column: 22,
            span: 7088..7094,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 345,
            column: 23,
            span: 7094..7095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 345,
            column: 24,
            span: 7095..7096,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 345,
            column: 25,
            span: 7096..7097,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 345,
            column: 28,
            span: 7098..7100,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 345,
            column: 32,
            span: 7101..7104,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 345,
            column: 33,
            span: 7104..7105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 346,
            column: 9,
            span: 7108..7114,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 346,
            column: 10,
            span: 7114..7115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 346,
            column: 15,
            span: 7115..7120,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 346,
            column: 16,
            span: 7120..7121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 346,
            column: 22,
            span: 7121..7127,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 346,
            column: 23,
            span: 7127..7128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 346,
            column: 24,
            span: 7128..7129,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 346,
            column: 25,
            span: 7129..7130,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 346,
            column: 27,
            span: 7131..7132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 346,
            column: 28,
            span: 7132..7133,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 346,
            column: 29,
            span: 7133..7134,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 346,
            column: 32,
            span: 7135..7137,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 346,
            column: 36,
            span: 7138..7141,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 346,
            column: 37,
            span: 7141..7142,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 347,
            column: 0,
            span: 7143..7146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 349,
            column: 2,
            span: 7148..7149,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 349,
            column: 4,
            span: 7150..7151,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 349,
            column: 6,
            span: 7152..7153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 349,
            column: 7,
            span: 7153..7154,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 349,
            column: 8,
            span: 7154..7155,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 349,
            column: 9,
            span: 7154..7156,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 349,
            column: 10,
            span: 7156..7157,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 349,
            column: 12,
            span: 7158..7159,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 349,
            column: 13,
            span: 7159..7160,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 349,
            column: 14,
            span: 7159..7161,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 349,
            column: 15,
            span: 7161..7162,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 349,
            column: 17,
            span: 7163..7164,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ban\"",
        ),
        position: Position {
            line: 349,
            column: 23,
            span: 7165..7170,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 349,
            column: 24,
            span: 7170..7171,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 350,
            column: 5,
            span: 7172..7176,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 350,
            column: 6,
            span: 7176..7177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 350,
            column: 7,
            span: 7177..7178,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 350,
            column: 8,
            span: 7178..7179,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 351,
            column: 7,
            span: 7180..7186,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 351,
            column: 8,
            span: 7186..7187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 351,
            column: 9,
            span: 7187..7188,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 351,
            column: 10,
            span: 7188..7189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 351,
            column: 11,
            span: 7189..7190,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 351,
            column: 14,
            span: 7191..7193,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 351,
            column: 16,
            span: 7193..7195,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 351,
            column: 20,
            span: 7196..7199,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 351,
            column: 22,
            span: 7200..7201,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 351,
            column: 23,
            span: 7201..7202,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 351,
            column: 24,
            span: 7202..7203,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 351,
            column: 25,
            span: 7202..7204,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 351,
            column: 26,
            span: 7204..7205,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 351,
            column: 29,
            span: 7206..7208,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ban\"",
        ),
        position: Position {
            line: 351,
            column: 35,
            span: 7209..7214,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 351,
            column: 36,
            span: 7214..7215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 353,
            column: 2,
            span: 7217..7218,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 353,
            column: 4,
            span: 7219..7220,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 353,
            column: 6,
            span: 7221..7222,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 353,
            column: 7,
            span: 7222..7223,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 353,
            column: 8,
            span: 7223..7224,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 353,
            column: 9,
            span: 7223..7225,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 353,
            column: 10,
            span: 7225..7226,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 353,
            column: 12,
            span: 7227..7228,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ban\"",
        ),
        position: Position {
            line: 353,
            column: 18,
            span: 7229..7234,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 353,
            column: 19,
            span: 7234..7235,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 353,
            column: 20,
            span: 7235..7236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 354,
            column: 5,
            span: 7237..7241,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 354,
            column: 6,
            span: 7241..7242,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 354,
            column: 7,
            span: 7242..7243,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 354,
            column: 8,
            span: 7243..7244,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 355,
            column: 7,
            span: 7245..7251,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 355,
            column: 8,
            span: 7251..7252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 355,
            column: 9,
            span: 7252..7253,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 355,
            column: 10,
            span: 7253..7254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 355,
            column: 11,
            span: 7254..7255,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 355,
            column: 14,
            span: 7256..7258,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 355,
            column: 18,
            span: 7259..7262,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 355,
            column: 22,
            span: 7263..7266,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 355,
            column: 24,
            span: 7267..7268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 355,
            column: 25,
            span: 7268..7269,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 355,
            column: 28,
            span: 7270..7272,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 355,
            column: 30,
            span: 7272..7274,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 355,
            column: 34,
            span: 7275..7278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 355,
            column: 36,
            span: 7279..7280,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 355,
            column: 37,
            span: 7280..7281,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 355,
            column: 38,
            span: 7281..7282,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 355,
            column: 39,
            span: 7281..7283,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 355,
            column: 40,
            span: 7283..7284,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 355,
            column: 43,
            span: 7285..7287,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ban\"",
        ),
        position: Position {
            line: 355,
            column: 49,
            span: 7288..7293,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 355,
            column: 50,
            span: 7293..7294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 357,
            column: 2,
            span: 7296..7297,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 357,
            column: 4,
            span: 7298..7299,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 357,
            column: 6,
            span: 7300..7301,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 357,
            column: 7,
            span: 7301..7302,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 357,
            column: 8,
            span: 7302..7303,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 357,
            column: 9,
            span: 7302..7304,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 357,
            column: 10,
            span: 7304..7305,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 357,
            column: 12,
            span: 7306..7307,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ban\"",
        ),
        position: Position {
            line: 357,
            column: 18,
            span: 7308..7313,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 357,
            column: 19,
            span: 7313..7314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 358,
            column: 5,
            span: 7315..7319,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 358,
            column: 6,
            span: 7319..7320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 358,
            column: 7,
            span: 7320..7321,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 358,
            column: 8,
            span: 7321..7322,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 359,
            column: 7,
            span: 7323..7329,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 359,
            column: 8,
            span: 7329..7330,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 359,
            column: 9,
            span: 7330..7331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 359,
            column: 10,
            span: 7331..7332,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 359,
            column: 13,
            span: 7333..7335,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 359,
            column: 15,
            span: 7335..7337,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 359,
            column: 19,
            span: 7338..7341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 359,
            column: 25,
            span: 7342..7347,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 359,
            column: 26,
            span: 7347..7348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 359,
            column: 32,
            span: 7348..7354,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 359,
            column: 33,
            span: 7354..7355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 359,
            column: 34,
            span: 7355..7356,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 359,
            column: 35,
            span: 7356..7357,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 359,
            column: 38,
            span: 7358..7360,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 359,
            column: 42,
            span: 7361..7364,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 359,
            column: 46,
            span: 7365..7368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 359,
            column: 48,
            span: 7369..7370,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 359,
            column: 49,
            span: 7370..7371,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 359,
            column: 50,
            span: 7371..7372,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 359,
            column: 51,
            span: 7371..7373,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 359,
            column: 52,
            span: 7373..7374,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 359,
            column: 55,
            span: 7375..7377,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ban\"",
        ),
        position: Position {
            line: 359,
            column: 61,
            span: 7378..7383,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 359,
            column: 62,
            span: 7383..7384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 361,
            column: 2,
            span: 7386..7387,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 361,
            column: 4,
            span: 7388..7389,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 361,
            column: 6,
            span: 7390..7391,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 361,
            column: 7,
            span: 7391..7392,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 361,
            column: 8,
            span: 7391..7393,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 361,
            column: 9,
            span: 7393..7394,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 361,
            column: 11,
            span: 7395..7396,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ban\"",
        ),
        position: Position {
            line: 361,
            column: 17,
            span: 7397..7402,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 361,
            column: 18,
            span: 7402..7403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 362,
            column: 7,
            span: 7404..7410,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 362,
            column: 8,
            span: 7410..7411,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 362,
            column: 9,
            span: 7411..7412,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 362,
            column: 10,
            span: 7412..7413,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 362,
            column: 13,
            span: 7414..7416,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 362,
            column: 15,
            span: 7416..7418,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 362,
            column: 19,
            span: 7419..7422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 362,
            column: 25,
            span: 7423..7428,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 362,
            column: 26,
            span: 7428..7429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 362,
            column: 32,
            span: 7429..7435,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 362,
            column: 33,
            span: 7435..7436,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 362,
            column: 34,
            span: 7436..7437,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 362,
            column: 35,
            span: 7437..7438,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 362,
            column: 38,
            span: 7439..7441,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ban\"",
        ),
        position: Position {
            line: 362,
            column: 44,
            span: 7442..7447,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 362,
            column: 48,
            span: 7448..7451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 362,
            column: 50,
            span: 7452..7453,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 362,
            column: 51,
            span: 7453..7454,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 362,
            column: 52,
            span: 7453..7455,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 362,
            column: 53,
            span: 7455..7456,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 362,
            column: 56,
            span: 7457..7459,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 362,
            column: 60,
            span: 7460..7463,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 362,
            column: 61,
            span: 7463..7464,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 364,
            column: 6,
            span: 7466..7471,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 364,
            column: 7,
            span: 7471..7472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 364,
            column: 13,
            span: 7472..7478,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 364,
            column: 14,
            span: 7478..7479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 364,
            column: 15,
            span: 7479..7480,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 364,
            column: 16,
            span: 7480..7481,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 364,
            column: 18,
            span: 7481..7483,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 364,
            column: 19,
            span: 7483..7484,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 364,
            column: 22,
            span: 7484..7487,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 364,
            column: 23,
            span: 7487..7488,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 364,
            column: 24,
            span: 7488..7489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 364,
            column: 30,
            span: 7490..7495,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 364,
            column: 31,
            span: 7495..7496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 364,
            column: 37,
            span: 7496..7502,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 364,
            column: 38,
            span: 7502..7503,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 364,
            column: 39,
            span: 7503..7504,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 364,
            column: 40,
            span: 7504..7505,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 364,
            column: 42,
            span: 7505..7507,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 364,
            column: 43,
            span: 7507..7508,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 364,
            column: 46,
            span: 7508..7511,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 364,
            column: 47,
            span: 7511..7512,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 364,
            column: 48,
            span: 7512..7513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 364,
            column: 54,
            span: 7514..7519,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 364,
            column: 55,
            span: 7519..7520,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 364,
            column: 61,
            span: 7520..7526,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 364,
            column: 62,
            span: 7526..7527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 364,
            column: 63,
            span: 7527..7528,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 364,
            column: 64,
            span: 7528..7529,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 364,
            column: 66,
            span: 7529..7531,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 364,
            column: 67,
            span: 7531..7532,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 364,
            column: 69,
            span: 7533..7534,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 364,
            column: 70,
            span: 7533..7535,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 364,
            column: 71,
            span: 7535..7536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 365,
            column: 7,
            span: 7537..7543,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 365,
            column: 8,
            span: 7543..7544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 365,
            column: 13,
            span: 7544..7549,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 365,
            column: 14,
            span: 7549..7550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 365,
            column: 20,
            span: 7550..7556,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 365,
            column: 21,
            span: 7556..7557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 365,
            column: 22,
            span: 7557..7558,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 365,
            column: 23,
            span: 7558..7559,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 365,
            column: 26,
            span: 7560..7562,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 365,
            column: 29,
            span: 7562..7565,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 365,
            column: 30,
            span: 7565..7566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 366,
            column: 7,
            span: 7567..7573,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 366,
            column: 8,
            span: 7573..7574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 366,
            column: 13,
            span: 7574..7579,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 366,
            column: 14,
            span: 7579..7580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 366,
            column: 20,
            span: 7580..7586,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 366,
            column: 21,
            span: 7586..7587,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 366,
            column: 22,
            span: 7587..7588,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 366,
            column: 23,
            span: 7588..7589,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 366,
            column: 26,
            span: 7590..7592,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 366,
            column: 29,
            span: 7592..7595,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 366,
            column: 30,
            span: 7595..7596,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 367,
            column: 7,
            span: 7597..7603,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 367,
            column: 8,
            span: 7603..7604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 367,
            column: 13,
            span: 7604..7609,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 367,
            column: 14,
            span: 7609..7610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 367,
            column: 20,
            span: 7610..7616,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 367,
            column: 21,
            span: 7616..7617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 367,
            column: 22,
            span: 7617..7618,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 367,
            column: 23,
            span: 7618..7619,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 367,
            column: 26,
            span: 7620..7622,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 367,
            column: 28,
            span: 7623..7624,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 367,
            column: 29,
            span: 7623..7625,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 367,
            column: 30,
            span: 7625..7626,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 368,
            column: 7,
            span: 7627..7633,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 368,
            column: 8,
            span: 7633..7634,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 368,
            column: 13,
            span: 7634..7639,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 368,
            column: 14,
            span: 7639..7640,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 368,
            column: 20,
            span: 7640..7646,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 368,
            column: 21,
            span: 7646..7647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 368,
            column: 22,
            span: 7647..7648,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 368,
            column: 23,
            span: 7648..7649,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 368,
            column: 26,
            span: 7650..7652,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 368,
            column: 30,
            span: 7653..7656,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 368,
            column: 31,
            span: 7656..7657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 370,
            column: 2,
            span: 7659..7660,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 370,
            column: 4,
            span: 7661..7662,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 370,
            column: 6,
            span: 7663..7664,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'c'",
        ),
        position: Position {
            line: 370,
            column: 9,
            span: 7664..7667,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 370,
            column: 10,
            span: 7667..7668,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'d'",
        ),
        position: Position {
            line: 370,
            column: 14,
            span: 7669..7672,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 370,
            column: 15,
            span: 7672..7673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 371,
            column: 6,
            span: 7674..7679,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 371,
            column: 7,
            span: 7679..7680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 371,
            column: 13,
            span: 7680..7686,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 371,
            column: 14,
            span: 7686..7687,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 371,
            column: 15,
            span: 7687..7688,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 371,
            column: 16,
            span: 7688..7689,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 371,
            column: 18,
            span: 7689..7691,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 371,
            column: 19,
            span: 7691..7692,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 371,
            column: 23,
            span: 7693..7696,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 371,
            column: 24,
            span: 7696..7697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 372,
            column: 6,
            span: 7698..7703,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 372,
            column: 7,
            span: 7703..7704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 372,
            column: 13,
            span: 7704..7710,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 372,
            column: 14,
            span: 7710..7711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 372,
            column: 15,
            span: 7711..7712,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 372,
            column: 16,
            span: 7712..7713,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        position: Position {
            line: 372,
            column: 20,
            span: 7714..7717,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 372,
            column: 21,
            span: 7717..7718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 373,
            column: 7,
            span: 7719..7725,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 373,
            column: 8,
            span: 7725..7726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 373,
            column: 13,
            span: 7726..7731,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 373,
            column: 14,
            span: 7731..7732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 373,
            column: 20,
            span: 7732..7738,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 373,
            column: 21,
            span: 7738..7739,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 373,
            column: 22,
            span: 7739..7740,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 373,
            column: 23,
            span: 7740..7741,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 373,
            column: 25,
            span: 7741..7743,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 373,
            column: 26,
            span: 7743..7744,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 373,
            column: 29,
            span: 7745..7747,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'c'",
        ),
        position: Position {
            line: 373,
            column: 33,
            span: 7748..7751,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 373,
            column: 34,
            span: 7751..7752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 374,
            column: 7,
            span: 7753..7759,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 374,
            column: 8,
            span: 7759..7760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 374,
            column: 13,
            span: 7760..7765,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 374,
            column: 14,
            span: 7765..7766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 374,
            column: 20,
            span: 7766..7772,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 374,
            column: 21,
            span: 7772..7773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 374,
            column: 22,
            span: 7773..7774,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 374,
            column: 23,
            span: 7774..7775,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 374,
            column: 25,
            span: 7775..7777,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 374,
            column: 26,
            span: 7777..7778,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 374,
            column: 29,
            span: 7779..7781,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'d'",
        ),
        position: Position {
            line: 374,
            column: 33,
            span: 7782..7785,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 374,
            column: 34,
            span: 7785..7786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 375,
            column: 7,
            span: 7787..7793,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 375,
            column: 8,
            span: 7793..7794,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 375,
            column: 13,
            span: 7794..7799,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 375,
            column: 14,
            span: 7799..7800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 375,
            column: 20,
            span: 7800..7806,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 375,
            column: 21,
            span: 7806..7807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 375,
            column: 22,
            span: 7807..7808,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 375,
            column: 23,
            span: 7808..7809,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 375,
            column: 25,
            span: 7809..7811,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 375,
            column: 26,
            span: 7811..7812,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 375,
            column: 29,
            span: 7813..7815,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 375,
            column: 33,
            span: 7816..7819,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 375,
            column: 34,
            span: 7819..7820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 376,
            column: 7,
            span: 7821..7827,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 376,
            column: 8,
            span: 7827..7828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 376,
            column: 13,
            span: 7828..7833,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 376,
            column: 14,
            span: 7833..7834,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 376,
            column: 20,
            span: 7834..7840,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 376,
            column: 21,
            span: 7840..7841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 376,
            column: 22,
            span: 7841..7842,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 376,
            column: 23,
            span: 7842..7843,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 376,
            column: 25,
            span: 7843..7845,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 376,
            column: 26,
            span: 7845..7846,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 376,
            column: 29,
            span: 7847..7849,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        position: Position {
            line: 376,
            column: 33,
            span: 7850..7853,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 376,
            column: 34,
            span: 7853..7854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 377,
            column: 7,
            span: 7855..7861,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 377,
            column: 8,
            span: 7861..7862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 377,
            column: 13,
            span: 7862..7867,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 377,
            column: 14,
            span: 7867..7868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 377,
            column: 20,
            span: 7868..7874,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 377,
            column: 21,
            span: 7874..7875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 377,
            column: 22,
            span: 7875..7876,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 377,
            column: 23,
            span: 7876..7877,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 377,
            column: 25,
            span: 7877..7879,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 377,
            column: 26,
            span: 7879..7880,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 377,
            column: 29,
            span: 7881..7883,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 377,
            column: 33,
            span: 7884..7887,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 377,
            column: 34,
            span: 7887..7888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 378,
            column: 7,
            span: 7889..7895,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 378,
            column: 8,
            span: 7895..7896,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 378,
            column: 9,
            span: 7896..7897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 378,
            column: 10,
            span: 7897..7898,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 378,
            column: 13,
            span: 7899..7901,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 378,
            column: 15,
            span: 7901..7903,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 378,
            column: 19,
            span: 7904..7907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 378,
            column: 21,
            span: 7908..7909,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 378,
            column: 22,
            span: 7909..7910,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 378,
            column: 23,
            span: 7910..7911,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 378,
            column: 26,
            span: 7912..7914,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 378,
            column: 30,
            span: 7915..7918,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 378,
            column: 31,
            span: 7918..7919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 380,
            column: 2,
            span: 7921..7922,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 380,
            column: 4,
            span: 7923..7924,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 380,
            column: 6,
            span: 7925..7926,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 380,
            column: 8,
            span: 7925..7928,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 380,
            column: 9,
            span: 7928..7929,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 380,
            column: 11,
            span: 7928..7931,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 380,
            column: 12,
            span: 7931..7932,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 380,
            column: 14,
            span: 7931..7934,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 380,
            column: 15,
            span: 7934..7935,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 380,
            column: 17,
            span: 7934..7937,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 380,
            column: 18,
            span: 7937..7938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 381,
            column: 7,
            span: 7939..7945,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 381,
            column: 8,
            span: 7945..7946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 381,
            column: 13,
            span: 7946..7951,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 381,
            column: 14,
            span: 7951..7952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 381,
            column: 20,
            span: 7952..7958,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 381,
            column: 21,
            span: 7958..7959,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 381,
            column: 22,
            span: 7959..7960,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 381,
            column: 23,
            span: 7960..7961,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 381,
            column: 25,
            span: 7962..7963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 381,
            column: 26,
            span: 7963..7964,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 381,
            column: 28,
            span: 7965..7966,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 381,
            column: 30,
            span: 7966..7968,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 381,
            column: 31,
            span: 7968..7969,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 381,
            column: 34,
            span: 7970..7972,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 381,
            column: 38,
            span: 7973..7976,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 381,
            column: 39,
            span: 7976..7977,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 382,
            column: 7,
            span: 7978..7984,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 382,
            column: 8,
            span: 7984..7985,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 382,
            column: 11,
            span: 7985..7988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 382,
            column: 17,
            span: 7989..7994,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 382,
            column: 18,
            span: 7994..7995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 382,
            column: 23,
            span: 7995..8000,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 382,
            column: 24,
            span: 8000..8001,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 382,
            column: 30,
            span: 8001..8007,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 382,
            column: 31,
            span: 8007..8008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 382,
            column: 33,
            span: 8009..8010,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 382,
            column: 34,
            span: 8010..8011,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 382,
            column: 36,
            span: 8011..8013,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 382,
            column: 37,
            span: 8013..8014,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 382,
            column: 38,
            span: 8014..8015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 383,
            column: 7,
            span: 8016..8022,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 383,
            column: 8,
            span: 8022..8023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 383,
            column: 9,
            span: 8023..8024,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 383,
            column: 10,
            span: 8024..8025,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 383,
            column: 11,
            span: 8025..8026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 383,
            column: 12,
            span: 8026..8027,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 383,
            column: 13,
            span: 8027..8028,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 383,
            column: 16,
            span: 8029..8031,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 383,
            column: 19,
            span: 8031..8034,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 383,
            column: 20,
            span: 8034..8035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 384,
            column: 7,
            span: 8036..8042,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 384,
            column: 8,
            span: 8042..8043,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 384,
            column: 13,
            span: 8043..8048,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 384,
            column: 14,
            span: 8048..8049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 384,
            column: 20,
            span: 8049..8055,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 384,
            column: 21,
            span: 8055..8056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 384,
            column: 22,
            span: 8056..8057,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 384,
            column: 23,
            span: 8057..8058,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 384,
            column: 25,
            span: 8059..8060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 384,
            column: 26,
            span: 8060..8061,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 384,
            column: 27,
            span: 8061..8062,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 384,
            column: 30,
            span: 8063..8065,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 384,
            column: 33,
            span: 8065..8068,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 384,
            column: 34,
            span: 8068..8069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 385,
            column: 7,
            span: 8070..8076,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 385,
            column: 8,
            span: 8076..8077,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 385,
            column: 9,
            span: 8077..8078,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 385,
            column: 10,
            span: 8078..8079,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 385,
            column: 11,
            span: 8079..8080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 385,
            column: 12,
            span: 8080..8081,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 385,
            column: 13,
            span: 8081..8082,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 385,
            column: 16,
            span: 8083..8085,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 385,
            column: 19,
            span: 8085..8088,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 385,
            column: 20,
            span: 8088..8089,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 386,
            column: 7,
            span: 8090..8096,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 386,
            column: 8,
            span: 8096..8097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 386,
            column: 13,
            span: 8097..8102,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 386,
            column: 14,
            span: 8102..8103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 386,
            column: 20,
            span: 8103..8109,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 386,
            column: 21,
            span: 8109..8110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 386,
            column: 22,
            span: 8110..8111,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 386,
            column: 23,
            span: 8111..8112,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 386,
            column: 25,
            span: 8112..8114,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 386,
            column: 26,
            span: 8114..8115,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 386,
            column: 29,
            span: 8116..8118,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 386,
            column: 32,
            span: 8118..8121,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 386,
            column: 33,
            span: 8121..8122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 387,
            column: 7,
            span: 8123..8129,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 387,
            column: 8,
            span: 8129..8130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 387,
            column: 9,
            span: 8130..8131,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 387,
            column: 10,
            span: 8131..8132,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 387,
            column: 11,
            span: 8132..8133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 387,
            column: 12,
            span: 8133..8134,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 387,
            column: 13,
            span: 8134..8135,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 387,
            column: 16,
            span: 8136..8138,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 387,
            column: 19,
            span: 8138..8141,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 387,
            column: 23,
            span: 8142..8145,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 387,
            column: 25,
            span: 8146..8147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 387,
            column: 26,
            span: 8147..8148,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 387,
            column: 29,
            span: 8149..8151,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 387,
            column: 31,
            span: 8151..8153,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 387,
            column: 32,
            span: 8153..8154,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 389,
            column: 3,
            span: 8156..8158,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 390,
            column: 8,
            span: 8205..8210,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 390,
            column: 17,
            span: 8211..8219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 390,
            column: 22,
            span: 8220..8224,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 390,
            column: 24,
            span: 8225..8226,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "proxy",
        ),
        position: Position {
            line: 390,
            column: 29,
            span: 8226..8231,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 390,
            column: 30,
            span: 8231..8232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 390,
            column: 32,
            span: 8233..8234,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 390,
            column: 33,
            span: 8234..8235,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 391,
            column: 8,
            span: 8240..8243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 391,
            column: 10,
            span: 8244..8245,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 391,
            column: 12,
            span: 8246..8247,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 391,
            column: 14,
            span: 8247..8249,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 391,
            column: 15,
            span: 8249..8250,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 391,
            column: 18,
            span: 8250..8253,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 391,
            column: 0,
            span: 8254..8256,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 392,
            column: 12,
            span: 8263..8268,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 392,
            column: 13,
            span: 8268..8269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 392,
            column: 19,
            span: 8269..8275,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 392,
            column: 20,
            span: 8275..8276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "proxy",
        ),
        position: Position {
            line: 392,
            column: 25,
            span: 8276..8281,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 392,
            column: 26,
            span: 8281..8282,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 392,
            column: 28,
            span: 8282..8284,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 392,
            column: 29,
            span: 8284..8285,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 392,
            column: 31,
            span: 8286..8287,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 392,
            column: 32,
            span: 8287..8288,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 393,
            column: 0,
            span: 8293..8296,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 394,
            column: 11,
            span: 8301..8307,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 394,
            column: 12,
            span: 8307..8308,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 394,
            column: 13,
            span: 8308..8309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "proxy",
        ),
        position: Position {
            line: 394,
            column: 18,
            span: 8309..8314,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 394,
            column: 21,
            span: 8315..8317,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 394,
            column: 24,
            span: 8317..8320,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 394,
            column: 28,
            span: 8321..8324,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 394,
            column: 30,
            span: 8325..8326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 394,
            column: 31,
            span: 8326..8327,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 394,
            column: 34,
            span: 8328..8330,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 394,
            column: 37,
            span: 8330..8333,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 394,
            column: 38,
            span: 8333..8334,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 395,
            column: 8,
            span: 8339..8342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 395,
            column: 10,
            span: 8343..8344,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 395,
            column: 12,
            span: 8345..8346,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 395,
            column: 14,
            span: 8346..8348,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 395,
            column: 15,
            span: 8348..8349,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 395,
            column: 18,
            span: 8349..8352,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 395,
            column: 0,
            span: 8353..8355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 396,
            column: 13,
            span: 8362..8368,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 396,
            column: 14,
            span: 8368..8369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 396,
            column: 15,
            span: 8369..8370,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 396,
            column: 16,
            span: 8370..8371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 396,
            column: 17,
            span: 8371..8372,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 396,
            column: 18,
            span: 8372..8373,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 396,
            column: 21,
            span: 8374..8376,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 396,
            column: 24,
            span: 8376..8379,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 396,
            column: 26,
            span: 8380..8381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 396,
            column: 28,
            span: 8382..8383,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 396,
            column: 29,
            span: 8383..8384,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 397,
            column: 0,
            span: 8389..8392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 398,
            column: 10,
            span: 8397..8402,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 398,
            column: 11,
            span: 8402..8403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        position: Position {
            line: 398,
            column: 15,
            span: 8403..8407,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 398,
            column: 16,
            span: 8407..8408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "proxy",
        ),
        position: Position {
            line: 398,
            column: 21,
            span: 8408..8413,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 398,
            column: 22,
            span: 8413..8414,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 399,
            column: 8,
            span: 8419..8422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 399,
            column: 10,
            span: 8423..8424,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 399,
            column: 12,
            span: 8425..8426,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 399,
            column: 14,
            span: 8426..8428,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 399,
            column: 15,
            span: 8428..8429,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 399,
            column: 18,
            span: 8429..8432,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 399,
            column: 0,
            span: 8433..8435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 400,
            column: 13,
            span: 8442..8448,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 400,
            column: 14,
            span: 8448..8449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 400,
            column: 15,
            span: 8449..8450,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 400,
            column: 16,
            span: 8450..8451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 400,
            column: 17,
            span: 8451..8452,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 400,
            column: 18,
            span: 8452..8453,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 400,
            column: 21,
            span: 8454..8456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 400,
            column: 23,
            span: 8457..8458,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 400,
            column: 27,
            span: 8459..8462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "proxy",
        ),
        position: Position {
            line: 400,
            column: 33,
            span: 8463..8468,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 400,
            column: 34,
            span: 8468..8469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 400,
            column: 35,
            span: 8469..8470,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 400,
            column: 36,
            span: 8470..8471,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 400,
            column: 39,
            span: 8472..8474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 400,
            column: 41,
            span: 8475..8476,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 400,
            column: 42,
            span: 8476..8477,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 401,
            column: 0,
            span: 8482..8485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 402,
            column: 11,
            span: 8490..8496,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 402,
            column: 12,
            span: 8496..8497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 402,
            column: 17,
            span: 8497..8502,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 402,
            column: 18,
            span: 8502..8503,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        position: Position {
            line: 402,
            column: 24,
            span: 8503..8509,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 402,
            column: 25,
            span: 8509..8510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "proxy",
        ),
        position: Position {
            line: 402,
            column: 30,
            span: 8510..8515,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 402,
            column: 31,
            span: 8515..8516,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",\"",
        ),
        position: Position {
            line: 402,
            column: 35,
            span: 8517..8520,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 402,
            column: 36,
            span: 8520..8521,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 402,
            column: 39,
            span: 8522..8524,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1,2,3,4,5,6,7,8,9,10\"",
        ),
        position: Position {
            line: 402,
            column: 62,
            span: 8525..8547,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 402,
            column: 63,
            span: 8547..8548,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 403,
            column: 8,
            span: 8553..8556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 403,
            column: 10,
            span: 8557..8558,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 403,
            column: 12,
            span: 8559..8560,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 403,
            column: 14,
            span: 8560..8562,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 403,
            column: 15,
            span: 8562..8563,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 403,
            column: 17,
            span: 8563..8565,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 403,
            column: 0,
            span: 8566..8568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 404,
            column: 13,
            span: 8575..8581,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 404,
            column: 14,
            span: 8581..8582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 404,
            column: 19,
            span: 8582..8587,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 404,
            column: 20,
            span: 8587..8588,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 404,
            column: 26,
            span: 8588..8594,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 404,
            column: 27,
            span: 8594..8595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "proxy",
        ),
        position: Position {
            line: 404,
            column: 32,
            span: 8595..8600,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 404,
            column: 33,
            span: 8600..8601,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 404,
            column: 35,
            span: 8601..8603,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 404,
            column: 36,
            span: 8603..8604,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 404,
            column: 39,
            span: 8605..8607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 404,
            column: 41,
            span: 8608..8609,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 404,
            column: 42,
            span: 8609..8610,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 405,
            column: 0,
            span: 8615..8618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 406,
            column: 11,
            span: 8623..8629,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 406,
            column: 12,
            span: 8629..8630,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 406,
            column: 13,
            span: 8630..8631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "proxy",
        ),
        position: Position {
            line: 406,
            column: 18,
            span: 8631..8636,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 406,
            column: 21,
            span: 8637..8639,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 406,
            column: 23,
            span: 8639..8641,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 406,
            column: 27,
            span: 8642..8645,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 406,
            column: 29,
            span: 8646..8647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 406,
            column: 30,
            span: 8647..8648,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 406,
            column: 33,
            span: 8649..8651,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 406,
            column: 35,
            span: 8651..8653,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 406,
            column: 36,
            span: 8653..8654,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 407,
            column: 10,
            span: 8659..8664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 407,
            column: 12,
            span: 8665..8666,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 407,
            column: 13,
            span: 8666..8667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 407,
            column: 15,
            span: 8668..8669,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 407,
            column: 16,
            span: 8669..8670,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 407,
            column: 18,
            span: 8671..8672,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 407,
            column: 20,
            span: 8673..8674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 407,
            column: 26,
            span: 8675..8680,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 407,
            column: 27,
            span: 8680..8681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 407,
            column: 33,
            span: 8681..8687,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 407,
            column: 34,
            span: 8687..8688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "proxy",
        ),
        position: Position {
            line: 407,
            column: 39,
            span: 8688..8693,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 407,
            column: 40,
            span: 8693..8694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 408,
            column: 11,
            span: 8699..8705,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 408,
            column: 12,
            span: 8705..8706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 408,
            column: 13,
            span: 8706..8707,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 408,
            column: 16,
            span: 8708..8710,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 408,
            column: 18,
            span: 8710..8712,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 408,
            column: 22,
            span: 8713..8716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 408,
            column: 24,
            span: 8717..8718,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 408,
            column: 27,
            span: 8719..8721,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 408,
            column: 30,
            span: 8721..8724,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 408,
            column: 34,
            span: 8725..8728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 408,
            column: 36,
            span: 8729..8730,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 408,
            column: 39,
            span: 8731..8733,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 408,
            column: 43,
            span: 8734..8737,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 408,
            column: 44,
            span: 8737..8738,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 409,
            column: 0,
            span: 8741..8744,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 412,
            column: 8,
            span: 8765..8770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 412,
            column: 10,
            span: 8771..8772,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 412,
            column: 12,
            span: 8773..8774,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 412,
            column: 14,
            span: 8775..8776,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 412,
            column: 15,
            span: 8776..8777,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 413,
            column: 8,
            span: 8780..8785,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "proxy",
        ),
        position: Position {
            line: 413,
            column: 14,
            span: 8786..8791,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 413,
            column: 16,
            span: 8792..8793,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 413,
            column: 29,
            span: 8794..8806,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 413,
            column: 30,
            span: 8806..8807,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 413,
            column: 31,
            span: 8807..8808,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 413,
            column: 32,
            span: 8808..8809,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 413,
            column: 33,
            span: 8809..8810,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 413,
            column: 35,
            span: 8811..8812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        position: Position {
            line: 414,
            column: 10,
            span: 8817..8822,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 414,
            column: 12,
            span: 8823..8824,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 414,
            column: 21,
            span: 8825..8833,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 414,
            column: 23,
            span: 8834..8835,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 414,
            column: 24,
            span: 8835..8836,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 414,
            column: 31,
            span: 8837..8843,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 414,
            column: 33,
            span: 8844..8845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 414,
            column: 34,
            span: 8845..8846,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 414,
            column: 38,
            span: 8847..8850,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 414,
            column: 39,
            span: 8850..8851,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        position: Position {
            line: 415,
            column: 12,
            span: 8856..8863,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 415,
            column: 14,
            span: 8864..8865,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 415,
            column: 16,
            span: 8866..8867,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 415,
            column: 17,
            span: 8867..8868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        position: Position {
            line: 416,
            column: 15,
            span: 8873..8883,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 416,
            column: 17,
            span: 8884..8885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 416,
            column: 19,
            span: 8886..8887,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 416,
            column: 20,
            span: 8887..8888,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 417,
            column: 4,
            span: 8891..8892,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 417,
            column: 5,
            span: 8892..8893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 418,
            column: 7,
            span: 8896..8900,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 418,
            column: 8,
            span: 8900..8901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "proxy",
        ),
        position: Position {
            line: 418,
            column: 13,
            span: 8901..8906,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 418,
            column: 14,
            span: 8906..8907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 418,
            column: 16,
            span: 8908..8909,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 418,
            column: 17,
            span: 8909..8910,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 421,
            column: 8,
            span: 8935..8940,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 421,
            column: 14,
            span: 8941..8946,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 421,
            column: 16,
            span: 8947..8948,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 421,
            column: 0,
            span: 8948..8950,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 422,
            column: 4,
            span: 8953..8954,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 422,
            column: 6,
            span: 8955..8956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 422,
            column: 19,
            span: 8957..8969,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 422,
            column: 20,
            span: 8969..8970,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 422,
            column: 21,
            span: 8970..8971,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 422,
            column: 22,
            span: 8971..8972,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 422,
            column: 23,
            span: 8972..8973,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 422,
            column: 25,
            span: 8974..8975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        position: Position {
            line: 423,
            column: 15,
            span: 8980..8990,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 423,
            column: 17,
            span: 8991..8992,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 423,
            column: 26,
            span: 8993..9001,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 423,
            column: 28,
            span: 9002..9003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 423,
            column: 29,
            span: 9003..9004,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 423,
            column: 30,
            span: 9004..9005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 423,
            column: 31,
            span: 9005..9006,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 423,
            column: 32,
            span: 9006..9007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 423,
            column: 33,
            span: 9007..9008,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 423,
            column: 34,
            span: 9008..9009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 423,
            column: 40,
            span: 9010..9015,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 423,
            column: 42,
            span: 9016..9017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 423,
            column: 48,
            span: 9018..9023,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 423,
            column: 50,
            span: 9024..9025,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 423,
            column: 52,
            span: 9025..9027,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 423,
            column: 53,
            span: 9027..9028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawset",
        ),
        position: Position {
            line: 423,
            column: 60,
            span: 9029..9035,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 423,
            column: 61,
            span: 9035..9036,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 423,
            column: 62,
            span: 9036..9037,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 423,
            column: 63,
            span: 9037..9038,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 423,
            column: 64,
            span: 9038..9039,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 423,
            column: 65,
            span: 9039..9040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 423,
            column: 66,
            span: 9040..9041,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 423,
            column: 67,
            span: 9041..9042,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 423,
            column: 71,
            span: 9043..9046,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 423,
            column: 72,
            span: 9046..9047,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 423,
            column: 73,
            span: 9047..9048,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 424,
            column: 7,
            span: 9051..9055,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 424,
            column: 8,
            span: 9055..9056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 424,
            column: 9,
            span: 9056..9057,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 424,
            column: 10,
            span: 9057..9058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 424,
            column: 12,
            span: 9059..9060,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 424,
            column: 13,
            span: 9060..9061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 425,
            column: 9,
            span: 9064..9070,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 425,
            column: 10,
            span: 9070..9071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 425,
            column: 15,
            span: 9071..9076,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 425,
            column: 18,
            span: 9077..9079,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 425,
            column: 21,
            span: 9079..9082,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 425,
            column: 22,
            span: 9082..9083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 428,
            column: 4,
            span: 9154..9155,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 428,
            column: 6,
            span: 9156..9157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 428,
            column: 19,
            span: 9158..9170,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 428,
            column: 20,
            span: 9170..9171,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 428,
            column: 21,
            span: 9171..9172,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 428,
            column: 22,
            span: 9172..9173,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 428,
            column: 23,
            span: 9173..9174,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 428,
            column: 25,
            span: 9175..9176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        position: Position {
            line: 429,
            column: 12,
            span: 9181..9188,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 429,
            column: 14,
            span: 9189..9190,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 429,
            column: 23,
            span: 9191..9199,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 429,
            column: 25,
            span: 9200..9201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 429,
            column: 26,
            span: 9201..9202,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 429,
            column: 27,
            span: 9202..9203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 429,
            column: 28,
            span: 9203..9204,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 429,
            column: 29,
            span: 9204..9205,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 429,
            column: 36,
            span: 9206..9212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 429,
            column: 38,
            span: 9213..9214,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 429,
            column: 40,
            span: 9215..9216,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 429,
            column: 42,
            span: 9216..9218,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 429,
            column: 46,
            span: 9219..9222,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 429,
            column: 47,
            span: 9222..9223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        position: Position {
            line: 430,
            column: 10,
            span: 9228..9233,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 430,
            column: 12,
            span: 9234..9235,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 430,
            column: 21,
            span: 9236..9244,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 430,
            column: 23,
            span: 9245..9246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 430,
            column: 24,
            span: 9246..9247,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 430,
            column: 25,
            span: 9247..9248,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 430,
            column: 32,
            span: 9249..9255,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 430,
            column: 34,
            span: 9255..9257,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 430,
            column: 38,
            span: 9258..9261,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 430,
            column: 39,
            span: 9261..9262,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 430,
            column: 40,
            span: 9262..9263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 431,
            column: 9,
            span: 9266..9272,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 431,
            column: 10,
            span: 9272..9273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 431,
            column: 15,
            span: 9273..9278,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 431,
            column: 16,
            span: 9278..9279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        position: Position {
            line: 431,
            column: 22,
            span: 9279..9285,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 431,
            column: 23,
            span: 9285..9286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 431,
            column: 24,
            span: 9286..9287,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 431,
            column: 25,
            span: 9287..9288,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        position: Position {
            line: 431,
            column: 29,
            span: 9289..9292,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 431,
            column: 30,
            span: 9292..9293,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 431,
            column: 33,
            span: 9294..9296,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2;3;4;5;6\"",
        ),
        position: Position {
            line: 431,
            column: 45,
            span: 9297..9308,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 431,
            column: 46,
            span: 9308..9309,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 433,
            column: 0,
            span: 9311..9314,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 436,
            column: 3,
            span: 9317..9319,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 436,
            column: 7,
            span: 9320..9323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 436,
            column: 9,
            span: 9324..9325,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 436,
            column: 0,
            span: 9326..9330,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 437,
            column: 4,
            span: 9333..9334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        position: Position {
            line: 437,
            column: 11,
            span: 9334..9341,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 437,
            column: 14,
            span: 9342..9344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 437,
            column: 20,
            span: 9345..9350,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 437,
            column: 21,
            span: 9350..9351,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 438,
            column: 6,
            span: 9356..9357,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n >>> testC not active: skipping tests for table library on non-tables <<<\\n'",
        ),
        position: Position {
            line: 438,
            column: 85,
            span: 9357..9436,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 438,
            column: 86,
            span: 9436..9437,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 439,
            column: 5,
            span: 9438..9442,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 440,
            column: 8,
            span: 9449..9454,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 440,
            column: 14,
            span: 9455..9460,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 440,
            column: 16,
            span: 9461..9462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 440,
            column: 24,
            span: 9463..9470,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'debug'",
        ),
        position: Position {
            line: 440,
            column: 31,
            span: 9470..9477,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 441,
            column: 8,
            span: 9480..9485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        position: Position {
            line: 441,
            column: 12,
            span: 9486..9489,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 441,
            column: 14,
            span: 9490..9491,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 441,
            column: 16,
            span: 9492..9493,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 441,
            column: 18,
            span: 9492..9495,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 441,
            column: 19,
            span: 9495..9496,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 441,
            column: 22,
            span: 9496..9499,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 441,
            column: 23,
            span: 9499..9500,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 441,
            column: 26,
            span: 9500..9503,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 441,
            column: 27,
            span: 9503..9504,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 442,
            column: 8,
            span: 9507..9512,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 442,
            column: 11,
            span: 9513..9515,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 442,
            column: 13,
            span: 9516..9517,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 442,
            column: 15,
            span: 9518..9519,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 442,
            column: 16,
            span: 9519..9520,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 443,
            column: 8,
            span: 9523..9528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 443,
            column: 10,
            span: 9529..9530,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 443,
            column: 12,
            span: 9531..9532,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 443,
            column: 14,
            span: 9533..9534,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 443,
            column: 15,
            span: 9534..9535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 443,
            column: 26,
            span: 9535..9546,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 443,
            column: 27,
            span: 9546..9547,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 443,
            column: 28,
            span: 9546..9548,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 443,
            column: 29,
            span: 9548..9549,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 444,
            column: 13,
            span: 9552..9562,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 444,
            column: 14,
            span: 9562..9563,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table expected\"",
        ),
        position: Position {
            line: 444,
            column: 30,
            span: 9563..9579,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 444,
            column: 31,
            span: 9579..9580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 444,
            column: 37,
            span: 9581..9586,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 444,
            column: 38,
            span: 9586..9587,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 444,
            column: 44,
            span: 9587..9593,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 444,
            column: 45,
            span: 9593..9594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 444,
            column: 47,
            span: 9595..9596,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 444,
            column: 48,
            span: 9596..9597,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 444,
            column: 51,
            span: 9597..9600,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 444,
            column: 52,
            span: 9600..9601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 445,
            column: 13,
            span: 9604..9614,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 445,
            column: 14,
            span: 9614..9615,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table expected\"",
        ),
        position: Position {
            line: 445,
            column: 30,
            span: 9615..9631,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 445,
            column: 31,
            span: 9631..9632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 445,
            column: 37,
            span: 9633..9638,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 445,
            column: 38,
            span: 9638..9639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 445,
            column: 44,
            span: 9639..9645,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 445,
            column: 45,
            span: 9645..9646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 445,
            column: 47,
            span: 9647..9648,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 445,
            column: 48,
            span: 9648..9649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 446,
            column: 8,
            span: 9652..9657,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 446,
            column: 9,
            span: 9657..9658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 446,
            column: 21,
            span: 9658..9670,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 446,
            column: 22,
            span: 9670..9671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 446,
            column: 23,
            span: 9671..9672,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 446,
            column: 24,
            span: 9672..9673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 446,
            column: 27,
            span: 9674..9676,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 446,
            column: 28,
            span: 9676..9677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 447,
            column: 13,
            span: 9680..9690,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 447,
            column: 14,
            span: 9690..9691,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table expected\"",
        ),
        position: Position {
            line: 447,
            column: 30,
            span: 9691..9707,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 447,
            column: 31,
            span: 9707..9708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 447,
            column: 37,
            span: 9709..9714,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 447,
            column: 38,
            span: 9714..9715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 447,
            column: 44,
            span: 9715..9721,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 447,
            column: 45,
            span: 9721..9722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 447,
            column: 47,
            span: 9723..9724,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 447,
            column: 48,
            span: 9724..9725,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 447,
            column: 51,
            span: 9725..9728,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 447,
            column: 52,
            span: 9728..9729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 448,
            column: 13,
            span: 9732..9742,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 448,
            column: 14,
            span: 9742..9743,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table expected\"",
        ),
        position: Position {
            line: 448,
            column: 30,
            span: 9743..9759,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 448,
            column: 31,
            span: 9759..9760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 448,
            column: 37,
            span: 9761..9766,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 448,
            column: 38,
            span: 9766..9767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 448,
            column: 44,
            span: 9767..9773,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 448,
            column: 45,
            span: 9773..9774,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 448,
            column: 47,
            span: 9775..9776,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 448,
            column: 48,
            span: 9776..9777,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 449,
            column: 5,
            span: 9780..9782,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 449,
            column: 6,
            span: 9782..9783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        position: Position {
            line: 449,
            column: 13,
            span: 9783..9790,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 449,
            column: 15,
            span: 9791..9792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        position: Position {
            line: 449,
            column: 0,
            span: 9793..9796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 450,
            column: 13,
            span: 9799..9809,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 450,
            column: 14,
            span: 9809..9810,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table expected\"",
        ),
        position: Position {
            line: 450,
            column: 30,
            span: 9810..9826,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 450,
            column: 31,
            span: 9826..9827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 450,
            column: 37,
            span: 9828..9833,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 450,
            column: 38,
            span: 9833..9834,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 450,
            column: 44,
            span: 9834..9840,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 450,
            column: 45,
            span: 9840..9841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 450,
            column: 47,
            span: 9842..9843,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 450,
            column: 48,
            span: 9843..9844,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 450,
            column: 51,
            span: 9844..9847,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 450,
            column: 52,
            span: 9847..9848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 451,
            column: 13,
            span: 9851..9861,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 451,
            column: 14,
            span: 9861..9862,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table expected\"",
        ),
        position: Position {
            line: 451,
            column: 30,
            span: 9862..9878,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 451,
            column: 31,
            span: 9878..9879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 451,
            column: 37,
            span: 9880..9885,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 451,
            column: 38,
            span: 9885..9886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 451,
            column: 44,
            span: 9886..9892,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 451,
            column: 45,
            span: 9892..9893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 451,
            column: 47,
            span: 9894..9895,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 451,
            column: 48,
            span: 9895..9896,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 452,
            column: 5,
            span: 9899..9901,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 452,
            column: 6,
            span: 9901..9902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        position: Position {
            line: 452,
            column: 16,
            span: 9902..9912,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 452,
            column: 18,
            span: 9913..9914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        position: Position {
            line: 452,
            column: 0,
            span: 9915..9918,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 453,
            column: 13,
            span: 9921..9931,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 453,
            column: 14,
            span: 9931..9932,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table expected\"",
        ),
        position: Position {
            line: 453,
            column: 30,
            span: 9932..9948,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 453,
            column: 31,
            span: 9948..9949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 453,
            column: 37,
            span: 9950..9955,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 453,
            column: 38,
            span: 9955..9956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 453,
            column: 44,
            span: 9956..9962,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 453,
            column: 45,
            span: 9962..9963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 453,
            column: 47,
            span: 9964..9965,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 453,
            column: 48,
            span: 9965..9966,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 453,
            column: 51,
            span: 9966..9969,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 453,
            column: 52,
            span: 9969..9970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 454,
            column: 13,
            span: 9973..9983,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 454,
            column: 14,
            span: 9983..9984,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table expected\"",
        ),
        position: Position {
            line: 454,
            column: 30,
            span: 9984..10000,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 454,
            column: 31,
            span: 10000..10001,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 454,
            column: 37,
            span: 10002..10007,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 454,
            column: 38,
            span: 10007..10008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 454,
            column: 44,
            span: 10008..10014,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 454,
            column: 45,
            span: 10014..10015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 454,
            column: 47,
            span: 10016..10017,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 454,
            column: 48,
            span: 10017..10018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 455,
            column: 5,
            span: 10021..10023,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 455,
            column: 6,
            span: 10023..10024,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        position: Position {
            line: 455,
            column: 11,
            span: 10024..10029,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 455,
            column: 13,
            span: 10030..10031,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 455,
            column: 22,
            span: 10032..10040,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 455,
            column: 24,
            span: 10041..10042,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 455,
            column: 25,
            span: 10042..10043,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 455,
            column: 32,
            span: 10044..10050,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 455,
            column: 34,
            span: 10051..10052,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        position: Position {
            line: 455,
            column: 37,
            span: 10052..10055,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 455,
            column: 0,
            span: 10056..10059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 456,
            column: 8,
            span: 10062..10067,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 456,
            column: 9,
            span: 10067..10068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 456,
            column: 15,
            span: 10068..10074,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 456,
            column: 16,
            span: 10074..10075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 456,
            column: 17,
            span: 10075..10076,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 456,
            column: 18,
            span: 10076..10077,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 456,
            column: 21,
            span: 10077..10080,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 456,
            column: 22,
            span: 10080..10081,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 457,
            column: 9,
            span: 10084..10090,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 457,
            column: 10,
            span: 10090..10091,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 457,
            column: 11,
            span: 10091..10092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 457,
            column: 12,
            span: 10092..10093,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 457,
            column: 15,
            span: 10094..10096,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 457,
            column: 17,
            span: 10096..10098,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 457,
            column: 21,
            span: 10099..10102,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 457,
            column: 23,
            span: 10103..10104,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        position: Position {
            line: 457,
            column: 26,
            span: 10104..10107,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 457,
            column: 29,
            span: 10108..10110,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 457,
            column: 31,
            span: 10110..10112,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 457,
            column: 35,
            span: 10113..10116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 457,
            column: 37,
            span: 10117..10118,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 457,
            column: 38,
            span: 10118..10119,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 457,
            column: 39,
            span: 10118..10120,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 457,
            column: 40,
            span: 10120..10121,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 457,
            column: 43,
            span: 10122..10124,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 457,
            column: 46,
            span: 10124..10127,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 457,
            column: 50,
            span: 10128..10131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        position: Position {
            line: 457,
            column: 54,
            span: 10132..10135,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 457,
            column: 55,
            span: 10135..10136,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 457,
            column: 56,
            span: 10135..10137,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 457,
            column: 57,
            span: 10137..10138,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 457,
            column: 60,
            span: 10139..10141,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 457,
            column: 63,
            span: 10141..10144,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 457,
            column: 64,
            span: 10144..10145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 458,
            column: 9,
            span: 10148..10154,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 458,
            column: 10,
            span: 10154..10155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 458,
            column: 15,
            span: 10155..10160,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 458,
            column: 16,
            span: 10160..10161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 458,
            column: 22,
            span: 10161..10167,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 458,
            column: 23,
            span: 10167..10168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 458,
            column: 24,
            span: 10168..10169,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 458,
            column: 25,
            span: 10169..10170,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 458,
            column: 28,
            span: 10171..10173,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 458,
            column: 31,
            span: 10173..10176,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 458,
            column: 32,
            span: 10176..10177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 459,
            column: 8,
            span: 10180..10185,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 459,
            column: 9,
            span: 10185..10186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 459,
            column: 15,
            span: 10186..10192,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 459,
            column: 16,
            span: 10192..10193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 459,
            column: 17,
            span: 10193..10194,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 459,
            column: 18,
            span: 10194..10195,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 459,
            column: 20,
            span: 10195..10197,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 459,
            column: 21,
            span: 10197..10198,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 459,
            column: 24,
            span: 10198..10201,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 459,
            column: 25,
            span: 10201..10202,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 460,
            column: 9,
            span: 10205..10211,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 460,
            column: 10,
            span: 10211..10212,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 460,
            column: 11,
            span: 10212..10213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 460,
            column: 12,
            span: 10213..10214,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 460,
            column: 15,
            span: 10215..10217,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 460,
            column: 17,
            span: 10217..10219,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 460,
            column: 21,
            span: 10220..10223,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 460,
            column: 23,
            span: 10224..10225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        position: Position {
            line: 460,
            column: 26,
            span: 10225..10228,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 460,
            column: 29,
            span: 10229..10231,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 460,
            column: 31,
            span: 10231..10233,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 460,
            column: 35,
            span: 10234..10237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 460,
            column: 37,
            span: 10238..10239,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 460,
            column: 38,
            span: 10239..10240,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 460,
            column: 39,
            span: 10239..10241,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 460,
            column: 40,
            span: 10241..10242,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 460,
            column: 43,
            span: 10243..10245,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 460,
            column: 46,
            span: 10245..10248,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 460,
            column: 50,
            span: 10249..10252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        position: Position {
            line: 460,
            column: 54,
            span: 10253..10256,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 460,
            column: 55,
            span: 10256..10257,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 460,
            column: 56,
            span: 10256..10258,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 460,
            column: 57,
            span: 10258..10259,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 460,
            column: 60,
            span: 10260..10262,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 460,
            column: 63,
            span: 10262..10265,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 460,
            column: 64,
            span: 10265..10266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 462,
            column: 5,
            span: 10270..10272,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 462,
            column: 6,
            span: 10272..10273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        position: Position {
            line: 462,
            column: 16,
            span: 10273..10283,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 462,
            column: 18,
            span: 10284..10285,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 462,
            column: 0,
            span: 10286..10289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 463,
            column: 5,
            span: 10292..10294,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 463,
            column: 6,
            span: 10294..10295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        position: Position {
            line: 463,
            column: 11,
            span: 10295..10300,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 463,
            column: 13,
            span: 10301..10302,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 463,
            column: 0,
            span: 10303..10306,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 464,
            column: 8,
            span: 10309..10314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab2",
        ),
        position: Position {
            line: 464,
            column: 13,
            span: 10315..10319,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 464,
            column: 15,
            span: 10320..10321,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 464,
            column: 17,
            span: 10322..10323,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 464,
            column: 18,
            span: 10323..10324,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 465,
            column: 8,
            span: 10327..10332,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u2",
        ),
        position: Position {
            line: 465,
            column: 11,
            span: 10333..10335,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 465,
            column: 13,
            span: 10336..10337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 465,
            column: 15,
            span: 10338..10339,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 465,
            column: 16,
            span: 10339..10340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 465,
            column: 27,
            span: 10340..10351,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 465,
            column: 28,
            span: 10351..10352,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 465,
            column: 29,
            span: 10351..10353,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 465,
            column: 30,
            span: 10353..10354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 466,
            column: 8,
            span: 10358..10363,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 466,
            column: 9,
            span: 10363..10364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 466,
            column: 21,
            span: 10364..10376,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 466,
            column: 22,
            span: 10376..10377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u2",
        ),
        position: Position {
            line: 466,
            column: 24,
            span: 10377..10379,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 466,
            column: 25,
            span: 10379..10380,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 466,
            column: 27,
            span: 10381..10382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        position: Position {
            line: 466,
            column: 37,
            span: 10382..10392,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 466,
            column: 39,
            span: 10393..10394,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 466,
            column: 48,
            span: 10395..10403,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 466,
            column: 50,
            span: 10404..10405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 466,
            column: 51,
            span: 10405..10406,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 466,
            column: 52,
            span: 10406..10407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 466,
            column: 54,
            span: 10408..10409,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 466,
            column: 55,
            span: 10409..10410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 466,
            column: 57,
            span: 10411..10412,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 466,
            column: 58,
            span: 10412..10413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab2",
        ),
        position: Position {
            line: 466,
            column: 63,
            span: 10414..10418,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 466,
            column: 64,
            span: 10418..10419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 466,
            column: 65,
            span: 10419..10420,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 466,
            column: 66,
            span: 10420..10421,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 466,
            column: 68,
            span: 10422..10423,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 466,
            column: 70,
            span: 10424..10425,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 466,
            column: 74,
            span: 10426..10429,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 466,
            column: 75,
            span: 10429..10430,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 466,
            column: 76,
            span: 10430..10431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 467,
            column: 8,
            span: 10434..10439,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 467,
            column: 9,
            span: 10439..10440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "move",
        ),
        position: Position {
            line: 467,
            column: 13,
            span: 10440..10444,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 467,
            column: 14,
            span: 10444..10445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 467,
            column: 15,
            span: 10445..10446,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 467,
            column: 16,
            span: 10446..10447,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 467,
            column: 18,
            span: 10447..10449,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 467,
            column: 19,
            span: 10449..10450,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 467,
            column: 21,
            span: 10450..10452,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 467,
            column: 22,
            span: 10452..10453,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 467,
            column: 24,
            span: 10453..10455,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 467,
            column: 25,
            span: 10455..10456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u2",
        ),
        position: Position {
            line: 467,
            column: 28,
            span: 10457..10459,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 467,
            column: 29,
            span: 10459..10460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 468,
            column: 9,
            span: 10463..10469,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 468,
            column: 10,
            span: 10469..10470,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 468,
            column: 11,
            span: 10470..10471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab2",
        ),
        position: Position {
            line: 468,
            column: 15,
            span: 10471..10475,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 468,
            column: 18,
            span: 10476..10478,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 468,
            column: 20,
            span: 10478..10480,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 468,
            column: 24,
            span: 10481..10484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab2",
        ),
        position: Position {
            line: 468,
            column: 29,
            span: 10485..10489,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 468,
            column: 30,
            span: 10489..10490,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 468,
            column: 31,
            span: 10489..10491,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 468,
            column: 32,
            span: 10491..10492,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 468,
            column: 35,
            span: 10493..10495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        position: Position {
            line: 468,
            column: 39,
            span: 10496..10499,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 468,
            column: 40,
            span: 10499..10500,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 468,
            column: 41,
            span: 10499..10501,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 468,
            column: 42,
            span: 10501..10502,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 468,
            column: 46,
            span: 10503..10506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab2",
        ),
        position: Position {
            line: 468,
            column: 51,
            span: 10507..10511,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 468,
            column: 52,
            span: 10511..10512,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 468,
            column: 53,
            span: 10511..10513,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 468,
            column: 54,
            span: 10513..10514,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 468,
            column: 57,
            span: 10515..10517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        position: Position {
            line: 468,
            column: 61,
            span: 10518..10521,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 468,
            column: 62,
            span: 10521..10522,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 468,
            column: 63,
            span: 10521..10523,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 468,
            column: 64,
            span: 10523..10524,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 468,
            column: 65,
            span: 10524..10525,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 470,
            column: 4,
            span: 10527..10530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 472,
            column: 6,
            span: 10537..10542,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 472,
            column: 7,
            span: 10542..10543,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 472,
            column: 10,
            span: 10543..10546,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 472,
            column: 11,
            span: 10546..10547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 474,
            column: 2,
            span: 10549..10550,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 474,
            column: 4,
            span: 10551..10552,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 474,
            column: 6,
            span: 10553..10554,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 474,
            column: 7,
            span: 10554..10555,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 475,
            column: 4,
            span: 10556..10559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 475,
            column: 6,
            span: 10560..10561,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 475,
            column: 7,
            span: 10561..10562,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 475,
            column: 8,
            span: 10561..10563,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 475,
            column: 9,
            span: 10563..10564,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 475,
            column: 13,
            span: 10563..10568,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 475,
            column: 0,
            span: 10569..10571,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 476,
            column: 4,
            span: 10574..10575,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 476,
            column: 5,
            span: 10575..10576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 476,
            column: 6,
            span: 10576..10577,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 476,
            column: 7,
            span: 10577..10578,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 476,
            column: 9,
            span: 10579..10580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 476,
            column: 11,
            span: 10581..10582,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 476,
            column: 12,
            span: 10582..10583,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 476,
            column: 14,
            span: 10584..10585,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 476,
            column: 15,
            span: 10585..10586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 476,
            column: 16,
            span: 10586..10587,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 476,
            column: 17,
            span: 10587..10588,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 476,
            column: 18,
            span: 10587..10589,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 476,
            column: 19,
            span: 10589..10590,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 476,
            column: 21,
            span: 10591..10592,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 476,
            column: 0,
            span: 10593..10596,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 477,
            column: 0,
            span: 10597..10600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 478,
            column: 7,
            span: 10601..10607,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 478,
            column: 8,
            span: 10607..10608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 478,
            column: 12,
            span: 10608..10612,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 478,
            column: 13,
            span: 10612..10613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 478,
            column: 14,
            span: 10613..10614,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 478,
            column: 15,
            span: 10614..10615,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 478,
            column: 18,
            span: 10615..10618,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 478,
            column: 19,
            span: 10618..10619,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 478,
            column: 22,
            span: 10620..10622,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 478,
            column: 27,
            span: 10622..10627,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 478,
            column: 31,
            span: 10628..10631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 478,
            column: 36,
            span: 10632..10636,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 478,
            column: 37,
            span: 10636..10637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 478,
            column: 38,
            span: 10637..10638,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 478,
            column: 39,
            span: 10638..10639,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 478,
            column: 43,
            span: 10638..10643,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 478,
            column: 44,
            span: 10643..10644,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 478,
            column: 47,
            span: 10645..10647,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 478,
            column: 51,
            span: 10648..10651,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 478,
            column: 52,
            span: 10651..10652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 480,
            column: 7,
            span: 10654..10660,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 480,
            column: 8,
            span: 10660..10661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 480,
            column: 12,
            span: 10661..10665,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 480,
            column: 13,
            span: 10665..10666,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 480,
            column: 14,
            span: 10666..10667,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 480,
            column: 15,
            span: 10667..10668,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 480,
            column: 16,
            span: 10668..10669,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 480,
            column: 19,
            span: 10670..10672,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 480,
            column: 23,
            span: 10673..10676,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 480,
            column: 24,
            span: 10676..10677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 481,
            column: 7,
            span: 10678..10684,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 481,
            column: 8,
            span: 10684..10685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 481,
            column: 12,
            span: 10685..10689,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 481,
            column: 13,
            span: 10689..10690,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 481,
            column: 14,
            span: 10690..10691,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 481,
            column: 15,
            span: 10691..10692,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 481,
            column: 16,
            span: 10692..10693,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 481,
            column: 20,
            span: 10694..10697,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 481,
            column: 21,
            span: 10697..10698,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 481,
            column: 24,
            span: 10699..10701,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 481,
            column: 28,
            span: 10702..10705,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 481,
            column: 29,
            span: 10705..10706,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 483,
            column: 4,
            span: 10708..10711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 483,
            column: 6,
            span: 10712..10713,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 483,
            column: 7,
            span: 10713..10714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 483,
            column: 8,
            span: 10714..10715,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 483,
            column: 11,
            span: 10716..10718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 483,
            column: 17,
            span: 10719..10724,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 483,
            column: 18,
            span: 10724..10725,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 483,
            column: 19,
            span: 10725..10726,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 483,
            column: 22,
            span: 10727..10729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 483,
            column: 28,
            span: 10730..10735,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not here\"",
        ),
        position: Position {
            line: 483,
            column: 38,
            span: 10735..10745,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 483,
            column: 0,
            span: 10746..10749,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 484,
            column: 4,
            span: 10750..10753,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 484,
            column: 6,
            span: 10754..10755,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 484,
            column: 7,
            span: 10755..10756,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 484,
            column: 8,
            span: 10755..10757,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 484,
            column: 9,
            span: 10757..10758,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 484,
            column: 10,
            span: 10757..10759,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 484,
            column: 13,
            span: 10760..10762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 484,
            column: 19,
            span: 10763..10768,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'not here'",
        ),
        position: Position {
            line: 484,
            column: 29,
            span: 10768..10778,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 484,
            column: 0,
            span: 10779..10782,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 485,
            column: 4,
            span: 10783..10786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 485,
            column: 6,
            span: 10787..10788,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 485,
            column: 7,
            span: 10788..10789,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 485,
            column: 8,
            span: 10788..10790,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 485,
            column: 9,
            span: 10790..10791,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 485,
            column: 10,
            span: 10790..10792,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 485,
            column: 11,
            span: 10792..10793,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 485,
            column: 12,
            span: 10793..10794,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 485,
            column: 13,
            span: 10793..10795,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 485,
            column: 16,
            span: 10796..10798,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 485,
            column: 22,
            span: 10799..10804,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'not here'",
        ),
        position: Position {
            line: 485,
            column: 32,
            span: 10804..10814,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 485,
            column: 0,
            span: 10815..10818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 486,
            column: 2,
            span: 10819..10820,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 486,
            column: 4,
            span: 10821..10822,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 486,
            column: 8,
            span: 10823..10826,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 486,
            column: 9,
            span: 10826..10827,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 486,
            column: 13,
            span: 10828..10831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 486,
            column: 15,
            span: 10832..10833,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 486,
            column: 16,
            span: 10833..10834,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 486,
            column: 17,
            span: 10833..10835,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 486,
            column: 18,
            span: 10835..10836,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 486,
            column: 19,
            span: 10835..10837,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 486,
            column: 22,
            span: 10838..10840,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 486,
            column: 29,
            span: 10841..10847,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 486,
            column: 30,
            span: 10847..10848,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 486,
            column: 33,
            span: 10848..10851,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 486,
            column: 35,
            span: 10852..10853,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 486,
            column: 36,
            span: 10853..10854,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 486,
            column: 37,
            span: 10854..10855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 486,
            column: 39,
            span: 10856..10857,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 486,
            column: 40,
            span: 10857..10858,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 486,
            column: 41,
            span: 10857..10859,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 486,
            column: 45,
            span: 10860..10863,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 486,
            column: 46,
            span: 10863..10864,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 486,
            column: 53,
            span: 10865..10871,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 486,
            column: 54,
            span: 10871..10872,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 486,
            column: 55,
            span: 10872..10873,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 486,
            column: 56,
            span: 10873..10874,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 487,
            column: 2,
            span: 10875..10876,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 487,
            column: 4,
            span: 10877..10878,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 487,
            column: 8,
            span: 10879..10882,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 487,
            column: 9,
            span: 10882..10883,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 487,
            column: 13,
            span: 10884..10887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 487,
            column: 15,
            span: 10888..10889,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 487,
            column: 16,
            span: 10889..10890,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 487,
            column: 17,
            span: 10889..10891,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 487,
            column: 18,
            span: 10891..10892,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 487,
            column: 19,
            span: 10891..10893,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 487,
            column: 20,
            span: 10893..10894,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 487,
            column: 21,
            span: 10894..10895,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 487,
            column: 22,
            span: 10894..10896,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 487,
            column: 25,
            span: 10897..10899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 487,
            column: 32,
            span: 10900..10906,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 487,
            column: 33,
            span: 10906..10907,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 487,
            column: 36,
            span: 10907..10910,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 487,
            column: 38,
            span: 10911..10912,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 487,
            column: 39,
            span: 10912..10913,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 487,
            column: 40,
            span: 10913..10914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 487,
            column: 42,
            span: 10915..10916,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 487,
            column: 43,
            span: 10916..10917,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 487,
            column: 44,
            span: 10916..10918,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 487,
            column: 48,
            span: 10919..10922,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 487,
            column: 49,
            span: 10922..10923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 487,
            column: 56,
            span: 10924..10930,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 487,
            column: 57,
            span: 10930..10931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 487,
            column: 58,
            span: 10931..10932,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 487,
            column: 59,
            span: 10932..10933,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 489,
            column: 0,
            span: 10935..10937,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 490,
            column: 8,
            span: 10940..10945,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 490,
            column: 9,
            span: 10945..10946,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing floats in numeric for\"",
        ),
        position: Position {
            line: 490,
            column: 40,
            span: 10946..10977,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 490,
            column: 41,
            span: 10977..10978,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 491,
            column: 8,
            span: 10981..10986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 491,
            column: 0,
            span: 10987..10988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 493,
            column: 4,
            span: 11010..11011,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 493,
            column: 6,
            span: 11012..11013,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 493,
            column: 8,
            span: 11013..11015,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 493,
            column: 9,
            span: 11015..11016,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 493,
            column: 13,
            span: 11017..11020,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 493,
            column: 15,
            span: 11021..11022,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 493,
            column: 16,
            span: 11022..11023,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 493,
            column: 17,
            span: 11022..11024,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 493,
            column: 18,
            span: 11024..11025,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 493,
            column: 20,
            span: 11025..11027,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 493,
            column: 21,
            span: 11027..11028,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 493,
            column: 23,
            span: 11028..11030,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 493,
            column: 26,
            span: 11031..11033,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 493,
            column: 28,
            span: 11034..11035,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 493,
            column: 29,
            span: 11035..11036,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 493,
            column: 30,
            span: 11036..11037,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 493,
            column: 31,
            span: 11037..11038,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 493,
            column: 32,
            span: 11037..11039,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 493,
            column: 36,
            span: 11040..11043,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 493,
            column: 37,
            span: 11043..11044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 493,
            column: 44,
            span: 11045..11051,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 493,
            column: 45,
            span: 11051..11052,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 493,
            column: 46,
            span: 11052..11053,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 493,
            column: 48,
            span: 11053..11055,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 493,
            column: 49,
            span: 11054..11056,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 493,
            column: 50,
            span: 11056..11057,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 494,
            column: 4,
            span: 11060..11061,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 494,
            column: 6,
            span: 11062..11063,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 494,
            column: 8,
            span: 11063..11065,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 494,
            column: 9,
            span: 11065..11066,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 494,
            column: 13,
            span: 11067..11070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 494,
            column: 15,
            span: 11071..11072,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 494,
            column: 16,
            span: 11072..11073,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 494,
            column: 21,
            span: 11072..11078,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 494,
            column: 22,
            span: 11078..11079,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "4",
            },
        ),
        position: Position {
            line: 494,
            column: 26,
            span: 11079..11083,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 494,
            column: 27,
            span: 11083..11084,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 494,
            column: 29,
            span: 11085..11086,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 494,
            column: 30,
            span: 11085..11087,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 494,
            column: 33,
            span: 11088..11090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 494,
            column: 35,
            span: 11091..11092,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 494,
            column: 36,
            span: 11092..11093,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 494,
            column: 37,
            span: 11093..11094,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 494,
            column: 38,
            span: 11094..11095,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 494,
            column: 39,
            span: 11094..11096,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 494,
            column: 43,
            span: 11097..11100,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 494,
            column: 44,
            span: 11100..11101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 494,
            column: 51,
            span: 11102..11108,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 494,
            column: 52,
            span: 11108..11109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 494,
            column: 53,
            span: 11109..11110,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 494,
            column: 55,
            span: 11110..11112,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 494,
            column: 56,
            span: 11111..11113,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 494,
            column: 57,
            span: 11113..11114,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 495,
            column: 4,
            span: 11117..11118,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 495,
            column: 6,
            span: 11119..11120,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 495,
            column: 8,
            span: 11120..11122,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 495,
            column: 9,
            span: 11122..11123,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 495,
            column: 13,
            span: 11124..11127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 495,
            column: 15,
            span: 11128..11129,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 495,
            column: 16,
            span: 11129..11130,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 495,
            column: 17,
            span: 11129..11131,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 495,
            column: 18,
            span: 11131..11132,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".99999",
                },
            ),
        ),
        position: Position {
            line: 495,
            column: 26,
            span: 11132..11140,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 495,
            column: 27,
            span: 11140..11141,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 495,
            column: 29,
            span: 11141..11143,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 495,
            column: 32,
            span: 11144..11146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 495,
            column: 34,
            span: 11147..11148,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 495,
            column: 35,
            span: 11148..11149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 495,
            column: 36,
            span: 11149..11150,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 495,
            column: 37,
            span: 11150..11151,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 495,
            column: 38,
            span: 11150..11152,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 495,
            column: 42,
            span: 11153..11156,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 495,
            column: 43,
            span: 11156..11157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 495,
            column: 50,
            span: 11158..11164,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 495,
            column: 51,
            span: 11164..11165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 495,
            column: 52,
            span: 11165..11166,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 495,
            column: 54,
            span: 11166..11168,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 495,
            column: 55,
            span: 11167..11169,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 495,
            column: 56,
            span: 11169..11170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 496,
            column: 4,
            span: 11173..11174,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 496,
            column: 6,
            span: 11175..11176,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 496,
            column: 8,
            span: 11176..11178,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 496,
            column: 9,
            span: 11178..11179,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 496,
            column: 13,
            span: 11180..11183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 496,
            column: 15,
            span: 11184..11185,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 496,
            column: 16,
            span: 11185..11186,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9999",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 496,
            column: 20,
            span: 11185..11190,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 496,
            column: 21,
            span: 11190..11191,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "4",
            },
        ),
        position: Position {
            line: 496,
            column: 25,
            span: 11191..11195,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 496,
            column: 26,
            span: 11195..11196,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 496,
            column: 28,
            span: 11197..11198,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 496,
            column: 29,
            span: 11197..11199,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 496,
            column: 32,
            span: 11200..11202,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 496,
            column: 34,
            span: 11203..11204,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 496,
            column: 35,
            span: 11204..11205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 496,
            column: 36,
            span: 11205..11206,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 496,
            column: 37,
            span: 11206..11207,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 496,
            column: 38,
            span: 11206..11208,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 496,
            column: 42,
            span: 11209..11212,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 496,
            column: 43,
            span: 11212..11213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 496,
            column: 50,
            span: 11214..11220,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 496,
            column: 51,
            span: 11220..11221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 496,
            column: 52,
            span: 11221..11222,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 496,
            column: 54,
            span: 11222..11224,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 496,
            column: 55,
            span: 11223..11225,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 496,
            column: 56,
            span: 11225..11226,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 497,
            column: 4,
            span: 11229..11230,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 497,
            column: 6,
            span: 11231..11232,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 497,
            column: 8,
            span: 11232..11234,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 497,
            column: 9,
            span: 11234..11235,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 497,
            column: 13,
            span: 11236..11239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 497,
            column: 15,
            span: 11240..11241,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 497,
            column: 16,
            span: 11241..11242,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 497,
            column: 17,
            span: 11241..11243,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 497,
            column: 18,
            span: 11243..11244,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".99999",
                },
            ),
        ),
        position: Position {
            line: 497,
            column: 26,
            span: 11244..11252,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 497,
            column: 27,
            span: 11252..11253,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 497,
            column: 29,
            span: 11254..11255,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 497,
            column: 30,
            span: 11254..11256,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 497,
            column: 33,
            span: 11257..11259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 497,
            column: 35,
            span: 11260..11261,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 497,
            column: 36,
            span: 11261..11262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 497,
            column: 37,
            span: 11262..11263,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 497,
            column: 38,
            span: 11263..11264,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 497,
            column: 39,
            span: 11263..11265,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 497,
            column: 43,
            span: 11266..11269,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 497,
            column: 44,
            span: 11269..11270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 497,
            column: 51,
            span: 11271..11277,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 497,
            column: 52,
            span: 11277..11278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 497,
            column: 53,
            span: 11278..11279,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 497,
            column: 55,
            span: 11279..11281,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 497,
            column: 56,
            span: 11280..11282,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 497,
            column: 57,
            span: 11282..11283,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 500,
            column: 4,
            span: 11304..11305,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 500,
            column: 6,
            span: 11306..11307,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 500,
            column: 8,
            span: 11307..11309,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 500,
            column: 9,
            span: 11309..11310,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 500,
            column: 13,
            span: 11311..11314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 500,
            column: 15,
            span: 11315..11316,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 500,
            column: 16,
            span: 11316..11317,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 500,
            column: 17,
            span: 11316..11318,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 500,
            column: 18,
            span: 11318..11319,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".999999999",
                },
            ),
        ),
        position: Position {
            line: 500,
            column: 30,
            span: 11319..11331,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 500,
            column: 31,
            span: 11331..11332,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        position: Position {
            line: 500,
            column: 35,
            span: 11332..11336,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 500,
            column: 38,
            span: 11337..11339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 500,
            column: 40,
            span: 11340..11341,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 500,
            column: 41,
            span: 11341..11342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 500,
            column: 42,
            span: 11342..11343,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 500,
            column: 43,
            span: 11343..11344,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 500,
            column: 44,
            span: 11343..11345,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 500,
            column: 48,
            span: 11346..11349,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 500,
            column: 49,
            span: 11349..11350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 500,
            column: 56,
            span: 11351..11357,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 500,
            column: 57,
            span: 11357..11358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 500,
            column: 58,
            span: 11358..11359,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 500,
            column: 60,
            span: 11359..11361,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 500,
            column: 62,
            span: 11360..11363,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 500,
            column: 63,
            span: 11363..11364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 501,
            column: 4,
            span: 11367..11368,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 501,
            column: 6,
            span: 11369..11370,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 501,
            column: 8,
            span: 11370..11372,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 501,
            column: 9,
            span: 11372..11373,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 501,
            column: 13,
            span: 11374..11377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 501,
            column: 15,
            span: 11378..11379,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 501,
            column: 16,
            span: 11379..11380,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 501,
            column: 19,
            span: 11379..11383,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 501,
            column: 20,
            span: 11383..11384,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 501,
            column: 22,
            span: 11384..11386,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 501,
            column: 23,
            span: 11386..11387,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 501,
            column: 25,
            span: 11387..11389,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 501,
            column: 28,
            span: 11390..11392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 501,
            column: 30,
            span: 11393..11394,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 501,
            column: 31,
            span: 11394..11395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 501,
            column: 32,
            span: 11395..11396,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 501,
            column: 33,
            span: 11396..11397,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 501,
            column: 34,
            span: 11396..11398,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 501,
            column: 38,
            span: 11399..11402,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 501,
            column: 39,
            span: 11402..11403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 501,
            column: 46,
            span: 11404..11410,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 501,
            column: 47,
            span: 11410..11411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 501,
            column: 48,
            span: 11411..11412,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 501,
            column: 50,
            span: 11412..11414,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 501,
            column: 51,
            span: 11413..11415,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 501,
            column: 52,
            span: 11415..11416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 502,
            column: 4,
            span: 11419..11420,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 502,
            column: 6,
            span: 11421..11422,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 502,
            column: 8,
            span: 11422..11424,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 502,
            column: 9,
            span: 11424..11425,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 502,
            column: 13,
            span: 11426..11429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 502,
            column: 15,
            span: 11430..11431,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 502,
            column: 16,
            span: 11431..11432,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 502,
            column: 17,
            span: 11432..11433,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        position: Position {
            line: 502,
            column: 20,
            span: 11432..11436,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 502,
            column: 21,
            span: 11436..11437,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 502,
            column: 23,
            span: 11438..11439,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        position: Position {
            line: 502,
            column: 26,
            span: 11438..11442,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 502,
            column: 27,
            span: 11442..11443,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 502,
            column: 29,
            span: 11443..11445,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 502,
            column: 32,
            span: 11446..11448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 502,
            column: 34,
            span: 11449..11450,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 502,
            column: 35,
            span: 11450..11451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 502,
            column: 36,
            span: 11451..11452,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 502,
            column: 37,
            span: 11452..11453,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 502,
            column: 38,
            span: 11452..11454,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 502,
            column: 42,
            span: 11455..11458,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 502,
            column: 43,
            span: 11458..11459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 502,
            column: 50,
            span: 11460..11466,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 502,
            column: 51,
            span: 11466..11467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 502,
            column: 52,
            span: 11467..11468,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 502,
            column: 54,
            span: 11468..11470,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 502,
            column: 55,
            span: 11469..11471,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 502,
            column: 56,
            span: 11471..11472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 503,
            column: 4,
            span: 11475..11476,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 503,
            column: 6,
            span: 11477..11478,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 503,
            column: 8,
            span: 11478..11480,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 503,
            column: 9,
            span: 11480..11481,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 503,
            column: 13,
            span: 11482..11485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 503,
            column: 15,
            span: 11486..11487,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 503,
            column: 16,
            span: 11487..11488,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "6",
            },
        ),
        position: Position {
            line: 503,
            column: 19,
            span: 11487..11491,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 503,
            column: 20,
            span: 11491..11492,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "6",
            },
        ),
        position: Position {
            line: 503,
            column: 24,
            span: 11492..11496,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 503,
            column: 25,
            span: 11496..11497,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 503,
            column: 27,
            span: 11498..11499,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 503,
            column: 28,
            span: 11498..11500,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 503,
            column: 31,
            span: 11501..11503,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 503,
            column: 33,
            span: 11504..11505,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 503,
            column: 34,
            span: 11505..11506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 503,
            column: 35,
            span: 11506..11507,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 503,
            column: 36,
            span: 11507..11508,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 503,
            column: 37,
            span: 11507..11509,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 503,
            column: 41,
            span: 11510..11513,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 503,
            column: 42,
            span: 11513..11514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 503,
            column: 49,
            span: 11515..11521,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 503,
            column: 50,
            span: 11521..11522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 503,
            column: 51,
            span: 11522..11523,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 503,
            column: 53,
            span: 11523..11525,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 503,
            column: 54,
            span: 11524..11526,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 503,
            column: 55,
            span: 11526..11527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 504,
            column: 4,
            span: 11530..11531,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 504,
            column: 6,
            span: 11532..11533,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 504,
            column: 8,
            span: 11533..11535,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 504,
            column: 9,
            span: 11535..11536,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 504,
            column: 13,
            span: 11537..11540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 504,
            column: 15,
            span: 11541..11542,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 504,
            column: 16,
            span: 11542..11543,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 504,
            column: 19,
            span: 11542..11546,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 504,
            column: 20,
            span: 11546..11547,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".99999",
                },
            ),
        ),
        position: Position {
            line: 504,
            column: 28,
            span: 11547..11555,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 504,
            column: 29,
            span: 11555..11556,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 504,
            column: 31,
            span: 11556..11558,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 504,
            column: 34,
            span: 11559..11561,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 504,
            column: 36,
            span: 11562..11563,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 504,
            column: 37,
            span: 11563..11564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 504,
            column: 38,
            span: 11564..11565,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 504,
            column: 39,
            span: 11565..11566,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 504,
            column: 40,
            span: 11565..11567,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 504,
            column: 44,
            span: 11568..11571,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 504,
            column: 45,
            span: 11571..11572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 504,
            column: 52,
            span: 11573..11579,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 504,
            column: 53,
            span: 11579..11580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 504,
            column: 54,
            span: 11580..11581,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 504,
            column: 56,
            span: 11581..11583,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 504,
            column: 57,
            span: 11582..11584,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 504,
            column: 58,
            span: 11584..11585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 505,
            column: 4,
            span: 11588..11589,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 505,
            column: 6,
            span: 11590..11591,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 505,
            column: 8,
            span: 11591..11593,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 505,
            column: 9,
            span: 11593..11594,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 505,
            column: 13,
            span: 11595..11598,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 505,
            column: 15,
            span: 11599..11600,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 505,
            column: 16,
            span: 11600..11601,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "99999",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 505,
            column: 21,
            span: 11600..11606,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 505,
            column: 22,
            span: 11606..11607,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "5",
            },
        ),
        position: Position {
            line: 505,
            column: 26,
            span: 11607..11611,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 505,
            column: 27,
            span: 11611..11612,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 505,
            column: 29,
            span: 11613..11614,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 505,
            column: 32,
            span: 11613..11617,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 505,
            column: 35,
            span: 11618..11620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 505,
            column: 37,
            span: 11621..11622,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 505,
            column: 38,
            span: 11622..11623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 505,
            column: 39,
            span: 11623..11624,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 505,
            column: 40,
            span: 11624..11625,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 505,
            column: 41,
            span: 11624..11626,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 505,
            column: 45,
            span: 11627..11630,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 505,
            column: 46,
            span: 11630..11631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 505,
            column: 53,
            span: 11632..11638,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 505,
            column: 54,
            span: 11638..11639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 505,
            column: 55,
            span: 11639..11640,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 505,
            column: 57,
            span: 11640..11642,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 505,
            column: 58,
            span: 11641..11643,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 505,
            column: 59,
            span: 11643..11644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 506,
            column: 4,
            span: 11647..11648,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 506,
            column: 6,
            span: 11649..11650,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 506,
            column: 8,
            span: 11650..11652,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 506,
            column: 9,
            span: 11652..11653,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 506,
            column: 13,
            span: 11654..11657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 506,
            column: 15,
            span: 11658..11659,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 506,
            column: 16,
            span: 11659..11660,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 506,
            column: 19,
            span: 11659..11663,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 506,
            column: 20,
            span: 11663..11664,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".99999",
                },
            ),
        ),
        position: Position {
            line: 506,
            column: 28,
            span: 11664..11672,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 506,
            column: 29,
            span: 11672..11673,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 506,
            column: 31,
            span: 11674..11675,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 506,
            column: 32,
            span: 11674..11676,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 506,
            column: 35,
            span: 11677..11679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 506,
            column: 37,
            span: 11680..11681,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 506,
            column: 38,
            span: 11681..11682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 506,
            column: 39,
            span: 11682..11683,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 506,
            column: 40,
            span: 11683..11684,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 506,
            column: 41,
            span: 11683..11685,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 506,
            column: 45,
            span: 11686..11689,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 506,
            column: 46,
            span: 11689..11690,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 506,
            column: 53,
            span: 11691..11697,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 506,
            column: 54,
            span: 11697..11698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 506,
            column: 55,
            span: 11698..11699,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 506,
            column: 57,
            span: 11699..11701,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 506,
            column: 58,
            span: 11700..11702,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 506,
            column: 59,
            span: 11702..11703,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 507,
            column: 0,
            span: 11704..11707,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 510,
            column: 2,
            span: 11723..11724,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 510,
            column: 4,
            span: 11725..11726,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 510,
            column: 6,
            span: 11726..11728,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 510,
            column: 7,
            span: 11728..11729,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 510,
            column: 11,
            span: 11730..11733,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 510,
            column: 13,
            span: 11734..11735,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 510,
            column: 14,
            span: 11735..11736,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\"",
        ),
        position: Position {
            line: 510,
            column: 18,
            span: 11736..11740,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 510,
            column: 19,
            span: 11740..11741,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        position: Position {
            line: 510,
            column: 22,
            span: 11741..11744,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 510,
            column: 23,
            span: 11744..11745,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-2\"",
        ),
        position: Position {
            line: 510,
            column: 27,
            span: 11745..11749,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 510,
            column: 30,
            span: 11750..11752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 510,
            column: 32,
            span: 11753..11754,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 510,
            column: 33,
            span: 11754..11755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 510,
            column: 34,
            span: 11755..11756,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 510,
            column: 35,
            span: 11756..11757,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 510,
            column: 36,
            span: 11756..11758,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 510,
            column: 40,
            span: 11759..11762,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 510,
            column: 41,
            span: 11762..11763,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 510,
            column: 48,
            span: 11764..11770,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 510,
            column: 49,
            span: 11770..11771,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 510,
            column: 50,
            span: 11771..11772,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 510,
            column: 52,
            span: 11772..11774,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 510,
            column: 53,
            span: 11773..11775,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 510,
            column: 54,
            span: 11775..11776,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 512,
            column: 3,
            span: 11778..11780,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 513,
            column: 8,
            span: 11802..11807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 513,
            column: 0,
            span: 11808..11809,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 514,
            column: 8,
            span: 11812..11817,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 514,
            column: 17,
            span: 11818..11826,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkfloat",
        ),
        position: Position {
            line: 514,
            column: 28,
            span: 11827..11837,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 514,
            column: 30,
            span: 11838..11839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 514,
            column: 31,
            span: 11839..11840,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 514,
            column: 32,
            span: 11840..11841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 515,
            column: 11,
            span: 11846..11852,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 515,
            column: 12,
            span: 11852..11853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 515,
            column: 16,
            span: 11853..11857,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 515,
            column: 17,
            span: 11857..11858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 515,
            column: 21,
            span: 11858..11862,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 515,
            column: 22,
            span: 11862..11863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 515,
            column: 23,
            span: 11863..11864,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 515,
            column: 24,
            span: 11864..11865,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 515,
            column: 27,
            span: 11866..11868,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"float\"",
        ),
        position: Position {
            line: 515,
            column: 35,
            span: 11869..11876,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 515,
            column: 36,
            span: 11876..11877,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 516,
            column: 6,
            span: 11882..11883,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 516,
            column: 8,
            span: 11884..11885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 516,
            column: 10,
            span: 11886..11887,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 516,
            column: 12,
            span: 11888..11889,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 516,
            column: 0,
            span: 11889..11891,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 517,
            column: 0,
            span: 11894..11897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 519,
            column: 4,
            span: 11901..11902,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 519,
            column: 6,
            span: 11903..11904,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 519,
            column: 8,
            span: 11904..11906,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 519,
            column: 9,
            span: 11906..11907,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 519,
            column: 13,
            span: 11908..11911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 519,
            column: 15,
            span: 11912..11913,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 519,
            column: 17,
            span: 11914..11915,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 519,
            column: 21,
            span: 11915..11919,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 519,
            column: 22,
            span: 11919..11920,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 519,
            column: 25,
            span: 11920..11923,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 519,
            column: 28,
            span: 11924..11926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkfloat",
        ),
        position: Position {
            line: 519,
            column: 39,
            span: 11927..11937,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 519,
            column: 40,
            span: 11937..11938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 519,
            column: 41,
            span: 11938..11939,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 519,
            column: 42,
            span: 11939..11940,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 519,
            column: 0,
            span: 11941..11944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 520,
            column: 9,
            span: 11947..11953,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 520,
            column: 10,
            span: 11953..11954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 520,
            column: 11,
            span: 11954..11955,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 520,
            column: 14,
            span: 11956..11958,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 520,
            column: 17,
            span: 11958..11961,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 520,
            column: 18,
            span: 11961..11962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 522,
            column: 4,
            span: 11966..11967,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 522,
            column: 6,
            span: 11968..11969,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 522,
            column: 8,
            span: 11969..11971,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 522,
            column: 9,
            span: 11971..11972,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 522,
            column: 13,
            span: 11973..11976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 522,
            column: 15,
            span: 11977..11978,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 522,
            column: 17,
            span: 11979..11980,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 522,
            column: 19,
            span: 11981..11982,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 522,
            column: 20,
            span: 11981..11983,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 522,
            column: 21,
            span: 11983..11984,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 522,
            column: 23,
            span: 11985..11986,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 522,
            column: 25,
            span: 11985..11988,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 522,
            column: 26,
            span: 11988..11989,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 522,
            column: 28,
            span: 11990..11991,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 522,
            column: 31,
            span: 11990..11994,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 522,
            column: 34,
            span: 11995..11997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkfloat",
        ),
        position: Position {
            line: 522,
            column: 45,
            span: 11998..12008,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 522,
            column: 46,
            span: 12008..12009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 522,
            column: 47,
            span: 12009..12010,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 522,
            column: 48,
            span: 12010..12011,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 522,
            column: 0,
            span: 12012..12015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 523,
            column: 9,
            span: 12018..12024,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 523,
            column: 10,
            span: 12024..12025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 523,
            column: 11,
            span: 12025..12026,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 523,
            column: 14,
            span: 12027..12029,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 523,
            column: 17,
            span: 12029..12032,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 523,
            column: 18,
            span: 12032..12033,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 525,
            column: 8,
            span: 12037..12042,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 525,
            column: 17,
            span: 12043..12051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkint",
        ),
        position: Position {
            line: 525,
            column: 26,
            span: 12052..12060,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 525,
            column: 28,
            span: 12061..12062,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 525,
            column: 29,
            span: 12062..12063,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 525,
            column: 30,
            span: 12063..12064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 526,
            column: 11,
            span: 12069..12075,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 526,
            column: 12,
            span: 12075..12076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 526,
            column: 16,
            span: 12076..12080,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 526,
            column: 17,
            span: 12080..12081,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 526,
            column: 21,
            span: 12081..12085,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 526,
            column: 22,
            span: 12085..12086,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 526,
            column: 23,
            span: 12086..12087,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 526,
            column: 24,
            span: 12087..12088,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 526,
            column: 27,
            span: 12089..12091,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"integer\"",
        ),
        position: Position {
            line: 526,
            column: 37,
            span: 12092..12101,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 526,
            column: 38,
            span: 12101..12102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 527,
            column: 6,
            span: 12107..12108,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 527,
            column: 8,
            span: 12109..12110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 527,
            column: 10,
            span: 12111..12112,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 527,
            column: 12,
            span: 12113..12114,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 527,
            column: 0,
            span: 12114..12116,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 528,
            column: 0,
            span: 12119..12122,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 530,
            column: 8,
            span: 12126..12131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 530,
            column: 10,
            span: 12132..12133,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 530,
            column: 12,
            span: 12134..12135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 530,
            column: 17,
            span: 12136..12140,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 530,
            column: 18,
            span: 12140..12141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxinteger",
        ),
        position: Position {
            line: 530,
            column: 0,
            span: 12141..12151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 531,
            column: 4,
            span: 12154..12155,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 531,
            column: 6,
            span: 12156..12157,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 531,
            column: 8,
            span: 12157..12159,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 531,
            column: 9,
            span: 12159..12160,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 531,
            column: 13,
            span: 12161..12164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 531,
            column: 15,
            span: 12165..12166,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 531,
            column: 17,
            span: 12167..12168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 531,
            column: 19,
            span: 12169..12170,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 531,
            column: 20,
            span: 12170..12171,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 531,
            column: 22,
            span: 12172..12173,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 531,
            column: 24,
            span: 12174..12175,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 531,
            column: 27,
            span: 12175..12178,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 531,
            column: 28,
            span: 12178..12179,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 531,
            column: 30,
            span: 12180..12181,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 531,
            column: 31,
            span: 12180..12182,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 531,
            column: 34,
            span: 12183..12185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkint",
        ),
        position: Position {
            line: 531,
            column: 43,
            span: 12186..12194,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 531,
            column: 44,
            span: 12194..12195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 531,
            column: 45,
            span: 12195..12196,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 531,
            column: 46,
            span: 12196..12197,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 531,
            column: 0,
            span: 12198..12201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 532,
            column: 9,
            span: 12204..12210,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 532,
            column: 10,
            span: 12210..12211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 532,
            column: 11,
            span: 12211..12212,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 532,
            column: 14,
            span: 12213..12215,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 532,
            column: 17,
            span: 12215..12218,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 532,
            column: 18,
            span: 12218..12219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 534,
            column: 4,
            span: 12223..12224,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 534,
            column: 6,
            span: 12225..12226,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 534,
            column: 8,
            span: 12226..12228,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 534,
            column: 9,
            span: 12228..12229,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 534,
            column: 13,
            span: 12230..12233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 534,
            column: 15,
            span: 12234..12235,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 534,
            column: 17,
            span: 12236..12237,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 534,
            column: 19,
            span: 12237..12239,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 534,
            column: 20,
            span: 12239..12240,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".9",
                },
            ),
        ),
        position: Position {
            line: 534,
            column: 25,
            span: 12240..12245,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 534,
            column: 28,
            span: 12246..12248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkint",
        ),
        position: Position {
            line: 534,
            column: 37,
            span: 12249..12257,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 534,
            column: 38,
            span: 12257..12258,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 534,
            column: 39,
            span: 12258..12259,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 534,
            column: 40,
            span: 12259..12260,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 534,
            column: 0,
            span: 12261..12264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 535,
            column: 9,
            span: 12267..12273,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 535,
            column: 10,
            span: 12273..12274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 535,
            column: 11,
            span: 12274..12275,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 535,
            column: 14,
            span: 12276..12278,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 535,
            column: 17,
            span: 12278..12281,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 535,
            column: 18,
            span: 12281..12282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 537,
            column: 4,
            span: 12286..12287,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 537,
            column: 6,
            span: 12288..12289,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 537,
            column: 8,
            span: 12289..12291,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 537,
            column: 9,
            span: 12291..12292,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 537,
            column: 13,
            span: 12293..12296,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 537,
            column: 15,
            span: 12297..12298,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 537,
            column: 17,
            span: 12299..12300,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 537,
            column: 20,
            span: 12300..12303,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 537,
            column: 21,
            span: 12303..12304,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".001",
                },
            ),
        ),
        position: Position {
            line: 537,
            column: 27,
            span: 12304..12310,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 537,
            column: 28,
            span: 12310..12311,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 537,
            column: 30,
            span: 12312..12313,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 537,
            column: 31,
            span: 12312..12314,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 537,
            column: 34,
            span: 12315..12317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkint",
        ),
        position: Position {
            line: 537,
            column: 43,
            span: 12318..12326,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 537,
            column: 44,
            span: 12326..12327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 537,
            column: 45,
            span: 12327..12328,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 537,
            column: 46,
            span: 12328..12329,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 537,
            column: 0,
            span: 12330..12333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 538,
            column: 9,
            span: 12336..12342,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 538,
            column: 10,
            span: 12342..12343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 538,
            column: 11,
            span: 12343..12344,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 538,
            column: 14,
            span: 12345..12347,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 538,
            column: 17,
            span: 12347..12350,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 538,
            column: 18,
            span: 12350..12351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 540,
            column: 4,
            span: 12355..12356,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 540,
            column: 6,
            span: 12357..12358,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 540,
            column: 8,
            span: 12358..12360,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 540,
            column: 9,
            span: 12360..12361,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 540,
            column: 13,
            span: 12362..12365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 540,
            column: 15,
            span: 12366..12367,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 540,
            column: 17,
            span: 12368..12369,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 540,
            column: 19,
            span: 12369..12371,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 540,
            column: 20,
            span: 12371..12372,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10.8\"",
        ),
        position: Position {
            line: 540,
            column: 27,
            span: 12373..12379,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 540,
            column: 30,
            span: 12380..12382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkint",
        ),
        position: Position {
            line: 540,
            column: 39,
            span: 12383..12391,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 540,
            column: 40,
            span: 12391..12392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 540,
            column: 41,
            span: 12392..12393,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 540,
            column: 42,
            span: 12393..12394,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 540,
            column: 0,
            span: 12395..12398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 541,
            column: 9,
            span: 12401..12407,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 541,
            column: 10,
            span: 12407..12408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 541,
            column: 11,
            span: 12408..12409,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 541,
            column: 14,
            span: 12410..12412,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 541,
            column: 17,
            span: 12412..12415,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 541,
            column: 18,
            span: 12415..12416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 543,
            column: 4,
            span: 12420..12421,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 543,
            column: 6,
            span: 12422..12423,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 543,
            column: 8,
            span: 12423..12425,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 543,
            column: 9,
            span: 12425..12426,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 543,
            column: 13,
            span: 12427..12430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 543,
            column: 15,
            span: 12431..12432,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 543,
            column: 17,
            span: 12433..12434,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 543,
            column: 19,
            span: 12434..12436,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 543,
            column: 20,
            span: 12436..12437,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3.4\"",
        ),
        position: Position {
            line: 543,
            column: 26,
            span: 12438..12443,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 543,
            column: 27,
            span: 12443..12444,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 543,
            column: 29,
            span: 12445..12446,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 543,
            column: 30,
            span: 12445..12447,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 543,
            column: 33,
            span: 12448..12450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkint",
        ),
        position: Position {
            line: 543,
            column: 42,
            span: 12451..12459,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 543,
            column: 43,
            span: 12459..12460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 543,
            column: 44,
            span: 12460..12461,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 543,
            column: 45,
            span: 12461..12462,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 543,
            column: 0,
            span: 12463..12466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 544,
            column: 9,
            span: 12469..12475,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 544,
            column: 10,
            span: 12475..12476,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 544,
            column: 11,
            span: 12476..12477,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 544,
            column: 14,
            span: 12478..12480,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 544,
            column: 16,
            span: 12480..12482,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 544,
            column: 17,
            span: 12482..12483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 546,
            column: 4,
            span: 12487..12488,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 546,
            column: 6,
            span: 12489..12490,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 546,
            column: 8,
            span: 12490..12492,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 546,
            column: 9,
            span: 12492..12493,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 546,
            column: 13,
            span: 12494..12497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 546,
            column: 15,
            span: 12498..12499,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 546,
            column: 17,
            span: 12500..12501,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 546,
            column: 19,
            span: 12501..12503,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 546,
            column: 20,
            span: 12503..12504,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" -3.4  \"",
        ),
        position: Position {
            line: 546,
            column: 30,
            span: 12505..12514,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 546,
            column: 31,
            span: 12514..12515,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 546,
            column: 33,
            span: 12516..12517,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 546,
            column: 34,
            span: 12516..12518,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 546,
            column: 37,
            span: 12519..12521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkint",
        ),
        position: Position {
            line: 546,
            column: 46,
            span: 12522..12530,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 546,
            column: 47,
            span: 12530..12531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 546,
            column: 48,
            span: 12531..12532,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 546,
            column: 49,
            span: 12532..12533,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 546,
            column: 0,
            span: 12534..12537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 547,
            column: 9,
            span: 12540..12546,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 547,
            column: 10,
            span: 12546..12547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 547,
            column: 11,
            span: 12547..12548,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 547,
            column: 14,
            span: 12549..12551,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 547,
            column: 16,
            span: 12551..12553,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 547,
            column: 17,
            span: 12553..12554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 549,
            column: 4,
            span: 12558..12559,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 549,
            column: 6,
            span: 12560..12561,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 549,
            column: 8,
            span: 12561..12563,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 549,
            column: 9,
            span: 12563..12564,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 549,
            column: 13,
            span: 12565..12568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 549,
            column: 15,
            span: 12569..12570,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 549,
            column: 17,
            span: 12571..12572,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 549,
            column: 21,
            span: 12572..12576,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 549,
            column: 22,
            span: 12576..12577,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"96.3\"",
        ),
        position: Position {
            line: 549,
            column: 29,
            span: 12578..12584,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 549,
            column: 30,
            span: 12584..12585,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 549,
            column: 32,
            span: 12586..12587,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 549,
            column: 33,
            span: 12586..12588,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 549,
            column: 36,
            span: 12589..12591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkint",
        ),
        position: Position {
            line: 549,
            column: 45,
            span: 12592..12600,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 549,
            column: 46,
            span: 12600..12601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 549,
            column: 47,
            span: 12601..12602,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 549,
            column: 48,
            span: 12602..12603,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 549,
            column: 0,
            span: 12604..12607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 550,
            column: 9,
            span: 12610..12616,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 550,
            column: 10,
            span: 12616..12617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 550,
            column: 11,
            span: 12617..12618,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 550,
            column: 14,
            span: 12619..12621,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 550,
            column: 16,
            span: 12621..12623,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 550,
            column: 17,
            span: 12623..12624,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 552,
            column: 4,
            span: 12628..12629,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 552,
            column: 6,
            span: 12630..12631,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 552,
            column: 8,
            span: 12631..12633,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 552,
            column: 9,
            span: 12633..12634,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 552,
            column: 13,
            span: 12635..12638,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 552,
            column: 15,
            span: 12639..12640,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 552,
            column: 17,
            span: 12641..12642,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 552,
            column: 19,
            span: 12642..12644,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 552,
            column: 20,
            span: 12644..12645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 552,
            column: 25,
            span: 12646..12650,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 552,
            column: 26,
            span: 12650..12651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        position: Position {
            line: 552,
            column: 30,
            span: 12651..12655,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 552,
            column: 33,
            span: 12656..12658,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 552,
            column: 36,
            span: 12659..12661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 552,
            column: 38,
            span: 12662..12663,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 552,
            column: 40,
            span: 12664..12665,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 552,
            column: 43,
            span: 12665..12668,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 552,
            column: 48,
            span: 12669..12673,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 552,
            column: 54,
            span: 12674..12679,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 552,
            column: 58,
            span: 12680..12683,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 552,
            column: 59,
            span: 12683..12684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkint",
        ),
        position: Position {
            line: 552,
            column: 68,
            span: 12685..12693,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 552,
            column: 69,
            span: 12693..12694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 552,
            column: 70,
            span: 12694..12695,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 552,
            column: 71,
            span: 12695..12696,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 552,
            column: 0,
            span: 12697..12700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 553,
            column: 9,
            span: 12703..12709,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 553,
            column: 10,
            span: 12709..12710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 553,
            column: 11,
            span: 12710..12711,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 553,
            column: 14,
            span: 12712..12714,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 553,
            column: 17,
            span: 12714..12717,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 553,
            column: 18,
            span: 12717..12718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 555,
            column: 4,
            span: 12722..12723,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 555,
            column: 6,
            span: 12724..12725,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 555,
            column: 8,
            span: 12725..12727,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 555,
            column: 9,
            span: 12727..12728,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 555,
            column: 13,
            span: 12729..12732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 555,
            column: 15,
            span: 12733..12734,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 555,
            column: 17,
            span: 12735..12736,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 555,
            column: 19,
            span: 12737..12738,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 555,
            column: 20,
            span: 12737..12739,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 555,
            column: 21,
            span: 12739..12740,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 555,
            column: 23,
            span: 12741..12742,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 555,
            column: 27,
            span: 12742..12746,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 555,
            column: 28,
            span: 12746..12747,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        position: Position {
            line: 555,
            column: 32,
            span: 12747..12751,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 555,
            column: 33,
            span: 12751..12752,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 555,
            column: 35,
            span: 12753..12754,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 555,
            column: 36,
            span: 12753..12755,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 555,
            column: 0,
            span: 12756..12758,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 556,
            column: 14,
            span: 12770..12772,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 556,
            column: 16,
            span: 12773..12774,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 556,
            column: 18,
            span: 12775..12776,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 556,
            column: 20,
            span: 12777..12778,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 556,
            column: 22,
            span: 12777..12780,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 556,
            column: 27,
            span: 12781..12785,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 556,
            column: 33,
            span: 12786..12791,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 556,
            column: 37,
            span: 12792..12795,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 556,
            column: 38,
            span: 12795..12796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkint",
        ),
        position: Position {
            line: 556,
            column: 47,
            span: 12797..12805,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 556,
            column: 48,
            span: 12805..12806,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 556,
            column: 49,
            span: 12806..12807,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 556,
            column: 50,
            span: 12807..12808,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 557,
            column: 0,
            span: 12819..12822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 558,
            column: 9,
            span: 12825..12831,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 558,
            column: 10,
            span: 12831..12832,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 558,
            column: 11,
            span: 12832..12833,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 558,
            column: 14,
            span: 12834..12836,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 558,
            column: 17,
            span: 12836..12839,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 558,
            column: 18,
            span: 12839..12840,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 561,
            column: 6,
            span: 12845..12848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 561,
            column: 8,
            span: 12849..12850,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 561,
            column: 10,
            span: 12851..12852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 561,
            column: 15,
            span: 12853..12857,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 561,
            column: 16,
            span: 12857..12858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mininteger",
        ),
        position: Position {
            line: 561,
            column: 26,
            span: 12858..12868,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 561,
            column: 27,
            span: 12868..12869,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 561,
            column: 29,
            span: 12870..12871,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "100",
            },
        ),
        position: Position {
            line: 561,
            column: 35,
            span: 12870..12877,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 561,
            column: 38,
            span: 12878..12880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 561,
            column: 45,
            span: 12881..12887,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 561,
            column: 46,
            span: 12887..12888,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 561,
            column: 51,
            span: 12888..12893,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 561,
            column: 52,
            span: 12893..12894,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 561,
            column: 0,
            span: 12895..12898,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 562,
            column: 6,
            span: 12901..12904,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 562,
            column: 8,
            span: 12905..12906,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 562,
            column: 10,
            span: 12907..12908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 562,
            column: 15,
            span: 12909..12913,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 562,
            column: 16,
            span: 12913..12914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxinteger",
        ),
        position: Position {
            line: 562,
            column: 26,
            span: 12914..12924,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 562,
            column: 27,
            span: 12924..12925,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "100",
            },
        ),
        position: Position {
            line: 562,
            column: 34,
            span: 12925..12932,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 562,
            column: 35,
            span: 12932..12933,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 562,
            column: 37,
            span: 12934..12935,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 562,
            column: 38,
            span: 12934..12936,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 562,
            column: 41,
            span: 12937..12939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 562,
            column: 48,
            span: 12940..12946,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 562,
            column: 49,
            span: 12946..12947,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 562,
            column: 54,
            span: 12947..12952,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 562,
            column: 55,
            span: 12952..12953,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 562,
            column: 0,
            span: 12954..12957,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 564,
            column: 0,
            span: 12959..12962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 566,
            column: 15,
            span: 12964..12978,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 566,
            column: 16,
            span: 12978..12979,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 566,
            column: 17,
            span: 12979..12980,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 571,
            column: 6,
            span: 13009..13014,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 571,
            column: 15,
            span: 13015..13023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 571,
            column: 17,
            span: 13024..13025,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 571,
            column: 19,
            span: 13026..13027,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 571,
            column: 20,
            span: 13027..13028,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 571,
            column: 21,
            span: 13028..13029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 571,
            column: 23,
            span: 13030..13031,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 571,
            column: 24,
            span: 13031..13032,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 572,
            column: 8,
            span: 13035..13040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 572,
            column: 10,
            span: 13041..13042,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 572,
            column: 12,
            span: 13043..13044,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 572,
            column: 14,
            span: 13045..13046,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 572,
            column: 15,
            span: 13046..13047,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 572,
            column: 16,
            span: 13047..13048,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 572,
            column: 20,
            span: 13049..13052,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 572,
            column: 22,
            span: 13053..13054,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 572,
            column: 23,
            span: 13054..13055,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 572,
            column: 24,
            span: 13054..13056,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 572,
            column: 25,
            span: 13056..13057,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 572,
            column: 26,
            span: 13057..13058,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 572,
            column: 29,
            span: 13059..13061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 572,
            column: 31,
            span: 13062..13063,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 572,
            column: 32,
            span: 13063..13064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 572,
            column: 33,
            span: 13064..13065,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 572,
            column: 34,
            span: 13065..13066,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 572,
            column: 36,
            span: 13067..13068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 572,
            column: 38,
            span: 13069..13070,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 572,
            column: 39,
            span: 13070..13071,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 572,
            column: 41,
            span: 13070..13073,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 572,
            column: 0,
            span: 13074..13077,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 573,
            column: 9,
            span: 13080..13086,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 573,
            column: 18,
            span: 13087..13095,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 573,
            column: 20,
            span: 13096..13097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 573,
            column: 21,
            span: 13097..13098,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 573,
            column: 22,
            span: 13098..13099,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 573,
            column: 23,
            span: 13099..13100,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 573,
            column: 24,
            span: 13100..13101,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 574,
            column: 14,
            span: 13113..13115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 574,
            column: 16,
            span: 13116..13117,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 574,
            column: 18,
            span: 13118..13119,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 574,
            column: 20,
            span: 13119..13121,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 574,
            column: 0,
            span: 13122..13126,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 575,
            column: 15,
            span: 13140..13141,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 575,
            column: 17,
            span: 13142..13143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 575,
            column: 19,
            span: 13144..13145,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 575,
            column: 20,
            span: 13145..13146,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 575,
            column: 0,
            span: 13145..13147,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 576,
            column: 20,
            span: 13161..13167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 576,
            column: 22,
            span: 13168..13169,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 576,
            column: 23,
            span: 13169..13170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 576,
            column: 29,
            span: 13171..13176,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 576,
            column: 30,
            span: 13176..13177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 576,
            column: 36,
            span: 13177..13183,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 576,
            column: 37,
            span: 13183..13184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 576,
            column: 38,
            span: 13184..13185,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 576,
            column: 39,
            span: 13185..13186,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 577,
            column: 0,
            span: 13198..13201,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 578,
            column: 13,
            span: 13211..13214,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 578,
            column: 14,
            span: 13214..13215,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 578,
            column: 18,
            span: 13216..13219,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 578,
            column: 19,
            span: 13219..13220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 578,
            column: 0,
            span: 13221..13222,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 579,
            column: 0,
            span: 13223..13226,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 581,
            column: 6,
            span: 13228..13233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 581,
            column: 8,
            span: 13234..13235,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 581,
            column: 10,
            span: 13236..13237,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 581,
            column: 0,
            span: 13237..13239,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 582,
            column: 4,
            span: 13240..13243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 582,
            column: 6,
            span: 13244..13245,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 582,
            column: 7,
            span: 13245..13246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 582,
            column: 8,
            span: 13246..13247,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 582,
            column: 9,
            span: 13247..13248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 582,
            column: 10,
            span: 13248..13249,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 582,
            column: 11,
            span: 13249..13250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 582,
            column: 12,
            span: 13250..13251,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 582,
            column: 13,
            span: 13251..13252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 582,
            column: 14,
            span: 13252..13253,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 582,
            column: 17,
            span: 13254..13256,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 582,
            column: 19,
            span: 13257..13258,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 582,
            column: 20,
            span: 13258..13259,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 582,
            column: 21,
            span: 13258..13260,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 582,
            column: 22,
            span: 13260..13261,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 582,
            column: 23,
            span: 13260..13262,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 582,
            column: 24,
            span: 13262..13263,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 582,
            column: 0,
            span: 13264..13266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 583,
            column: 4,
            span: 13269..13270,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 583,
            column: 6,
            span: 13271..13272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 583,
            column: 8,
            span: 13273..13274,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 583,
            column: 9,
            span: 13274..13275,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 583,
            column: 0,
            span: 13274..13276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 584,
            column: 9,
            span: 13279..13285,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 584,
            column: 10,
            span: 13285..13286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 584,
            column: 11,
            span: 13286..13287,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 584,
            column: 14,
            span: 13288..13290,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 584,
            column: 17,
            span: 13290..13293,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 584,
            column: 21,
            span: 13294..13297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 584,
            column: 23,
            span: 13298..13299,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 584,
            column: 26,
            span: 13300..13302,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 584,
            column: 29,
            span: 13302..13305,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 584,
            column: 33,
            span: 13306..13309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 584,
            column: 35,
            span: 13310..13311,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 584,
            column: 38,
            span: 13312..13314,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 584,
            column: 41,
            span: 13314..13317,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 584,
            column: 45,
            span: 13318..13321,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 584,
            column: 47,
            span: 13322..13323,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 584,
            column: 50,
            span: 13324..13326,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 584,
            column: 54,
            span: 13327..13330,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 584,
            column: 55,
            span: 13330..13331,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 585,
            column: 0,
            span: 13332..13335,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 586,
            column: 7,
            span: 13336..13342,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 586,
            column: 8,
            span: 13342..13343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 586,
            column: 9,
            span: 13343..13344,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 586,
            column: 12,
            span: 13345..13347,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 586,
            column: 14,
            span: 13347..13349,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 586,
            column: 15,
            span: 13349..13350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 591,
            column: 2,
            span: 13397..13398,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 591,
            column: 4,
            span: 13399..13400,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 591,
            column: 6,
            span: 13401..13402,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 591,
            column: 7,
            span: 13402..13403,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 592,
            column: 0,
            span: 13404..13406,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 593,
            column: 8,
            span: 13409..13414,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 593,
            column: 10,
            span: 13415..13416,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 593,
            column: 11,
            span: 13416..13417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 593,
            column: 12,
            span: 13417..13418,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 593,
            column: 13,
            span: 13418..13419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 593,
            column: 14,
            span: 13419..13420,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 593,
            column: 16,
            span: 13421..13422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 593,
            column: 22,
            span: 13423..13428,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 593,
            column: 23,
            span: 13428..13429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 593,
            column: 24,
            span: 13429..13430,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 593,
            column: 25,
            span: 13430..13431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 594,
            column: 9,
            span: 13434..13440,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 594,
            column: 10,
            span: 13440..13441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 594,
            column: 14,
            span: 13441..13445,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 594,
            column: 15,
            span: 13445..13446,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 594,
            column: 16,
            span: 13446..13447,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 594,
            column: 17,
            span: 13447..13448,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 594,
            column: 20,
            span: 13449..13451,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'function'",
        ),
        position: Position {
            line: 594,
            column: 31,
            span: 13452..13462,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 594,
            column: 35,
            span: 13463..13466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 594,
            column: 37,
            span: 13467..13468,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 594,
            column: 40,
            span: 13469..13471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 594,
            column: 42,
            span: 13472..13473,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 594,
            column: 46,
            span: 13474..13477,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 594,
            column: 48,
            span: 13478..13479,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 594,
            column: 51,
            span: 13480..13482,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 594,
            column: 55,
            span: 13483..13486,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 594,
            column: 56,
            span: 13486..13487,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 595,
            column: 0,
            span: 13488..13491,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 597,
            column: 6,
            span: 13493..13498,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 597,
            column: 15,
            span: 13499..13507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 597,
            column: 19,
            span: 13508..13511,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 597,
            column: 21,
            span: 13512..13513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 597,
            column: 22,
            span: 13513..13514,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 597,
            column: 23,
            span: 13514..13515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 597,
            column: 24,
            span: 13515..13516,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 597,
            column: 25,
            span: 13516..13517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 598,
            column: 9,
            span: 13520..13526,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 598,
            column: 10,
            span: 13526..13527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 598,
            column: 11,
            span: 13527..13528,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 598,
            column: 14,
            span: 13529..13531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 598,
            column: 16,
            span: 13532..13533,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 598,
            column: 17,
            span: 13533..13534,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 599,
            column: 5,
            span: 13537..13539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 599,
            column: 7,
            span: 13540..13541,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 599,
            column: 10,
            span: 13542..13544,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 599,
            column: 13,
            span: 13544..13547,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 599,
            column: 18,
            span: 13548..13552,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 599,
            column: 25,
            span: 13553..13559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 599,
            column: 27,
            span: 13560..13561,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 599,
            column: 28,
            span: 13561..13562,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 599,
            column: 29,
            span: 13561..13563,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 599,
            column: 30,
            span: 13563..13564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 599,
            column: 32,
            span: 13565..13566,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 599,
            column: 33,
            span: 13566..13567,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 599,
            column: 34,
            span: 13566..13568,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 599,
            column: 0,
            span: 13569..13572,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 600,
            column: 0,
            span: 13573..13576,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 602,
            column: 6,
            span: 13578..13583,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 602,
            column: 15,
            span: 13584..13592,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        position: Position {
            line: 602,
            column: 20,
            span: 13593..13597,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 602,
            column: 22,
            span: 13598..13599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 602,
            column: 23,
            span: 13599..13600,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 602,
            column: 24,
            span: 13600..13601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 602,
            column: 25,
            span: 13601..13602,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 602,
            column: 26,
            span: 13602..13603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 603,
            column: 4,
            span: 13606..13607,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 603,
            column: 6,
            span: 13608..13609,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 603,
            column: 8,
            span: 13610..13611,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 603,
            column: 10,
            span: 13612..13613,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 603,
            column: 0,
            span: 13613..13615,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 604,
            column: 9,
            span: 13618..13624,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 604,
            column: 10,
            span: 13624..13625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 604,
            column: 11,
            span: 13625..13626,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 604,
            column: 14,
            span: 13627..13629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 604,
            column: 16,
            span: 13630..13631,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 604,
            column: 17,
            span: 13631..13632,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 605,
            column: 5,
            span: 13635..13637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 605,
            column: 7,
            span: 13638..13639,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 605,
            column: 10,
            span: 13640..13642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 605,
            column: 12,
            span: 13643..13644,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 605,
            column: 13,
            span: 13644..13645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 605,
            column: 14,
            span: 13645..13646,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 605,
            column: 19,
            span: 13647..13651,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 605,
            column: 26,
            span: 13652..13658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 605,
            column: 28,
            span: 13659..13660,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 605,
            column: 29,
            span: 13660..13661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 605,
            column: 30,
            span: 13661..13662,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 605,
            column: 31,
            span: 13662..13663,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 605,
            column: 32,
            span: 13663..13664,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 605,
            column: 33,
            span: 13664..13665,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 605,
            column: 0,
            span: 13666..13669,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 606,
            column: 0,
            span: 13670..13673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 608,
            column: 13,
            span: 13675..13687,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 608,
            column: 14,
            span: 13687..13688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 608,
            column: 15,
            span: 13688..13689,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 608,
            column: 16,
            span: 13689..13690,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 608,
            column: 18,
            span: 13691..13692,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__pairs",
        ),
        position: Position {
            line: 608,
            column: 25,
            span: 13692..13699,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 608,
            column: 27,
            span: 13700..13701,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 608,
            column: 36,
            span: 13702..13710,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 608,
            column: 38,
            span: 13711..13712,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 608,
            column: 39,
            span: 13712..13713,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 608,
            column: 40,
            span: 13713..13714,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 608,
            column: 47,
            span: 13715..13721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 608,
            column: 51,
            span: 13722..13725,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 608,
            column: 52,
            span: 13725..13726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 608,
            column: 54,
            span: 13727..13728,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 608,
            column: 55,
            span: 13728..13729,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 608,
            column: 57,
            span: 13729..13731,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 608,
            column: 61,
            span: 13732..13735,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 608,
            column: 62,
            span: 13735..13736,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 608,
            column: 63,
            span: 13736..13737,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 610,
            column: 6,
            span: 13739..13744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 610,
            column: 8,
            span: 13745..13746,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 610,
            column: 10,
            span: 13747..13748,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 610,
            column: 0,
            span: 13748..13750,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 611,
            column: 4,
            span: 13751..13754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 611,
            column: 6,
            span: 13755..13756,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 611,
            column: 7,
            span: 13756..13757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 611,
            column: 8,
            span: 13757..13758,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 611,
            column: 11,
            span: 13759..13761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 611,
            column: 17,
            span: 13762..13767,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 611,
            column: 18,
            span: 13767..13768,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 611,
            column: 19,
            span: 13768..13769,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 611,
            column: 20,
            span: 13769..13770,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 611,
            column: 0,
            span: 13771..13773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 612,
            column: 4,
            span: 13776..13777,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 612,
            column: 6,
            span: 13778..13779,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 612,
            column: 8,
            span: 13780..13781,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 612,
            column: 10,
            span: 13782..13783,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 612,
            column: 0,
            span: 13783..13785,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 613,
            column: 9,
            span: 13788..13794,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 613,
            column: 10,
            span: 13794..13795,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 613,
            column: 11,
            span: 13795..13796,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 613,
            column: 14,
            span: 13797..13799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 613,
            column: 16,
            span: 13800..13801,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 613,
            column: 20,
            span: 13802..13805,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 613,
            column: 22,
            span: 13806..13807,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 613,
            column: 25,
            span: 13808..13810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 613,
            column: 27,
            span: 13811..13812,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 613,
            column: 28,
            span: 13812..13813,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 613,
            column: 29,
            span: 13812..13814,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 613,
            column: 30,
            span: 13814..13815,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 614,
            column: 0,
            span: 13816..13819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 616,
            column: 2,
            span: 13821..13822,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 616,
            column: 3,
            span: 13822..13823,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 616,
            column: 4,
            span: 13823..13824,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 616,
            column: 6,
            span: 13825..13826,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 616,
            column: 0,
            span: 13826..13828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 617,
            column: 2,
            span: 13829..13830,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 617,
            column: 3,
            span: 13830..13831,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 617,
            column: 4,
            span: 13830..13832,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 617,
            column: 5,
            span: 13832..13833,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 617,
            column: 7,
            span: 13834..13835,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 617,
            column: 0,
            span: 13835..13838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 620,
            column: 2,
            span: 13875..13876,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 620,
            column: 4,
            span: 13877..13878,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 620,
            column: 6,
            span: 13879..13880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 620,
            column: 7,
            span: 13880..13881,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 620,
            column: 8,
            span: 13881..13882,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 620,
            column: 10,
            span: 13881..13884,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 620,
            column: 11,
            span: 13884..13885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 621,
            column: 13,
            span: 13886..13898,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 621,
            column: 14,
            span: 13898..13899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 621,
            column: 15,
            span: 13899..13900,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 621,
            column: 16,
            span: 13900..13901,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 621,
            column: 18,
            span: 13902..13903,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        position: Position {
            line: 621,
            column: 26,
            span: 13904..13911,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 621,
            column: 28,
            span: 13912..13913,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 621,
            column: 37,
            span: 13914..13922,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 621,
            column: 39,
            span: 13923..13924,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 621,
            column: 40,
            span: 13924..13925,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 621,
            column: 41,
            span: 13925..13926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 621,
            column: 42,
            span: 13926..13927,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 621,
            column: 43,
            span: 13927..13928,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 622,
            column: 24,
            span: 13950..13952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 622,
            column: 26,
            span: 13953..13954,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 622,
            column: 29,
            span: 13955..13957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 622,
            column: 31,
            span: 13958..13959,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 622,
            column: 32,
            span: 13959..13960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 622,
            column: 33,
            span: 13960..13961,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 622,
            column: 38,
            span: 13962..13966,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 622,
            column: 45,
            span: 13967..13973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 622,
            column: 47,
            span: 13974..13975,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 622,
            column: 49,
            span: 13976..13977,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 622,
            column: 52,
            span: 13977..13980,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 622,
            column: 56,
            span: 13981..13984,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 623,
            column: 22,
            span: 14004..14007,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 623,
            column: 23,
            span: 14007..14008,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 623,
            column: 24,
            span: 14008..14009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 624,
            column: 2,
            span: 14010..14011,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 624,
            column: 4,
            span: 14012..14013,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 624,
            column: 0,
            span: 14013..14015,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 625,
            column: 4,
            span: 14016..14019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 625,
            column: 6,
            span: 14020..14021,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 625,
            column: 7,
            span: 14021..14022,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 625,
            column: 8,
            span: 14022..14023,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 625,
            column: 11,
            span: 14024..14026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        position: Position {
            line: 625,
            column: 18,
            span: 14027..14033,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 625,
            column: 19,
            span: 14033..14034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 625,
            column: 20,
            span: 14034..14035,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 625,
            column: 21,
            span: 14035..14036,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 625,
            column: 0,
            span: 14037..14039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 626,
            column: 4,
            span: 14042..14043,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 626,
            column: 6,
            span: 14044..14045,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 626,
            column: 8,
            span: 14046..14047,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 626,
            column: 10,
            span: 14048..14049,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 626,
            column: 0,
            span: 14049..14051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 627,
            column: 9,
            span: 14054..14060,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 627,
            column: 10,
            span: 14060..14061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 627,
            column: 11,
            span: 14061..14062,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 627,
            column: 14,
            span: 14063..14065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 627,
            column: 16,
            span: 14066..14067,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 627,
            column: 20,
            span: 14068..14071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 627,
            column: 22,
            span: 14072..14073,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 627,
            column: 25,
            span: 14074..14076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 627,
            column: 27,
            span: 14077..14078,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 627,
            column: 29,
            span: 14079..14080,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 627,
            column: 32,
            span: 14080..14083,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 627,
            column: 33,
            span: 14083..14084,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 628,
            column: 0,
            span: 14085..14088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 629,
            column: 7,
            span: 14089..14095,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 629,
            column: 8,
            span: 14095..14096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 629,
            column: 9,
            span: 14096..14097,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 629,
            column: 12,
            span: 14098..14100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 629,
            column: 14,
            span: 14101..14102,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 629,
            column: 15,
            span: 14102..14103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 629,
            column: 16,
            span: 14103..14104,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 629,
            column: 17,
            span: 14104..14105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 631,
            column: 6,
            span: 14107..14112,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        position: Position {
            line: 631,
            column: 10,
            span: 14112..14116,
        },
    },
]
