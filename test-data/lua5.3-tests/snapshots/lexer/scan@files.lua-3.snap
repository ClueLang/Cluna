---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/files.lua
---
[
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 4,
            column: 6,
            span: 100..105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 4,
            column: 12,
            span: 106..111,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 4,
            column: 14,
            span: 112..113,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 4,
            column: 22,
            span: 114..121,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        position: Position {
            line: 4,
            column: 30,
            span: 122..129,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 6,
            column: 6,
            span: 131..136,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        position: Position {
            line: 6,
            column: 13,
            span: 137..143,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 6,
            column: 15,
            span: 144..145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 6,
            column: 20,
            span: 146..150,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 6,
            column: 21,
            span: 150..151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxinteger",
        ),
        position: Position {
            line: 6,
            column: 0,
            span: 151..161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 8,
            column: 7,
            span: 163..169,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 8,
            column: 8,
            span: 169..170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 8,
            column: 12,
            span: 170..174,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 8,
            column: 13,
            span: 174..175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 8,
            column: 15,
            span: 175..177,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 8,
            column: 16,
            span: 177..178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getenv",
        ),
        position: Position {
            line: 8,
            column: 22,
            span: 178..184,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"PATH\"",
        ),
        position: Position {
            line: 8,
            column: 28,
            span: 184..190,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 8,
            column: 29,
            span: 190..191,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 8,
            column: 32,
            span: 192..194,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 8,
            column: 41,
            span: 195..203,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 8,
            column: 42,
            span: 203..204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 10,
            column: 7,
            span: 206..212,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 10,
            column: 8,
            span: 212..213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 10,
            column: 10,
            span: 213..215,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 10,
            column: 11,
            span: 215..216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 10,
            column: 16,
            span: 216..221,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 10,
            column: 17,
            span: 221..222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 10,
            column: 19,
            span: 222..224,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 10,
            column: 20,
            span: 224..225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        position: Position {
            line: 10,
            column: 25,
            span: 225..230,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 10,
            column: 26,
            span: 230..231,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 10,
            column: 29,
            span: 232..234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 10,
            column: 32,
            span: 235..237,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 10,
            column: 33,
            span: 237..238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        position: Position {
            line: 10,
            column: 38,
            span: 238..243,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 10,
            column: 39,
            span: 243..244,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 11,
            column: 7,
            span: 245..251,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 11,
            column: 8,
            span: 251..252,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 11,
            column: 11,
            span: 252..255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 11,
            column: 17,
            span: 256..261,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 11,
            column: 18,
            span: 261..262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 11,
            column: 20,
            span: 262..264,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 11,
            column: 21,
            span: 264..265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 11,
            column: 26,
            span: 265..270,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 11,
            column: 27,
            span: 270..271,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"non-existent-file\"",
        ),
        position: Position {
            line: 11,
            column: 47,
            span: 272..291,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 11,
            column: 48,
            span: 291..292,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 11,
            column: 49,
            span: 292..293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 12,
            column: 7,
            span: 294..300,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 12,
            column: 8,
            span: 300..301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 12,
            column: 10,
            span: 301..303,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 12,
            column: 11,
            span: 303..304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 12,
            column: 17,
            span: 304..310,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 12,
            column: 18,
            span: 310..311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 12,
            column: 20,
            span: 311..313,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 12,
            column: 21,
            span: 313..314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        position: Position {
            line: 12,
            column: 27,
            span: 314..320,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 12,
            column: 28,
            span: 320..321,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 12,
            column: 31,
            span: 322..324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 12,
            column: 34,
            span: 325..327,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 12,
            column: 35,
            span: 327..328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        position: Position {
            line: 12,
            column: 41,
            span: 328..334,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 12,
            column: 42,
            span: 334..335,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 15,
            column: 6,
            span: 338..343,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 15,
            column: 15,
            span: 344..352,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testerr",
        ),
        position: Position {
            line: 15,
            column: 23,
            span: 353..360,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 15,
            column: 25,
            span: 361..362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 15,
            column: 28,
            span: 362..365,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 15,
            column: 29,
            span: 365..366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 15,
            column: 31,
            span: 367..368,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 15,
            column: 32,
            span: 368..369,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 15,
            column: 36,
            span: 370..373,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 15,
            column: 37,
            span: 373..374,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 16,
            column: 8,
            span: 377..382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        position: Position {
            line: 16,
            column: 13,
            span: 383..387,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 16,
            column: 14,
            span: 387..388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 16,
            column: 18,
            span: 389..392,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 16,
            column: 20,
            span: 393..394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 16,
            column: 26,
            span: 395..400,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 16,
            column: 27,
            span: 400..401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 16,
            column: 28,
            span: 401..402,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 16,
            column: 29,
            span: 402..403,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 16,
            column: 33,
            span: 404..407,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 16,
            column: 34,
            span: 407..408,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 17,
            column: 9,
            span: 411..417,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 17,
            column: 11,
            span: 418..419,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 17,
            column: 14,
            span: 419..422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        position: Position {
            line: 17,
            column: 19,
            span: 423..427,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 17,
            column: 23,
            span: 428..431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 17,
            column: 30,
            span: 432..438,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 17,
            column: 31,
            span: 438..439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 17,
            column: 35,
            span: 439..443,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 17,
            column: 36,
            span: 443..444,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 17,
            column: 39,
            span: 444..447,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 17,
            column: 40,
            span: 447..448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 17,
            column: 44,
            span: 449..452,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 17,
            column: 45,
            span: 452..453,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 17,
            column: 47,
            span: 453..455,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 17,
            column: 48,
            span: 455..456,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 17,
            column: 53,
            span: 457..461,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 17,
            column: 54,
            span: 461..462,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 17,
            column: 55,
            span: 462..463,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 18,
            column: 0,
            span: 464..467,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 21,
            column: 6,
            span: 470..475,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 21,
            column: 15,
            span: 476..484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 21,
            column: 24,
            span: 485..493,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 26,
            span: 494..495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 21,
            column: 29,
            span: 495..498,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 21,
            column: 30,
            span: 498..499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 21,
            column: 32,
            span: 500..501,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 21,
            column: 33,
            span: 501..502,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 21,
            column: 37,
            span: 503..506,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 38,
            span: 506..507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 22,
            column: 9,
            span: 510..516,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 22,
            column: 10,
            span: 516..517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testerr",
        ),
        position: Position {
            line: 22,
            column: 17,
            span: 517..524,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 22,
            column: 18,
            span: 524..525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 22,
            column: 21,
            span: 525..528,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 22,
            column: 22,
            span: 528..529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 22,
            column: 24,
            span: 530..531,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 22,
            column: 25,
            span: 531..532,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 22,
            column: 29,
            span: 533..536,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 22,
            column: 30,
            span: 536..537,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 22,
            column: 31,
            span: 537..538,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 23,
            column: 0,
            span: 539..542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 27,
            column: 7,
            span: 576..582,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 27,
            column: 8,
            span: 582..583,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 27,
            column: 11,
            span: 583..586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 27,
            column: 14,
            span: 587..589,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 27,
            column: 15,
            span: 589..590,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 27,
            column: 20,
            span: 590..595,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 27,
            column: 21,
            span: 595..596,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 27,
            column: 23,
            span: 596..598,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 27,
            column: 24,
            span: 598..599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        position: Position {
            line: 27,
            column: 29,
            span: 599..604,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 27,
            column: 30,
            span: 604..605,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 27,
            column: 0,
            span: 606..609,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 28,
            column: 11,
            span: 617..620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 28,
            column: 14,
            span: 621..623,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 28,
            column: 15,
            span: 623..624,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        position: Position {
            line: 28,
            column: 21,
            span: 624..630,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 28,
            column: 22,
            span: 630..631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 28,
            column: 27,
            span: 631..636,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 28,
            span: 636..637,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 29,
            span: 637..638,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 28,
            column: 0,
            span: 639..642,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 29,
            column: 11,
            span: 650..653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 29,
            column: 14,
            span: 654..656,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 29,
            column: 15,
            span: 656..657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stderr",
        ),
        position: Position {
            line: 29,
            column: 21,
            span: 657..663,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 29,
            column: 22,
            span: 663..664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 29,
            column: 27,
            span: 664..669,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 29,
            column: 28,
            span: 669..670,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 29,
            span: 670..671,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 30,
            span: 671..672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 32,
            column: 7,
            span: 675..681,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 8,
            span: 681..682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 32,
            column: 12,
            span: 682..686,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 13,
            span: 686..687,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 32,
            column: 15,
            span: 687..689,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 32,
            column: 16,
            span: 689..690,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 32,
            column: 21,
            span: 690..695,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 22,
            span: 695..696,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 23,
            span: 696..697,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 24,
            span: 697..698,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 32,
            column: 27,
            span: 699..701,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"userdata\"",
        ),
        position: Position {
            line: 32,
            column: 38,
            span: 702..712,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 32,
            column: 42,
            span: 713..716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 32,
            column: 45,
            span: 717..719,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 32,
            column: 46,
            span: 719..720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 32,
            column: 50,
            span: 720..724,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 51,
            span: 724..725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 32,
            column: 53,
            span: 725..727,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 32,
            column: 54,
            span: 727..728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 32,
            column: 60,
            span: 728..734,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 61,
            span: 734..735,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 62,
            span: 735..736,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 63,
            span: 736..737,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 32,
            column: 66,
            span: 738..740,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file\"",
        ),
        position: Position {
            line: 32,
            column: 73,
            span: 741..747,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 74,
            span: 747..748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 33,
            column: 7,
            span: 749..755,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 8,
            span: 755..756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 33,
            column: 12,
            span: 756..760,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 13,
            span: 760..761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 33,
            column: 15,
            span: 761..763,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 33,
            column: 16,
            span: 763..764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        position: Position {
            line: 33,
            column: 21,
            span: 764..769,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 22,
            span: 769..770,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 33,
            column: 25,
            span: 771..773,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"userdata\"",
        ),
        position: Position {
            line: 33,
            column: 36,
            span: 774..784,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 33,
            column: 40,
            span: 785..788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 33,
            column: 43,
            span: 789..791,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 33,
            column: 44,
            span: 791..792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 33,
            column: 48,
            span: 792..796,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 49,
            span: 796..797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 33,
            column: 51,
            span: 797..799,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 33,
            column: 52,
            span: 799..800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stderr",
        ),
        position: Position {
            line: 33,
            column: 58,
            span: 800..806,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 59,
            span: 806..807,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 33,
            column: 62,
            span: 808..810,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file\"",
        ),
        position: Position {
            line: 33,
            column: 69,
            span: 811..817,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 70,
            span: 817..818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 34,
            column: 7,
            span: 819..825,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 34,
            column: 8,
            span: 825..826,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 34,
            column: 11,
            span: 826..829,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 34,
            column: 14,
            span: 830..832,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 34,
            column: 15,
            span: 832..833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 34,
            column: 19,
            span: 833..837,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 34,
            column: 20,
            span: 837..838,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 34,
            column: 21,
            span: 837..839,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 34,
            column: 22,
            span: 839..840,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 34,
            column: 23,
            span: 840..841,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 35,
            column: 6,
            span: 842..847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 35,
            column: 8,
            span: 848..849,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 35,
            column: 10,
            span: 850..851,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 35,
            column: 12,
            span: 852..853,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 35,
            column: 13,
            span: 853..854,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 35,
            column: 14,
            span: 854..855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 35,
            column: 27,
            span: 856..868,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 35,
            column: 28,
            span: 868..869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 35,
            column: 29,
            span: 869..870,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 35,
            column: 30,
            span: 870..871,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 35,
            column: 32,
            span: 872..873,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 35,
            column: 33,
            span: 873..874,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 35,
            column: 34,
            span: 874..875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 36,
            column: 7,
            span: 876..882,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 36,
            column: 8,
            span: 882..883,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 36,
            column: 11,
            span: 883..886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 36,
            column: 14,
            span: 887..889,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 36,
            column: 15,
            span: 889..890,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 36,
            column: 19,
            span: 890..894,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 36,
            column: 20,
            span: 894..895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 36,
            column: 21,
            span: 895..896,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 36,
            column: 22,
            span: 896..897,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 36,
            column: 23,
            span: 897..898,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 38,
            column: 7,
            span: 900..906,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 38,
            column: 8,
            span: 906..907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 38,
            column: 20,
            span: 907..919,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 38,
            column: 21,
            span: 919..920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 38,
            column: 23,
            span: 920..922,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 38,
            column: 24,
            span: 922..923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 38,
            column: 29,
            span: 923..928,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 38,
            column: 30,
            span: 928..929,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 38,
            column: 31,
            span: 929..930,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 38,
            column: 32,
            span: 930..931,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 38,
            column: 33,
            span: 931..932,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__name",
        ),
        position: Position {
            line: 38,
            column: 39,
            span: 932..938,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 38,
            column: 42,
            span: 939..941,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"FILE*\"",
        ),
        position: Position {
            line: 38,
            column: 50,
            span: 942..949,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 38,
            column: 51,
            span: 949..950,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 40,
            column: 6,
            span: 952..957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 40,
            column: 8,
            span: 958..959,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 9,
            span: 959..960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 40,
            column: 10,
            span: 960..961,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 11,
            span: 961..962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 40,
            column: 12,
            span: 962..963,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 40,
            column: 14,
            span: 964..965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 40,
            column: 17,
            span: 966..968,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 40,
            column: 18,
            span: 968..969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 40,
            column: 22,
            span: 969..973,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 23,
            span: 973..974,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu_nao_existe'",
        ),
        position: Position {
            line: 40,
            column: 40,
            span: 974..991,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 41,
            span: 991..992,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 41,
            column: 7,
            span: 993..999,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 8,
            span: 999..1000,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 41,
            column: 11,
            span: 1000..1003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 41,
            column: 13,
            span: 1004..1005,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 41,
            column: 17,
            span: 1006..1009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 41,
            column: 22,
            span: 1010..1014,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 23,
            span: 1014..1015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 41,
            column: 24,
            span: 1015..1016,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 25,
            span: 1016..1017,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 41,
            column: 28,
            span: 1018..1020,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 41,
            column: 37,
            span: 1021..1029,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 41,
            column: 41,
            span: 1030..1033,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 41,
            column: 46,
            span: 1034..1038,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 47,
            span: 1038..1039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 41,
            column: 48,
            span: 1039..1040,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 49,
            span: 1040..1041,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 41,
            column: 52,
            span: 1042..1044,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        position: Position {
            line: 41,
            column: 61,
            span: 1045..1053,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 62,
            span: 1053..1054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 43,
            column: 2,
            span: 1056..1057,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 43,
            column: 3,
            span: 1057..1058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 43,
            column: 4,
            span: 1058..1059,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 43,
            column: 5,
            span: 1059..1060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 43,
            column: 6,
            span: 1060..1061,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 43,
            column: 8,
            span: 1062..1063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 43,
            column: 11,
            span: 1064..1066,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 43,
            column: 12,
            span: 1066..1067,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 43,
            column: 16,
            span: 1067..1071,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 17,
            span: 1071..1072,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'/a/b/c/d'",
        ),
        position: Position {
            line: 43,
            column: 27,
            span: 1072..1082,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 43,
            column: 28,
            span: 1082..1083,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'w'",
        ),
        position: Position {
            line: 43,
            column: 32,
            span: 1084..1087,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 33,
            span: 1087..1088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 44,
            column: 7,
            span: 1089..1095,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 44,
            column: 8,
            span: 1095..1096,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 44,
            column: 11,
            span: 1096..1099,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 44,
            column: 13,
            span: 1100..1101,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 44,
            column: 17,
            span: 1102..1105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 44,
            column: 22,
            span: 1106..1110,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 44,
            column: 23,
            span: 1110..1111,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 44,
            column: 24,
            span: 1111..1112,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 44,
            column: 25,
            span: 1112..1113,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 44,
            column: 28,
            span: 1114..1116,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 44,
            column: 37,
            span: 1117..1125,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 44,
            column: 41,
            span: 1126..1129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 44,
            column: 46,
            span: 1130..1134,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 44,
            column: 47,
            span: 1134..1135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 44,
            column: 48,
            span: 1135..1136,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 44,
            column: 49,
            span: 1136..1137,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 44,
            column: 52,
            span: 1138..1140,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        position: Position {
            line: 44,
            column: 61,
            span: 1141..1149,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 44,
            column: 62,
            span: 1149..1150,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 46,
            column: 6,
            span: 1152..1157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 46,
            column: 11,
            span: 1158..1162,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 46,
            column: 13,
            span: 1163..1164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 46,
            column: 16,
            span: 1165..1167,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 46,
            column: 17,
            span: 1167..1168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        position: Position {
            line: 46,
            column: 24,
            span: 1168..1175,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 25,
            span: 1175..1176,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 26,
            span: 1176..1177,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 47,
            column: 6,
            span: 1178..1183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 47,
            column: 8,
            span: 1184..1185,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 47,
            column: 9,
            span: 1185..1186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 47,
            column: 13,
            span: 1187..1190,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 47,
            column: 15,
            span: 1191..1192,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 47,
            column: 18,
            span: 1193..1195,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 47,
            column: 19,
            span: 1195..1196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 47,
            column: 23,
            span: 1196..1200,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 24,
            span: 1200..1201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 47,
            column: 28,
            span: 1201..1205,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 47,
            column: 29,
            span: 1205..1206,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        position: Position {
            line: 47,
            column: 33,
            span: 1207..1210,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 34,
            span: 1210..1211,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 48,
            column: 3,
            span: 1212..1214,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 48,
            column: 7,
            span: 1215..1218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 48,
            column: 9,
            span: 1219..1220,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 48,
            column: 0,
            span: 1221..1225,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 4,
            span: 1228..1229,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        position: Position {
            line: 49,
            column: 11,
            span: 1229..1236,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 49,
            column: 14,
            span: 1237..1239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 49,
            column: 20,
            span: 1240..1245,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 21,
            span: 1245..1246,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 22,
            span: 1246..1247,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'os.tmpname' file cannot be open; skipping file tests\"",
        ),
        position: Position {
            line: 49,
            column: 77,
            span: 1247..1302,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 78,
            span: 1302..1303,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 51,
            column: 5,
            span: 1305..1309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 52,
            column: 2,
            span: 1345..1346,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 52,
            column: 3,
            span: 1346..1347,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 52,
            column: 8,
            span: 1347..1352,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 52,
            column: 9,
            span: 1352..1353,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 52,
            column: 10,
            span: 1353..1354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 54,
            column: 6,
            span: 1356..1361,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 7,
            span: 1361..1362,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing i/o'",
        ),
        position: Position {
            line: 54,
            column: 20,
            span: 1362..1375,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 21,
            span: 1375..1376,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 56,
            column: 6,
            span: 1378..1383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        position: Position {
            line: 56,
            column: 16,
            span: 1384..1393,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 56,
            column: 18,
            span: 1394..1395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 56,
            column: 21,
            span: 1396..1398,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 56,
            column: 22,
            span: 1398..1399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        position: Position {
            line: 56,
            column: 29,
            span: 1399..1406,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 56,
            column: 30,
            span: 1406..1407,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 56,
            column: 31,
            span: 1407..1408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 58,
            column: 9,
            span: 1410..1418,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 10,
            span: 1418..1419,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid mode\"",
        ),
        position: Position {
            line: 58,
            column: 24,
            span: 1419..1433,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 25,
            span: 1433..1434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 58,
            column: 28,
            span: 1435..1437,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 58,
            column: 29,
            span: 1437..1438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 58,
            column: 33,
            span: 1438..1442,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 34,
            span: 1442..1443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 58,
            column: 39,
            span: 1444..1448,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 40,
            span: 1448..1449,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rw\"",
        ),
        position: Position {
            line: 58,
            column: 45,
            span: 1450..1454,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 46,
            span: 1454..1455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 59,
            column: 9,
            span: 1456..1464,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 59,
            column: 10,
            span: 1464..1465,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid mode\"",
        ),
        position: Position {
            line: 59,
            column: 24,
            span: 1465..1479,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 59,
            column: 25,
            span: 1479..1480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 59,
            column: 28,
            span: 1481..1483,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 59,
            column: 29,
            span: 1483..1484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 59,
            column: 33,
            span: 1484..1488,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 59,
            column: 34,
            span: 1488..1489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 59,
            column: 39,
            span: 1490..1494,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 59,
            column: 40,
            span: 1494..1495,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rb+\"",
        ),
        position: Position {
            line: 59,
            column: 46,
            span: 1496..1501,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 59,
            column: 47,
            span: 1501..1502,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 60,
            column: 9,
            span: 1503..1511,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 10,
            span: 1511..1512,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid mode\"",
        ),
        position: Position {
            line: 60,
            column: 24,
            span: 1512..1526,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 60,
            column: 25,
            span: 1526..1527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 60,
            column: 28,
            span: 1528..1530,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 60,
            column: 29,
            span: 1530..1531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 60,
            column: 33,
            span: 1531..1535,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 60,
            column: 34,
            span: 1535..1536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 60,
            column: 39,
            span: 1537..1541,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 60,
            column: 40,
            span: 1541..1542,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r+bk\"",
        ),
        position: Position {
            line: 60,
            column: 47,
            span: 1543..1549,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 48,
            span: 1549..1550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 61,
            column: 9,
            span: 1551..1559,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 10,
            span: 1559..1560,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid mode\"",
        ),
        position: Position {
            line: 61,
            column: 24,
            span: 1560..1574,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 25,
            span: 1574..1575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 61,
            column: 28,
            span: 1576..1578,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 61,
            column: 29,
            span: 1578..1579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 61,
            column: 33,
            span: 1579..1583,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 34,
            span: 1583..1584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 61,
            column: 39,
            span: 1585..1589,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 40,
            span: 1589..1590,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 61,
            column: 43,
            span: 1591..1593,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 44,
            span: 1593..1594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 62,
            column: 9,
            span: 1595..1603,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 10,
            span: 1603..1604,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid mode\"",
        ),
        position: Position {
            line: 62,
            column: 24,
            span: 1604..1618,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 62,
            column: 25,
            span: 1618..1619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 62,
            column: 28,
            span: 1620..1622,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 62,
            column: 29,
            span: 1622..1623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 62,
            column: 33,
            span: 1623..1627,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 62,
            column: 34,
            span: 1627..1628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 62,
            column: 39,
            span: 1629..1633,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 62,
            column: 40,
            span: 1633..1634,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        position: Position {
            line: 62,
            column: 44,
            span: 1635..1638,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 45,
            span: 1638..1639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 63,
            column: 9,
            span: 1640..1648,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 10,
            span: 1648..1649,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid mode\"",
        ),
        position: Position {
            line: 63,
            column: 24,
            span: 1649..1663,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 63,
            column: 25,
            span: 1663..1664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 63,
            column: 28,
            span: 1665..1667,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 63,
            column: 29,
            span: 1667..1668,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 63,
            column: 33,
            span: 1668..1672,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 63,
            column: 34,
            span: 1672..1673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 63,
            column: 39,
            span: 1674..1678,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 63,
            column: 40,
            span: 1678..1679,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 63,
            column: 44,
            span: 1680..1683,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 45,
            span: 1683..1684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 64,
            column: 7,
            span: 1685..1691,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 8,
            span: 1691..1692,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 64,
            column: 10,
            span: 1692..1694,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 64,
            column: 11,
            span: 1694..1695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 64,
            column: 15,
            span: 1695..1699,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 16,
            span: 1699..1700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 64,
            column: 20,
            span: 1700..1704,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 64,
            column: 21,
            span: 1704..1705,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r+b\"",
        ),
        position: Position {
            line: 64,
            column: 27,
            span: 1706..1711,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 28,
            span: 1711..1712,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 29,
            span: 1712..1713,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 64,
            column: 30,
            span: 1713..1714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 64,
            column: 35,
            span: 1714..1719,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 36,
            span: 1719..1720,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 37,
            span: 1720..1721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 65,
            column: 7,
            span: 1722..1728,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 8,
            span: 1728..1729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 65,
            column: 10,
            span: 1729..1731,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 65,
            column: 11,
            span: 1731..1732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 65,
            column: 15,
            span: 1732..1736,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 16,
            span: 1736..1737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 65,
            column: 20,
            span: 1737..1741,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 65,
            column: 21,
            span: 1741..1742,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r+\"",
        ),
        position: Position {
            line: 65,
            column: 26,
            span: 1743..1747,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 27,
            span: 1747..1748,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 28,
            span: 1748..1749,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 65,
            column: 29,
            span: 1749..1750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 65,
            column: 34,
            span: 1750..1755,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 35,
            span: 1755..1756,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 36,
            span: 1756..1757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 66,
            column: 7,
            span: 1758..1764,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 66,
            column: 8,
            span: 1764..1765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 66,
            column: 10,
            span: 1765..1767,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 66,
            column: 11,
            span: 1767..1768,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 66,
            column: 15,
            span: 1768..1772,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 66,
            column: 16,
            span: 1772..1773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 66,
            column: 20,
            span: 1773..1777,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 66,
            column: 21,
            span: 1777..1778,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rb\"",
        ),
        position: Position {
            line: 66,
            column: 26,
            span: 1779..1783,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 66,
            column: 27,
            span: 1783..1784,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 66,
            column: 28,
            span: 1784..1785,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 66,
            column: 29,
            span: 1785..1786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 66,
            column: 34,
            span: 1786..1791,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 66,
            column: 35,
            span: 1791..1792,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 66,
            column: 36,
            span: 1792..1793,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 68,
            column: 7,
            span: 1795..1801,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 8,
            span: 1801..1802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 68,
            column: 10,
            span: 1802..1804,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 68,
            column: 11,
            span: 1804..1805,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        position: Position {
            line: 68,
            column: 20,
            span: 1805..1814,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 21,
            span: 1814..1815,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'C'",
        ),
        position: Position {
            line: 68,
            column: 24,
            span: 1815..1818,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 68,
            column: 25,
            span: 1818..1819,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'all'",
        ),
        position: Position {
            line: 68,
            column: 31,
            span: 1820..1825,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 32,
            span: 1825..1826,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 33,
            span: 1826..1827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 70,
            column: 3,
            span: 1829..1831,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 70,
            column: 4,
            span: 1831..1832,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 70,
            column: 9,
            span: 1832..1837,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 10,
            span: 1837..1838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 70,
            column: 12,
            span: 1838..1840,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 70,
            column: 13,
            span: 1840..1841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        position: Position {
            line: 70,
            column: 18,
            span: 1841..1846,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 19,
            span: 1846..1847,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 70,
            column: 20,
            span: 1847..1848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 70,
            column: 23,
            span: 1849..1851,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 70,
            column: 24,
            span: 1851..1852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 70,
            column: 30,
            span: 1852..1858,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 31,
            span: 1858..1859,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 70,
            column: 33,
            span: 1859..1861,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 70,
            column: 34,
            span: 1861..1862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        position: Position {
            line: 70,
            column: 40,
            span: 1862..1868,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 41,
            span: 1868..1869,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 70,
            column: 42,
            span: 1869..1870,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 72,
            column: 3,
            span: 1872..1874,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 72,
            column: 4,
            span: 1874..1875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 72,
            column: 10,
            span: 1875..1881,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 72,
            column: 11,
            span: 1881..1882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 72,
            column: 15,
            span: 1882..1886,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 72,
            column: 16,
            span: 1886..1887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 73,
            column: 7,
            span: 1888..1894,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 8,
            span: 1894..1895,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 73,
            column: 11,
            span: 1895..1898,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 73,
            column: 20,
            span: 1899..1907,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 21,
            span: 1907..1908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 73,
            column: 25,
            span: 1908..1912,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 26,
            span: 1912..1913,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 27,
            span: 1913..1914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 74,
            column: 9,
            span: 1915..1923,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 10,
            span: 1923..1924,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 74,
            column: 12,
            span: 1924..1926,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 13,
            span: 1926..1927,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 74,
            column: 20,
            span: 1928..1934,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 21,
            span: 1934..1935,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 74,
            column: 26,
            span: 1936..1940,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 27,
            span: 1940..1941,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 75,
            column: 7,
            span: 1942..1948,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 8,
            span: 1948..1949,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 75,
            column: 11,
            span: 1949..1952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 75,
            column: 14,
            span: 1953..1955,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 75,
            column: 15,
            span: 1955..1956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 75,
            column: 19,
            span: 1956..1960,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 20,
            span: 1960..1961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 75,
            column: 24,
            span: 1961..1965,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 25,
            span: 1965..1966,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 26,
            span: 1966..1967,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 76,
            column: 3,
            span: 1968..1970,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 76,
            column: 4,
            span: 1970..1971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 76,
            column: 10,
            span: 1971..1977,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 11,
            span: 1977..1978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 76,
            column: 15,
            span: 1978..1982,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 16,
            span: 1982..1983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 77,
            column: 7,
            span: 1984..1990,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 77,
            column: 8,
            span: 1990..1991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 77,
            column: 10,
            span: 1991..1993,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 77,
            column: 11,
            span: 1993..1994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 77,
            column: 17,
            span: 1994..2000,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 77,
            column: 18,
            span: 2000..2001,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 77,
            column: 19,
            span: 2001..2002,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 77,
            column: 22,
            span: 2003..2005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 77,
            column: 25,
            span: 2006..2008,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 77,
            column: 26,
            span: 2008..2009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        position: Position {
            line: 77,
            column: 32,
            span: 2009..2015,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 77,
            column: 33,
            span: 2015..2016,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 79,
            column: 3,
            span: 2018..2020,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 79,
            column: 7,
            span: 2021..2024,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        position: Position {
            line: 79,
            column: 13,
            span: 2025..2030,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 79,
            column: 18,
            span: 2031..2035,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 80,
            column: 8,
            span: 2056..2061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        position: Position {
            line: 80,
            column: 15,
            span: 2062..2068,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 16,
            span: 2068..2069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 80,
            column: 20,
            span: 2070..2073,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 21,
            span: 2073..2074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        position: Position {
            line: 80,
            column: 26,
            span: 2075..2079,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 80,
            column: 28,
            span: 2080..2081,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 80,
            column: 31,
            span: 2082..2084,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 80,
            column: 32,
            span: 2084..2085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        position: Position {
            line: 80,
            column: 37,
            span: 2085..2090,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 80,
            column: 38,
            span: 2090..2091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        position: Position {
            line: 80,
            column: 42,
            span: 2091..2095,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 43,
            span: 2095..2096,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        position: Position {
            line: 80,
            column: 48,
            span: 2096..2101,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 49,
            span: 2101..2102,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 80,
            column: 54,
            span: 2102..2107,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 55,
            span: 2107..2108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 81,
            column: 9,
            span: 2111..2117,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 10,
            span: 2117..2118,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 81,
            column: 13,
            span: 2118..2121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        position: Position {
            line: 81,
            column: 20,
            span: 2122..2128,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 81,
            column: 24,
            span: 2129..2132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 81,
            column: 29,
            span: 2133..2137,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 30,
            span: 2137..2138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 81,
            column: 33,
            span: 2138..2141,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 34,
            span: 2141..2142,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 81,
            column: 37,
            span: 2143..2145,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 81,
            column: 46,
            span: 2146..2154,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 81,
            column: 50,
            span: 2155..2158,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 81,
            column: 55,
            span: 2159..2163,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 56,
            span: 2163..2164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        position: Position {
            line: 81,
            column: 60,
            span: 2164..2168,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 61,
            span: 2168..2169,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 81,
            column: 64,
            span: 2170..2172,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        position: Position {
            line: 81,
            column: 73,
            span: 2173..2181,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 74,
            span: 2181..2182,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 82,
            column: 0,
            span: 2183..2186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 84,
            column: 7,
            span: 2188..2194,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 8,
            span: 2194..2195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 84,
            column: 10,
            span: 2195..2197,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 84,
            column: 11,
            span: 2197..2198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 84,
            column: 17,
            span: 2198..2204,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 18,
            span: 2204..2205,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 19,
            span: 2205..2206,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 84,
            column: 20,
            span: 2206..2207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        position: Position {
            line: 84,
            column: 24,
            span: 2207..2211,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 25,
            span: 2211..2212,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 26,
            span: 2212..2213,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 84,
            column: 29,
            span: 2214..2216,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 84,
            column: 31,
            span: 2216..2218,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 32,
            span: 2218..2219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 85,
            column: 7,
            span: 2220..2226,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 8,
            span: 2226..2227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 85,
            column: 10,
            span: 2227..2229,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 85,
            column: 11,
            span: 2229..2230,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 85,
            column: 16,
            span: 2230..2235,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 17,
            span: 2235..2236,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 85,
            column: 26,
            span: 2236..2245,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 27,
            span: 2245..2246,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 85,
            column: 28,
            span: 2246..2247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        position: Position {
            line: 85,
            column: 32,
            span: 2247..2251,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 33,
            span: 2251..2252,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 34,
            span: 2252..2253,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 85,
            column: 37,
            span: 2254..2256,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 85,
            column: 44,
            span: 2257..2263,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 85,
            column: 45,
            span: 2263..2264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 85,
            column: 48,
            span: 2264..2267,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 49,
            span: 2267..2268,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 85,
            column: 58,
            span: 2268..2277,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 59,
            span: 2277..2278,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 60,
            span: 2278..2279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 86,
            column: 7,
            span: 2280..2286,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 8,
            span: 2286..2287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 86,
            column: 10,
            span: 2287..2289,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 86,
            column: 11,
            span: 2289..2290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 86,
            column: 17,
            span: 2290..2296,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 18,
            span: 2296..2297,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 19,
            span: 2297..2298,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 86,
            column: 20,
            span: 2298..2299,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        position: Position {
            line: 86,
            column: 24,
            span: 2299..2303,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 25,
            span: 2303..2304,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cur\"",
        ),
        position: Position {
            line: 86,
            column: 30,
            span: 2304..2309,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 31,
            span: 2309..2310,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 86,
            column: 33,
            span: 2311..2312,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 34,
            span: 2311..2313,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 35,
            span: 2313..2314,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 86,
            column: 38,
            span: 2315..2317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 86,
            column: 45,
            span: 2318..2324,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 86,
            column: 46,
            span: 2324..2325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 86,
            column: 49,
            span: 2325..2328,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 50,
            span: 2328..2329,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 86,
            column: 59,
            span: 2329..2338,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 60,
            span: 2338..2339,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 86,
            column: 61,
            span: 2339..2340,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 62,
            span: 2339..2341,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 63,
            span: 2341..2342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 87,
            column: 7,
            span: 2343..2349,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 87,
            column: 8,
            span: 2349..2350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 87,
            column: 10,
            span: 2350..2352,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 87,
            column: 11,
            span: 2352..2353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 87,
            column: 16,
            span: 2353..2358,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 87,
            column: 17,
            span: 2358..2359,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"joao\"",
        ),
        position: Position {
            line: 87,
            column: 23,
            span: 2359..2365,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 87,
            column: 24,
            span: 2365..2366,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 87,
            column: 25,
            span: 2366..2367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 88,
            column: 7,
            span: 2368..2374,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 8,
            span: 2374..2375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 88,
            column: 10,
            span: 2375..2377,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 88,
            column: 11,
            span: 2377..2378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 88,
            column: 17,
            span: 2378..2384,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 18,
            span: 2384..2385,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 19,
            span: 2385..2386,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 88,
            column: 20,
            span: 2386..2387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        position: Position {
            line: 88,
            column: 24,
            span: 2387..2391,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 25,
            span: 2391..2392,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"end\"",
        ),
        position: Position {
            line: 88,
            column: 30,
            span: 2392..2397,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 31,
            span: 2397..2398,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 88,
            column: 34,
            span: 2399..2401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 88,
            column: 41,
            span: 2402..2408,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 88,
            column: 42,
            span: 2408..2409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 88,
            column: 45,
            span: 2409..2412,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 46,
            span: 2412..2413,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo joao\"",
        ),
        position: Position {
            line: 88,
            column: 56,
            span: 2413..2423,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 57,
            span: 2423..2424,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 58,
            span: 2424..2425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 90,
            column: 7,
            span: 2427..2433,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 90,
            column: 8,
            span: 2433..2434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 90,
            column: 10,
            span: 2434..2436,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 90,
            column: 11,
            span: 2436..2437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 90,
            column: 17,
            span: 2437..2443,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 90,
            column: 18,
            span: 2443..2444,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 90,
            column: 19,
            span: 2444..2445,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 90,
            column: 20,
            span: 2445..2446,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        position: Position {
            line: 90,
            column: 24,
            span: 2446..2450,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 90,
            column: 25,
            span: 2450..2451,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        position: Position {
            line: 90,
            column: 30,
            span: 2451..2456,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 90,
            column: 31,
            span: 2456..2457,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 90,
            column: 34,
            span: 2458..2460,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 90,
            column: 36,
            span: 2460..2462,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 90,
            column: 37,
            span: 2462..2463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 92,
            column: 7,
            span: 2465..2471,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 92,
            column: 8,
            span: 2471..2472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 92,
            column: 10,
            span: 2472..2474,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 92,
            column: 11,
            span: 2474..2475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 92,
            column: 16,
            span: 2475..2480,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 92,
            column: 17,
            span: 2480..2481,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"álo\"'",
        ),
        position: Position {
            line: 92,
            column: 24,
            span: 2481..2488,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 25,
            span: 2488..2489,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"{a}\\n\"",
        ),
        position: Position {
            line: 92,
            column: 33,
            span: 2490..2497,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 34,
            span: 2497..2498,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"second line\\n\"",
        ),
        position: Position {
            line: 92,
            column: 50,
            span: 2499..2514,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 51,
            span: 2514..2515,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"third line \\n\"",
        ),
        position: Position {
            line: 92,
            column: 67,
            span: 2516..2531,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 92,
            column: 68,
            span: 2531..2532,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 92,
            column: 69,
            span: 2532..2533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 93,
            column: 7,
            span: 2534..2540,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 93,
            column: 8,
            span: 2540..2541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 93,
            column: 10,
            span: 2541..2543,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 93,
            column: 11,
            span: 2543..2544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 93,
            column: 16,
            span: 2544..2549,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 93,
            column: 17,
            span: 2549..2550,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'çfourth_line'",
        ),
        position: Position {
            line: 93,
            column: 31,
            span: 2550..2564,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 93,
            column: 32,
            span: 2564..2565,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 93,
            column: 33,
            span: 2565..2566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 94,
            column: 3,
            span: 2567..2569,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 94,
            column: 4,
            span: 2569..2570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 94,
            column: 10,
            span: 2570..2576,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 94,
            column: 11,
            span: 2576..2577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 94,
            column: 13,
            span: 2577..2579,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 94,
            column: 14,
            span: 2579..2580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        position: Position {
            line: 94,
            column: 20,
            span: 2580..2586,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 94,
            column: 21,
            span: 2586..2587,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 95,
            column: 15,
            span: 2588..2602,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 95,
            column: 16,
            span: 2602..2603,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 95,
            column: 17,
            span: 2603..2604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 96,
            column: 7,
            span: 2637..2643,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 96,
            column: 8,
            span: 2643..2644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 96,
            column: 10,
            span: 2644..2646,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 96,
            column: 11,
            span: 2646..2647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 96,
            column: 16,
            span: 2647..2652,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 96,
            column: 17,
            span: 2652..2653,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 96,
            column: 18,
            span: 2653..2654,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 96,
            column: 21,
            span: 2655..2657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 96,
            column: 24,
            span: 2658..2660,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 96,
            column: 25,
            span: 2660..2661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        position: Position {
            line: 96,
            column: 30,
            span: 2661..2666,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 96,
            column: 34,
            span: 2667..2670,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawequal",
        ),
        position: Position {
            line: 96,
            column: 43,
            span: 2671..2679,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 96,
            column: 44,
            span: 2679..2680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 96,
            column: 46,
            span: 2680..2682,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 96,
            column: 47,
            span: 2682..2683,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 96,
            column: 53,
            span: 2683..2689,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 96,
            column: 54,
            span: 2689..2690,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 96,
            column: 55,
            span: 2690..2691,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 56,
            span: 2691..2692,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 96,
            column: 59,
            span: 2693..2695,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 96,
            column: 60,
            span: 2695..2696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        position: Position {
            line: 96,
            column: 66,
            span: 2696..2702,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 96,
            column: 67,
            span: 2702..2703,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 96,
            column: 68,
            span: 2703..2704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 97,
            column: 6,
            span: 2705..2710,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 7,
            span: 2710..2711,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 97,
            column: 10,
            span: 2711..2714,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 11,
            span: 2714..2715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 100,
            column: 15,
            span: 2738..2752,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 16,
            span: 2752..2753,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 17,
            span: 2753..2754,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 101,
            column: 4,
            span: 2755..2758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 101,
            column: 6,
            span: 2759..2760,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 101,
            column: 7,
            span: 2760..2761,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 101,
            column: 8,
            span: 2760..2762,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 101,
            column: 9,
            span: 2762..2763,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "120",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 101,
            column: 12,
            span: 2762..2766,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 101,
            column: 0,
            span: 2767..2769,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 102,
            column: 6,
            span: 2772..2775,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 102,
            column: 8,
            span: 2776..2777,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 102,
            column: 9,
            span: 2777..2778,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 102,
            column: 10,
            span: 2777..2779,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 102,
            column: 11,
            span: 2779..2780,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 102,
            column: 12,
            span: 2779..2781,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 102,
            column: 0,
            span: 2782..2784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 103,
            column: 7,
            span: 2789..2791,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 103,
            column: 8,
            span: 2791..2792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 103,
            column: 13,
            span: 2792..2797,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 14,
            span: 2797..2798,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 103,
            column: 18,
            span: 2798..2802,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 19,
            span: 2802..2803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 104,
            column: 11,
            span: 2808..2814,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 12,
            span: 2814..2815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 104,
            column: 14,
            span: 2815..2817,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 104,
            column: 15,
            span: 2817..2818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 104,
            column: 19,
            span: 2818..2822,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 20,
            span: 2822..2823,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 104,
            column: 24,
            span: 2823..2827,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 104,
            column: 25,
            span: 2827..2828,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r'",
        ),
        position: Position {
            line: 104,
            column: 29,
            span: 2829..2832,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 30,
            span: 2832..2833,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 31,
            span: 2833..2834,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 105,
            column: 7,
            span: 2839..2841,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 105,
            column: 8,
            span: 2841..2842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 105,
            column: 13,
            span: 2842..2847,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 105,
            column: 14,
            span: 2847..2848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 105,
            column: 18,
            span: 2848..2852,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 105,
            column: 19,
            span: 2852..2853,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 106,
            column: 0,
            span: 2856..2859,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 107,
            column: 17,
            span: 2862..2876,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 107,
            column: 18,
            span: 2876..2877,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 107,
            column: 19,
            span: 2877..2878,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 108,
            column: 0,
            span: 2879..2882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 110,
            column: 3,
            span: 2884..2886,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 110,
            column: 4,
            span: 2886..2887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 110,
            column: 9,
            span: 2887..2892,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 110,
            column: 10,
            span: 2892..2893,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 11,
            span: 2893..2894,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 110,
            column: 12,
            span: 2894..2895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 110,
            column: 17,
            span: 2895..2900,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 110,
            column: 18,
            span: 2900..2901,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 19,
            span: 2901..2902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 111,
            column: 3,
            span: 2903..2905,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 111,
            column: 4,
            span: 2905..2906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 111,
            column: 9,
            span: 2906..2911,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 10,
            span: 2911..2912,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 11,
            span: 2912..2913,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 113,
            column: 7,
            span: 2915..2921,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 113,
            column: 8,
            span: 2921..2922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 113,
            column: 10,
            span: 2922..2924,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 113,
            column: 11,
            span: 2924..2925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rename",
        ),
        position: Position {
            line: 113,
            column: 17,
            span: 2925..2931,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 113,
            column: 18,
            span: 2931..2932,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 113,
            column: 22,
            span: 2932..2936,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 113,
            column: 23,
            span: 2936..2937,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        position: Position {
            line: 113,
            column: 33,
            span: 2938..2947,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 113,
            column: 34,
            span: 2947..2948,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 113,
            column: 35,
            span: 2948..2949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 114,
            column: 7,
            span: 2950..2956,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 114,
            column: 8,
            span: 2956..2957,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 114,
            column: 11,
            span: 2957..2960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 114,
            column: 14,
            span: 2961..2963,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 114,
            column: 15,
            span: 2963..2964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rename",
        ),
        position: Position {
            line: 114,
            column: 21,
            span: 2964..2970,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 114,
            column: 22,
            span: 2970..2971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 114,
            column: 26,
            span: 2971..2975,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 114,
            column: 27,
            span: 2975..2976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        position: Position {
            line: 114,
            column: 37,
            span: 2977..2986,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 114,
            column: 38,
            span: 2986..2987,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 114,
            column: 39,
            span: 2987..2988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 116,
            column: 3,
            span: 2990..2992,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 116,
            column: 4,
            span: 2992..2993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 116,
            column: 10,
            span: 2993..2999,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 116,
            column: 11,
            span: 2999..3000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 116,
            column: 13,
            span: 3000..3002,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 116,
            column: 14,
            span: 3002..3003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 116,
            column: 18,
            span: 3003..3007,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 116,
            column: 19,
            span: 3007..3008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        position: Position {
            line: 116,
            column: 28,
            span: 3008..3017,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 29,
            span: 3017..3018,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab\"",
        ),
        position: Position {
            line: 116,
            column: 34,
            span: 3019..3023,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 116,
            column: 35,
            span: 3023..3024,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 116,
            column: 36,
            span: 3024..3025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 117,
            column: 7,
            span: 3026..3032,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 117,
            column: 8,
            span: 3032..3033,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 117,
            column: 10,
            span: 3033..3035,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 117,
            column: 11,
            span: 3035..3036,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 117,
            column: 16,
            span: 3036..3041,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 117,
            column: 17,
            span: 3041..3042,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\n\\t\\t  \"",
        ),
        position: Position {
            line: 117,
            column: 29,
            span: 3042..3054,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 117,
            column: 30,
            span: 3054..3055,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3450",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 117,
            column: 35,
            span: 3055..3060,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 117,
            column: 36,
            span: 3060..3061,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        position: Position {
            line: 117,
            column: 41,
            span: 3062..3066,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 117,
            column: 42,
            span: 3066..3067,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 117,
            column: 43,
            span: 3067..3068,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 117,
            column: 44,
            span: 3068..3069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 118,
            column: 3,
            span: 3070..3072,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 118,
            column: 4,
            span: 3072..3073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 118,
            column: 9,
            span: 3073..3078,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 118,
            column: 10,
            span: 3078..3079,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 118,
            column: 11,
            span: 3079..3080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 121,
            column: 2,
            span: 3114..3115,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 121,
            column: 4,
            span: 3116..3117,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 121,
            column: 11,
            span: 3118..3124,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 121,
            column: 12,
            span: 3124..3125,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 121,
            column: 14,
            span: 3125..3127,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 121,
            column: 15,
            span: 3127..3128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 121,
            column: 19,
            span: 3128..3132,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 121,
            column: 20,
            span: 3132..3133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 121,
            column: 24,
            span: 3133..3137,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 121,
            column: 25,
            span: 3137..3138,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        position: Position {
            line: 121,
            column: 29,
            span: 3139..3142,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 121,
            column: 30,
            span: 3142..3143,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 121,
            column: 31,
            span: 3143..3144,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 122,
            column: 2,
            span: 3145..3146,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 122,
            column: 3,
            span: 3146..3147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 122,
            column: 8,
            span: 3147..3152,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 122,
            column: 9,
            span: 3152..3153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        position: Position {
            line: 122,
            column: 15,
            span: 3153..3159,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 122,
            column: 16,
            span: 3159..3160,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n'",
        ),
        position: Position {
            line: 122,
            column: 21,
            span: 3161..3165,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 122,
            column: 22,
            span: 3165..3166,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 123,
            column: 2,
            span: 3167..3168,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 123,
            column: 3,
            span: 3168..3169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 123,
            column: 8,
            span: 3169..3174,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 123,
            column: 9,
            span: 3174..3175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 123,
            column: 15,
            span: 3175..3181,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 123,
            column: 16,
            span: 3181..3182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 123,
            column: 22,
            span: 3182..3188,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 123,
            column: 23,
            span: 3188..3189,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0X%x\\n\"",
        ),
        position: Position {
            line: 123,
            column: 31,
            span: 3189..3197,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 123,
            column: 32,
            span: 3197..3198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        position: Position {
            line: 123,
            column: 39,
            span: 3199..3205,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 123,
            column: 40,
            span: 3205..3206,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 123,
            column: 41,
            span: 3206..3207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 124,
            column: 2,
            span: 3208..3209,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 124,
            column: 3,
            span: 3209..3210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 124,
            column: 8,
            span: 3210..3215,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 9,
            span: 3215..3216,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0xABCp-3\"",
        ),
        position: Position {
            line: 124,
            column: 19,
            span: 3216..3226,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 124,
            column: 20,
            span: 3226..3227,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n'",
        ),
        position: Position {
            line: 124,
            column: 25,
            span: 3228..3232,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 26,
            span: 3232..3233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 125,
            column: 2,
            span: 3234..3235,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 125,
            column: 3,
            span: 3235..3236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 125,
            column: 8,
            span: 3236..3241,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 9,
            span: 3241..3242,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 125,
            column: 10,
            span: 3241..3243,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 11,
            span: 3243..3244,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n'",
        ),
        position: Position {
            line: 125,
            column: 16,
            span: 3245..3249,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 17,
            span: 3249..3250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 126,
            column: 2,
            span: 3251..3252,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 126,
            column: 3,
            span: 3252..3253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 126,
            column: 8,
            span: 3253..3258,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 126,
            column: 9,
            span: 3258..3259,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 126,
            column: 10,
            span: 3259..3260,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        position: Position {
            line: 126,
            column: 16,
            span: 3260..3266,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 126,
            column: 17,
            span: 3266..3267,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n'",
        ),
        position: Position {
            line: 126,
            column: 22,
            span: 3268..3272,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 126,
            column: 23,
            span: 3272..3273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 127,
            column: 2,
            span: 3274..3275,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 127,
            column: 3,
            span: 3275..3276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 127,
            column: 8,
            span: 3276..3281,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 9,
            span: 3281..3282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 127,
            column: 15,
            span: 3282..3288,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 127,
            column: 16,
            span: 3288..3289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 127,
            column: 22,
            span: 3289..3295,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 23,
            span: 3295..3296,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x%X\\n\"",
        ),
        position: Position {
            line: 127,
            column: 31,
            span: 3296..3304,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 127,
            column: 32,
            span: 3304..3305,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 127,
            column: 34,
            span: 3306..3307,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        position: Position {
            line: 127,
            column: 40,
            span: 3307..3313,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 41,
            span: 3313..3314,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 42,
            span: 3314..3315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 128,
            column: 2,
            span: 3316..3317,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 128,
            column: 3,
            span: 3317..3318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 128,
            column: 8,
            span: 3318..3323,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 9,
            span: 3323..3324,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-0xABCp-3\"",
        ),
        position: Position {
            line: 128,
            column: 20,
            span: 3324..3335,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 21,
            span: 3335..3336,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n'",
        ),
        position: Position {
            line: 128,
            column: 26,
            span: 3337..3341,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 27,
            span: 3341..3342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 129,
            column: 7,
            span: 3343..3349,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 8,
            span: 3349..3350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 129,
            column: 9,
            span: 3350..3351,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 129,
            column: 10,
            span: 3351..3352,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 129,
            column: 15,
            span: 3352..3357,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 16,
            span: 3357..3358,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 17,
            span: 3358..3359,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 18,
            span: 3359..3360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 130,
            column: 2,
            span: 3361..3362,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 130,
            column: 4,
            span: 3363..3364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 130,
            column: 11,
            span: 3365..3371,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 130,
            column: 12,
            span: 3371..3372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 130,
            column: 14,
            span: 3372..3374,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 130,
            column: 15,
            span: 3374..3375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 130,
            column: 19,
            span: 3375..3379,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 130,
            column: 20,
            span: 3379..3380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 130,
            column: 24,
            span: 3380..3384,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 25,
            span: 3384..3385,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        position: Position {
            line: 130,
            column: 29,
            span: 3386..3389,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 30,
            span: 3389..3390,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 31,
            span: 3390..3391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 131,
            column: 7,
            span: 3392..3398,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 131,
            column: 8,
            span: 3398..3399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 131,
            column: 9,
            span: 3399..3400,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 131,
            column: 10,
            span: 3400..3401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 131,
            column: 14,
            span: 3401..3405,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 131,
            column: 15,
            span: 3405..3406,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 131,
            column: 18,
            span: 3406..3409,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 131,
            column: 19,
            span: 3409..3410,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 131,
            column: 22,
            span: 3411..3413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        position: Position {
            line: 131,
            column: 29,
            span: 3414..3420,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 131,
            column: 30,
            span: 3420..3421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 132,
            column: 7,
            span: 3422..3428,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 132,
            column: 8,
            span: 3428..3429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 132,
            column: 9,
            span: 3429..3430,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 132,
            column: 10,
            span: 3430..3431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 132,
            column: 14,
            span: 3431..3435,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 132,
            column: 15,
            span: 3435..3436,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 132,
            column: 18,
            span: 3436..3439,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 132,
            column: 19,
            span: 3439..3440,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 132,
            column: 22,
            span: 3441..3443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        position: Position {
            line: 132,
            column: 29,
            span: 3444..3450,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 132,
            column: 30,
            span: 3450..3451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 133,
            column: 7,
            span: 3452..3458,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 133,
            column: 8,
            span: 3458..3459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 133,
            column: 9,
            span: 3459..3460,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 133,
            column: 10,
            span: 3460..3461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 133,
            column: 14,
            span: 3461..3465,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 133,
            column: 15,
            span: 3465..3466,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 133,
            column: 18,
            span: 3466..3469,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 133,
            column: 19,
            span: 3469..3470,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 133,
            column: 22,
            span: 3471..3473,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "0ABC",
                    after_decimal: "",
                },
                exponent: "-3",
            },
        ),
        position: Position {
            line: 133,
            column: 31,
            span: 3473..3482,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 133,
            column: 32,
            span: 3482..3483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 134,
            column: 7,
            span: 3484..3490,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 134,
            column: 8,
            span: 3490..3491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 134,
            column: 9,
            span: 3491..3492,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 134,
            column: 10,
            span: 3492..3493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 134,
            column: 14,
            span: 3493..3497,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 134,
            column: 15,
            span: 3497..3498,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 134,
            column: 18,
            span: 3498..3501,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 134,
            column: 19,
            span: 3501..3502,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 134,
            column: 22,
            span: 3503..3505,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 134,
            column: 24,
            span: 3505..3507,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 134,
            column: 25,
            span: 3507..3508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 135,
            column: 7,
            span: 3509..3515,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 8,
            span: 3515..3516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 135,
            column: 9,
            span: 3516..3517,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 135,
            column: 10,
            span: 3517..3518,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 135,
            column: 14,
            span: 3518..3522,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 15,
            span: 3522..3523,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*n\"",
        ),
        position: Position {
            line: 135,
            column: 19,
            span: 3523..3527,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 135,
            column: 20,
            span: 3527..3528,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 135,
            column: 23,
            span: 3529..3531,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 135,
            column: 25,
            span: 3532..3533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        position: Position {
            line: 135,
            column: 31,
            span: 3533..3539,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 135,
            column: 32,
            span: 3539..3540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 136,
            column: 7,
            span: 3582..3588,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 136,
            column: 8,
            span: 3588..3589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 136,
            column: 9,
            span: 3589..3590,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 136,
            column: 10,
            span: 3590..3591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 136,
            column: 14,
            span: 3591..3595,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 136,
            column: 15,
            span: 3595..3596,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 136,
            column: 18,
            span: 3596..3599,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 19,
            span: 3599..3600,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 136,
            column: 22,
            span: 3601..3603,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 136,
            column: 24,
            span: 3604..3605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        position: Position {
            line: 136,
            column: 30,
            span: 3605..3611,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 31,
            span: 3611..3612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 137,
            column: 7,
            span: 3613..3619,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 137,
            column: 8,
            span: 3619..3620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 137,
            column: 9,
            span: 3620..3621,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 137,
            column: 10,
            span: 3621..3622,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 137,
            column: 14,
            span: 3622..3626,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 137,
            column: 15,
            span: 3626..3627,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*n\"",
        ),
        position: Position {
            line: 137,
            column: 19,
            span: 3627..3631,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 137,
            column: 20,
            span: 3631..3632,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 137,
            column: 23,
            span: 3633..3635,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 137,
            column: 25,
            span: 3636..3637,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "0ABC",
                    after_decimal: "",
                },
                exponent: "-3",
            },
        ),
        position: Position {
            line: 137,
            column: 33,
            span: 3636..3645,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 137,
            column: 34,
            span: 3645..3646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 138,
            column: 7,
            span: 3688..3694,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 138,
            column: 8,
            span: 3694..3695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 138,
            column: 9,
            span: 3695..3696,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 138,
            column: 10,
            span: 3696..3697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 138,
            column: 15,
            span: 3697..3702,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 138,
            column: 16,
            span: 3702..3703,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 138,
            column: 17,
            span: 3703..3704,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 138,
            column: 18,
            span: 3704..3705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 139,
            column: 7,
            span: 3706..3712,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 8,
            span: 3712..3713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 139,
            column: 10,
            span: 3713..3715,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 139,
            column: 11,
            span: 3715..3716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 139,
            column: 17,
            span: 3716..3722,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 18,
            span: 3722..3723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 139,
            column: 22,
            span: 3723..3727,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 23,
            span: 3727..3728,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 24,
            span: 3728..3729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 142,
            column: 2,
            span: 3764..3765,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 142,
            column: 4,
            span: 3766..3767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 142,
            column: 11,
            span: 3768..3774,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 142,
            column: 12,
            span: 3774..3775,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 142,
            column: 14,
            span: 3775..3777,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 142,
            column: 15,
            span: 3777..3778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 142,
            column: 19,
            span: 3778..3782,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 142,
            column: 20,
            span: 3782..3783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 142,
            column: 24,
            span: 3783..3787,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 25,
            span: 3787..3788,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        position: Position {
            line: 142,
            column: 29,
            span: 3789..3792,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 142,
            column: 30,
            span: 3792..3793,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 142,
            column: 31,
            span: 3793..3794,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 143,
            column: 2,
            span: 3795..3796,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 143,
            column: 3,
            span: 3796..3797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 143,
            column: 8,
            span: 3797..3802,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal x, z = coroutine.yield(10)\nlocal y = coroutine.yield(20)\nreturn x + y * z\n]]",
        ),
        position: Position {
            line: 147,
            column: 3,
            span: 3802..3887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 148,
            column: 7,
            span: 3888..3894,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 148,
            column: 8,
            span: 3894..3895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 148,
            column: 9,
            span: 3895..3896,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 148,
            column: 10,
            span: 3896..3897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 148,
            column: 15,
            span: 3897..3902,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 148,
            column: 16,
            span: 3902..3903,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 148,
            column: 17,
            span: 3903..3904,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 148,
            column: 18,
            span: 3904..3905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 149,
            column: 2,
            span: 3906..3907,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 149,
            column: 4,
            span: 3908..3909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 149,
            column: 14,
            span: 3910..3919,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 149,
            column: 15,
            span: 3919..3920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 149,
            column: 19,
            span: 3920..3924,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 149,
            column: 20,
            span: 3924..3925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 149,
            column: 26,
            span: 3925..3931,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 149,
            column: 27,
            span: 3931..3932,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 150,
            column: 7,
            span: 3933..3939,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 150,
            column: 8,
            span: 3939..3940,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 150,
            column: 9,
            span: 3940..3941,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 150,
            column: 10,
            span: 3941..3942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 150,
            column: 14,
            span: 3942..3946,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 150,
            column: 15,
            span: 3946..3947,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 150,
            column: 18,
            span: 3948..3950,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 150,
            column: 21,
            span: 3950..3953,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 150,
            column: 22,
            span: 3953..3954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 151,
            column: 6,
            span: 3955..3960,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 151,
            column: 7,
            span: 3960..3961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 151,
            column: 8,
            span: 3961..3962,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 151,
            column: 9,
            span: 3962..3963,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 151,
            column: 12,
            span: 3962..3966,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 151,
            column: 13,
            span: 3966..3967,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 151,
            column: 17,
            span: 3967..3971,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 151,
            column: 18,
            span: 3971..3972,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 151,
            column: 21,
            span: 3973..3975,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 151,
            column: 24,
            span: 3975..3978,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 151,
            column: 25,
            span: 3978..3979,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 152,
            column: 7,
            span: 3980..3986,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 152,
            column: 8,
            span: 3986..3987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 152,
            column: 9,
            span: 3987..3988,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 152,
            column: 10,
            span: 3988..3989,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 13,
            span: 3988..3992,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 152,
            column: 14,
            span: 3992..3993,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 152,
            column: 17,
            span: 3994..3996,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 21,
            span: 3996..4000,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 152,
            column: 23,
            span: 4001..4002,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 27,
            span: 4002..4006,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 152,
            column: 29,
            span: 4007..4008,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 33,
            span: 4008..4012,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 152,
            column: 34,
            span: 4012..4013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 153,
            column: 7,
            span: 4014..4020,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 8,
            span: 4020..4021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 153,
            column: 10,
            span: 4021..4023,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 153,
            column: 11,
            span: 4023..4024,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 153,
            column: 17,
            span: 4024..4030,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 18,
            span: 4030..4031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 153,
            column: 22,
            span: 4031..4035,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 23,
            span: 4035..4036,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 24,
            span: 4036..4037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 156,
            column: 2,
            span: 4040..4041,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 156,
            column: 4,
            span: 4042..4043,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 156,
            column: 11,
            span: 4044..4050,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 12,
            span: 4050..4051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 156,
            column: 14,
            span: 4051..4053,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 156,
            column: 15,
            span: 4053..4054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 156,
            column: 19,
            span: 4054..4058,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 20,
            span: 4058..4059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 156,
            column: 24,
            span: 4059..4063,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 25,
            span: 4063..4064,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        position: Position {
            line: 156,
            column: 29,
            span: 4065..4068,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 30,
            span: 4068..4069,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 31,
            span: 4069..4070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 158,
            column: 2,
            span: 4098..4099,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 158,
            column: 3,
            span: 4099..4100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 158,
            column: 8,
            span: 4100..4105,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n-12.3-\t-0xffff+  .3|5.E-3X  +234e+13E 0xDEADBEEFDEADBEEFx\n0x1.13Ap+3e\n]]",
        ),
        position: Position {
            line: 161,
            column: 3,
            span: 4105..4180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 163,
            column: 2,
            span: 4201..4202,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 163,
            column: 3,
            span: 4202..4203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 163,
            column: 8,
            span: 4203..4208,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 9,
            span: 4208..4209,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1234\"",
        ),
        position: Position {
            line: 163,
            column: 15,
            span: 4209..4215,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 16,
            span: 4215..4216,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 163,
            column: 17,
            span: 4216..4217,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 163,
            column: 21,
            span: 4218..4221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 163,
            column: 23,
            span: 4222..4223,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 163,
            column: 25,
            span: 4224..4225,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 163,
            column: 27,
            span: 4225..4227,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 163,
            column: 28,
            span: 4227..4228,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 163,
            column: 33,
            span: 4228..4233,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 163,
            column: 36,
            span: 4234..4236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 163,
            column: 38,
            span: 4237..4238,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 163,
            column: 39,
            span: 4238..4239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 163,
            column: 44,
            span: 4239..4244,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 45,
            span: 4244..4245,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        position: Position {
            line: 163,
            column: 48,
            span: 4245..4248,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 49,
            span: 4248..4249,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 163,
            column: 53,
            span: 4250..4253,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 163,
            column: 54,
            span: 4253..4254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 163,
            column: 57,
            span: 4256..4257,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 163,
            column: 58,
            span: 4257..4258,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 163,
            column: 63,
            span: 4258..4263,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 64,
            span: 4263..4264,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        position: Position {
            line: 163,
            column: 68,
            span: 4264..4268,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 69,
            span: 4268..4269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 165,
            column: 2,
            span: 4330..4331,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 165,
            column: 3,
            span: 4331..4332,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 165,
            column: 8,
            span: 4332..4337,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n.e+\t0.e;\t--;  0xX;\n]]",
        ),
        position: Position {
            line: 167,
            column: 3,
            span: 4337..4361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 168,
            column: 7,
            span: 4362..4368,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 8,
            span: 4368..4369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 168,
            column: 9,
            span: 4369..4370,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 168,
            column: 10,
            span: 4370..4371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 168,
            column: 15,
            span: 4371..4376,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 16,
            span: 4376..4377,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 17,
            span: 4377..4378,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 18,
            span: 4378..4379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 169,
            column: 2,
            span: 4380..4381,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 169,
            column: 4,
            span: 4382..4383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 169,
            column: 11,
            span: 4384..4390,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 169,
            column: 12,
            span: 4390..4391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 169,
            column: 14,
            span: 4391..4393,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 169,
            column: 15,
            span: 4393..4394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 169,
            column: 19,
            span: 4394..4398,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 169,
            column: 20,
            span: 4398..4399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 169,
            column: 24,
            span: 4399..4403,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 169,
            column: 25,
            span: 4403..4404,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        position: Position {
            line: 169,
            column: 29,
            span: 4405..4408,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 169,
            column: 30,
            span: 4408..4409,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 169,
            column: 31,
            span: 4409..4410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 170,
            column: 7,
            span: 4411..4417,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 170,
            column: 8,
            span: 4417..4418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 170,
            column: 9,
            span: 4418..4419,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 170,
            column: 10,
            span: 4419..4420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 170,
            column: 14,
            span: 4420..4424,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 170,
            column: 15,
            span: 4424..4425,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 170,
            column: 18,
            span: 4425..4428,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 170,
            column: 19,
            span: 4428..4429,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 170,
            column: 22,
            span: 4430..4432,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 170,
            column: 24,
            span: 4433..4434,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: ".3",
                },
            ),
        ),
        position: Position {
            line: 170,
            column: 28,
            span: 4433..4438,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 170,
            column: 29,
            span: 4438..4439,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 170,
            column: 30,
            span: 4439..4440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 170,
            column: 37,
            span: 4441..4447,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 170,
            column: 38,
            span: 4447..4448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 170,
            column: 39,
            span: 4448..4449,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 170,
            column: 40,
            span: 4449..4450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 170,
            column: 44,
            span: 4450..4454,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 170,
            column: 45,
            span: 4454..4455,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 170,
            column: 46,
            span: 4454..4456,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 170,
            column: 47,
            span: 4456..4457,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 170,
            column: 50,
            span: 4458..4460,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-\"",
        ),
        position: Position {
            line: 170,
            column: 54,
            span: 4461..4464,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 170,
            column: 55,
            span: 4464..4465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 171,
            column: 7,
            span: 4466..4472,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 8,
            span: 4472..4473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 171,
            column: 9,
            span: 4473..4474,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 171,
            column: 10,
            span: 4474..4475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 171,
            column: 14,
            span: 4475..4479,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 15,
            span: 4479..4480,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 171,
            column: 18,
            span: 4480..4483,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 19,
            span: 4483..4484,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 171,
            column: 22,
            span: 4485..4487,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 171,
            column: 24,
            span: 4488..4489,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffff",
            ),
        ),
        position: Position {
            line: 171,
            column: 30,
            span: 4488..4495,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 31,
            span: 4495..4496,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 171,
            column: 32,
            span: 4496..4497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 171,
            column: 39,
            span: 4498..4504,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 40,
            span: 4504..4505,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 171,
            column: 41,
            span: 4505..4506,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 171,
            column: 42,
            span: 4506..4507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 171,
            column: 46,
            span: 4507..4511,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 47,
            span: 4511..4512,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 171,
            column: 48,
            span: 4511..4513,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 49,
            span: 4513..4514,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 171,
            column: 52,
            span: 4515..4517,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+ \"",
        ),
        position: Position {
            line: 171,
            column: 57,
            span: 4518..4522,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 58,
            span: 4522..4523,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 172,
            column: 7,
            span: 4524..4530,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 8,
            span: 4530..4531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 172,
            column: 9,
            span: 4531..4532,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 172,
            column: 10,
            span: 4532..4533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 172,
            column: 14,
            span: 4533..4537,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 15,
            span: 4537..4538,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 172,
            column: 18,
            span: 4538..4541,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 19,
            span: 4541..4542,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 172,
            column: 22,
            span: 4543..4545,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".3",
                },
            ),
        ),
        position: Position {
            line: 172,
            column: 26,
            span: 4545..4549,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 27,
            span: 4549..4550,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 172,
            column: 28,
            span: 4550..4551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 172,
            column: 35,
            span: 4552..4558,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 36,
            span: 4558..4559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 172,
            column: 37,
            span: 4559..4560,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 172,
            column: 38,
            span: 4560..4561,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 172,
            column: 42,
            span: 4561..4565,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 43,
            span: 4565..4566,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 172,
            column: 44,
            span: 4565..4567,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 45,
            span: 4567..4568,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 172,
            column: 48,
            span: 4569..4571,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"|\"",
        ),
        position: Position {
            line: 172,
            column: 52,
            span: 4572..4575,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 53,
            span: 4575..4576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 173,
            column: 7,
            span: 4577..4583,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 8,
            span: 4583..4584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 173,
            column: 9,
            span: 4584..4585,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 173,
            column: 10,
            span: 4585..4586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 173,
            column: 14,
            span: 4586..4590,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 15,
            span: 4590..4591,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 173,
            column: 18,
            span: 4591..4594,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 19,
            span: 4594..4595,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 173,
            column: 22,
            span: 4596..4598,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
                exponent: "-3",
            },
        ),
        position: Position {
            line: 173,
            column: 27,
            span: 4598..4603,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 28,
            span: 4603..4604,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 173,
            column: 29,
            span: 4604..4605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 173,
            column: 36,
            span: 4606..4612,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 37,
            span: 4612..4613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 173,
            column: 38,
            span: 4613..4614,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 173,
            column: 39,
            span: 4614..4615,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 173,
            column: 43,
            span: 4615..4619,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 44,
            span: 4619..4620,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 173,
            column: 45,
            span: 4619..4621,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 46,
            span: 4621..4622,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 173,
            column: 49,
            span: 4623..4625,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        position: Position {
            line: 173,
            column: 53,
            span: 4626..4629,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 54,
            span: 4629..4630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 174,
            column: 7,
            span: 4631..4637,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 174,
            column: 8,
            span: 4637..4638,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 174,
            column: 9,
            span: 4638..4639,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 174,
            column: 10,
            span: 4639..4640,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 174,
            column: 14,
            span: 4640..4644,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 174,
            column: 15,
            span: 4644..4645,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 174,
            column: 18,
            span: 4645..4648,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 174,
            column: 19,
            span: 4648..4649,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 174,
            column: 22,
            span: 4650..4652,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "234",
                    after_decimal: "",
                },
                exponent: "13",
            },
        ),
        position: Position {
            line: 174,
            column: 29,
            span: 4652..4659,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 174,
            column: 30,
            span: 4659..4660,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 174,
            column: 31,
            span: 4660..4661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 174,
            column: 38,
            span: 4662..4668,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 174,
            column: 39,
            span: 4668..4669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 174,
            column: 40,
            span: 4669..4670,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 174,
            column: 41,
            span: 4670..4671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 174,
            column: 45,
            span: 4671..4675,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 174,
            column: 46,
            span: 4675..4676,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 174,
            column: 47,
            span: 4675..4677,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 174,
            column: 48,
            span: 4677..4678,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 174,
            column: 51,
            span: 4679..4681,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"E\"",
        ),
        position: Position {
            line: 174,
            column: 55,
            span: 4682..4685,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 174,
            column: 56,
            span: 4685..4686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 175,
            column: 7,
            span: 4687..4693,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 175,
            column: 8,
            span: 4693..4694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 175,
            column: 9,
            span: 4694..4695,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 175,
            column: 10,
            span: 4695..4696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 175,
            column: 14,
            span: 4696..4700,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 175,
            column: 15,
            span: 4700..4701,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 175,
            column: 18,
            span: 4701..4704,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 175,
            column: 19,
            span: 4704..4705,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 175,
            column: 22,
            span: 4706..4708,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0Xdeadbeefdeadbeef",
            ),
        ),
        position: Position {
            line: 175,
            column: 41,
            span: 4708..4727,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 175,
            column: 42,
            span: 4727..4728,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 175,
            column: 43,
            span: 4728..4729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 175,
            column: 50,
            span: 4730..4736,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 175,
            column: 51,
            span: 4736..4737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 175,
            column: 52,
            span: 4737..4738,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 175,
            column: 53,
            span: 4738..4739,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 175,
            column: 57,
            span: 4739..4743,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 175,
            column: 58,
            span: 4743..4744,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 175,
            column: 59,
            span: 4743..4745,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 175,
            column: 60,
            span: 4745..4746,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 175,
            column: 63,
            span: 4747..4749,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\\n\"",
        ),
        position: Position {
            line: 175,
            column: 69,
            span: 4750..4755,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 175,
            column: 70,
            span: 4755..4756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 176,
            column: 7,
            span: 4757..4763,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 176,
            column: 8,
            span: 4763..4764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 176,
            column: 9,
            span: 4764..4765,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 176,
            column: 10,
            span: 4765..4766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 176,
            column: 14,
            span: 4766..4770,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 176,
            column: 15,
            span: 4770..4771,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 176,
            column: 18,
            span: 4771..4774,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 176,
            column: 19,
            span: 4774..4775,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 176,
            column: 22,
            span: 4776..4778,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "01",
                    after_decimal: ".13a",
                },
                exponent: "3",
            },
        ),
        position: Position {
            line: 176,
            column: 32,
            span: 4778..4788,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 176,
            column: 33,
            span: 4788..4789,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 176,
            column: 34,
            span: 4789..4790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 176,
            column: 41,
            span: 4791..4797,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 176,
            column: 42,
            span: 4797..4798,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 176,
            column: 43,
            span: 4798..4799,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 176,
            column: 44,
            span: 4799..4800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 176,
            column: 48,
            span: 4800..4804,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 176,
            column: 49,
            span: 4804..4805,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 176,
            column: 50,
            span: 4804..4806,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 176,
            column: 51,
            span: 4806..4807,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 176,
            column: 54,
            span: 4808..4810,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"e\"",
        ),
        position: Position {
            line: 176,
            column: 58,
            span: 4811..4814,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 176,
            column: 59,
            span: 4814..4815,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 178,
            column: 3,
            span: 4817..4819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 179,
            column: 9,
            span: 4859..4865,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 179,
            column: 10,
            span: 4865..4866,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 179,
            column: 11,
            span: 4866..4867,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 179,
            column: 12,
            span: 4867..4868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 179,
            column: 16,
            span: 4868..4872,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 179,
            column: 17,
            span: 4872..4873,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 179,
            column: 20,
            span: 4873..4876,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 179,
            column: 21,
            span: 4876..4877,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 179,
            column: 24,
            span: 4878..4880,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 179,
            column: 28,
            span: 4881..4884,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 179,
            column: 29,
            span: 4884..4885,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 180,
            column: 8,
            span: 4898..4903,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 180,
            column: 10,
            span: 4904..4905,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 180,
            column: 12,
            span: 4906..4907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 180,
            column: 14,
            span: 4908..4909,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 180,
            column: 15,
            span: 4909..4910,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 180,
            column: 19,
            span: 4910..4914,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 180,
            column: 20,
            span: 4914..4915,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        position: Position {
            line: 180,
            column: 23,
            span: 4915..4918,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 180,
            column: 24,
            span: 4918..4919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 181,
            column: 9,
            span: 4945..4951,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 10,
            span: 4951..4952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 181,
            column: 16,
            span: 4952..4958,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 181,
            column: 17,
            span: 4958..4959,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 181,
            column: 21,
            span: 4959..4963,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 22,
            span: 4963..4964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 181,
            column: 23,
            span: 4964..4965,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 181,
            column: 24,
            span: 4965..4966,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^00*\\n$\"",
        ),
        position: Position {
            line: 181,
            column: 34,
            span: 4967..4976,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 35,
            span: 4976..4977,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 36,
            span: 4977..4978,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 182,
            column: 0,
            span: 5000..5003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 184,
            column: 7,
            span: 5005..5011,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 8,
            span: 5011..5012,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 184,
            column: 11,
            span: 5012..5015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 184,
            column: 13,
            span: 5016..5017,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 184,
            column: 14,
            span: 5017..5018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 184,
            column: 18,
            span: 5018..5022,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 19,
            span: 5022..5023,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 184,
            column: 22,
            span: 5023..5026,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 23,
            span: 5026..5027,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 24,
            span: 5027..5028,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 184,
            column: 25,
            span: 5028..5029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 184,
            column: 32,
            span: 5030..5036,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 33,
            span: 5036..5037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 184,
            column: 34,
            span: 5037..5038,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 184,
            column: 35,
            span: 5038..5039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 184,
            column: 39,
            span: 5039..5043,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 40,
            span: 5043..5044,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 184,
            column: 41,
            span: 5043..5045,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 42,
            span: 5045..5046,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 184,
            column: 45,
            span: 5047..5049,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"e+\"",
        ),
        position: Position {
            line: 184,
            column: 50,
            span: 5050..5054,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 51,
            span: 5054..5055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 185,
            column: 7,
            span: 5056..5062,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 185,
            column: 8,
            span: 5062..5063,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 185,
            column: 11,
            span: 5063..5066,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 185,
            column: 13,
            span: 5067..5068,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 185,
            column: 14,
            span: 5068..5069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 185,
            column: 18,
            span: 5069..5073,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 185,
            column: 19,
            span: 5073..5074,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 185,
            column: 22,
            span: 5074..5077,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 185,
            column: 23,
            span: 5077..5078,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 185,
            column: 24,
            span: 5078..5079,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 185,
            column: 25,
            span: 5079..5080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 185,
            column: 32,
            span: 5081..5087,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 185,
            column: 33,
            span: 5087..5088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 185,
            column: 34,
            span: 5088..5089,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 185,
            column: 35,
            span: 5089..5090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 185,
            column: 39,
            span: 5090..5094,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 185,
            column: 40,
            span: 5094..5095,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 185,
            column: 41,
            span: 5094..5096,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 185,
            column: 42,
            span: 5096..5097,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 185,
            column: 45,
            span: 5098..5100,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        position: Position {
            line: 185,
            column: 49,
            span: 5101..5104,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 185,
            column: 50,
            span: 5104..5105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 186,
            column: 7,
            span: 5106..5112,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 186,
            column: 8,
            span: 5112..5113,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 186,
            column: 11,
            span: 5113..5116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 186,
            column: 13,
            span: 5117..5118,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 186,
            column: 14,
            span: 5118..5119,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 186,
            column: 18,
            span: 5119..5123,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 186,
            column: 19,
            span: 5123..5124,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 186,
            column: 22,
            span: 5124..5127,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 186,
            column: 23,
            span: 5127..5128,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 186,
            column: 24,
            span: 5128..5129,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 186,
            column: 25,
            span: 5129..5130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 186,
            column: 32,
            span: 5131..5137,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 186,
            column: 33,
            span: 5137..5138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 186,
            column: 34,
            span: 5138..5139,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 186,
            column: 35,
            span: 5139..5140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 186,
            column: 39,
            span: 5140..5144,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 186,
            column: 40,
            span: 5144..5145,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 186,
            column: 41,
            span: 5144..5146,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 186,
            column: 42,
            span: 5146..5147,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 186,
            column: 45,
            span: 5148..5150,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-;\"",
        ),
        position: Position {
            line: 186,
            column: 50,
            span: 5151..5155,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 186,
            column: 51,
            span: 5155..5156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 187,
            column: 7,
            span: 5157..5163,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 187,
            column: 8,
            span: 5163..5164,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 187,
            column: 11,
            span: 5164..5167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 187,
            column: 13,
            span: 5168..5169,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 187,
            column: 14,
            span: 5169..5170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 187,
            column: 18,
            span: 5170..5174,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 187,
            column: 19,
            span: 5174..5175,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 187,
            column: 22,
            span: 5175..5178,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 187,
            column: 23,
            span: 5178..5179,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 187,
            column: 24,
            span: 5179..5180,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 187,
            column: 25,
            span: 5180..5181,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 187,
            column: 32,
            span: 5182..5188,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 187,
            column: 33,
            span: 5188..5189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 187,
            column: 34,
            span: 5189..5190,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 187,
            column: 35,
            span: 5190..5191,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 187,
            column: 39,
            span: 5191..5195,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 187,
            column: 40,
            span: 5195..5196,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 187,
            column: 41,
            span: 5195..5197,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 187,
            column: 42,
            span: 5197..5198,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 187,
            column: 45,
            span: 5199..5201,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        position: Position {
            line: 187,
            column: 49,
            span: 5202..5205,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 187,
            column: 50,
            span: 5205..5206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 188,
            column: 7,
            span: 5207..5213,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 8,
            span: 5213..5214,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 188,
            column: 11,
            span: 5214..5217,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 188,
            column: 13,
            span: 5218..5219,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 188,
            column: 14,
            span: 5219..5220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 188,
            column: 18,
            span: 5220..5224,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 19,
            span: 5224..5225,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 188,
            column: 22,
            span: 5225..5228,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 23,
            span: 5228..5229,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 24,
            span: 5229..5230,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 188,
            column: 25,
            span: 5230..5231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 188,
            column: 32,
            span: 5232..5238,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 33,
            span: 5238..5239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 188,
            column: 34,
            span: 5239..5240,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 188,
            column: 35,
            span: 5240..5241,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 188,
            column: 39,
            span: 5241..5245,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 40,
            span: 5245..5246,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 188,
            column: 41,
            span: 5245..5247,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 42,
            span: 5247..5248,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 188,
            column: 45,
            span: 5249..5251,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        position: Position {
            line: 188,
            column: 49,
            span: 5252..5255,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 50,
            span: 5255..5256,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 189,
            column: 7,
            span: 5257..5263,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 8,
            span: 5263..5264,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 189,
            column: 11,
            span: 5264..5267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 189,
            column: 13,
            span: 5268..5269,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 189,
            column: 14,
            span: 5269..5270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 189,
            column: 18,
            span: 5270..5274,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 19,
            span: 5274..5275,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 189,
            column: 22,
            span: 5275..5278,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 23,
            span: 5278..5279,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 24,
            span: 5279..5280,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 189,
            column: 25,
            span: 5280..5281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 189,
            column: 32,
            span: 5282..5288,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 33,
            span: 5288..5289,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 189,
            column: 36,
            span: 5289..5292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 189,
            column: 38,
            span: 5293..5294,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 189,
            column: 39,
            span: 5294..5295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 189,
            column: 43,
            span: 5295..5299,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 44,
            span: 5299..5300,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 189,
            column: 45,
            span: 5299..5301,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 46,
            span: 5301..5302,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 47,
            span: 5302..5303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 190,
            column: 7,
            span: 5321..5327,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 8,
            span: 5327..5328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 190,
            column: 9,
            span: 5328..5329,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 190,
            column: 10,
            span: 5329..5330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 190,
            column: 15,
            span: 5330..5335,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 16,
            span: 5335..5336,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 190,
            column: 17,
            span: 5336..5337,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 190,
            column: 18,
            span: 5337..5338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 191,
            column: 7,
            span: 5339..5345,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 8,
            span: 5345..5346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 191,
            column: 10,
            span: 5346..5348,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 191,
            column: 11,
            span: 5348..5349,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 191,
            column: 17,
            span: 5349..5355,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 18,
            span: 5355..5356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 191,
            column: 22,
            span: 5356..5360,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 23,
            span: 5360..5361,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 24,
            span: 5361..5362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 195,
            column: 7,
            span: 5389..5395,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 195,
            column: 8,
            span: 5395..5396,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 195,
            column: 11,
            span: 5396..5399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 195,
            column: 17,
            span: 5400..5405,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 195,
            column: 18,
            span: 5405..5406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 195,
            column: 20,
            span: 5406..5408,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 195,
            column: 21,
            span: 5408..5409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 195,
            column: 26,
            span: 5409..5414,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 195,
            column: 27,
            span: 5414..5415,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"non-existent-file\"",
        ),
        position: Position {
            line: 195,
            column: 47,
            span: 5416..5435,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 195,
            column: 48,
            span: 5435..5436,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 195,
            column: 49,
            span: 5436..5437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 196,
            column: 7,
            span: 5438..5444,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 196,
            column: 8,
            span: 5444..5445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 196,
            column: 10,
            span: 5445..5447,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 196,
            column: 11,
            span: 5447..5448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rename",
        ),
        position: Position {
            line: 196,
            column: 17,
            span: 5448..5454,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 196,
            column: 18,
            span: 5454..5455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        position: Position {
            line: 196,
            column: 27,
            span: 5455..5464,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 196,
            column: 28,
            span: 5464..5465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 196,
            column: 33,
            span: 5466..5470,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 196,
            column: 34,
            span: 5470..5471,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 196,
            column: 35,
            span: 5471..5472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 197,
            column: 3,
            span: 5473..5475,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 197,
            column: 4,
            span: 5475..5476,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 197,
            column: 10,
            span: 5476..5482,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 197,
            column: 11,
            span: 5482..5483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        position: Position {
            line: 197,
            column: 20,
            span: 5483..5492,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 197,
            column: 21,
            span: 5492..5493,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 198,
            column: 6,
            span: 5494..5499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 198,
            column: 8,
            span: 5500..5501,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 198,
            column: 10,
            span: 5502..5503,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 198,
            column: 0,
            span: 5503..5505,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 199,
            column: 6,
            span: 5506..5511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 199,
            column: 8,
            span: 5512..5513,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 199,
            column: 10,
            span: 5514..5515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 199,
            column: 13,
            span: 5516..5518,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 199,
            column: 14,
            span: 5518..5519,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 199,
            column: 19,
            span: 5519..5524,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 199,
            column: 20,
            span: 5524..5525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 199,
            column: 24,
            span: 5525..5529,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 199,
            column: 25,
            span: 5529..5530,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 200,
            column: 6,
            span: 5531..5536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 200,
            column: 8,
            span: 5537..5538,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 200,
            column: 9,
            span: 5538..5539,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 200,
            column: 10,
            span: 5539..5540,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 200,
            column: 13,
            span: 5541..5543,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 200,
            column: 15,
            span: 5544..5545,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 200,
            column: 17,
            span: 5546..5547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 200,
            column: 19,
            span: 5548..5549,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 200,
            column: 21,
            span: 5550..5551,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 200,
            column: 23,
            span: 5551..5553,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 200,
            column: 27,
            span: 5554..5557,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 200,
            column: 28,
            span: 5557..5558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 201,
            column: 7,
            span: 5559..5565,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 201,
            column: 8,
            span: 5565..5566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 201,
            column: 9,
            span: 5566..5567,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 201,
            column: 12,
            span: 5568..5570,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 201,
            column: 14,
            span: 5570..5572,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 201,
            column: 15,
            span: 5572..5573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 202,
            column: 9,
            span: 5607..5615,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 202,
            column: 10,
            span: 5615..5616,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file is already closed\"",
        ),
        position: Position {
            line: 202,
            column: 34,
            span: 5616..5640,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 202,
            column: 35,
            span: 5640..5641,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 202,
            column: 37,
            span: 5642..5643,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 202,
            column: 38,
            span: 5643..5644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 203,
            column: 9,
            span: 5645..5653,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 203,
            column: 10,
            span: 5653..5654,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file is already closed\"",
        ),
        position: Position {
            line: 203,
            column: 34,
            span: 5654..5678,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 203,
            column: 35,
            span: 5678..5679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 203,
            column: 37,
            span: 5680..5681,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 203,
            column: 38,
            span: 5681..5682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 205,
            column: 2,
            span: 5714..5715,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 205,
            column: 4,
            span: 5716..5717,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 205,
            column: 0,
            span: 5717..5719,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 206,
            column: 4,
            span: 5720..5723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 206,
            column: 6,
            span: 5724..5725,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 206,
            column: 9,
            span: 5726..5728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 206,
            column: 12,
            span: 5729..5731,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 206,
            column: 13,
            span: 5731..5732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 206,
            column: 18,
            span: 5732..5737,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 206,
            column: 19,
            span: 5737..5738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 206,
            column: 23,
            span: 5738..5742,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 206,
            column: 24,
            span: 5742..5743,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 206,
            column: 27,
            span: 5744..5746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 206,
            column: 30,
            span: 5747..5749,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 206,
            column: 31,
            span: 5749..5750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 206,
            column: 36,
            span: 5750..5755,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 206,
            column: 37,
            span: 5755..5756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 206,
            column: 38,
            span: 5756..5757,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 206,
            column: 39,
            span: 5757..5758,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        position: Position {
            line: 206,
            column: 44,
            span: 5759..5763,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 206,
            column: 45,
            span: 5763..5764,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 206,
            column: 46,
            span: 5764..5765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 206,
            column: 48,
            span: 5766..5767,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 206,
            column: 50,
            span: 5768..5769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 206,
            column: 52,
            span: 5770..5771,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 206,
            column: 54,
            span: 5772..5773,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 206,
            column: 56,
            span: 5773..5775,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 206,
            column: 0,
            span: 5776..5779,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 207,
            column: 3,
            span: 5780..5782,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 207,
            column: 4,
            span: 5782..5783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 207,
            column: 9,
            span: 5783..5788,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 207,
            column: 10,
            span: 5788..5789,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 207,
            column: 11,
            span: 5789..5790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 208,
            column: 7,
            span: 5791..5797,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 208,
            column: 8,
            span: 5797..5798,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 208,
            column: 9,
            span: 5798..5799,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 208,
            column: 12,
            span: 5800..5802,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 208,
            column: 14,
            span: 5802..5804,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 208,
            column: 15,
            span: 5804..5805,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 210,
            column: 6,
            span: 5842..5847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 210,
            column: 8,
            span: 5848..5849,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 210,
            column: 10,
            span: 5850..5851,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 210,
            column: 17,
            span: 5852..5858,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 210,
            column: 18,
            span: 5858..5859,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 210,
            column: 20,
            span: 5859..5861,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 210,
            column: 21,
            span: 5861..5862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 210,
            column: 25,
            span: 5862..5866,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 210,
            column: 26,
            span: 5866..5867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        position: Position {
            line: 210,
            column: 35,
            span: 5867..5876,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 210,
            column: 36,
            span: 5876..5877,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 210,
            column: 37,
            span: 5877..5878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 211,
            column: 7,
            span: 5879..5885,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 211,
            column: 8,
            span: 5885..5886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 211,
            column: 10,
            span: 5886..5888,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 211,
            column: 11,
            span: 5888..5889,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 211,
            column: 15,
            span: 5889..5893,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 211,
            column: 16,
            span: 5893..5894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 211,
            column: 17,
            span: 5894..5895,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 211,
            column: 18,
            span: 5895..5896,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 211,
            column: 21,
            span: 5897..5899,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file\"",
        ),
        position: Position {
            line: 211,
            column: 28,
            span: 5900..5906,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 211,
            column: 29,
            span: 5906..5907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 212,
            column: 3,
            span: 5908..5910,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 212,
            column: 4,
            span: 5910..5911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 212,
            column: 10,
            span: 5911..5917,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 212,
            column: 11,
            span: 5917..5918,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 212,
            column: 15,
            span: 5918..5922,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 212,
            column: 16,
            span: 5922..5923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 213,
            column: 7,
            span: 5924..5930,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 213,
            column: 8,
            span: 5930..5931,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 213,
            column: 11,
            span: 5931..5934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 213,
            column: 14,
            span: 5935..5937,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 213,
            column: 15,
            span: 5937..5938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 213,
            column: 21,
            span: 5938..5944,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 213,
            column: 22,
            span: 5944..5945,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 213,
            column: 23,
            span: 5945..5946,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 213,
            column: 24,
            span: 5946..5947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 213,
            column: 28,
            span: 5947..5951,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 213,
            column: 29,
            span: 5951..5952,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 213,
            column: 30,
            span: 5952..5953,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 213,
            column: 31,
            span: 5953..5954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 214,
            column: 2,
            span: 5955..5956,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 214,
            column: 4,
            span: 5957..5958,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 214,
            column: 0,
            span: 5958..5960,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 215,
            column: 4,
            span: 5961..5964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 215,
            column: 6,
            span: 5965..5966,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 215,
            column: 9,
            span: 5967..5969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 215,
            column: 11,
            span: 5970..5971,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 215,
            column: 12,
            span: 5971..5972,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 215,
            column: 17,
            span: 5972..5977,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 215,
            column: 18,
            span: 5977..5978,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 215,
            column: 19,
            span: 5978..5979,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 215,
            column: 22,
            span: 5980..5982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 215,
            column: 25,
            span: 5983..5985,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 215,
            column: 26,
            span: 5985..5986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 215,
            column: 31,
            span: 5986..5991,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 215,
            column: 32,
            span: 5991..5992,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 215,
            column: 33,
            span: 5992..5993,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 215,
            column: 34,
            span: 5993..5994,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        position: Position {
            line: 215,
            column: 39,
            span: 5995..5999,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 215,
            column: 40,
            span: 5999..6000,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 215,
            column: 41,
            span: 6000..6001,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 215,
            column: 43,
            span: 6002..6003,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 215,
            column: 45,
            span: 6004..6005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 215,
            column: 47,
            span: 6006..6007,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 215,
            column: 49,
            span: 6008..6009,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 215,
            column: 51,
            span: 6009..6011,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 215,
            column: 0,
            span: 6012..6015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 216,
            column: 7,
            span: 6016..6022,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 216,
            column: 8,
            span: 6022..6023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        position: Position {
            line: 216,
            column: 16,
            span: 6023..6031,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 216,
            column: 17,
            span: 6031..6032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 216,
            column: 18,
            span: 6032..6033,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 216,
            column: 19,
            span: 6033..6034,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 216,
            column: 20,
            span: 6034..6035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 216,
            column: 23,
            span: 6035..6038,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 216,
            column: 24,
            span: 6038..6039,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 216,
            column: 25,
            span: 6038..6040,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 216,
            column: 26,
            span: 6040..6041,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 216,
            column: 28,
            span: 6041..6043,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 216,
            column: 29,
            span: 6043..6044,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 216,
            column: 32,
            span: 6045..6047,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file \"",
        ),
        position: Position {
            line: 216,
            column: 40,
            span: 6048..6055,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 216,
            column: 41,
            span: 6055..6056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 217,
            column: 7,
            span: 6057..6063,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 217,
            column: 8,
            span: 6063..6064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 217,
            column: 9,
            span: 6064..6065,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 217,
            column: 10,
            span: 6065..6066,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 217,
            column: 15,
            span: 6066..6071,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 217,
            column: 16,
            span: 6071..6072,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 217,
            column: 17,
            span: 6072..6073,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 217,
            column: 18,
            span: 6073..6074,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 217,
            column: 19,
            span: 6074..6075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 217,
            column: 22,
            span: 6076..6078,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 217,
            column: 23,
            span: 6078..6079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 217,
            column: 28,
            span: 6079..6084,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 217,
            column: 29,
            span: 6084..6085,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 217,
            column: 30,
            span: 6085..6086,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 218,
            column: 7,
            span: 6087..6093,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 218,
            column: 8,
            span: 6093..6094,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 218,
            column: 9,
            span: 6094..6095,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 218,
            column: 12,
            span: 6096..6098,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 218,
            column: 14,
            span: 6098..6100,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 218,
            column: 15,
            span: 6100..6101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 219,
            column: 9,
            span: 6102..6110,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 219,
            column: 10,
            span: 6110..6111,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"closed file\"",
        ),
        position: Position {
            line: 219,
            column: 23,
            span: 6111..6124,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 219,
            column: 24,
            span: 6124..6125,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 219,
            column: 27,
            span: 6126..6128,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 219,
            column: 28,
            span: 6128..6129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 219,
            column: 33,
            span: 6129..6134,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 219,
            column: 34,
            span: 6134..6135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 219,
            column: 36,
            span: 6136..6137,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 219,
            column: 37,
            span: 6137..6138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 220,
            column: 7,
            span: 6139..6145,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 220,
            column: 8,
            span: 6145..6146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        position: Position {
            line: 220,
            column: 16,
            span: 6146..6154,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 220,
            column: 17,
            span: 6154..6155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 220,
            column: 18,
            span: 6155..6156,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 220,
            column: 19,
            span: 6156..6157,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 220,
            column: 22,
            span: 6158..6160,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file (closed)\"",
        ),
        position: Position {
            line: 220,
            column: 38,
            span: 6161..6176,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 220,
            column: 39,
            span: 6176..6177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 221,
            column: 7,
            span: 6178..6184,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 221,
            column: 8,
            span: 6184..6185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 221,
            column: 10,
            span: 6185..6187,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 221,
            column: 11,
            span: 6187..6188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 221,
            column: 15,
            span: 6188..6192,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 221,
            column: 16,
            span: 6192..6193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 221,
            column: 17,
            span: 6193..6194,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 221,
            column: 18,
            span: 6194..6195,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 221,
            column: 21,
            span: 6196..6198,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"closed file\"",
        ),
        position: Position {
            line: 221,
            column: 35,
            span: 6199..6212,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 221,
            column: 36,
            span: 6212..6213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 222,
            column: 3,
            span: 6214..6216,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 222,
            column: 4,
            span: 6216..6217,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 222,
            column: 9,
            span: 6217..6222,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 222,
            column: 10,
            span: 6222..6223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 222,
            column: 14,
            span: 6223..6227,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 222,
            column: 15,
            span: 6227..6228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 223,
            column: 2,
            span: 6229..6230,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 223,
            column: 4,
            span: 6231..6232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 223,
            column: 7,
            span: 6233..6235,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 223,
            column: 8,
            span: 6235..6236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 223,
            column: 12,
            span: 6236..6240,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 223,
            column: 13,
            span: 6240..6241,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        position: Position {
            line: 223,
            column: 22,
            span: 6241..6250,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 223,
            column: 23,
            span: 6250..6251,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 223,
            column: 24,
            span: 6251..6252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 223,
            column: 29,
            span: 6252..6257,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 223,
            column: 30,
            span: 6257..6258,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 223,
            column: 31,
            span: 6258..6259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 224,
            column: 2,
            span: 6260..6261,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 224,
            column: 4,
            span: 6262..6263,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 0,
            span: 6263..6265,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 225,
            column: 4,
            span: 6266..6269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 225,
            column: 6,
            span: 6270..6271,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 225,
            column: 9,
            span: 6272..6274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 225,
            column: 12,
            span: 6275..6277,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 225,
            column: 13,
            span: 6277..6278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 225,
            column: 18,
            span: 6278..6283,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 225,
            column: 19,
            span: 6283..6284,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 225,
            column: 20,
            span: 6284..6285,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 225,
            column: 23,
            span: 6286..6288,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 225,
            column: 30,
            span: 6289..6295,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 225,
            column: 31,
            span: 6295..6296,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 225,
            column: 32,
            span: 6296..6297,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 225,
            column: 35,
            span: 6298..6300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 225,
            column: 37,
            span: 6301..6302,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 225,
            column: 38,
            span: 6302..6303,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 225,
            column: 39,
            span: 6303..6304,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 225,
            column: 40,
            span: 6304..6305,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 225,
            column: 41,
            span: 6305..6306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 225,
            column: 43,
            span: 6307..6308,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 225,
            column: 45,
            span: 6309..6310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 225,
            column: 47,
            span: 6311..6312,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 225,
            column: 49,
            span: 6313..6314,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 225,
            column: 51,
            span: 6314..6316,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 225,
            column: 0,
            span: 6317..6320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 226,
            column: 2,
            span: 6321..6322,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 226,
            column: 4,
            span: 6323..6324,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 226,
            column: 8,
            span: 6325..6328,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 226,
            column: 9,
            span: 6328..6329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 226,
            column: 24,
            span: 6330..6344,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 226,
            column: 25,
            span: 6344..6345,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 226,
            column: 26,
            span: 6345..6346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 227,
            column: 7,
            span: 6347..6353,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 227,
            column: 8,
            span: 6353..6354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 227,
            column: 9,
            span: 6354..6355,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 227,
            column: 12,
            span: 6356..6358,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 227,
            column: 14,
            span: 6358..6360,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 227,
            column: 15,
            span: 6360..6361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 228,
            column: 7,
            span: 6362..6368,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 228,
            column: 8,
            span: 6368..6369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 228,
            column: 10,
            span: 6369..6371,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 228,
            column: 11,
            span: 6371..6372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 228,
            column: 17,
            span: 6372..6378,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 228,
            column: 18,
            span: 6378..6379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        position: Position {
            line: 228,
            column: 27,
            span: 6379..6388,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 228,
            column: 28,
            span: 6388..6389,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 228,
            column: 29,
            span: 6389..6390,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 230,
            column: 3,
            span: 6392..6394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 231,
            column: 5,
            span: 6414..6416,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 231,
            column: 6,
            span: 6416..6417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 231,
            column: 12,
            span: 6417..6423,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 231,
            column: 13,
            span: 6423..6424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        position: Position {
            line: 231,
            column: 22,
            span: 6424..6433,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 231,
            column: 23,
            span: 6433..6434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 232,
            column: 5,
            span: 6437..6439,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 232,
            column: 6,
            span: 6439..6440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 232,
            column: 11,
            span: 6440..6445,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 232,
            column: 12,
            span: 6445..6446,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 232,
            column: 18,
            span: 6446..6452,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 232,
            column: 19,
            span: 6452..6453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 232,
            column: 22,
            span: 6453..6456,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 232,
            column: 23,
            span: 6456..6457,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 232,
            column: 26,
            span: 6457..6460,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 232,
            column: 27,
            span: 6460..6461,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 232,
            column: 31,
            span: 6461..6465,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 232,
            column: 32,
            span: 6465..6466,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 232,
            column: 33,
            span: 6466..6467,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        position: Position {
            line: 232,
            column: 38,
            span: 6468..6472,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 232,
            column: 39,
            span: 6472..6473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 233,
            column: 5,
            span: 6476..6478,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 233,
            column: 6,
            span: 6478..6479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 233,
            column: 11,
            span: 6479..6484,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 233,
            column: 12,
            span: 6484..6485,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 233,
            column: 13,
            span: 6485..6486,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 234,
            column: 8,
            span: 6489..6494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 234,
            column: 10,
            span: 6495..6496,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 234,
            column: 12,
            span: 6497..6498,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 234,
            column: 13,
            span: 6498..6499,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 234,
            column: 14,
            span: 6499..6500,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 234,
            column: 15,
            span: 6500..6501,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 234,
            column: 19,
            span: 6502..6505,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 234,
            column: 21,
            span: 6506..6507,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 234,
            column: 23,
            span: 6508..6509,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 234,
            column: 25,
            span: 6509..6511,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 26,
            span: 6511..6512,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "250",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 234,
            column: 30,
            span: 6512..6516,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 234,
            column: 33,
            span: 6517..6519,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 234,
            column: 35,
            span: 6520..6521,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 234,
            column: 36,
            span: 6521..6522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 234,
            column: 37,
            span: 6522..6523,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 234,
            column: 38,
            span: 6523..6524,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 234,
            column: 40,
            span: 6525..6526,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 234,
            column: 42,
            span: 6526..6528,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 234,
            column: 0,
            span: 6529..6532,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 235,
            column: 4,
            span: 6535..6536,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 235,
            column: 6,
            span: 6537..6538,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 235,
            column: 8,
            span: 6539..6540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 235,
            column: 10,
            span: 6540..6542,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 235,
            column: 11,
            span: 6542..6543,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 235,
            column: 16,
            span: 6543..6548,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 235,
            column: 17,
            span: 6548..6549,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        position: Position {
            line: 235,
            column: 26,
            span: 6549..6558,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 235,
            column: 27,
            span: 6558..6559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 235,
            column: 33,
            span: 6560..6565,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 235,
            column: 34,
            span: 6565..6566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 235,
            column: 40,
            span: 6566..6572,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 235,
            column: 41,
            span: 6572..6573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 235,
            column: 42,
            span: 6573..6574,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 235,
            column: 43,
            span: 6574..6575,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 235,
            column: 44,
            span: 6575..6576,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 235,
            column: 45,
            span: 6576..6577,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 235,
            column: 46,
            span: 6577..6578,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 235,
            column: 47,
            span: 6578..6579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 237,
            column: 9,
            span: 6606..6612,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 237,
            column: 10,
            span: 6612..6613,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 237,
            column: 11,
            span: 6613..6614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 237,
            column: 12,
            span: 6614..6615,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 237,
            column: 15,
            span: 6616..6618,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "250",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 237,
            column: 19,
            span: 6618..6622,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 237,
            column: 23,
            span: 6623..6626,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 237,
            column: 25,
            span: 6627..6628,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 237,
            column: 26,
            span: 6628..6629,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 237,
            column: 27,
            span: 6628..6630,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 237,
            column: 28,
            span: 6630..6631,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 237,
            column: 31,
            span: 6632..6634,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 237,
            column: 35,
            span: 6635..6638,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 237,
            column: 39,
            span: 6639..6642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 237,
            column: 41,
            span: 6643..6644,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 237,
            column: 42,
            span: 6644..6645,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 237,
            column: 43,
            span: 6645..6646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 237,
            column: 44,
            span: 6646..6647,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 237,
            column: 45,
            span: 6647..6648,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 237,
            column: 48,
            span: 6649..6651,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 237,
            column: 52,
            span: 6652..6655,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 237,
            column: 53,
            span: 6655..6656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 238,
            column: 4,
            span: 6659..6660,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 238,
            column: 5,
            span: 6660..6661,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 238,
            column: 6,
            span: 6661..6662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 238,
            column: 7,
            span: 6662..6663,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 238,
            column: 9,
            span: 6664..6665,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 238,
            column: 11,
            span: 6665..6667,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 238,
            column: 12,
            span: 6667..6668,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 238,
            column: 14,
            span: 6669..6670,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 238,
            column: 16,
            span: 6670..6672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 239,
            column: 11,
            span: 6694..6702,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 239,
            column: 12,
            span: 6702..6703,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many arguments\"",
        ),
        position: Position {
            line: 239,
            column: 32,
            span: 6703..6723,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 239,
            column: 33,
            span: 6723..6724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 239,
            column: 36,
            span: 6725..6727,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 239,
            column: 37,
            span: 6727..6728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 239,
            column: 42,
            span: 6728..6733,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 239,
            column: 43,
            span: 6733..6734,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        position: Position {
            line: 239,
            column: 53,
            span: 6735..6744,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 239,
            column: 54,
            span: 6744..6745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 239,
            column: 60,
            span: 6746..6751,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 239,
            column: 61,
            span: 6751..6752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 239,
            column: 67,
            span: 6752..6758,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 239,
            column: 68,
            span: 6758..6759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 239,
            column: 69,
            span: 6759..6760,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 239,
            column: 70,
            span: 6760..6761,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 239,
            column: 71,
            span: 6761..6762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 240,
            column: 17,
            span: 6765..6779,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 240,
            column: 18,
            span: 6779..6780,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 240,
            column: 19,
            span: 6780..6781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 241,
            column: 9,
            span: 6818..6824,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 241,
            column: 10,
            span: 6824..6825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 241,
            column: 12,
            span: 6825..6827,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 241,
            column: 13,
            span: 6827..6828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 241,
            column: 19,
            span: 6828..6834,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 241,
            column: 20,
            span: 6834..6835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        position: Position {
            line: 241,
            column: 29,
            span: 6835..6844,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 241,
            column: 30,
            span: 6844..6845,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 241,
            column: 31,
            span: 6845..6846,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 242,
            column: 0,
            span: 6847..6850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 244,
            column: 3,
            span: 6852..6854,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 244,
            column: 4,
            span: 6854..6855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 244,
            column: 9,
            span: 6855..6860,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 244,
            column: 10,
            span: 6860..6861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 244,
            column: 14,
            span: 6861..6865,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 244,
            column: 15,
            span: 6865..6866,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 245,
            column: 3,
            span: 6867..6869,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 246,
            column: 8,
            span: 6895..6900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 246,
            column: 10,
            span: 6901..6902,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 246,
            column: 11,
            span: 6902..6903,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 246,
            column: 12,
            span: 6903..6904,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 246,
            column: 13,
            span: 6904..6905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 246,
            column: 14,
            span: 6905..6906,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 246,
            column: 16,
            span: 6907..6908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 246,
            column: 19,
            span: 6909..6911,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 246,
            column: 20,
            span: 6911..6912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 246,
            column: 25,
            span: 6912..6917,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 246,
            column: 26,
            span: 6917..6918,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 246,
            column: 27,
            span: 6918..6919,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 246,
            column: 28,
            span: 6919..6920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 246,
            column: 33,
            span: 6920..6925,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 246,
            column: 34,
            span: 6925..6926,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 246,
            column: 40,
            span: 6926..6932,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 246,
            column: 41,
            span: 6932..6933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 247,
            column: 9,
            span: 6936..6942,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 247,
            column: 10,
            span: 6942..6943,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 247,
            column: 13,
            span: 6943..6946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 247,
            column: 15,
            span: 6947..6948,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 247,
            column: 19,
            span: 6949..6952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 247,
            column: 24,
            span: 6953..6957,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 247,
            column: 25,
            span: 6957..6958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 247,
            column: 26,
            span: 6958..6959,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 247,
            column: 27,
            span: 6959..6960,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 247,
            column: 30,
            span: 6961..6963,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 247,
            column: 39,
            span: 6964..6972,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 247,
            column: 43,
            span: 6973..6976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 247,
            column: 48,
            span: 6977..6981,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 247,
            column: 49,
            span: 6981..6982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 247,
            column: 50,
            span: 6982..6983,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 247,
            column: 51,
            span: 6983..6984,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 247,
            column: 54,
            span: 6985..6987,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        position: Position {
            line: 247,
            column: 63,
            span: 6988..6996,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 247,
            column: 64,
            span: 6996..6997,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 248,
            column: 0,
            span: 6998..7001,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 249,
            column: 9,
            span: 7002..7010,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 249,
            column: 10,
            span: 7010..7011,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid format\"",
        ),
        position: Position {
            line: 249,
            column: 26,
            span: 7011..7027,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 249,
            column: 27,
            span: 7027..7028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 249,
            column: 30,
            span: 7029..7031,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 249,
            column: 31,
            span: 7031..7032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 249,
            column: 35,
            span: 7032..7036,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 249,
            column: 36,
            span: 7036..7037,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 249,
            column: 40,
            span: 7038..7041,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 249,
            column: 41,
            span: 7041..7042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 250,
            column: 7,
            span: 7043..7049,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 250,
            column: 8,
            span: 7049..7050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 250,
            column: 10,
            span: 7050..7052,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 250,
            column: 11,
            span: 7052..7053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 250,
            column: 15,
            span: 7053..7057,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 250,
            column: 16,
            span: 7057..7058,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 250,
            column: 17,
            span: 7057..7059,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 250,
            column: 18,
            span: 7059..7060,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 250,
            column: 21,
            span: 7061..7063,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 250,
            column: 24,
            span: 7064..7066,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 250,
            column: 25,
            span: 7066..7067,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 251,
            column: 7,
            span: 7081..7087,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 251,
            column: 8,
            span: 7087..7088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 251,
            column: 10,
            span: 7088..7090,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 251,
            column: 11,
            span: 7090..7091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 251,
            column: 15,
            span: 7091..7095,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 251,
            column: 16,
            span: 7095..7096,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 251,
            column: 17,
            span: 7095..7097,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 251,
            column: 18,
            span: 7097..7098,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'l'",
        ),
        position: Position {
            line: 251,
            column: 22,
            span: 7099..7102,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 251,
            column: 23,
            span: 7102..7103,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 251,
            column: 26,
            span: 7104..7106,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"álo\"'",
        ),
        position: Position {
            line: 251,
            column: 34,
            span: 7107..7114,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 251,
            column: 35,
            span: 7114..7115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 252,
            column: 7,
            span: 7116..7122,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 252,
            column: 8,
            span: 7122..7123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 252,
            column: 10,
            span: 7123..7125,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 252,
            column: 11,
            span: 7125..7126,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 252,
            column: 15,
            span: 7126..7130,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 252,
            column: 16,
            span: 7130..7131,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 252,
            column: 17,
            span: 7130..7132,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 252,
            column: 18,
            span: 7132..7133,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 252,
            column: 21,
            span: 7134..7136,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 252,
            column: 24,
            span: 7137..7139,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 252,
            column: 25,
            span: 7139..7140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 253,
            column: 7,
            span: 7141..7147,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 253,
            column: 8,
            span: 7147..7148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 253,
            column: 10,
            span: 7148..7150,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 253,
            column: 11,
            span: 7150..7151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 253,
            column: 15,
            span: 7151..7155,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 253,
            column: 16,
            span: 7155..7156,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 253,
            column: 17,
            span: 7156..7157,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 253,
            column: 20,
            span: 7158..7160,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"second line\"",
        ),
        position: Position {
            line: 253,
            column: 34,
            span: 7161..7174,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 253,
            column: 35,
            span: 7174..7175,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 254,
            column: 6,
            span: 7176..7181,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 254,
            column: 8,
            span: 7182..7183,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 254,
            column: 10,
            span: 7184..7185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 254,
            column: 13,
            span: 7186..7188,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 254,
            column: 14,
            span: 7188..7189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 254,
            column: 19,
            span: 7189..7194,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 254,
            column: 20,
            span: 7194..7195,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 254,
            column: 21,
            span: 7195..7196,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 254,
            column: 22,
            span: 7196..7197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        position: Position {
            line: 254,
            column: 26,
            span: 7197..7201,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 254,
            column: 27,
            span: 7201..7202,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 254,
            column: 28,
            span: 7202..7203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 255,
            column: 7,
            span: 7204..7210,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 255,
            column: 8,
            span: 7210..7211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 255,
            column: 10,
            span: 7211..7213,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 255,
            column: 11,
            span: 7213..7214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 255,
            column: 15,
            span: 7214..7218,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 255,
            column: 16,
            span: 7218..7219,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 255,
            column: 17,
            span: 7219..7220,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 255,
            column: 20,
            span: 7221..7223,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"third line \"",
        ),
        position: Position {
            line: 255,
            column: 34,
            span: 7224..7237,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 255,
            column: 35,
            span: 7237..7238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 256,
            column: 7,
            span: 7239..7245,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 256,
            column: 8,
            span: 7245..7246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 256,
            column: 10,
            span: 7246..7248,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 256,
            column: 11,
            span: 7248..7249,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 256,
            column: 16,
            span: 7249..7254,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 256,
            column: 17,
            span: 7254..7255,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 256,
            column: 18,
            span: 7255..7256,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 256,
            column: 19,
            span: 7256..7257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        position: Position {
            line: 256,
            column: 23,
            span: 7257..7261,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 256,
            column: 24,
            span: 7261..7262,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        position: Position {
            line: 256,
            column: 29,
            span: 7262..7267,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 256,
            column: 30,
            span: 7267..7268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 256,
            column: 32,
            span: 7269..7270,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 256,
            column: 33,
            span: 7270..7271,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 256,
            column: 34,
            span: 7271..7272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 257,
            column: 7,
            span: 7273..7279,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 8,
            span: 7279..7280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 257,
            column: 10,
            span: 7280..7282,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 257,
            column: 11,
            span: 7282..7283,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 257,
            column: 15,
            span: 7283..7287,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 16,
            span: 7287..7288,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'L'",
        ),
        position: Position {
            line: 257,
            column: 19,
            span: 7288..7291,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 20,
            span: 7291..7292,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 257,
            column: 23,
            span: 7293..7295,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"third line \\n\"",
        ),
        position: Position {
            line: 257,
            column: 39,
            span: 7296..7311,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 40,
            span: 7311..7312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 258,
            column: 7,
            span: 7313..7319,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 258,
            column: 8,
            span: 7319..7320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 258,
            column: 10,
            span: 7320..7322,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 258,
            column: 11,
            span: 7322..7323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 258,
            column: 15,
            span: 7323..7327,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 258,
            column: 16,
            span: 7327..7328,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 258,
            column: 17,
            span: 7327..7329,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 258,
            column: 18,
            span: 7329..7330,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 258,
            column: 21,
            span: 7331..7333,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ç\"",
        ),
        position: Position {
            line: 258,
            column: 25,
            span: 7334..7337,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 258,
            column: 26,
            span: 7337..7338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 259,
            column: 7,
            span: 7339..7345,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 259,
            column: 8,
            span: 7345..7346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 259,
            column: 10,
            span: 7346..7348,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 259,
            column: 11,
            span: 7348..7349,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 259,
            column: 15,
            span: 7349..7353,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 259,
            column: 16,
            span: 7353..7354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 259,
            column: 22,
            span: 7354..7360,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 259,
            column: 23,
            span: 7360..7361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 259,
            column: 26,
            span: 7361..7364,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"fourth_line\"",
        ),
        position: Position {
            line: 259,
            column: 39,
            span: 7364..7377,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 259,
            column: 40,
            span: 7377..7378,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 259,
            column: 43,
            span: 7379..7381,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"fourth_line\"",
        ),
        position: Position {
            line: 259,
            column: 57,
            span: 7382..7395,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 259,
            column: 58,
            span: 7395..7396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 260,
            column: 7,
            span: 7397..7403,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 260,
            column: 8,
            span: 7403..7404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 260,
            column: 10,
            span: 7404..7406,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 260,
            column: 11,
            span: 7406..7407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 260,
            column: 16,
            span: 7407..7412,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 260,
            column: 17,
            span: 7412..7413,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 260,
            column: 18,
            span: 7413..7414,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 260,
            column: 19,
            span: 7414..7415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        position: Position {
            line: 260,
            column: 23,
            span: 7415..7419,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 260,
            column: 24,
            span: 7419..7420,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cur\"",
        ),
        position: Position {
            line: 260,
            column: 29,
            span: 7420..7425,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 260,
            column: 30,
            span: 7425..7426,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 260,
            column: 32,
            span: 7427..7428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 260,
            column: 38,
            span: 7428..7434,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 260,
            column: 39,
            span: 7434..7435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 260,
            column: 42,
            span: 7435..7438,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"fourth_line\"",
        ),
        position: Position {
            line: 260,
            column: 55,
            span: 7438..7451,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 260,
            column: 56,
            span: 7451..7452,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 260,
            column: 57,
            span: 7452..7453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 261,
            column: 7,
            span: 7454..7460,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 261,
            column: 8,
            span: 7460..7461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 261,
            column: 10,
            span: 7461..7463,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 261,
            column: 11,
            span: 7463..7464,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 261,
            column: 15,
            span: 7464..7468,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 261,
            column: 16,
            span: 7468..7469,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 261,
            column: 17,
            span: 7469..7470,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 261,
            column: 20,
            span: 7471..7473,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"fourth_line\"",
        ),
        position: Position {
            line: 261,
            column: 34,
            span: 7474..7487,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 261,
            column: 35,
            span: 7487..7488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 262,
            column: 7,
            span: 7489..7495,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 262,
            column: 8,
            span: 7495..7496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 262,
            column: 10,
            span: 7496..7498,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 262,
            column: 11,
            span: 7498..7499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 262,
            column: 15,
            span: 7499..7503,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 262,
            column: 16,
            span: 7503..7504,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 262,
            column: 17,
            span: 7504..7505,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 262,
            column: 20,
            span: 7506..7508,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 262,
            column: 23,
            span: 7509..7511,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 262,
            column: 24,
            span: 7511..7512,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 263,
            column: 7,
            span: 7528..7534,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 263,
            column: 8,
            span: 7534..7535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 263,
            column: 10,
            span: 7535..7537,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 263,
            column: 11,
            span: 7537..7538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 263,
            column: 15,
            span: 7538..7542,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 263,
            column: 16,
            span: 7542..7543,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'n'",
        ),
        position: Position {
            line: 263,
            column: 19,
            span: 7543..7546,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 263,
            column: 20,
            span: 7546..7547,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 263,
            column: 23,
            span: 7548..7550,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3450",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 263,
            column: 28,
            span: 7550..7555,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 263,
            column: 29,
            span: 7555..7556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 264,
            column: 7,
            span: 7557..7563,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 264,
            column: 8,
            span: 7563..7564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 264,
            column: 10,
            span: 7564..7566,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 264,
            column: 11,
            span: 7566..7567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 264,
            column: 15,
            span: 7567..7571,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 264,
            column: 16,
            span: 7571..7572,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 264,
            column: 17,
            span: 7571..7573,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 264,
            column: 18,
            span: 7573..7574,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 264,
            column: 21,
            span: 7575..7577,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n'",
        ),
        position: Position {
            line: 264,
            column: 26,
            span: 7578..7582,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 264,
            column: 27,
            span: 7582..7583,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 265,
            column: 7,
            span: 7584..7590,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 265,
            column: 8,
            span: 7590..7591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 265,
            column: 10,
            span: 7591..7593,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 265,
            column: 11,
            span: 7593..7594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 265,
            column: 15,
            span: 7594..7598,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 265,
            column: 16,
            span: 7598..7599,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 265,
            column: 17,
            span: 7598..7600,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 265,
            column: 18,
            span: 7600..7601,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 265,
            column: 21,
            span: 7602..7604,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 265,
            column: 25,
            span: 7605..7608,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 265,
            column: 26,
            span: 7608..7609,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 266,
            column: 7,
            span: 7626..7632,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 266,
            column: 8,
            span: 7632..7633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 266,
            column: 10,
            span: 7633..7635,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 266,
            column: 11,
            span: 7635..7636,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 266,
            column: 15,
            span: 7636..7640,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 266,
            column: 16,
            span: 7640..7641,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 266,
            column: 17,
            span: 7640..7642,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 266,
            column: 18,
            span: 7642..7643,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 266,
            column: 21,
            span: 7644..7646,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 266,
            column: 25,
            span: 7647..7650,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 266,
            column: 26,
            span: 7650..7651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 267,
            column: 7,
            span: 7668..7674,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 267,
            column: 8,
            span: 7674..7675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 267,
            column: 10,
            span: 7675..7677,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 267,
            column: 11,
            span: 7677..7678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 267,
            column: 15,
            span: 7678..7682,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 267,
            column: 16,
            span: 7682..7683,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 267,
            column: 21,
            span: 7682..7688,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 267,
            column: 22,
            span: 7688..7689,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 267,
            column: 25,
            span: 7690..7692,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 267,
            column: 29,
            span: 7693..7696,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 267,
            column: 30,
            span: 7696..7697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 268,
            column: 7,
            span: 7714..7720,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 268,
            column: 8,
            span: 7720..7721,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 268,
            column: 9,
            span: 7721..7722,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 268,
            column: 10,
            span: 7722..7723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 268,
            column: 12,
            span: 7723..7725,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 268,
            column: 13,
            span: 7725..7726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 268,
            column: 17,
            span: 7726..7730,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 268,
            column: 18,
            span: 7730..7731,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 268,
            column: 19,
            span: 7730..7732,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 268,
            column: 20,
            span: 7732..7733,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 268,
            column: 21,
            span: 7733..7734,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 268,
            column: 22,
            span: 7734..7735,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 268,
            column: 23,
            span: 7735..7736,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 268,
            column: 24,
            span: 7735..7737,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 268,
            column: 25,
            span: 7737..7738,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 268,
            column: 28,
            span: 7739..7741,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 268,
            column: 32,
            span: 7742..7745,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 268,
            column: 33,
            span: 7745..7746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 269,
            column: 7,
            span: 7747..7753,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 269,
            column: 8,
            span: 7753..7754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 269,
            column: 10,
            span: 7754..7756,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 269,
            column: 11,
            span: 7756..7757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 269,
            column: 15,
            span: 7757..7761,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 269,
            column: 16,
            span: 7761..7762,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 269,
            column: 17,
            span: 7762..7763,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 269,
            column: 20,
            span: 7764..7766,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 269,
            column: 24,
            span: 7767..7770,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 269,
            column: 25,
            span: 7770..7771,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 270,
            column: 7,
            span: 7788..7794,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 8,
            span: 7794..7795,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 9,
            span: 7795..7796,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 270,
            column: 10,
            span: 7796..7797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 270,
            column: 12,
            span: 7797..7799,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 270,
            column: 13,
            span: 7799..7800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 270,
            column: 17,
            span: 7800..7804,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 18,
            span: 7804..7805,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 19,
            span: 7805..7806,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 270,
            column: 20,
            span: 7806..7807,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 21,
            span: 7807..7808,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 270,
            column: 22,
            span: 7808..7809,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 270,
            column: 23,
            span: 7808..7810,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 270,
            column: 24,
            span: 7810..7811,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 270,
            column: 27,
            span: 7812..7814,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 270,
            column: 31,
            span: 7815..7818,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 32,
            span: 7818..7819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 271,
            column: 7,
            span: 7820..7826,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 271,
            column: 8,
            span: 7826..7827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 271,
            column: 10,
            span: 7827..7829,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 271,
            column: 11,
            span: 7829..7830,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 271,
            column: 15,
            span: 7830..7834,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 271,
            column: 16,
            span: 7834..7835,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'n'",
        ),
        position: Position {
            line: 271,
            column: 19,
            span: 7835..7838,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 271,
            column: 20,
            span: 7838..7839,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 271,
            column: 23,
            span: 7840..7842,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 271,
            column: 27,
            span: 7843..7846,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 271,
            column: 28,
            span: 7846..7847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 272,
            column: 7,
            span: 7864..7870,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 272,
            column: 8,
            span: 7870..7871,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 272,
            column: 9,
            span: 7871..7872,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 272,
            column: 10,
            span: 7872..7873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 272,
            column: 12,
            span: 7873..7875,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 272,
            column: 13,
            span: 7875..7876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 272,
            column: 17,
            span: 7876..7880,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 272,
            column: 18,
            span: 7880..7881,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'n'",
        ),
        position: Position {
            line: 272,
            column: 21,
            span: 7881..7884,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 272,
            column: 22,
            span: 7884..7885,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 272,
            column: 23,
            span: 7885..7886,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 272,
            column: 24,
            span: 7886..7887,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 272,
            column: 25,
            span: 7887..7888,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 272,
            column: 26,
            span: 7887..7889,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 272,
            column: 27,
            span: 7889..7890,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 272,
            column: 30,
            span: 7891..7893,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 272,
            column: 34,
            span: 7894..7897,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 272,
            column: 35,
            span: 7897..7898,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 273,
            column: 7,
            span: 7899..7905,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 273,
            column: 8,
            span: 7905..7906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 273,
            column: 10,
            span: 7906..7908,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 273,
            column: 11,
            span: 7908..7909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 273,
            column: 15,
            span: 7909..7913,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 273,
            column: 16,
            span: 7913..7914,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 273,
            column: 19,
            span: 7914..7917,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 273,
            column: 20,
            span: 7917..7918,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 273,
            column: 23,
            span: 7919..7921,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 273,
            column: 26,
            span: 7922..7924,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 273,
            column: 27,
            span: 7924..7925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 274,
            column: 7,
            span: 7955..7961,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 274,
            column: 8,
            span: 7961..7962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 274,
            column: 10,
            span: 7962..7964,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 274,
            column: 11,
            span: 7964..7965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 274,
            column: 15,
            span: 7965..7969,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 274,
            column: 16,
            span: 7969..7970,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 274,
            column: 19,
            span: 7970..7973,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 274,
            column: 20,
            span: 7973..7974,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 274,
            column: 23,
            span: 7975..7977,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 274,
            column: 26,
            span: 7978..7980,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 274,
            column: 27,
            span: 7980..7981,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 275,
            column: 15,
            span: 8011..8025,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 275,
            column: 16,
            span: 8025..8026,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 275,
            column: 17,
            span: 8026..8027,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 276,
            column: 6,
            span: 8028..8033,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 276,
            column: 7,
            span: 8033..8034,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 276,
            column: 10,
            span: 8034..8037,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 276,
            column: 11,
            span: 8037..8038,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 277,
            column: 3,
            span: 8039..8041,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 277,
            column: 4,
            span: 8041..8042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 277,
            column: 9,
            span: 8042..8047,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 277,
            column: 10,
            span: 8047..8048,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 277,
            column: 12,
            span: 8048..8050,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 277,
            column: 13,
            span: 8050..8051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 277,
            column: 18,
            span: 8051..8056,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 277,
            column: 19,
            span: 8056..8057,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 277,
            column: 20,
            span: 8057..8058,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 277,
            column: 21,
            span: 8058..8059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 278,
            column: 9,
            span: 8060..8068,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 278,
            column: 10,
            span: 8068..8069,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" input file is closed\"",
        ),
        position: Position {
            line: 278,
            column: 33,
            span: 8069..8092,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 278,
            column: 34,
            span: 8092..8093,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 278,
            column: 37,
            span: 8094..8096,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 278,
            column: 38,
            span: 8096..8097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 278,
            column: 42,
            span: 8097..8101,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 278,
            column: 43,
            span: 8101..8102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 280,
            column: 7,
            span: 8104..8110,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 280,
            column: 8,
            span: 8110..8111,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 280,
            column: 10,
            span: 8111..8113,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 280,
            column: 11,
            span: 8113..8114,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 280,
            column: 17,
            span: 8114..8120,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 280,
            column: 18,
            span: 8120..8121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 280,
            column: 22,
            span: 8121..8125,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 280,
            column: 23,
            span: 8125..8126,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 280,
            column: 24,
            span: 8126..8127,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 282,
            column: 6,
            span: 8129..8134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 282,
            column: 8,
            span: 8135..8136,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 282,
            column: 10,
            span: 8137..8138,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0123456789'",
        ),
        position: Position {
            line: 282,
            column: 23,
            span: 8139..8151,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 283,
            column: 4,
            span: 8152..8155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 283,
            column: 6,
            span: 8156..8157,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 283,
            column: 7,
            span: 8157..8158,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 283,
            column: 8,
            span: 8157..8159,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 283,
            column: 9,
            span: 8159..8160,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 283,
            column: 11,
            span: 8159..8162,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 283,
            column: 14,
            span: 8163..8165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 283,
            column: 16,
            span: 8166..8167,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 283,
            column: 18,
            span: 8168..8169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 283,
            column: 20,
            span: 8170..8171,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 283,
            column: 22,
            span: 8171..8173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 283,
            column: 23,
            span: 8173..8174,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 283,
            column: 24,
            span: 8174..8175,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 283,
            column: 0,
            span: 8176..8179,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 284,
            column: 7,
            span: 8180..8186,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 284,
            column: 8,
            span: 8186..8187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 284,
            column: 14,
            span: 8187..8193,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 284,
            column: 15,
            span: 8193..8194,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 284,
            column: 18,
            span: 8194..8197,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 284,
            column: 19,
            span: 8197..8198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 284,
            column: 20,
            span: 8198..8199,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 284,
            column: 21,
            span: 8199..8200,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 284,
            column: 24,
            span: 8201..8203,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 284,
            column: 27,
            span: 8203..8206,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 284,
            column: 28,
            span: 8206..8207,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 284,
            column: 29,
            span: 8206..8208,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 284,
            column: 30,
            span: 8208..8209,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 284,
            column: 32,
            span: 8208..8211,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 284,
            column: 33,
            span: 8211..8212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 286,
            column: 3,
            span: 8214..8216,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 286,
            column: 4,
            span: 8216..8217,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 286,
            column: 10,
            span: 8217..8223,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 286,
            column: 11,
            span: 8223..8224,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 286,
            column: 15,
            span: 8224..8228,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 286,
            column: 16,
            span: 8228..8229,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 287,
            column: 3,
            span: 8230..8232,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 287,
            column: 4,
            span: 8232..8233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 287,
            column: 9,
            span: 8233..8238,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 287,
            column: 10,
            span: 8238..8239,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 287,
            column: 15,
            span: 8239..8244,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 287,
            column: 16,
            span: 8244..8245,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 287,
            column: 17,
            span: 8245..8246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 287,
            column: 22,
            span: 8246..8251,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 287,
            column: 23,
            span: 8251..8252,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        position: Position {
            line: 287,
            column: 27,
            span: 8252..8256,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 287,
            column: 28,
            span: 8256..8257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 288,
            column: 3,
            span: 8258..8260,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 288,
            column: 4,
            span: 8260..8261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 288,
            column: 9,
            span: 8261..8266,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 288,
            column: 10,
            span: 8266..8267,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 288,
            column: 11,
            span: 8267..8268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 289,
            column: 9,
            span: 8269..8277,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 289,
            column: 10,
            span: 8277..8278,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" output file is closed\"",
        ),
        position: Position {
            line: 289,
            column: 34,
            span: 8278..8302,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 289,
            column: 35,
            span: 8302..8303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 289,
            column: 38,
            span: 8304..8306,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 289,
            column: 39,
            span: 8306..8307,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 289,
            column: 44,
            span: 8307..8312,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 289,
            column: 45,
            span: 8312..8313,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 290,
            column: 6,
            span: 8314..8319,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 290,
            column: 8,
            span: 8320..8321,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 290,
            column: 10,
            span: 8322..8323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 290,
            column: 13,
            span: 8324..8326,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 290,
            column: 14,
            span: 8326..8327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 290,
            column: 18,
            span: 8327..8331,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 290,
            column: 19,
            span: 8331..8332,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 290,
            column: 23,
            span: 8332..8336,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 290,
            column: 24,
            span: 8336..8337,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a+b\"",
        ),
        position: Position {
            line: 290,
            column: 30,
            span: 8338..8343,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 290,
            column: 31,
            span: 8343..8344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 291,
            column: 3,
            span: 8345..8347,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 291,
            column: 4,
            span: 8347..8348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 291,
            column: 10,
            span: 8348..8354,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 291,
            column: 11,
            span: 8354..8355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 291,
            column: 12,
            span: 8355..8356,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 291,
            column: 13,
            span: 8356..8357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 292,
            column: 15,
            span: 8358..8372,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 292,
            column: 16,
            span: 8372..8373,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 292,
            column: 17,
            span: 8373..8374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 294,
            column: 7,
            span: 8376..8382,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 294,
            column: 8,
            span: 8382..8383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 294,
            column: 10,
            span: 8383..8385,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 294,
            column: 11,
            span: 8385..8386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 294,
            column: 16,
            span: 8386..8391,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 294,
            column: 17,
            span: 8391..8392,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        position: Position {
            line: 294,
            column: 20,
            span: 8392..8395,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 294,
            column: 23,
            span: 8396..8398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 294,
            column: 25,
            span: 8399..8400,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 294,
            column: 28,
            span: 8401..8403,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        position: Position {
            line: 294,
            column: 32,
            span: 8404..8407,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 294,
            column: 33,
            span: 8407..8408,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 294,
            column: 34,
            span: 8408..8409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 295,
            column: 7,
            span: 8410..8416,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 295,
            column: 8,
            span: 8416..8417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 295,
            column: 10,
            span: 8417..8419,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 295,
            column: 11,
            span: 8419..8420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 295,
            column: 16,
            span: 8420..8425,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 295,
            column: 17,
            span: 8425..8426,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "';'",
        ),
        position: Position {
            line: 295,
            column: 20,
            span: 8426..8429,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 295,
            column: 21,
            span: 8429..8430,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'end of file\\n'",
        ),
        position: Position {
            line: 295,
            column: 37,
            span: 8431..8446,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 295,
            column: 38,
            span: 8446..8447,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 295,
            column: 39,
            span: 8447..8448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 296,
            column: 2,
            span: 8449..8450,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 296,
            column: 3,
            span: 8450..8451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flush",
        ),
        position: Position {
            line: 296,
            column: 8,
            span: 8451..8456,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 296,
            column: 9,
            span: 8456..8457,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 296,
            column: 10,
            span: 8457..8458,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 296,
            column: 11,
            span: 8458..8459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 296,
            column: 14,
            span: 8460..8462,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 296,
            column: 15,
            span: 8462..8463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flush",
        ),
        position: Position {
            line: 296,
            column: 20,
            span: 8463..8468,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 296,
            column: 21,
            span: 8468..8469,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 296,
            column: 22,
            span: 8469..8470,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 297,
            column: 2,
            span: 8471..8472,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 297,
            column: 3,
            span: 8472..8473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 297,
            column: 8,
            span: 8473..8478,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 297,
            column: 9,
            span: 8478..8479,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 297,
            column: 10,
            span: 8479..8480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 298,
            column: 6,
            span: 8481..8486,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 298,
            column: 7,
            span: 8486..8487,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 298,
            column: 10,
            span: 8487..8490,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 298,
            column: 11,
            span: 8490..8491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 300,
            column: 3,
            span: 8493..8495,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 300,
            column: 4,
            span: 8495..8496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 300,
            column: 9,
            span: 8496..8501,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 300,
            column: 10,
            span: 8501..8502,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 300,
            column: 14,
            span: 8502..8506,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 300,
            column: 15,
            span: 8506..8507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 301,
            column: 7,
            span: 8508..8514,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 301,
            column: 8,
            span: 8514..8515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 301,
            column: 10,
            span: 8515..8517,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 301,
            column: 11,
            span: 8517..8518,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 301,
            column: 15,
            span: 8518..8522,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 301,
            column: 16,
            span: 8522..8523,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 301,
            column: 17,
            span: 8523..8524,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 301,
            column: 20,
            span: 8525..8527,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 301,
            column: 26,
            span: 8528..8533,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 301,
            column: 27,
            span: 8533..8534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 302,
            column: 7,
            span: 8535..8541,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 302,
            column: 8,
            span: 8541..8542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 302,
            column: 10,
            span: 8542..8544,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 302,
            column: 11,
            span: 8544..8545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 302,
            column: 15,
            span: 8545..8549,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 302,
            column: 16,
            span: 8549..8550,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 302,
            column: 17,
            span: 8549..8551,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 302,
            column: 18,
            span: 8551..8552,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 302,
            column: 21,
            span: 8553..8555,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        position: Position {
            line: 302,
            column: 25,
            span: 8556..8559,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 302,
            column: 26,
            span: 8559..8560,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 303,
            column: 7,
            span: 8561..8567,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 303,
            column: 8,
            span: 8567..8568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 303,
            column: 10,
            span: 8568..8570,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 303,
            column: 11,
            span: 8570..8571,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 303,
            column: 15,
            span: 8571..8575,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 303,
            column: 16,
            span: 8575..8576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 303,
            column: 22,
            span: 8576..8582,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 303,
            column: 23,
            span: 8582..8583,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 303,
            column: 26,
            span: 8583..8586,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 303,
            column: 27,
            span: 8586..8587,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 303,
            column: 28,
            span: 8587..8588,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 303,
            column: 29,
            span: 8588..8589,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 303,
            column: 30,
            span: 8589..8590,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 303,
            column: 33,
            span: 8591..8593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 303,
            column: 35,
            span: 8594..8595,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 303,
            column: 36,
            span: 8595..8596,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 304,
            column: 7,
            span: 8597..8603,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 304,
            column: 8,
            span: 8603..8604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 304,
            column: 10,
            span: 8604..8606,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 304,
            column: 11,
            span: 8606..8607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 304,
            column: 15,
            span: 8607..8611,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 304,
            column: 16,
            span: 8611..8612,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 304,
            column: 17,
            span: 8611..8613,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 304,
            column: 18,
            span: 8613..8614,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 304,
            column: 21,
            span: 8615..8617,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        position: Position {
            line: 304,
            column: 25,
            span: 8618..8621,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 304,
            column: 26,
            span: 8621..8622,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 305,
            column: 7,
            span: 8623..8629,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 305,
            column: 8,
            span: 8629..8630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 305,
            column: 10,
            span: 8630..8632,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 305,
            column: 11,
            span: 8632..8633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 305,
            column: 15,
            span: 8633..8637,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 305,
            column: 16,
            span: 8637..8638,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 305,
            column: 17,
            span: 8637..8639,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 305,
            column: 18,
            span: 8639..8640,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 305,
            column: 19,
            span: 8640..8641,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 306,
            column: 7,
            span: 8642..8648,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 306,
            column: 8,
            span: 8648..8649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 306,
            column: 10,
            span: 8649..8651,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 306,
            column: 11,
            span: 8651..8652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 306,
            column: 15,
            span: 8652..8656,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 306,
            column: 16,
            span: 8656..8657,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 306,
            column: 19,
            span: 8657..8660,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 306,
            column: 20,
            span: 8660..8661,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 306,
            column: 23,
            span: 8662..8664,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "';end of file\\n'",
        ),
        position: Position {
            line: 306,
            column: 40,
            span: 8665..8681,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 306,
            column: 41,
            span: 8681..8682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 307,
            column: 7,
            span: 8683..8689,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 307,
            column: 8,
            span: 8689..8690,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 307,
            column: 10,
            span: 8690..8692,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 307,
            column: 11,
            span: 8692..8693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 307,
            column: 15,
            span: 8693..8697,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 307,
            column: 16,
            span: 8697..8698,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 307,
            column: 17,
            span: 8697..8699,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 307,
            column: 18,
            span: 8699..8700,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 307,
            column: 21,
            span: 8701..8703,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 307,
            column: 25,
            span: 8704..8707,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 307,
            column: 26,
            span: 8707..8708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 308,
            column: 7,
            span: 8709..8715,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 308,
            column: 8,
            span: 8715..8716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 308,
            column: 10,
            span: 8716..8718,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 308,
            column: 11,
            span: 8718..8719,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 308,
            column: 16,
            span: 8719..8724,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 308,
            column: 17,
            span: 8724..8725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 308,
            column: 19,
            span: 8725..8727,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 308,
            column: 20,
            span: 8727..8728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 308,
            column: 25,
            span: 8728..8733,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 308,
            column: 26,
            span: 8733..8734,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 308,
            column: 27,
            span: 8734..8735,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 308,
            column: 28,
            span: 8735..8736,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 308,
            column: 29,
            span: 8736..8737,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 312,
            column: 0,
            span: 8769..8771,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 313,
            column: 8,
            span: 8774..8779,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 313,
            column: 17,
            span: 8780..8788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ismsg",
        ),
        position: Position {
            line: 313,
            column: 23,
            span: 8789..8794,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 313,
            column: 25,
            span: 8795..8796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 313,
            column: 26,
            span: 8796..8797,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 313,
            column: 27,
            span: 8797..8798,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 315,
            column: 11,
            span: 8845..8851,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 13,
            span: 8852..8853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 315,
            column: 17,
            span: 8853..8857,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 18,
            span: 8857..8858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 315,
            column: 19,
            span: 8858..8859,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 315,
            column: 20,
            span: 8859..8860,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 315,
            column: 23,
            span: 8861..8863,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 315,
            column: 32,
            span: 8864..8872,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 315,
            column: 36,
            span: 8873..8876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 315,
            column: 45,
            span: 8877..8885,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 46,
            span: 8885..8886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 315,
            column: 47,
            span: 8886..8887,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 315,
            column: 48,
            span: 8887..8888,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 315,
            column: 51,
            span: 8889..8891,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 315,
            column: 55,
            span: 8892..8895,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 315,
            column: 56,
            span: 8895..8896,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 316,
            column: 0,
            span: 8899..8902,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 319,
            column: 8,
            span: 8916..8921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 319,
            column: 10,
            span: 8922..8923,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 319,
            column: 12,
            span: 8924..8925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 319,
            column: 15,
            span: 8926..8928,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 319,
            column: 16,
            span: 8928..8929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 319,
            column: 20,
            span: 8929..8933,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 319,
            column: 21,
            span: 8933..8934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 319,
            column: 25,
            span: 8934..8938,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 319,
            column: 26,
            span: 8938..8939,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        position: Position {
            line: 319,
            column: 30,
            span: 8940..8943,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 319,
            column: 31,
            span: 8943..8944,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 320,
            column: 8,
            span: 8947..8952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 320,
            column: 10,
            span: 8953..8954,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 320,
            column: 11,
            span: 8954..8955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 320,
            column: 13,
            span: 8956..8957,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 320,
            column: 14,
            span: 8957..8958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 320,
            column: 16,
            span: 8959..8960,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 320,
            column: 18,
            span: 8961..8962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 320,
            column: 20,
            span: 8963..8964,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 320,
            column: 21,
            span: 8964..8965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 320,
            column: 25,
            span: 8965..8969,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 320,
            column: 26,
            span: 8969..8970,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 320,
            column: 27,
            span: 8970..8971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 321,
            column: 9,
            span: 8974..8980,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 321,
            column: 10,
            span: 8980..8981,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 321,
            column: 13,
            span: 8981..8984,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 321,
            column: 15,
            span: 8985..8986,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 321,
            column: 19,
            span: 8987..8990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ismsg",
        ),
        position: Position {
            line: 321,
            column: 25,
            span: 8991..8996,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 321,
            column: 26,
            span: 8996..8997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 321,
            column: 27,
            span: 8997..8998,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 321,
            column: 28,
            span: 8998..8999,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 321,
            column: 32,
            span: 9000..9003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 321,
            column: 37,
            span: 9004..9008,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 321,
            column: 38,
            span: 9008..9009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 321,
            column: 39,
            span: 9009..9010,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 321,
            column: 40,
            span: 9010..9011,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 321,
            column: 43,
            span: 9012..9014,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        position: Position {
            line: 321,
            column: 52,
            span: 9015..9023,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 321,
            column: 53,
            span: 9023..9024,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 322,
            column: 9,
            span: 9027..9033,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 322,
            column: 10,
            span: 9033..9034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 322,
            column: 11,
            span: 9034..9035,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 322,
            column: 12,
            span: 9035..9036,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 322,
            column: 17,
            span: 9036..9041,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 322,
            column: 18,
            span: 9041..9042,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 322,
            column: 19,
            span: 9042..9043,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 322,
            column: 20,
            span: 9043..9044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 324,
            column: 4,
            span: 9058..9059,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 324,
            column: 6,
            span: 9060..9061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 324,
            column: 9,
            span: 9062..9064,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 324,
            column: 10,
            span: 9064..9065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 324,
            column: 14,
            span: 9065..9069,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 324,
            column: 15,
            span: 9069..9070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 324,
            column: 19,
            span: 9070..9074,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 324,
            column: 20,
            span: 9074..9075,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        position: Position {
            line: 324,
            column: 24,
            span: 9076..9079,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 324,
            column: 25,
            span: 9079..9080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 325,
            column: 4,
            span: 9083..9084,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 325,
            column: 5,
            span: 9084..9085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 325,
            column: 7,
            span: 9086..9087,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 325,
            column: 8,
            span: 9087..9088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 325,
            column: 10,
            span: 9089..9090,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 325,
            column: 12,
            span: 9091..9092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 325,
            column: 14,
            span: 9093..9094,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 325,
            column: 15,
            span: 9094..9095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 325,
            column: 20,
            span: 9095..9100,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 325,
            column: 21,
            span: 9100..9101,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"whatever\"",
        ),
        position: Position {
            line: 325,
            column: 31,
            span: 9101..9111,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 325,
            column: 32,
            span: 9111..9112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 326,
            column: 9,
            span: 9115..9121,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 326,
            column: 10,
            span: 9121..9122,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 326,
            column: 13,
            span: 9122..9125,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 326,
            column: 15,
            span: 9126..9127,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 326,
            column: 19,
            span: 9128..9131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ismsg",
        ),
        position: Position {
            line: 326,
            column: 25,
            span: 9132..9137,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 326,
            column: 26,
            span: 9137..9138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 326,
            column: 27,
            span: 9138..9139,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 326,
            column: 28,
            span: 9139..9140,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 326,
            column: 32,
            span: 9141..9144,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 326,
            column: 37,
            span: 9145..9149,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 326,
            column: 38,
            span: 9149..9150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 326,
            column: 39,
            span: 9150..9151,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 326,
            column: 40,
            span: 9151..9152,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 326,
            column: 43,
            span: 9153..9155,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        position: Position {
            line: 326,
            column: 52,
            span: 9156..9164,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 326,
            column: 53,
            span: 9164..9165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 327,
            column: 9,
            span: 9168..9174,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 327,
            column: 10,
            span: 9174..9175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 327,
            column: 11,
            span: 9175..9176,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 327,
            column: 12,
            span: 9176..9177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 327,
            column: 17,
            span: 9177..9182,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 327,
            column: 18,
            span: 9182..9183,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 327,
            column: 19,
            span: 9183..9184,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 327,
            column: 20,
            span: 9184..9185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 329,
            column: 4,
            span: 9199..9200,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 329,
            column: 6,
            span: 9201..9202,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 329,
            column: 9,
            span: 9203..9205,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 329,
            column: 10,
            span: 9205..9206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 329,
            column: 14,
            span: 9206..9210,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 329,
            column: 15,
            span: 9210..9211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 329,
            column: 19,
            span: 9211..9215,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 329,
            column: 20,
            span: 9215..9216,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        position: Position {
            line: 329,
            column: 24,
            span: 9217..9220,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 329,
            column: 25,
            span: 9220..9221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 330,
            column: 4,
            span: 9224..9225,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 5,
            span: 9225..9226,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 330,
            column: 7,
            span: 9227..9228,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 330,
            column: 9,
            span: 9229..9230,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 330,
            column: 15,
            span: 9231..9236,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 330,
            column: 16,
            span: 9236..9237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 330,
            column: 17,
            span: 9237..9238,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 330,
            column: 18,
            span: 9238..9239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 330,
            column: 23,
            span: 9239..9244,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 330,
            column: 24,
            span: 9244..9245,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 330,
            column: 25,
            span: 9245..9246,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 330,
            column: 26,
            span: 9246..9247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 331,
            column: 9,
            span: 9250..9256,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 331,
            column: 10,
            span: 9256..9257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 331,
            column: 11,
            span: 9257..9258,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 331,
            column: 14,
            span: 9259..9261,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 331,
            column: 20,
            span: 9262..9267,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 331,
            column: 24,
            span: 9268..9271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ismsg",
        ),
        position: Position {
            line: 331,
            column: 30,
            span: 9272..9277,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 331,
            column: 31,
            span: 9277..9278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 331,
            column: 32,
            span: 9278..9279,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 331,
            column: 33,
            span: 9279..9280,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 331,
            column: 34,
            span: 9280..9281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 332,
            column: 9,
            span: 9284..9290,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 10,
            span: 9290..9291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 332,
            column: 11,
            span: 9291..9292,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 332,
            column: 12,
            span: 9292..9293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 332,
            column: 17,
            span: 9293..9298,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 18,
            span: 9298..9299,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 19,
            span: 9299..9300,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 20,
            span: 9300..9301,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 333,
            column: 0,
            span: 9302..9305,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 335,
            column: 7,
            span: 9307..9313,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 335,
            column: 8,
            span: 9313..9314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 335,
            column: 10,
            span: 9314..9316,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 335,
            column: 11,
            span: 9316..9317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 335,
            column: 17,
            span: 9317..9323,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 335,
            column: 18,
            span: 9323..9324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 335,
            column: 22,
            span: 9324..9328,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 335,
            column: 23,
            span: 9328..9329,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 335,
            column: 24,
            span: 9329..9330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 338,
            column: 3,
            span: 9353..9355,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 338,
            column: 4,
            span: 9355..9356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 338,
            column: 10,
            span: 9356..9362,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 338,
            column: 11,
            span: 9362..9363,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 338,
            column: 15,
            span: 9363..9367,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 338,
            column: 16,
            span: 9367..9368,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 338,
            column: 17,
            span: 9368..9369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 338,
            column: 20,
            span: 9370..9372,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 338,
            column: 21,
            span: 9372..9373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 338,
            column: 26,
            span: 9373..9378,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\nline\\nother\"",
        ),
        position: Position {
            line: 338,
            column: 43,
            span: 9378..9395,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 338,
            column: 44,
            span: 9395..9396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 338,
            column: 49,
            span: 9396..9401,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 338,
            column: 50,
            span: 9401..9402,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 338,
            column: 51,
            span: 9402..9403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 339,
            column: 3,
            span: 9404..9406,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 339,
            column: 4,
            span: 9406..9407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 339,
            column: 9,
            span: 9407..9412,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 339,
            column: 10,
            span: 9412..9413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 339,
            column: 14,
            span: 9413..9417,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 339,
            column: 15,
            span: 9417..9418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 340,
            column: 7,
            span: 9419..9425,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 340,
            column: 8,
            span: 9425..9426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 340,
            column: 10,
            span: 9426..9428,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 340,
            column: 11,
            span: 9428..9429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 340,
            column: 15,
            span: 9429..9433,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        position: Position {
            line: 340,
            column: 18,
            span: 9433..9436,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 340,
            column: 21,
            span: 9437..9439,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        position: Position {
            line: 340,
            column: 26,
            span: 9440..9444,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 340,
            column: 27,
            span: 9444..9445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 341,
            column: 7,
            span: 9446..9452,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 341,
            column: 8,
            span: 9452..9453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 341,
            column: 10,
            span: 9453..9455,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 341,
            column: 11,
            span: 9455..9456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 341,
            column: 15,
            span: 9456..9460,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        position: Position {
            line: 341,
            column: 18,
            span: 9460..9463,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 341,
            column: 21,
            span: 9464..9466,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        position: Position {
            line: 341,
            column: 26,
            span: 9467..9471,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 341,
            column: 27,
            span: 9471..9472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 342,
            column: 7,
            span: 9473..9479,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 342,
            column: 8,
            span: 9479..9480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 342,
            column: 10,
            span: 9480..9482,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 342,
            column: 11,
            span: 9482..9483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 342,
            column: 15,
            span: 9483..9487,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        position: Position {
            line: 342,
            column: 18,
            span: 9487..9490,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 342,
            column: 21,
            span: 9491..9493,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\\n\"",
        ),
        position: Position {
            line: 342,
            column: 30,
            span: 9494..9502,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 342,
            column: 31,
            span: 9502..9503,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 343,
            column: 7,
            span: 9504..9510,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 343,
            column: 8,
            span: 9510..9511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 343,
            column: 10,
            span: 9511..9513,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 343,
            column: 11,
            span: 9513..9514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 343,
            column: 15,
            span: 9514..9518,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        position: Position {
            line: 343,
            column: 18,
            span: 9518..9521,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 343,
            column: 21,
            span: 9522..9524,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"other\"",
        ),
        position: Position {
            line: 343,
            column: 29,
            span: 9525..9532,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 343,
            column: 30,
            span: 9532..9533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 344,
            column: 7,
            span: 9534..9540,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 344,
            column: 8,
            span: 9540..9541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 344,
            column: 10,
            span: 9541..9543,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 344,
            column: 11,
            span: 9543..9544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 344,
            column: 15,
            span: 9544..9548,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        position: Position {
            line: 344,
            column: 18,
            span: 9548..9551,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 344,
            column: 21,
            span: 9552..9554,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 344,
            column: 25,
            span: 9555..9558,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 344,
            column: 26,
            span: 9558..9559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 345,
            column: 3,
            span: 9560..9562,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 345,
            column: 4,
            span: 9562..9563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 345,
            column: 9,
            span: 9563..9568,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 345,
            column: 10,
            span: 9568..9569,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 345,
            column: 11,
            span: 9569..9570,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 345,
            column: 12,
            span: 9570..9571,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 345,
            column: 17,
            span: 9571..9576,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 345,
            column: 18,
            span: 9576..9577,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 345,
            column: 19,
            span: 9577..9578,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 347,
            column: 6,
            span: 9580..9585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 347,
            column: 8,
            span: 9586..9587,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 347,
            column: 10,
            span: 9588..9589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 347,
            column: 17,
            span: 9590..9596,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 347,
            column: 18,
            span: 9596..9597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 347,
            column: 20,
            span: 9597..9599,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 347,
            column: 21,
            span: 9599..9600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 347,
            column: 25,
            span: 9600..9604,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 347,
            column: 26,
            span: 9604..9605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 347,
            column: 30,
            span: 9605..9609,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 347,
            column: 31,
            span: 9609..9610,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 347,
            column: 32,
            span: 9610..9611,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 348,
            column: 6,
            span: 9612..9617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 348,
            column: 8,
            span: 9618..9619,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 348,
            column: 10,
            span: 9620..9621,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 348,
            column: 13,
            span: 9622..9624,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 349,
            column: 4,
            span: 9625..9628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 349,
            column: 6,
            span: 9629..9630,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 349,
            column: 9,
            span: 9631..9633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 349,
            column: 11,
            span: 9634..9635,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 349,
            column: 12,
            span: 9635..9636,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 349,
            column: 17,
            span: 9636..9641,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 349,
            column: 18,
            span: 9641..9642,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        position: Position {
            line: 349,
            column: 21,
            span: 9642..9645,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 349,
            column: 22,
            span: 9645..9646,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 349,
            column: 25,
            span: 9647..9649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 349,
            column: 27,
            span: 9650..9651,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 349,
            column: 29,
            span: 9652..9653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 349,
            column: 31,
            span: 9654..9655,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 349,
            column: 34,
            span: 9656..9658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 349,
            column: 36,
            span: 9659..9660,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 349,
            column: 0,
            span: 9661..9664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 350,
            column: 7,
            span: 9665..9671,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 350,
            column: 8,
            span: 9671..9672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 350,
            column: 9,
            span: 9672..9673,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 350,
            column: 12,
            span: 9674..9676,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\nline\\nother\"",
        ),
        position: Position {
            line: 350,
            column: 30,
            span: 9677..9694,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 350,
            column: 31,
            span: 9694..9695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 351,
            column: 2,
            span: 9696..9697,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 351,
            column: 3,
            span: 9697..9698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 351,
            column: 8,
            span: 9698..9703,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 351,
            column: 9,
            span: 9703..9704,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 351,
            column: 10,
            span: 9704..9705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 353,
            column: 3,
            span: 9707..9709,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 353,
            column: 4,
            span: 9709..9710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 353,
            column: 9,
            span: 9710..9715,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 353,
            column: 10,
            span: 9715..9716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 353,
            column: 14,
            span: 9716..9720,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 353,
            column: 15,
            span: 9720..9721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 354,
            column: 2,
            span: 9722..9723,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 354,
            column: 4,
            span: 9724..9725,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 354,
            column: 7,
            span: 9726..9728,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 355,
            column: 4,
            span: 9729..9732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 355,
            column: 6,
            span: 9733..9734,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 355,
            column: 9,
            span: 9735..9737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 355,
            column: 12,
            span: 9738..9740,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 355,
            column: 13,
            span: 9740..9741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 355,
            column: 18,
            span: 9741..9746,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 355,
            column: 19,
            span: 9746..9747,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 355,
            column: 22,
            span: 9747..9750,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 355,
            column: 23,
            span: 9750..9751,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        position: Position {
            line: 355,
            column: 27,
            span: 9752..9755,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 355,
            column: 28,
            span: 9755..9756,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 355,
            column: 31,
            span: 9757..9759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 355,
            column: 33,
            span: 9760..9761,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 355,
            column: 35,
            span: 9762..9763,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 355,
            column: 37,
            span: 9764..9765,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 355,
            column: 40,
            span: 9766..9768,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 355,
            column: 42,
            span: 9769..9770,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 355,
            column: 0,
            span: 9771..9774,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 356,
            column: 7,
            span: 9775..9781,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 356,
            column: 8,
            span: 9781..9782,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 356,
            column: 9,
            span: 9782..9783,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 356,
            column: 12,
            span: 9784..9786,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\nline\\nother\"",
        ),
        position: Position {
            line: 356,
            column: 30,
            span: 9787..9804,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 356,
            column: 31,
            span: 9804..9805,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 357,
            column: 3,
            span: 9806..9808,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 357,
            column: 4,
            span: 9808..9809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 357,
            column: 9,
            span: 9809..9814,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 357,
            column: 10,
            span: 9814..9815,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 357,
            column: 11,
            span: 9815..9816,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 357,
            column: 12,
            span: 9816..9817,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 357,
            column: 17,
            span: 9817..9822,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 357,
            column: 18,
            span: 9822..9823,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 357,
            column: 19,
            span: 9823..9824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 359,
            column: 2,
            span: 9826..9827,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 359,
            column: 4,
            span: 9828..9829,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 359,
            column: 7,
            span: 9830..9832,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 360,
            column: 4,
            span: 9833..9836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 360,
            column: 6,
            span: 9837..9838,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 360,
            column: 9,
            span: 9839..9841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 360,
            column: 12,
            span: 9842..9844,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 360,
            column: 13,
            span: 9844..9845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 360,
            column: 18,
            span: 9845..9850,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 360,
            column: 19,
            span: 9850..9851,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 360,
            column: 23,
            span: 9851..9855,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 360,
            column: 24,
            span: 9855..9856,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        position: Position {
            line: 360,
            column: 28,
            span: 9857..9860,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 360,
            column: 29,
            span: 9860..9861,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 360,
            column: 32,
            span: 9862..9864,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 360,
            column: 34,
            span: 9865..9866,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 360,
            column: 36,
            span: 9867..9868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 360,
            column: 38,
            span: 9869..9870,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 360,
            column: 41,
            span: 9871..9873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 360,
            column: 43,
            span: 9874..9875,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 360,
            column: 0,
            span: 9876..9879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 361,
            column: 7,
            span: 9880..9886,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 361,
            column: 8,
            span: 9886..9887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 361,
            column: 9,
            span: 9887..9888,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 361,
            column: 12,
            span: 9889..9891,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\nline\\nother\"",
        ),
        position: Position {
            line: 361,
            column: 30,
            span: 9892..9909,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 361,
            column: 31,
            span: 9909..9910,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 363,
            column: 2,
            span: 9912..9913,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 363,
            column: 4,
            span: 9914..9915,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 363,
            column: 7,
            span: 9916..9918,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 364,
            column: 4,
            span: 9919..9922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 364,
            column: 6,
            span: 9923..9924,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 364,
            column: 9,
            span: 9925..9927,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 364,
            column: 12,
            span: 9928..9930,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 364,
            column: 13,
            span: 9930..9931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 364,
            column: 18,
            span: 9931..9936,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 364,
            column: 19,
            span: 9936..9937,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 364,
            column: 23,
            span: 9937..9941,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 364,
            column: 24,
            span: 9941..9942,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 364,
            column: 28,
            span: 9943..9946,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 364,
            column: 29,
            span: 9946..9947,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 364,
            column: 32,
            span: 9948..9950,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 364,
            column: 34,
            span: 9951..9952,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 364,
            column: 36,
            span: 9953..9954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 364,
            column: 38,
            span: 9955..9956,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 364,
            column: 41,
            span: 9957..9959,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 364,
            column: 43,
            span: 9960..9961,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 364,
            column: 0,
            span: 9962..9965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 365,
            column: 7,
            span: 9966..9972,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 365,
            column: 8,
            span: 9972..9973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 365,
            column: 9,
            span: 9973..9974,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 365,
            column: 12,
            span: 9975..9977,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lineother\"",
        ),
        position: Position {
            line: 365,
            column: 24,
            span: 9978..9989,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 365,
            column: 25,
            span: 9989..9990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 367,
            column: 3,
            span: 9992..9994,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 367,
            column: 4,
            span: 9994..9995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 367,
            column: 10,
            span: 9995..10001,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 367,
            column: 11,
            span: 10001..10002,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 367,
            column: 15,
            span: 10002..10006,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 367,
            column: 16,
            span: 10006..10007,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 367,
            column: 17,
            span: 10007..10008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 367,
            column: 20,
            span: 10009..10011,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 367,
            column: 21,
            span: 10011..10012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 367,
            column: 26,
            span: 10012..10017,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = 10 + 34\\na = 2*a\\na = -a\\n\"",
        ),
        position: Position {
            line: 367,
            column: 58,
            span: 10017..10049,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 367,
            column: 59,
            span: 10049..10050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 367,
            column: 64,
            span: 10050..10055,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 367,
            column: 65,
            span: 10055..10056,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 367,
            column: 66,
            span: 10056..10057,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 368,
            column: 6,
            span: 10058..10063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 368,
            column: 8,
            span: 10064..10065,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 368,
            column: 10,
            span: 10066..10067,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 368,
            column: 12,
            span: 10068..10069,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 368,
            column: 13,
            span: 10069..10070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 369,
            column: 5,
            span: 10071..10075,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 369,
            column: 6,
            span: 10075..10076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 369,
            column: 8,
            span: 10076..10078,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 369,
            column: 9,
            span: 10078..10079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 369,
            column: 14,
            span: 10079..10084,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 369,
            column: 15,
            span: 10084..10085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 369,
            column: 19,
            span: 10085..10089,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 369,
            column: 20,
            span: 10089..10090,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        position: Position {
            line: 369,
            column: 24,
            span: 10091..10094,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 369,
            column: 25,
            span: 10094..10095,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 369,
            column: 26,
            span: 10095..10096,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 369,
            column: 30,
            span: 10097..10100,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 369,
            column: 31,
            span: 10100..10101,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 369,
            column: 35,
            span: 10102..10105,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 369,
            column: 36,
            span: 10105..10106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 369,
            column: 38,
            span: 10107..10108,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 369,
            column: 39,
            span: 10108..10109,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 369,
            column: 40,
            span: 10109..10110,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 369,
            column: 41,
            span: 10110..10111,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 370,
            column: 7,
            span: 10112..10118,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 370,
            column: 8,
            span: 10118..10119,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 370,
            column: 9,
            span: 10119..10120,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 370,
            column: 10,
            span: 10120..10121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 370,
            column: 11,
            span: 10121..10122,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 370,
            column: 14,
            span: 10123..10125,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 370,
            column: 16,
            span: 10126..10127,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 370,
            column: 17,
            span: 10127..10128,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 370,
            column: 18,
            span: 10128..10129,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 370,
            column: 20,
            span: 10128..10131,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 370,
            column: 22,
            span: 10132..10133,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 370,
            column: 25,
            span: 10133..10136,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 370,
            column: 26,
            span: 10136..10137,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 370,
            column: 28,
            span: 10138..10139,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 370,
            column: 30,
            span: 10139..10141,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 370,
            column: 31,
            span: 10141..10142,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 370,
            column: 32,
            span: 10142..10143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 374,
            column: 3,
            span: 10187..10189,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 374,
            column: 4,
            span: 10189..10190,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 374,
            column: 10,
            span: 10190..10196,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 374,
            column: 11,
            span: 10196..10197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 374,
            column: 15,
            span: 10197..10201,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 374,
            column: 16,
            span: 10201..10202,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 374,
            column: 17,
            span: 10202..10203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 374,
            column: 20,
            span: 10204..10206,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 374,
            column: 21,
            span: 10206..10207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 374,
            column: 26,
            span: 10207..10212,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0123456789\\n\"",
        ),
        position: Position {
            line: 374,
            column: 40,
            span: 10212..10226,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 374,
            column: 41,
            span: 10226..10227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 374,
            column: 46,
            span: 10227..10232,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 374,
            column: 47,
            span: 10232..10233,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 374,
            column: 48,
            span: 10233..10234,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 375,
            column: 4,
            span: 10235..10238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 375,
            column: 6,
            span: 10239..10240,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 375,
            column: 7,
            span: 10240..10241,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 375,
            column: 8,
            span: 10241..10242,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 375,
            column: 11,
            span: 10243..10245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 375,
            column: 14,
            span: 10246..10248,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 375,
            column: 15,
            span: 10248..10249,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 375,
            column: 20,
            span: 10249..10254,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 375,
            column: 21,
            span: 10254..10255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 375,
            column: 25,
            span: 10255..10259,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 375,
            column: 26,
            span: 10259..10260,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 375,
            column: 28,
            span: 10260..10262,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 375,
            column: 29,
            span: 10262..10263,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 375,
            column: 31,
            span: 10263..10265,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 375,
            column: 32,
            span: 10265..10266,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 375,
            column: 0,
            span: 10267..10269,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 376,
            column: 5,
            span: 10272..10274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 376,
            column: 7,
            span: 10275..10276,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 376,
            column: 10,
            span: 10277..10279,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        position: Position {
            line: 376,
            column: 15,
            span: 10280..10284,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 376,
            column: 20,
            span: 10285..10289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 376,
            column: 27,
            span: 10290..10296,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 376,
            column: 28,
            span: 10296..10297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 376,
            column: 29,
            span: 10297..10298,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 376,
            column: 32,
            span: 10299..10301,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 376,
            column: 36,
            span: 10302..10305,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 376,
            column: 37,
            span: 10305..10306,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 377,
            column: 7,
            span: 10309..10313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 377,
            column: 14,
            span: 10314..10320,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 377,
            column: 15,
            span: 10320..10321,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 377,
            column: 23,
            span: 10321..10329,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 377,
            column: 24,
            span: 10329..10330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 377,
            column: 25,
            span: 10330..10331,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 377,
            column: 26,
            span: 10331..10332,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 377,
            column: 29,
            span: 10333..10335,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 377,
            column: 38,
            span: 10336..10344,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 377,
            column: 39,
            span: 10344..10345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 377,
            column: 40,
            span: 10345..10346,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 377,
            column: 41,
            span: 10346..10347,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 377,
            column: 43,
            span: 10348..10349,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 377,
            column: 45,
            span: 10349..10351,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 377,
            column: 46,
            span: 10351..10352,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 378,
            column: 0,
            span: 10355..10358,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 379,
            column: 0,
            span: 10359..10362,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 381,
            column: 4,
            span: 10364..10367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 381,
            column: 6,
            span: 10368..10369,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 381,
            column: 7,
            span: 10369..10370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 381,
            column: 8,
            span: 10370..10371,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 381,
            column: 9,
            span: 10371..10372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 381,
            column: 10,
            span: 10372..10373,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 381,
            column: 13,
            span: 10374..10376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 381,
            column: 16,
            span: 10377..10379,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 381,
            column: 17,
            span: 10379..10380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 381,
            column: 22,
            span: 10380..10385,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 381,
            column: 23,
            span: 10385..10386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 381,
            column: 27,
            span: 10386..10390,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 381,
            column: 28,
            span: 10390..10391,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 381,
            column: 30,
            span: 10391..10393,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 381,
            column: 31,
            span: 10393..10394,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 381,
            column: 33,
            span: 10394..10396,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 381,
            column: 34,
            span: 10396..10397,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 381,
            column: 38,
            span: 10398..10401,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 381,
            column: 39,
            span: 10401..10402,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 381,
            column: 0,
            span: 10403..10405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 382,
            column: 9,
            span: 10408..10414,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 382,
            column: 10,
            span: 10414..10415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 382,
            column: 11,
            span: 10415..10416,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 382,
            column: 14,
            span: 10417..10419,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        position: Position {
            line: 382,
            column: 18,
            span: 10420..10423,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 382,
            column: 22,
            span: 10424..10427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 382,
            column: 24,
            span: 10428..10429,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 382,
            column: 27,
            span: 10430..10432,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"12\"",
        ),
        position: Position {
            line: 382,
            column: 32,
            span: 10433..10437,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 382,
            column: 36,
            span: 10438..10441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 382,
            column: 38,
            span: 10442..10443,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 382,
            column: 41,
            span: 10444..10446,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3456789\\n\"",
        ),
        position: Position {
            line: 382,
            column: 53,
            span: 10447..10458,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 382,
            column: 54,
            span: 10458..10459,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 383,
            column: 0,
            span: 10460..10463,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 385,
            column: 4,
            span: 10465..10468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 385,
            column: 6,
            span: 10469..10470,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 385,
            column: 7,
            span: 10470..10471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 385,
            column: 8,
            span: 10471..10472,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 385,
            column: 9,
            span: 10472..10473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 385,
            column: 10,
            span: 10473..10474,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 385,
            column: 13,
            span: 10475..10477,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 385,
            column: 16,
            span: 10478..10480,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 385,
            column: 17,
            span: 10480..10481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 385,
            column: 22,
            span: 10481..10486,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 385,
            column: 23,
            span: 10486..10487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 385,
            column: 27,
            span: 10487..10491,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 385,
            column: 28,
            span: 10491..10492,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 385,
            column: 32,
            span: 10493..10496,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 385,
            column: 33,
            span: 10496..10497,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 385,
            column: 35,
            span: 10497..10499,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 385,
            column: 36,
            span: 10499..10500,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 385,
            column: 38,
            span: 10500..10502,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 385,
            column: 39,
            span: 10502..10503,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 385,
            column: 0,
            span: 10504..10506,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 386,
            column: 5,
            span: 10509..10511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 386,
            column: 7,
            span: 10512..10513,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 386,
            column: 10,
            span: 10514..10516,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 386,
            column: 13,
            span: 10517..10519,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 386,
            column: 18,
            span: 10520..10524,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 386,
            column: 24,
            span: 10525..10530,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 386,
            column: 0,
            span: 10531..10534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 387,
            column: 9,
            span: 10537..10543,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 387,
            column: 10,
            span: 10543..10544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 387,
            column: 11,
            span: 10544..10545,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 387,
            column: 14,
            span: 10546..10548,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0123456789\\n\"",
        ),
        position: Position {
            line: 387,
            column: 29,
            span: 10549..10563,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 387,
            column: 33,
            span: 10564..10567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 387,
            column: 35,
            span: 10568..10569,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 387,
            column: 38,
            span: 10570..10572,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 387,
            column: 42,
            span: 10573..10576,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 387,
            column: 46,
            span: 10577..10580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 387,
            column: 48,
            span: 10581..10582,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 387,
            column: 51,
            span: 10583..10585,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 387,
            column: 55,
            span: 10586..10589,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 387,
            column: 56,
            span: 10589..10590,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 388,
            column: 0,
            span: 10591..10594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 389,
            column: 15,
            span: 10595..10609,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 389,
            column: 16,
            span: 10609..10610,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 389,
            column: 17,
            span: 10610..10611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 391,
            column: 3,
            span: 10654..10656,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 391,
            column: 4,
            span: 10656..10657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 391,
            column: 10,
            span: 10657..10663,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 391,
            column: 11,
            span: 10663..10664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 391,
            column: 15,
            span: 10664..10668,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 391,
            column: 16,
            span: 10668..10669,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 391,
            column: 17,
            span: 10669..10670,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 391,
            column: 20,
            span: 10671..10673,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 391,
            column: 21,
            span: 10673..10674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 391,
            column: 26,
            span: 10674..10679,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"00\\n10\\n20\\n30\\n40\\n\"",
        ),
        position: Position {
            line: 391,
            column: 48,
            span: 10679..10701,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 391,
            column: 49,
            span: 10701..10702,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 391,
            column: 54,
            span: 10702..10707,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 391,
            column: 55,
            span: 10707..10708,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 391,
            column: 56,
            span: 10708..10709,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 392,
            column: 4,
            span: 10710..10713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 392,
            column: 6,
            span: 10714..10715,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 392,
            column: 7,
            span: 10715..10716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 392,
            column: 9,
            span: 10717..10718,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 392,
            column: 12,
            span: 10719..10721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 392,
            column: 15,
            span: 10722..10724,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 392,
            column: 16,
            span: 10724..10725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 392,
            column: 21,
            span: 10725..10730,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 392,
            column: 22,
            span: 10730..10731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 392,
            column: 26,
            span: 10731..10735,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 392,
            column: 27,
            span: 10735..10736,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 392,
            column: 31,
            span: 10737..10740,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 392,
            column: 32,
            span: 10740..10741,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 392,
            column: 36,
            span: 10742..10745,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 392,
            column: 37,
            span: 10745..10746,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 392,
            column: 0,
            span: 10747..10749,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 393,
            column: 5,
            span: 10752..10754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 393,
            column: 7,
            span: 10755..10756,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 393,
            column: 10,
            span: 10757..10759,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 393,
            column: 13,
            span: 10759..10762,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 393,
            column: 18,
            span: 10763..10767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 393,
            column: 25,
            span: 10768..10774,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 393,
            column: 26,
            span: 10774..10775,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 393,
            column: 27,
            span: 10775..10776,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 393,
            column: 30,
            span: 10777..10779,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 393,
            column: 34,
            span: 10780..10783,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 393,
            column: 35,
            span: 10783..10784,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 394,
            column: 7,
            span: 10787..10791,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 394,
            column: 14,
            span: 10792..10798,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 394,
            column: 15,
            span: 10798..10799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 394,
            column: 16,
            span: 10799..10800,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 394,
            column: 19,
            span: 10801..10803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 394,
            column: 21,
            span: 10804..10805,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 394,
            column: 23,
            span: 10806..10807,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 394,
            column: 26,
            span: 10807..10810,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 394,
            column: 27,
            span: 10810..10811,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 395,
            column: 0,
            span: 10814..10817,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 396,
            column: 0,
            span: 10818..10821,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 400,
            column: 3,
            span: 10845..10847,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 400,
            column: 4,
            span: 10847..10848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 400,
            column: 10,
            span: 10848..10854,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 400,
            column: 11,
            span: 10854..10855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 400,
            column: 15,
            span: 10855..10859,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 400,
            column: 16,
            span: 10859..10860,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 400,
            column: 17,
            span: 10860..10861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 401,
            column: 3,
            span: 10862..10864,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 401,
            column: 4,
            span: 10864..10865,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 401,
            column: 9,
            span: 10865..10870,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal y\n= X\nX =\nX *\n2 +\nX;\nX =\nX\n-                                   y;\n]]",
        ),
        position: Position {
            line: 411,
            column: 3,
            span: 10870..10947,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 411,
            column: 4,
            span: 10947..10948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 411,
            column: 9,
            span: 10948..10953,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 411,
            column: 10,
            span: 10953..10954,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 411,
            column: 11,
            span: 10954..10955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 412,
            column: 3,
            span: 10956..10958,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 412,
            column: 4,
            span: 10958..10959,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 412,
            column: 5,
            span: 10959..10960,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 412,
            column: 7,
            span: 10961..10962,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 412,
            column: 0,
            span: 10962..10964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 413,
            column: 7,
            span: 10965..10971,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 413,
            column: 8,
            span: 10971..10972,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 413,
            column: 11,
            span: 10972..10975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 413,
            column: 16,
            span: 10976..10980,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 413,
            column: 17,
            span: 10980..10981,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 413,
            column: 19,
            span: 10981..10983,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 413,
            column: 20,
            span: 10983..10984,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 413,
            column: 25,
            span: 10984..10989,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 413,
            column: 26,
            span: 10989..10990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 413,
            column: 30,
            span: 10990..10994,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 413,
            column: 31,
            span: 10994..10995,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 413,
            column: 32,
            span: 10995..10996,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 413,
            column: 33,
            span: 10996..10997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 414,
            column: 15,
            span: 10998..11012,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 414,
            column: 16,
            span: 11012..11013,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 414,
            column: 17,
            span: 11013..11014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 415,
            column: 5,
            span: 11056..11060,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 415,
            column: 6,
            span: 11060..11061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 415,
            column: 8,
            span: 11061..11063,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 415,
            column: 9,
            span: 11063..11064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 415,
            column: 14,
            span: 11064..11069,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 415,
            column: 15,
            span: 11069..11070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 415,
            column: 19,
            span: 11070..11074,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 415,
            column: 20,
            span: 11074..11075,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        position: Position {
            line: 415,
            column: 24,
            span: 11076..11079,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 415,
            column: 25,
            span: 11079..11080,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 415,
            column: 26,
            span: 11080..11081,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 415,
            column: 27,
            span: 11081..11082,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 415,
            column: 28,
            span: 11082..11083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 416,
            column: 7,
            span: 11084..11090,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 416,
            column: 8,
            span: 11090..11091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 416,
            column: 10,
            span: 11091..11093,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 416,
            column: 11,
            span: 11093..11094,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 416,
            column: 12,
            span: 11094..11095,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 416,
            column: 15,
            span: 11096..11098,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 416,
            column: 17,
            span: 11098..11100,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 416,
            column: 18,
            span: 11100..11101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 417,
            column: 5,
            span: 11102..11106,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 417,
            column: 6,
            span: 11106..11107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 417,
            column: 8,
            span: 11107..11109,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 417,
            column: 9,
            span: 11109..11110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 417,
            column: 14,
            span: 11110..11115,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 417,
            column: 15,
            span: 11115..11116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 417,
            column: 19,
            span: 11116..11120,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 417,
            column: 20,
            span: 11120..11121,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 417,
            column: 22,
            span: 11121..11123,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 417,
            column: 23,
            span: 11123..11124,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 417,
            column: 24,
            span: 11124..11125,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 417,
            column: 25,
            span: 11125..11126,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 417,
            column: 26,
            span: 11126..11127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 418,
            column: 7,
            span: 11128..11134,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 418,
            column: 8,
            span: 11134..11135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 418,
            column: 10,
            span: 11135..11137,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 418,
            column: 11,
            span: 11137..11138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 418,
            column: 12,
            span: 11138..11139,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 418,
            column: 15,
            span: 11140..11142,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 418,
            column: 17,
            span: 11142..11144,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 418,
            column: 18,
            span: 11144..11145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 419,
            column: 5,
            span: 11146..11150,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 419,
            column: 6,
            span: 11150..11151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 419,
            column: 8,
            span: 11151..11153,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 419,
            column: 9,
            span: 11153..11154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        position: Position {
            line: 419,
            column: 14,
            span: 11154..11159,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 419,
            column: 15,
            span: 11159..11160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 419,
            column: 19,
            span: 11160..11164,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 419,
            column: 20,
            span: 11164..11165,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 419,
            column: 22,
            span: 11165..11167,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 419,
            column: 23,
            span: 11167..11168,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 419,
            column: 24,
            span: 11168..11169,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 419,
            column: 25,
            span: 11169..11170,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 419,
            column: 26,
            span: 11170..11171,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 420,
            column: 7,
            span: 11172..11178,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 420,
            column: 8,
            span: 11178..11179,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 420,
            column: 10,
            span: 11179..11181,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 420,
            column: 11,
            span: 11181..11182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 420,
            column: 12,
            span: 11182..11183,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 420,
            column: 15,
            span: 11184..11186,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 420,
            column: 17,
            span: 11186..11188,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 420,
            column: 18,
            span: 11188..11189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 422,
            column: 6,
            span: 11191..11196,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 422,
            column: 7,
            span: 11196..11197,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 422,
            column: 10,
            span: 11197..11200,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 422,
            column: 11,
            span: 11200..11201,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 424,
            column: 6,
            span: 11203..11208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        position: Position {
            line: 424,
            column: 9,
            span: 11209..11211,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 424,
            column: 11,
            span: 11212..11213,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\\n\\n\\\\com \\\"\\\"''coisas [[estranhas]] ]]'\"",
        ),
        position: Position {
            line: 424,
            column: 60,
            span: 11214..11262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 425,
            column: 3,
            span: 11263..11265,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 425,
            column: 4,
            span: 11265..11266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 425,
            column: 10,
            span: 11266..11272,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 425,
            column: 11,
            span: 11272..11273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 425,
            column: 15,
            span: 11273..11277,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 425,
            column: 16,
            span: 11277..11278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 426,
            column: 7,
            span: 11279..11285,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 426,
            column: 8,
            span: 11285..11286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 426,
            column: 10,
            span: 11286..11288,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 426,
            column: 11,
            span: 11288..11289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 426,
            column: 16,
            span: 11289..11294,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 426,
            column: 17,
            span: 11294..11295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 426,
            column: 23,
            span: 11295..11301,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 426,
            column: 24,
            span: 11301..11302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 426,
            column: 30,
            span: 11302..11308,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 426,
            column: 31,
            span: 11308..11309,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x2 = %q\\n-- comment without ending EOS\"",
        ),
        position: Position {
            line: 426,
            column: 71,
            span: 11309..11349,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 426,
            column: 72,
            span: 11349..11350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        position: Position {
            line: 426,
            column: 75,
            span: 11351..11353,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 426,
            column: 76,
            span: 11353..11354,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 426,
            column: 77,
            span: 11354..11355,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 426,
            column: 78,
            span: 11355..11356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 427,
            column: 3,
            span: 11357..11359,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 427,
            column: 4,
            span: 11359..11360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 427,
            column: 9,
            span: 11360..11365,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 427,
            column: 10,
            span: 11365..11366,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 427,
            column: 11,
            span: 11366..11367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 428,
            column: 7,
            span: 11368..11374,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 428,
            column: 8,
            span: 11374..11375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 428,
            column: 16,
            span: 11375..11383,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 428,
            column: 17,
            span: 11383..11384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 428,
            column: 21,
            span: 11384..11388,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 428,
            column: 22,
            span: 11388..11389,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 428,
            column: 23,
            span: 11389..11390,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 428,
            column: 24,
            span: 11390..11391,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 428,
            column: 25,
            span: 11391..11392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 429,
            column: 7,
            span: 11393..11399,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 429,
            column: 8,
            span: 11399..11400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        position: Position {
            line: 429,
            column: 10,
            span: 11400..11402,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 429,
            column: 13,
            span: 11403..11405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x2",
        ),
        position: Position {
            line: 429,
            column: 16,
            span: 11406..11408,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 429,
            column: 17,
            span: 11408..11409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 430,
            column: 6,
            span: 11410..11415,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 430,
            column: 7,
            span: 11415..11416,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 430,
            column: 10,
            span: 11416..11419,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 430,
            column: 11,
            span: 11419..11420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 431,
            column: 7,
            span: 11421..11427,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 431,
            column: 8,
            span: 11427..11428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 431,
            column: 10,
            span: 11428..11430,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 431,
            column: 11,
            span: 11430..11431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 431,
            column: 17,
            span: 11431..11437,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 431,
            column: 18,
            span: 11437..11438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 431,
            column: 22,
            span: 11438..11442,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 431,
            column: 23,
            span: 11442..11443,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 431,
            column: 24,
            span: 11443..11444,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 432,
            column: 7,
            span: 11445..11451,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 432,
            column: 8,
            span: 11451..11452,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 432,
            column: 11,
            span: 11452..11455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 432,
            column: 14,
            span: 11456..11458,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 432,
            column: 15,
            span: 11458..11459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 432,
            column: 21,
            span: 11459..11465,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 432,
            column: 22,
            span: 11465..11466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 432,
            column: 26,
            span: 11466..11470,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 432,
            column: 27,
            span: 11470..11471,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 432,
            column: 28,
            span: 11471..11472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 433,
            column: 7,
            span: 11473..11479,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 433,
            column: 8,
            span: 11479..11480,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 433,
            column: 11,
            span: 11480..11483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 433,
            column: 14,
            span: 11484..11486,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 433,
            column: 15,
            span: 11486..11487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 433,
            column: 21,
            span: 11487..11493,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 433,
            column: 22,
            span: 11493..11494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        position: Position {
            line: 433,
            column: 31,
            span: 11494..11503,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 433,
            column: 32,
            span: 11503..11504,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 433,
            column: 33,
            span: 11504..11505,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 436,
            column: 6,
            span: 11527..11532,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 436,
            column: 15,
            span: 11533..11541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testloadfile",
        ),
        position: Position {
            line: 436,
            column: 28,
            span: 11542..11554,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 436,
            column: 30,
            span: 11555..11556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 436,
            column: 31,
            span: 11556..11557,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 436,
            column: 32,
            span: 11557..11558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expres",
        ),
        position: Position {
            line: 436,
            column: 39,
            span: 11559..11565,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 436,
            column: 40,
            span: 11565..11566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 437,
            column: 5,
            span: 11569..11571,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 437,
            column: 6,
            span: 11571..11572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 437,
            column: 12,
            span: 11572..11578,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 437,
            column: 13,
            span: 11578..11579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 437,
            column: 17,
            span: 11579..11583,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 437,
            column: 18,
            span: 11583..11584,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 438,
            column: 5,
            span: 11587..11589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 438,
            column: 7,
            span: 11590..11591,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 438,
            column: 12,
            span: 11592..11596,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 438,
            column: 15,
            span: 11597..11599,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 438,
            column: 16,
            span: 11599..11600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 438,
            column: 21,
            span: 11600..11605,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 438,
            column: 22,
            span: 11605..11606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 438,
            column: 23,
            span: 11606..11607,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 438,
            column: 24,
            span: 11607..11608,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 438,
            column: 0,
            span: 11609..11612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 439,
            column: 5,
            span: 11615..11617,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 439,
            column: 6,
            span: 11617..11618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 439,
            column: 11,
            span: 11618..11623,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 439,
            column: 12,
            span: 11623..11624,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 439,
            column: 13,
            span: 11624..11625,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 440,
            column: 8,
            span: 11628..11633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 440,
            column: 12,
            span: 11634..11637,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 440,
            column: 14,
            span: 11638..11639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 440,
            column: 21,
            span: 11640..11646,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 440,
            column: 22,
            span: 11646..11647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 440,
            column: 30,
            span: 11647..11655,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 440,
            column: 31,
            span: 11655..11656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 440,
            column: 35,
            span: 11656..11660,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 440,
            column: 36,
            span: 11660..11661,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 440,
            column: 37,
            span: 11661..11662,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 440,
            column: 38,
            span: 11662..11663,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 440,
            column: 39,
            span: 11663..11664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 441,
            column: 9,
            span: 11667..11673,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 441,
            column: 10,
            span: 11673..11674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 441,
            column: 12,
            span: 11674..11676,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 441,
            column: 13,
            span: 11676..11677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 441,
            column: 19,
            span: 11677..11683,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 441,
            column: 20,
            span: 11683..11684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 441,
            column: 24,
            span: 11684..11688,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 441,
            column: 25,
            span: 11688..11689,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 441,
            column: 26,
            span: 11689..11690,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 442,
            column: 9,
            span: 11693..11699,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 442,
            column: 10,
            span: 11699..11700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 442,
            column: 13,
            span: 11700..11703,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 442,
            column: 16,
            span: 11704..11706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expres",
        ),
        position: Position {
            line: 442,
            column: 23,
            span: 11707..11713,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 442,
            column: 24,
            span: 11713..11714,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 443,
            column: 0,
            span: 11715..11718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testloadfile",
        ),
        position: Position {
            line: 446,
            column: 13,
            span: 11742..11754,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 446,
            column: 14,
            span: 11754..11755,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 446,
            column: 17,
            span: 11755..11758,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 446,
            column: 18,
            span: 11758..11759,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 446,
            column: 22,
            span: 11760..11763,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 446,
            column: 23,
            span: 11763..11764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testloadfile",
        ),
        position: Position {
            line: 449,
            column: 13,
            span: 11823..11835,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 449,
            column: 14,
            span: 11835..11836,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"# a non-ending comment\"",
        ),
        position: Position {
            line: 449,
            column: 38,
            span: 11836..11860,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 449,
            column: 39,
            span: 11860..11861,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 449,
            column: 43,
            span: 11862..11865,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 449,
            column: 44,
            span: 11865..11866,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testloadfile",
        ),
        position: Position {
            line: 453,
            column: 13,
            span: 11902..11914,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 453,
            column: 14,
            span: 11914..11915,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xEF\\xBB\\xBF# some comment\\nreturn 234\"",
        ),
        position: Position {
            line: 453,
            column: 54,
            span: 11915..11955,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 453,
            column: 55,
            span: 11955..11956,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "234",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 453,
            column: 59,
            span: 11956..11960,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 453,
            column: 60,
            span: 11960..11961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testloadfile",
        ),
        position: Position {
            line: 454,
            column: 13,
            span: 11962..11974,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 454,
            column: 14,
            span: 11974..11975,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xEF\\xBB\\xBFreturn 239\"",
        ),
        position: Position {
            line: 454,
            column: 38,
            span: 11975..11999,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 454,
            column: 39,
            span: 11999..12000,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "239",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 454,
            column: 43,
            span: 12000..12004,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 454,
            column: 44,
            span: 12004..12005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testloadfile",
        ),
        position: Position {
            line: 455,
            column: 13,
            span: 12006..12018,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 455,
            column: 14,
            span: 12018..12019,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xEF\\xBB\\xBF\"",
        ),
        position: Position {
            line: 455,
            column: 28,
            span: 12019..12033,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 455,
            column: 29,
            span: 12033..12034,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 455,
            column: 33,
            span: 12035..12038,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 455,
            column: 34,
            span: 12038..12039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testloadfile",
        ),
        position: Position {
            line: 459,
            column: 13,
            span: 12125..12137,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 459,
            column: 14,
            span: 12137..12138,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"# a comment\\nreturn require'debug'.getinfo(1).currentline\"",
        ),
        position: Position {
            line: 459,
            column: 73,
            span: 12138..12197,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 459,
            column: 74,
            span: 12197..12198,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 459,
            column: 76,
            span: 12198..12200,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 459,
            column: 77,
            span: 12200..12201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 463,
            column: 3,
            span: 12227..12229,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 463,
            column: 4,
            span: 12229..12230,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 463,
            column: 10,
            span: 12230..12236,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 463,
            column: 11,
            span: 12236..12237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 463,
            column: 13,
            span: 12237..12239,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 463,
            column: 14,
            span: 12239..12240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 463,
            column: 18,
            span: 12240..12244,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 463,
            column: 19,
            span: 12244..12245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 463,
            column: 23,
            span: 12245..12249,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 463,
            column: 24,
            span: 12249..12250,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"wb\"",
        ),
        position: Position {
            line: 463,
            column: 29,
            span: 12251..12255,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 463,
            column: 30,
            span: 12255..12256,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 463,
            column: 31,
            span: 12256..12257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 464,
            column: 7,
            span: 12258..12264,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 464,
            column: 8,
            span: 12264..12265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 464,
            column: 10,
            span: 12265..12267,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 464,
            column: 11,
            span: 12267..12268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 464,
            column: 16,
            span: 12268..12273,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 464,
            column: 17,
            span: 12273..12274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 464,
            column: 23,
            span: 12274..12280,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 464,
            column: 24,
            span: 12280..12281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        position: Position {
            line: 464,
            column: 28,
            span: 12281..12285,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 464,
            column: 29,
            span: 12285..12286,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 464,
            column: 37,
            span: 12286..12294,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 464,
            column: 39,
            span: 12295..12296,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 464,
            column: 40,
            span: 12296..12297,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 464,
            column: 47,
            span: 12298..12304,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 464,
            column: 50,
            span: 12304..12307,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 464,
            column: 51,
            span: 12307..12308,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0alo\\255'",
        ),
        position: Position {
            line: 464,
            column: 63,
            span: 12309..12320,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 464,
            column: 64,
            span: 12320..12321,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'hi'",
        ),
        position: Position {
            line: 464,
            column: 69,
            span: 12322..12326,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 464,
            column: 73,
            span: 12327..12330,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 464,
            column: 74,
            span: 12330..12331,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 464,
            column: 75,
            span: 12331..12332,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 464,
            column: 76,
            span: 12332..12333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 465,
            column: 3,
            span: 12334..12336,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 465,
            column: 4,
            span: 12336..12337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 465,
            column: 9,
            span: 12337..12342,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 465,
            column: 10,
            span: 12342..12343,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 465,
            column: 11,
            span: 12343..12344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 466,
            column: 2,
            span: 12345..12346,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 466,
            column: 3,
            span: 12346..12347,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 466,
            column: 5,
            span: 12348..12349,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 466,
            column: 6,
            span: 12349..12350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 466,
            column: 8,
            span: 12351..12352,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 466,
            column: 10,
            span: 12353..12354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 466,
            column: 17,
            span: 12355..12361,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 466,
            column: 18,
            span: 12361..12362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 466,
            column: 26,
            span: 12362..12370,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 466,
            column: 27,
            span: 12370..12371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 466,
            column: 31,
            span: 12371..12375,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 466,
            column: 32,
            span: 12375..12376,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 466,
            column: 33,
            span: 12376..12377,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 466,
            column: 34,
            span: 12377..12378,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 466,
            column: 35,
            span: 12378..12379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 467,
            column: 7,
            span: 12380..12386,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 467,
            column: 8,
            span: 12386..12387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 467,
            column: 9,
            span: 12387..12388,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 467,
            column: 12,
            span: 12389..12391,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 467,
            column: 15,
            span: 12391..12394,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 467,
            column: 19,
            span: 12395..12398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 467,
            column: 21,
            span: 12399..12400,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 467,
            column: 24,
            span: 12401..12403,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0alo\\255\"",
        ),
        position: Position {
            line: 467,
            column: 36,
            span: 12404..12415,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 467,
            column: 40,
            span: 12416..12419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 467,
            column: 42,
            span: 12420..12421,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 467,
            column: 45,
            span: 12422..12424,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        position: Position {
            line: 467,
            column: 50,
            span: 12425..12429,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 467,
            column: 51,
            span: 12429..12430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 468,
            column: 7,
            span: 12431..12437,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 468,
            column: 8,
            span: 12437..12438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 468,
            column: 10,
            span: 12438..12440,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 468,
            column: 11,
            span: 12440..12441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 468,
            column: 17,
            span: 12441..12447,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 468,
            column: 18,
            span: 12447..12448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 468,
            column: 22,
            span: 12448..12452,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 468,
            column: 23,
            span: 12452..12453,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 468,
            column: 24,
            span: 12453..12454,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 471,
            column: 0,
            span: 12472..12474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 472,
            column: 5,
            span: 12477..12479,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 472,
            column: 6,
            span: 12479..12480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 472,
            column: 12,
            span: 12480..12486,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 472,
            column: 13,
            span: 12486..12487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 472,
            column: 15,
            span: 12487..12489,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 472,
            column: 16,
            span: 12489..12490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 472,
            column: 20,
            span: 12490..12494,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 472,
            column: 21,
            span: 12494..12495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 472,
            column: 25,
            span: 12495..12499,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 472,
            column: 26,
            span: 12499..12500,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"wb\"",
        ),
        position: Position {
            line: 472,
            column: 31,
            span: 12501..12505,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 472,
            column: 32,
            span: 12505..12506,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 472,
            column: 33,
            span: 12506..12507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 474,
            column: 9,
            span: 12546..12552,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 474,
            column: 10,
            span: 12552..12553,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 474,
            column: 12,
            span: 12553..12555,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 474,
            column: 13,
            span: 12555..12556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 474,
            column: 18,
            span: 12556..12561,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 474,
            column: 19,
            span: 12561..12562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 474,
            column: 25,
            span: 12562..12568,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 474,
            column: 26,
            span: 12568..12569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        position: Position {
            line: 474,
            column: 30,
            span: 12569..12573,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 474,
            column: 31,
            span: 12573..12574,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 474,
            column: 39,
            span: 12574..12582,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 474,
            column: 41,
            span: 12583..12584,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 474,
            column: 42,
            span: 12584..12585,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 474,
            column: 49,
            span: 12586..12592,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 474,
            column: 51,
            span: 12592..12594,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 474,
            column: 55,
            span: 12595..12598,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 474,
            column: 56,
            span: 12598..12599,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 474,
            column: 57,
            span: 12599..12600,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 474,
            column: 58,
            span: 12600..12601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 475,
            column: 5,
            span: 12604..12606,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 475,
            column: 6,
            span: 12606..12607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 475,
            column: 11,
            span: 12607..12612,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 475,
            column: 12,
            span: 12612..12613,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 475,
            column: 13,
            span: 12613..12614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 476,
            column: 4,
            span: 12617..12618,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 476,
            column: 6,
            span: 12619..12620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 476,
            column: 13,
            span: 12621..12627,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 476,
            column: 14,
            span: 12627..12628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 476,
            column: 22,
            span: 12628..12636,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 476,
            column: 23,
            span: 12636..12637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 476,
            column: 27,
            span: 12637..12641,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 476,
            column: 28,
            span: 12641..12642,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 476,
            column: 32,
            span: 12643..12646,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 476,
            column: 33,
            span: 12646..12647,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 476,
            column: 35,
            span: 12648..12649,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 476,
            column: 36,
            span: 12649..12650,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 476,
            column: 37,
            span: 12650..12651,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 476,
            column: 38,
            span: 12651..12652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 477,
            column: 9,
            span: 12655..12661,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 477,
            column: 10,
            span: 12661..12662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 477,
            column: 14,
            span: 12662..12666,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 477,
            column: 15,
            span: 12666..12667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 477,
            column: 16,
            span: 12667..12668,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 477,
            column: 17,
            span: 12668..12669,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 477,
            column: 20,
            span: 12670..12672,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        position: Position {
            line: 477,
            column: 31,
            span: 12673..12683,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 477,
            column: 35,
            span: 12684..12687,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 477,
            column: 37,
            span: 12688..12689,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 477,
            column: 38,
            span: 12689..12690,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 477,
            column: 39,
            span: 12690..12691,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 477,
            column: 42,
            span: 12692..12694,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 477,
            column: 44,
            span: 12694..12696,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 477,
            column: 45,
            span: 12696..12697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 478,
            column: 9,
            span: 12700..12706,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 478,
            column: 10,
            span: 12706..12707,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 478,
            column: 12,
            span: 12707..12709,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 478,
            column: 13,
            span: 12709..12710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 478,
            column: 19,
            span: 12710..12716,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 478,
            column: 20,
            span: 12716..12717,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 478,
            column: 24,
            span: 12717..12721,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 478,
            column: 25,
            span: 12721..12722,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 478,
            column: 26,
            span: 12722..12723,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 479,
            column: 0,
            span: 12724..12727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 482,
            column: 3,
            span: 12773..12775,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 482,
            column: 4,
            span: 12775..12776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 482,
            column: 10,
            span: 12776..12782,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 482,
            column: 11,
            span: 12782..12783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 482,
            column: 13,
            span: 12783..12785,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 482,
            column: 14,
            span: 12785..12786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 482,
            column: 18,
            span: 12786..12790,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 482,
            column: 19,
            span: 12790..12791,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 482,
            column: 23,
            span: 12791..12795,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 482,
            column: 24,
            span: 12795..12796,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"wb\"",
        ),
        position: Position {
            line: 482,
            column: 29,
            span: 12797..12801,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 482,
            column: 30,
            span: 12801..12802,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 482,
            column: 31,
            span: 12802..12803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 483,
            column: 7,
            span: 12804..12810,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 483,
            column: 8,
            span: 12810..12811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 483,
            column: 10,
            span: 12811..12813,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 483,
            column: 11,
            span: 12813..12814,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 483,
            column: 16,
            span: 12814..12819,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 483,
            column: 17,
            span: 12819..12820,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#this is a comment for a binary file\\0\\n\"",
        ),
        position: Position {
            line: 483,
            column: 59,
            span: 12820..12862,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 483,
            column: 60,
            span: 12862..12863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 484,
            column: 23,
            span: 12880..12886,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 484,
            column: 24,
            span: 12886..12887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        position: Position {
            line: 484,
            column: 28,
            span: 12887..12891,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 484,
            column: 29,
            span: 12891..12892,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 484,
            column: 37,
            span: 12892..12900,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 484,
            column: 39,
            span: 12901..12902,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 484,
            column: 40,
            span: 12902..12903,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 484,
            column: 47,
            span: 12904..12910,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 484,
            column: 50,
            span: 12910..12913,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 484,
            column: 51,
            span: 12913..12914,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0'",
        ),
        position: Position {
            line: 484,
            column: 60,
            span: 12915..12923,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 484,
            column: 64,
            span: 12924..12927,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 484,
            column: 65,
            span: 12927..12928,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 484,
            column: 66,
            span: 12928..12929,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 484,
            column: 67,
            span: 12929..12930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 485,
            column: 3,
            span: 12931..12933,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 485,
            column: 4,
            span: 12933..12934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 485,
            column: 9,
            span: 12934..12939,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 485,
            column: 10,
            span: 12939..12940,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 485,
            column: 11,
            span: 12940..12941,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 486,
            column: 2,
            span: 12942..12943,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 486,
            column: 3,
            span: 12943..12944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 486,
            column: 5,
            span: 12945..12946,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 486,
            column: 6,
            span: 12946..12947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 486,
            column: 8,
            span: 12948..12949,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 486,
            column: 10,
            span: 12950..12951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 486,
            column: 17,
            span: 12952..12958,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 486,
            column: 18,
            span: 12958..12959,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 486,
            column: 26,
            span: 12959..12967,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 486,
            column: 27,
            span: 12967..12968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 486,
            column: 31,
            span: 12968..12972,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 486,
            column: 32,
            span: 12972..12973,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 486,
            column: 33,
            span: 12973..12974,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 486,
            column: 34,
            span: 12974..12975,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 486,
            column: 35,
            span: 12975..12976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 487,
            column: 7,
            span: 12977..12983,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 487,
            column: 8,
            span: 12983..12984,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 487,
            column: 9,
            span: 12984..12985,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 487,
            column: 12,
            span: 12986..12988,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 487,
            column: 15,
            span: 12988..12991,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 487,
            column: 19,
            span: 12992..12995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 487,
            column: 21,
            span: 12996..12997,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 487,
            column: 24,
            span: 12998..13000,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\"",
        ),
        position: Position {
            line: 487,
            column: 33,
            span: 13001..13009,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 487,
            column: 37,
            span: 13010..13013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 487,
            column: 39,
            span: 13014..13015,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 487,
            column: 42,
            span: 13016..13018,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 487,
            column: 46,
            span: 13019..13022,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 487,
            column: 47,
            span: 13022..13023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 488,
            column: 7,
            span: 13024..13030,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 488,
            column: 8,
            span: 13030..13031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 488,
            column: 10,
            span: 13031..13033,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 488,
            column: 11,
            span: 13033..13034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 488,
            column: 17,
            span: 13034..13040,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 488,
            column: 18,
            span: 13040..13041,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 488,
            column: 22,
            span: 13041..13045,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 488,
            column: 23,
            span: 13045..13046,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 488,
            column: 24,
            span: 13046..13047,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 492,
            column: 0,
            span: 13075..13077,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 493,
            column: 8,
            span: 13080..13085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 493,
            column: 10,
            span: 13086..13087,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 493,
            column: 12,
            span: 13088..13089,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 493,
            column: 15,
            span: 13090..13092,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 493,
            column: 16,
            span: 13092..13093,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 493,
            column: 20,
            span: 13093..13097,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 493,
            column: 21,
            span: 13097..13098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 493,
            column: 25,
            span: 13098..13102,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 493,
            column: 26,
            span: 13102..13103,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'w'",
        ),
        position: Position {
            line: 493,
            column: 30,
            span: 13104..13107,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 493,
            column: 31,
            span: 13107..13108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 494,
            column: 4,
            span: 13111..13112,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 494,
            column: 5,
            span: 13112..13113,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 494,
            column: 10,
            span: 13113..13118,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    if (...) then a = 15; return b, c, d\n    else return _ENV\n    end\n  ]]",
        ),
        position: Position {
            line: 498,
            column: 5,
            span: 13118..13195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 499,
            column: 4,
            span: 13198..13199,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 499,
            column: 5,
            span: 13199..13200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 499,
            column: 10,
            span: 13200..13205,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 499,
            column: 11,
            span: 13205..13206,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 499,
            column: 12,
            span: 13206..13207,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 500,
            column: 8,
            span: 13210..13215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 500,
            column: 10,
            span: 13216..13217,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 500,
            column: 12,
            span: 13218..13219,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 500,
            column: 14,
            span: 13220..13221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 500,
            column: 15,
            span: 13221..13222,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 500,
            column: 17,
            span: 13223..13224,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 500,
            column: 20,
            span: 13224..13227,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 500,
            column: 21,
            span: 13227..13228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 500,
            column: 23,
            span: 13229..13230,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 500,
            column: 25,
            span: 13231..13232,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 500,
            column: 32,
            span: 13233..13239,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 500,
            column: 33,
            span: 13239..13240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 500,
            column: 35,
            span: 13241..13242,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 500,
            column: 37,
            span: 13243..13244,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 500,
            column: 43,
            span: 13245..13250,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 500,
            column: 44,
            span: 13250..13251,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 501,
            column: 8,
            span: 13254..13259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 501,
            column: 10,
            span: 13260..13261,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 501,
            column: 12,
            span: 13262..13263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 501,
            column: 19,
            span: 13264..13270,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 501,
            column: 20,
            span: 13270..13271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 501,
            column: 28,
            span: 13271..13279,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 501,
            column: 29,
            span: 13279..13280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 501,
            column: 33,
            span: 13280..13284,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 501,
            column: 34,
            span: 13284..13285,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'t'",
        ),
        position: Position {
            line: 501,
            column: 38,
            span: 13286..13289,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 501,
            column: 39,
            span: 13289..13290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 501,
            column: 41,
            span: 13291..13292,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 501,
            column: 42,
            span: 13292..13293,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 501,
            column: 43,
            span: 13293..13294,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 502,
            column: 8,
            span: 13297..13302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 502,
            column: 10,
            span: 13303..13304,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 502,
            column: 11,
            span: 13304..13305,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 502,
            column: 13,
            span: 13306..13307,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 502,
            column: 14,
            span: 13307..13308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 502,
            column: 16,
            span: 13309..13310,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 502,
            column: 18,
            span: 13311..13312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 502,
            column: 20,
            span: 13313..13314,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 502,
            column: 21,
            span: 13314..13315,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 502,
            column: 22,
            span: 13314..13316,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 502,
            column: 23,
            span: 13316..13317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 503,
            column: 9,
            span: 13320..13326,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 503,
            column: 10,
            span: 13326..13327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 503,
            column: 11,
            span: 13327..13328,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 503,
            column: 12,
            span: 13328..13329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 503,
            column: 13,
            span: 13329..13330,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 503,
            column: 16,
            span: 13331..13333,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 503,
            column: 19,
            span: 13333..13336,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 503,
            column: 23,
            span: 13337..13340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 503,
            column: 25,
            span: 13341..13342,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 503,
            column: 28,
            span: 13343..13345,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 503,
            column: 31,
            span: 13345..13348,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 503,
            column: 35,
            span: 13349..13352,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 503,
            column: 37,
            span: 13353..13354,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 503,
            column: 40,
            span: 13355..13357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 503,
            column: 42,
            span: 13358..13359,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 503,
            column: 43,
            span: 13359..13360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 503,
            column: 44,
            span: 13360..13361,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 503,
            column: 48,
            span: 13362..13365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 503,
            column: 50,
            span: 13366..13367,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 503,
            column: 53,
            span: 13368..13370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 503,
            column: 59,
            span: 13371..13376,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 503,
            column: 60,
            span: 13376..13377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 504,
            column: 9,
            span: 13380..13386,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 504,
            column: 10,
            span: 13386..13387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 504,
            column: 11,
            span: 13387..13388,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 504,
            column: 12,
            span: 13388..13389,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 504,
            column: 13,
            span: 13389..13390,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 504,
            column: 16,
            span: 13391..13393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 504,
            column: 18,
            span: 13394..13395,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 504,
            column: 19,
            span: 13395..13396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 505,
            column: 4,
            span: 13399..13400,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 505,
            column: 6,
            span: 13401..13402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 505,
            column: 13,
            span: 13403..13409,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 505,
            column: 14,
            span: 13409..13410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 505,
            column: 22,
            span: 13410..13418,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 505,
            column: 23,
            span: 13418..13419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 505,
            column: 27,
            span: 13419..13423,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 505,
            column: 28,
            span: 13423..13424,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'t'",
        ),
        position: Position {
            line: 505,
            column: 32,
            span: 13425..13428,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 505,
            column: 33,
            span: 13428..13429,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 505,
            column: 37,
            span: 13430..13433,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 505,
            column: 38,
            span: 13433..13434,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 505,
            column: 39,
            span: 13434..13435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 506,
            column: 9,
            span: 13438..13444,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 506,
            column: 10,
            span: 13444..13445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 506,
            column: 11,
            span: 13445..13446,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 506,
            column: 12,
            span: 13446..13447,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 506,
            column: 13,
            span: 13447..13448,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 506,
            column: 16,
            span: 13449..13451,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 506,
            column: 20,
            span: 13452..13455,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 506,
            column: 21,
            span: 13455..13456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 507,
            column: 4,
            span: 13459..13460,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 507,
            column: 6,
            span: 13461..13462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 507,
            column: 13,
            span: 13463..13469,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 507,
            column: 14,
            span: 13469..13470,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 507,
            column: 22,
            span: 13470..13478,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 507,
            column: 23,
            span: 13478..13479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 507,
            column: 27,
            span: 13479..13483,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 507,
            column: 28,
            span: 13483..13484,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 507,
            column: 29,
            span: 13484..13485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 508,
            column: 9,
            span: 13488..13494,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 508,
            column: 10,
            span: 13494..13495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 508,
            column: 11,
            span: 13495..13496,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 508,
            column: 12,
            span: 13496..13497,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 508,
            column: 13,
            span: 13497..13498,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 508,
            column: 16,
            span: 13499..13501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 508,
            column: 19,
            span: 13502..13504,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 508,
            column: 20,
            span: 13504..13505,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 509,
            column: 9,
            span: 13508..13514,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 509,
            column: 10,
            span: 13514..13515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 509,
            column: 12,
            span: 13515..13517,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 509,
            column: 13,
            span: 13517..13518,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 509,
            column: 19,
            span: 13518..13524,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 509,
            column: 20,
            span: 13524..13525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 509,
            column: 24,
            span: 13525..13529,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 509,
            column: 25,
            span: 13529..13530,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 509,
            column: 26,
            span: 13530..13531,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 510,
            column: 0,
            span: 13532..13535,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 514,
            column: 0,
            span: 13560..13562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 515,
            column: 5,
            span: 13565..13567,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 515,
            column: 6,
            span: 13567..13568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 515,
            column: 10,
            span: 13568..13572,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 515,
            column: 11,
            span: 13572..13573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 515,
            column: 15,
            span: 13573..13577,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 515,
            column: 16,
            span: 13577..13578,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'w'",
        ),
        position: Position {
            line: 515,
            column: 20,
            span: 13579..13582,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 515,
            column: 21,
            span: 13582..13583,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 515,
            column: 22,
            span: 13583..13584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 515,
            column: 27,
            span: 13584..13589,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 515,
            column: 28,
            span: 13589..13590,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 10\"",
        ),
        position: Position {
            line: 515,
            column: 39,
            span: 13590..13601,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 515,
            column: 40,
            span: 13601..13602,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 515,
            column: 41,
            span: 13602..13603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 515,
            column: 46,
            span: 13603..13608,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 515,
            column: 47,
            span: 13608..13609,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 515,
            column: 48,
            span: 13609..13610,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 516,
            column: 8,
            span: 13613..13618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 516,
            column: 10,
            span: 13619..13620,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 516,
            column: 11,
            span: 13620..13621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 516,
            column: 13,
            span: 13622..13623,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 516,
            column: 15,
            span: 13624..13625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 516,
            column: 24,
            span: 13626..13634,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 516,
            column: 25,
            span: 13634..13635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 516,
            column: 29,
            span: 13635..13639,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 516,
            column: 30,
            span: 13639..13640,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        position: Position {
            line: 516,
            column: 34,
            span: 13641..13644,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 516,
            column: 35,
            span: 13644..13645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 517,
            column: 9,
            span: 13648..13654,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 517,
            column: 10,
            span: 13654..13655,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 517,
            column: 13,
            span: 13655..13658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 517,
            column: 15,
            span: 13659..13660,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 517,
            column: 19,
            span: 13661..13664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 517,
            column: 26,
            span: 13665..13671,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 517,
            column: 27,
            span: 13671..13672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 517,
            column: 31,
            span: 13672..13676,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 517,
            column: 32,
            span: 13676..13677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 517,
            column: 33,
            span: 13677..13678,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 517,
            column: 34,
            span: 13678..13679,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a text chunk\"",
        ),
        position: Position {
            line: 517,
            column: 49,
            span: 13680..13694,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 517,
            column: 50,
            span: 13694..13695,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 517,
            column: 51,
            span: 13695..13696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 518,
            column: 5,
            span: 13699..13701,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 518,
            column: 6,
            span: 13701..13702,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 518,
            column: 10,
            span: 13702..13706,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 518,
            column: 11,
            span: 13706..13707,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 518,
            column: 15,
            span: 13707..13711,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 518,
            column: 16,
            span: 13711..13712,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'w'",
        ),
        position: Position {
            line: 518,
            column: 20,
            span: 13713..13716,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 518,
            column: 21,
            span: 13716..13717,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 518,
            column: 22,
            span: 13717..13718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 518,
            column: 27,
            span: 13718..13723,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 518,
            column: 28,
            span: 13723..13724,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\27 return 10\"",
        ),
        position: Position {
            line: 518,
            column: 43,
            span: 13724..13739,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 518,
            column: 44,
            span: 13739..13740,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 518,
            column: 45,
            span: 13740..13741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 518,
            column: 50,
            span: 13741..13746,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 518,
            column: 51,
            span: 13746..13747,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 518,
            column: 52,
            span: 13747..13748,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 519,
            column: 8,
            span: 13751..13756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 519,
            column: 10,
            span: 13757..13758,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 519,
            column: 11,
            span: 13758..13759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 519,
            column: 13,
            span: 13760..13761,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 519,
            column: 15,
            span: 13762..13763,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 519,
            column: 24,
            span: 13764..13772,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 519,
            column: 25,
            span: 13772..13773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 519,
            column: 29,
            span: 13773..13777,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 519,
            column: 30,
            span: 13777..13778,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'t'",
        ),
        position: Position {
            line: 519,
            column: 34,
            span: 13779..13782,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 519,
            column: 35,
            span: 13782..13783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 520,
            column: 9,
            span: 13786..13792,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 520,
            column: 10,
            span: 13792..13793,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 520,
            column: 13,
            span: 13793..13796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 520,
            column: 15,
            span: 13797..13798,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 520,
            column: 19,
            span: 13799..13802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 520,
            column: 26,
            span: 13803..13809,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 520,
            column: 27,
            span: 13809..13810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 520,
            column: 31,
            span: 13810..13814,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 520,
            column: 32,
            span: 13814..13815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 520,
            column: 33,
            span: 13815..13816,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 520,
            column: 34,
            span: 13816..13817,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a binary chunk\"",
        ),
        position: Position {
            line: 520,
            column: 51,
            span: 13818..13834,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 520,
            column: 52,
            span: 13834..13835,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 520,
            column: 53,
            span: 13835..13836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 521,
            column: 9,
            span: 13839..13845,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 521,
            column: 10,
            span: 13845..13846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 521,
            column: 12,
            span: 13846..13848,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 521,
            column: 13,
            span: 13848..13849,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 521,
            column: 19,
            span: 13849..13855,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 521,
            column: 20,
            span: 13855..13856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 521,
            column: 24,
            span: 13856..13860,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 521,
            column: 25,
            span: 13860..13861,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 521,
            column: 26,
            span: 13861..13862,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 522,
            column: 0,
            span: 13863..13866,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 525,
            column: 3,
            span: 13869..13871,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 525,
            column: 4,
            span: 13871..13872,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 525,
            column: 10,
            span: 13872..13878,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 525,
            column: 11,
            span: 13878..13879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 525,
            column: 15,
            span: 13879..13883,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 525,
            column: 16,
            span: 13883..13884,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 526,
            column: 7,
            span: 13885..13891,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 526,
            column: 8,
            span: 13891..13892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 526,
            column: 10,
            span: 13892..13894,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 526,
            column: 11,
            span: 13894..13895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 526,
            column: 16,
            span: 13895..13900,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 526,
            column: 17,
            span: 13900..13901,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"qualquer coisa\\n\"",
        ),
        position: Position {
            line: 526,
            column: 35,
            span: 13901..13919,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 526,
            column: 36,
            span: 13919..13920,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 526,
            column: 37,
            span: 13920..13921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 527,
            column: 7,
            span: 13922..13928,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 527,
            column: 8,
            span: 13928..13929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 527,
            column: 10,
            span: 13929..13931,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 527,
            column: 11,
            span: 13931..13932,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 527,
            column: 16,
            span: 13932..13937,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 527,
            column: 17,
            span: 13937..13938,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mais qualquer coisa\"",
        ),
        position: Position {
            line: 527,
            column: 38,
            span: 13938..13959,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 527,
            column: 39,
            span: 13959..13960,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 527,
            column: 40,
            span: 13960..13961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 528,
            column: 3,
            span: 13962..13964,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 528,
            column: 4,
            span: 13964..13965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 528,
            column: 9,
            span: 13965..13970,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 528,
            column: 10,
            span: 13970..13971,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 528,
            column: 11,
            span: 13971..13972,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 529,
            column: 7,
            span: 13973..13979,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 529,
            column: 8,
            span: 13979..13980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 529,
            column: 10,
            span: 13980..13982,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 529,
            column: 11,
            span: 13982..13983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 529,
            column: 17,
            span: 13983..13989,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 529,
            column: 18,
            span: 13989..13990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 529,
            column: 24,
            span: 13990..13996,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 529,
            column: 25,
            span: 13996..13997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 529,
            column: 27,
            span: 13997..13999,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 529,
            column: 28,
            span: 13999..14000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 529,
            column: 32,
            span: 14000..14004,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 529,
            column: 33,
            span: 14004..14005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        position: Position {
            line: 529,
            column: 42,
            span: 14005..14014,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 529,
            column: 43,
            span: 14014..14015,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'wb'",
        ),
        position: Position {
            line: 529,
            column: 48,
            span: 14016..14020,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 529,
            column: 49,
            span: 14020..14021,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 529,
            column: 50,
            span: 14021..14022,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 529,
            column: 51,
            span: 14022..14023,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 530,
            column: 9,
            span: 14031..14032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 530,
            column: 14,
            span: 14032..14037,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 530,
            column: 15,
            span: 14037..14038,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"outra coisa\\0\\1\\3\\0\\0\\0\\0\\255\\0\"",
        ),
        position: Position {
            line: 530,
            column: 48,
            span: 14038..14071,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 530,
            column: 49,
            span: 14071..14072,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 531,
            column: 9,
            span: 14080..14081,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 531,
            column: 14,
            span: 14081..14086,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 531,
            column: 15,
            span: 14086..14087,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 531,
            column: 16,
            span: 14087..14088,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 531,
            column: 17,
            span: 14088..14089,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 533,
            column: 6,
            span: 14091..14096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filehandle",
        ),
        position: Position {
            line: 533,
            column: 17,
            span: 14097..14107,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 533,
            column: 19,
            span: 14108..14109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 533,
            column: 26,
            span: 14110..14116,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 533,
            column: 27,
            span: 14116..14117,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 533,
            column: 29,
            span: 14117..14119,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 533,
            column: 30,
            span: 14119..14120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 533,
            column: 34,
            span: 14120..14124,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 533,
            column: 35,
            span: 14124..14125,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 533,
            column: 39,
            span: 14125..14129,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 533,
            column: 40,
            span: 14129..14130,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r+'",
        ),
        position: Position {
            line: 533,
            column: 45,
            span: 14131..14135,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 533,
            column: 46,
            span: 14135..14136,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 533,
            column: 47,
            span: 14136..14137,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 534,
            column: 6,
            span: 14138..14143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfilehandle",
        ),
        position: Position {
            line: 534,
            column: 22,
            span: 14144..14159,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 534,
            column: 24,
            span: 14160..14161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 534,
            column: 31,
            span: 14162..14168,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 534,
            column: 32,
            span: 14168..14169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 534,
            column: 34,
            span: 14169..14171,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 534,
            column: 35,
            span: 14171..14172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 534,
            column: 39,
            span: 14172..14176,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 534,
            column: 40,
            span: 14176..14177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        position: Position {
            line: 534,
            column: 49,
            span: 14177..14186,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 534,
            column: 50,
            span: 14186..14187,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'rb'",
        ),
        position: Position {
            line: 534,
            column: 55,
            span: 14188..14192,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 534,
            column: 56,
            span: 14192..14193,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 534,
            column: 57,
            span: 14193..14194,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 535,
            column: 7,
            span: 14195..14201,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 535,
            column: 8,
            span: 14201..14202,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filehandle",
        ),
        position: Position {
            line: 535,
            column: 18,
            span: 14202..14212,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 535,
            column: 21,
            span: 14213..14215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfilehandle",
        ),
        position: Position {
            line: 535,
            column: 37,
            span: 14216..14231,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 535,
            column: 38,
            span: 14231..14232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 536,
            column: 7,
            span: 14233..14239,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 536,
            column: 8,
            span: 14239..14240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 536,
            column: 12,
            span: 14240..14244,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 536,
            column: 13,
            span: 14244..14245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filehandle",
        ),
        position: Position {
            line: 536,
            column: 23,
            span: 14245..14255,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 536,
            column: 24,
            span: 14255..14256,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 536,
            column: 27,
            span: 14257..14259,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"userdata\"",
        ),
        position: Position {
            line: 536,
            column: 38,
            span: 14260..14270,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 536,
            column: 39,
            span: 14270..14271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 537,
            column: 7,
            span: 14272..14278,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 537,
            column: 8,
            span: 14278..14279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filehandle",
        ),
        position: Position {
            line: 537,
            column: 18,
            span: 14279..14289,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 537,
            column: 19,
            span: 14289..14290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 537,
            column: 23,
            span: 14290..14294,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 537,
            column: 24,
            span: 14294..14295,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'l'",
        ),
        position: Position {
            line: 537,
            column: 27,
            span: 14295..14298,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 537,
            column: 28,
            span: 14298..14299,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 537,
            column: 31,
            span: 14300..14302,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"qualquer coisa\"",
        ),
        position: Position {
            line: 537,
            column: 48,
            span: 14303..14319,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 537,
            column: 49,
            span: 14319..14320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 538,
            column: 3,
            span: 14321..14323,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 538,
            column: 4,
            span: 14323..14324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 538,
            column: 9,
            span: 14324..14329,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 538,
            column: 10,
            span: 14329..14330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfilehandle",
        ),
        position: Position {
            line: 538,
            column: 25,
            span: 14330..14345,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 538,
            column: 26,
            span: 14345..14346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 539,
            column: 7,
            span: 14347..14353,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 539,
            column: 8,
            span: 14353..14354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 539,
            column: 10,
            span: 14354..14356,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 539,
            column: 11,
            span: 14356..14357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 539,
            column: 15,
            span: 14357..14361,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 539,
            column: 16,
            span: 14361..14362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 539,
            column: 22,
            span: 14362..14368,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 539,
            column: 23,
            span: 14368..14369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 539,
            column: 26,
            span: 14369..14372,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"outra coisa\"",
        ),
        position: Position {
            line: 539,
            column: 39,
            span: 14372..14385,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 539,
            column: 40,
            span: 14385..14386,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 539,
            column: 43,
            span: 14387..14389,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"outra coisa\"",
        ),
        position: Position {
            line: 539,
            column: 57,
            span: 14390..14403,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 539,
            column: 58,
            span: 14403..14404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 540,
            column: 7,
            span: 14405..14411,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 540,
            column: 8,
            span: 14411..14412,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filehandle",
        ),
        position: Position {
            line: 540,
            column: 18,
            span: 14412..14422,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 540,
            column: 19,
            span: 14422..14423,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 540,
            column: 23,
            span: 14423..14427,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 540,
            column: 24,
            span: 14427..14428,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'l'",
        ),
        position: Position {
            line: 540,
            column: 27,
            span: 14428..14431,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 540,
            column: 28,
            span: 14431..14432,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 540,
            column: 31,
            span: 14433..14435,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mais qualquer coisa\"",
        ),
        position: Position {
            line: 540,
            column: 53,
            span: 14436..14457,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 540,
            column: 54,
            span: 14457..14458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filehandle",
        ),
        position: Position {
            line: 541,
            column: 11,
            span: 14459..14469,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 541,
            column: 12,
            span: 14469..14470,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 541,
            column: 17,
            span: 14470..14475,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 541,
            column: 18,
            span: 14475..14476,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 541,
            column: 19,
            span: 14476..14477,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 541,
            column: 20,
            span: 14477..14478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 542,
            column: 7,
            span: 14479..14485,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 542,
            column: 8,
            span: 14485..14486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 542,
            column: 12,
            span: 14486..14490,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 542,
            column: 13,
            span: 14490..14491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filehandle",
        ),
        position: Position {
            line: 542,
            column: 23,
            span: 14491..14501,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 542,
            column: 24,
            span: 14501..14502,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 542,
            column: 27,
            span: 14503..14505,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"userdata\"",
        ),
        position: Position {
            line: 542,
            column: 38,
            span: 14506..14516,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 542,
            column: 39,
            span: 14516..14517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 543,
            column: 3,
            span: 14518..14520,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 543,
            column: 4,
            span: 14520..14521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 543,
            column: 9,
            span: 14521..14526,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 543,
            column: 10,
            span: 14526..14527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfilehandle",
        ),
        position: Position {
            line: 543,
            column: 25,
            span: 14527..14542,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 543,
            column: 26,
            span: 14542..14543,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 544,
            column: 7,
            span: 14544..14550,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 544,
            column: 8,
            span: 14550..14551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 544,
            column: 10,
            span: 14551..14553,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 544,
            column: 11,
            span: 14553..14554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 544,
            column: 15,
            span: 14554..14558,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 544,
            column: 16,
            span: 14558..14559,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 544,
            column: 17,
            span: 14558..14560,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 544,
            column: 18,
            span: 14560..14561,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 544,
            column: 21,
            span: 14562..14564,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\1\\3\\0\"",
        ),
        position: Position {
            line: 544,
            column: 32,
            span: 14565..14575,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 544,
            column: 33,
            span: 14575..14576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 545,
            column: 7,
            span: 14577..14583,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 545,
            column: 8,
            span: 14583..14584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 545,
            column: 10,
            span: 14584..14586,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 545,
            column: 11,
            span: 14586..14587,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 545,
            column: 15,
            span: 14587..14591,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 545,
            column: 16,
            span: 14591..14592,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 545,
            column: 17,
            span: 14591..14593,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 545,
            column: 18,
            span: 14593..14594,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 545,
            column: 21,
            span: 14595..14597,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\"",
        ),
        position: Position {
            line: 545,
            column: 30,
            span: 14598..14606,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 545,
            column: 31,
            span: 14606..14607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 546,
            column: 7,
            span: 14608..14614,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 546,
            column: 8,
            span: 14614..14615,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 546,
            column: 10,
            span: 14615..14617,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 546,
            column: 11,
            span: 14617..14618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 546,
            column: 15,
            span: 14618..14622,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 546,
            column: 16,
            span: 14622..14623,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 546,
            column: 17,
            span: 14622..14624,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 546,
            column: 18,
            span: 14624..14625,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 546,
            column: 21,
            span: 14626..14628,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 546,
            column: 24,
            span: 14629..14631,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 546,
            column: 25,
            span: 14631..14632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 547,
            column: 7,
            span: 14658..14664,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 547,
            column: 8,
            span: 14664..14665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 547,
            column: 10,
            span: 14665..14667,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 547,
            column: 11,
            span: 14667..14668,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 547,
            column: 15,
            span: 14668..14672,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 547,
            column: 16,
            span: 14672..14673,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 547,
            column: 17,
            span: 14672..14674,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 547,
            column: 18,
            span: 14674..14675,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 547,
            column: 21,
            span: 14676..14678,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\255\"",
        ),
        position: Position {
            line: 547,
            column: 28,
            span: 14679..14685,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 547,
            column: 29,
            span: 14685..14686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 548,
            column: 7,
            span: 14687..14693,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 548,
            column: 8,
            span: 14693..14694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 548,
            column: 10,
            span: 14694..14696,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 548,
            column: 11,
            span: 14696..14697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 548,
            column: 15,
            span: 14697..14701,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 548,
            column: 16,
            span: 14701..14702,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 548,
            column: 19,
            span: 14702..14705,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 548,
            column: 20,
            span: 14705..14706,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 548,
            column: 23,
            span: 14707..14709,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        position: Position {
            line: 548,
            column: 28,
            span: 14710..14714,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 548,
            column: 29,
            span: 14714..14715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 549,
            column: 7,
            span: 14716..14722,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 549,
            column: 8,
            span: 14722..14723,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 549,
            column: 11,
            span: 14723..14726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 549,
            column: 14,
            span: 14727..14729,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 549,
            column: 15,
            span: 14729..14730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 549,
            column: 19,
            span: 14730..14734,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 549,
            column: 20,
            span: 14734..14735,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 549,
            column: 21,
            span: 14734..14736,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 549,
            column: 22,
            span: 14736..14737,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 549,
            column: 23,
            span: 14737..14738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 550,
            column: 7,
            span: 14739..14745,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 550,
            column: 8,
            span: 14745..14746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfilehandle",
        ),
        position: Position {
            line: 550,
            column: 23,
            span: 14746..14761,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 550,
            column: 26,
            span: 14762..14764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 550,
            column: 29,
            span: 14765..14767,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 550,
            column: 30,
            span: 14767..14768,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 550,
            column: 35,
            span: 14768..14773,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 550,
            column: 36,
            span: 14773..14774,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 550,
            column: 37,
            span: 14774..14775,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 550,
            column: 38,
            span: 14775..14776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfilehandle",
        ),
        position: Position {
            line: 551,
            column: 16,
            span: 14777..14792,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 551,
            column: 17,
            span: 14792..14793,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 551,
            column: 22,
            span: 14793..14798,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 551,
            column: 23,
            span: 14798..14799,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 551,
            column: 24,
            span: 14799..14800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 552,
            column: 7,
            span: 14801..14807,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 552,
            column: 8,
            span: 14807..14808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 552,
            column: 10,
            span: 14808..14810,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 552,
            column: 11,
            span: 14810..14811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 552,
            column: 17,
            span: 14811..14817,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 552,
            column: 18,
            span: 14817..14818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 552,
            column: 22,
            span: 14818..14822,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 552,
            column: 23,
            span: 14822..14823,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 552,
            column: 24,
            span: 14823..14824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 553,
            column: 7,
            span: 14825..14831,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 553,
            column: 8,
            span: 14831..14832,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 553,
            column: 10,
            span: 14832..14834,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 553,
            column: 11,
            span: 14834..14835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 553,
            column: 17,
            span: 14835..14841,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 553,
            column: 18,
            span: 14841..14842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        position: Position {
            line: 553,
            column: 27,
            span: 14842..14851,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 553,
            column: 28,
            span: 14851..14852,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 553,
            column: 29,
            span: 14852..14853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 554,
            column: 15,
            span: 14854..14868,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 554,
            column: 16,
            span: 14868..14869,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 554,
            column: 17,
            span: 14869..14870,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 556,
            column: 3,
            span: 14872..14874,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 556,
            column: 4,
            span: 14874..14875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 556,
            column: 10,
            span: 14875..14881,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 556,
            column: 11,
            span: 14881..14882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 556,
            column: 15,
            span: 14882..14886,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 556,
            column: 16,
            span: 14886..14887,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 557,
            column: 4,
            span: 14890..14891,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 557,
            column: 9,
            span: 14891..14896,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n 123.4\t-56e-2  not a number\nsecond line\nthird line\n\nand the rest of the file\n]]",
        ),
        position: Position {
            line: 563,
            column: 3,
            span: 14896..14978,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 564,
            column: 4,
            span: 14981..14982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 564,
            column: 9,
            span: 14982..14987,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 564,
            column: 10,
            span: 14987..14988,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 564,
            column: 11,
            span: 14988..14989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 565,
            column: 3,
            span: 14990..14992,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 565,
            column: 4,
            span: 14992..14993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 565,
            column: 9,
            span: 14993..14998,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 565,
            column: 10,
            span: 14998..14999,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 565,
            column: 14,
            span: 14999..15003,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 565,
            column: 15,
            span: 15003..15004,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 566,
            column: 6,
            span: 15005..15010,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 566,
            column: 8,
            span: 15011..15012,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 566,
            column: 9,
            span: 15012..15013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 566,
            column: 10,
            span: 15013..15014,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 566,
            column: 11,
            span: 15014..15015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 566,
            column: 12,
            span: 15015..15016,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 566,
            column: 13,
            span: 15016..15017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 566,
            column: 14,
            span: 15017..15018,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 566,
            column: 15,
            span: 15018..15019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 566,
            column: 16,
            span: 15019..15020,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 566,
            column: 17,
            span: 15020..15021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 566,
            column: 18,
            span: 15021..15022,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 566,
            column: 19,
            span: 15022..15023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 566,
            column: 20,
            span: 15023..15024,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 566,
            column: 21,
            span: 15024..15025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__",
        ),
        position: Position {
            line: 566,
            column: 23,
            span: 15025..15027,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 566,
            column: 25,
            span: 15028..15029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 566,
            column: 28,
            span: 15030..15032,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 566,
            column: 29,
            span: 15032..15033,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 566,
            column: 33,
            span: 15033..15037,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 566,
            column: 34,
            span: 15037..15038,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 566,
            column: 35,
            span: 15037..15039,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 566,
            column: 36,
            span: 15039..15040,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'n'",
        ),
        position: Position {
            line: 566,
            column: 40,
            span: 15041..15044,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 566,
            column: 41,
            span: 15044..15045,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'n'",
        ),
        position: Position {
            line: 566,
            column: 45,
            span: 15046..15049,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 566,
            column: 46,
            span: 15049..15050,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'l'",
        ),
        position: Position {
            line: 566,
            column: 50,
            span: 15051..15054,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 566,
            column: 51,
            span: 15054..15055,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'l'",
        ),
        position: Position {
            line: 566,
            column: 55,
            span: 15056..15059,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 566,
            column: 56,
            span: 15059..15060,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'l'",
        ),
        position: Position {
            line: 566,
            column: 60,
            span: 15061..15064,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 566,
            column: 61,
            span: 15064..15065,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 566,
            column: 65,
            span: 15066..15069,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 566,
            column: 66,
            span: 15069..15070,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 566,
            column: 69,
            span: 15070..15073,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 566,
            column: 70,
            span: 15073..15074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 567,
            column: 7,
            span: 15075..15081,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 567,
            column: 8,
            span: 15081..15082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 567,
            column: 10,
            span: 15082..15084,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 567,
            column: 11,
            span: 15084..15085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 567,
            column: 16,
            span: 15085..15090,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 567,
            column: 17,
            span: 15090..15091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 567,
            column: 19,
            span: 15091..15093,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 567,
            column: 20,
            span: 15093..15094,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 567,
            column: 25,
            span: 15094..15099,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 567,
            column: 26,
            span: 15099..15100,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 567,
            column: 27,
            span: 15100..15101,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 567,
            column: 28,
            span: 15101..15102,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 567,
            column: 29,
            span: 15102..15103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 568,
            column: 7,
            span: 15104..15110,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 568,
            column: 8,
            span: 15110..15111,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 568,
            column: 9,
            span: 15111..15112,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 568,
            column: 12,
            span: 15113..15115,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        position: Position {
            line: 568,
            column: 16,
            span: 15116..15119,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 568,
            column: 20,
            span: 15120..15123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__",
        ),
        position: Position {
            line: 568,
            column: 23,
            span: 15124..15126,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 568,
            column: 26,
            span: 15127..15129,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 568,
            column: 30,
            span: 15130..15133,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 568,
            column: 31,
            span: 15133..15134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 569,
            column: 7,
            span: 15135..15141,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 569,
            column: 8,
            span: 15141..15142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 569,
            column: 12,
            span: 15142..15146,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 569,
            column: 13,
            span: 15146..15147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 569,
            column: 14,
            span: 15147..15148,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 569,
            column: 15,
            span: 15148..15149,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 569,
            column: 18,
            span: 15150..15152,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'number'",
        ),
        position: Position {
            line: 569,
            column: 27,
            span: 15153..15161,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 569,
            column: 31,
            span: 15162..15165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 569,
            column: 33,
            span: 15166..15167,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 569,
            column: 35,
            span: 15167..15169,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "123",
                    after_decimal: ".4",
                },
            ),
        ),
        position: Position {
            line: 569,
            column: 40,
            span: 15168..15174,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 569,
            column: 44,
            span: 15175..15178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 569,
            column: 46,
            span: 15179..15180,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 569,
            column: 48,
            span: 15180..15182,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 569,
            column: 49,
            span: 15182..15183,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "56",
                    after_decimal: "",
                },
                exponent: "-2",
            },
        ),
        position: Position {
            line: 569,
            column: 54,
            span: 15182..15188,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 569,
            column: 55,
            span: 15188..15189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 570,
            column: 7,
            span: 15190..15196,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 570,
            column: 8,
            span: 15196..15197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 570,
            column: 9,
            span: 15197..15198,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 570,
            column: 11,
            span: 15198..15200,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'second line'",
        ),
        position: Position {
            line: 570,
            column: 24,
            span: 15200..15213,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 570,
            column: 28,
            span: 15214..15217,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 570,
            column: 30,
            span: 15218..15219,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 570,
            column: 32,
            span: 15219..15221,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'third line'",
        ),
        position: Position {
            line: 570,
            column: 44,
            span: 15221..15233,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 570,
            column: 45,
            span: 15233..15234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 571,
            column: 7,
            span: 15235..15241,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 571,
            column: 8,
            span: 15241..15242,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 571,
            column: 9,
            span: 15242..15243,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 571,
            column: 11,
            span: 15243..15245,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n\nand the rest of the file\n]]",
        ),
        position: Position {
            line: 574,
            column: 3,
            span: 15245..15276,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 574,
            column: 4,
            span: 15276..15277,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 575,
            column: 7,
            span: 15278..15284,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 575,
            column: 8,
            span: 15284..15285,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 575,
            column: 10,
            span: 15285..15287,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 575,
            column: 11,
            span: 15287..15288,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 575,
            column: 17,
            span: 15288..15294,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 575,
            column: 18,
            span: 15294..15295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 575,
            column: 22,
            span: 15295..15299,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 575,
            column: 23,
            span: 15299..15300,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 575,
            column: 24,
            span: 15300..15301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 576,
            column: 15,
            span: 15302..15316,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 576,
            column: 16,
            span: 15316..15317,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 576,
            column: 17,
            span: 15317..15318,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 579,
            column: 0,
            span: 15339..15341,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 580,
            column: 8,
            span: 15344..15349,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 580,
            column: 10,
            span: 15350..15351,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 580,
            column: 12,
            span: 15352..15353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 580,
            column: 19,
            span: 15354..15360,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 580,
            column: 20,
            span: 15360..15361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 580,
            column: 22,
            span: 15361..15363,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 580,
            column: 23,
            span: 15363..15364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 580,
            column: 27,
            span: 15364..15368,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 580,
            column: 28,
            span: 15368..15369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 580,
            column: 32,
            span: 15369..15373,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 580,
            column: 33,
            span: 15373..15374,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        position: Position {
            line: 580,
            column: 37,
            span: 15375..15378,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 580,
            column: 38,
            span: 15378..15379,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 580,
            column: 39,
            span: 15379..15380,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 581,
            column: 8,
            span: 15383..15388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        position: Position {
            line: 581,
            column: 11,
            span: 15389..15391,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 581,
            column: 13,
            span: 15392..15393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 581,
            column: 20,
            span: 15394..15400,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 581,
            column: 21,
            span: 15400..15401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 581,
            column: 23,
            span: 15401..15403,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 581,
            column: 24,
            span: 15403..15404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 581,
            column: 28,
            span: 15404..15408,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 581,
            column: 29,
            span: 15408..15409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 581,
            column: 33,
            span: 15409..15413,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 581,
            column: 34,
            span: 15413..15414,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        position: Position {
            line: 581,
            column: 38,
            span: 15415..15418,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 581,
            column: 39,
            span: 15418..15419,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 581,
            column: 40,
            span: 15419..15420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 582,
            column: 9,
            span: 15423..15429,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 582,
            column: 10,
            span: 15429..15430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 582,
            column: 11,
            span: 15430..15431,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 582,
            column: 12,
            span: 15431..15432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setvbuf",
        ),
        position: Position {
            line: 582,
            column: 19,
            span: 15432..15439,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 582,
            column: 20,
            span: 15439..15440,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"full\"",
        ),
        position: Position {
            line: 582,
            column: 26,
            span: 15440..15446,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 582,
            column: 27,
            span: 15446..15447,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 582,
            column: 32,
            span: 15447..15452,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 582,
            column: 33,
            span: 15452..15453,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 582,
            column: 34,
            span: 15453..15454,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 583,
            column: 4,
            span: 15457..15458,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 583,
            column: 5,
            span: 15458..15459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 583,
            column: 10,
            span: 15459..15464,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 583,
            column: 11,
            span: 15464..15465,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 583,
            column: 14,
            span: 15465..15468,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 583,
            column: 15,
            span: 15468..15469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 584,
            column: 9,
            span: 15472..15478,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 584,
            column: 10,
            span: 15478..15479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        position: Position {
            line: 584,
            column: 12,
            span: 15479..15481,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 584,
            column: 13,
            span: 15481..15482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 584,
            column: 17,
            span: 15482..15486,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 584,
            column: 18,
            span: 15486..15487,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"all\"",
        ),
        position: Position {
            line: 584,
            column: 23,
            span: 15487..15492,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 584,
            column: 24,
            span: 15492..15493,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 584,
            column: 27,
            span: 15494..15496,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 584,
            column: 30,
            span: 15497..15499,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 584,
            column: 31,
            span: 15499..15500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 585,
            column: 4,
            span: 15543..15544,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 585,
            column: 5,
            span: 15544..15545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 585,
            column: 10,
            span: 15545..15550,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 585,
            column: 11,
            span: 15550..15551,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 585,
            column: 12,
            span: 15551..15552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        position: Position {
            line: 586,
            column: 5,
            span: 15555..15557,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 586,
            column: 6,
            span: 15557..15558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        position: Position {
            line: 586,
            column: 10,
            span: 15558..15562,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 586,
            column: 11,
            span: 15562..15563,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        position: Position {
            line: 586,
            column: 16,
            span: 15563..15568,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 586,
            column: 17,
            span: 15568..15569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 587,
            column: 9,
            span: 15572..15578,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 587,
            column: 10,
            span: 15578..15579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        position: Position {
            line: 587,
            column: 12,
            span: 15579..15581,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 587,
            column: 13,
            span: 15581..15582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 587,
            column: 17,
            span: 15582..15586,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 587,
            column: 18,
            span: 15586..15587,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"all\"",
        ),
        position: Position {
            line: 587,
            column: 23,
            span: 15587..15592,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 587,
            column: 24,
            span: 15592..15593,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 587,
            column: 27,
            span: 15594..15596,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 587,
            column: 31,
            span: 15597..15600,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 587,
            column: 32,
            span: 15600..15601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 588,
            column: 4,
            span: 15628..15629,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 588,
            column: 6,
            span: 15630..15631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 588,
            column: 13,
            span: 15632..15638,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 588,
            column: 14,
            span: 15638..15639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 588,
            column: 16,
            span: 15639..15641,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 588,
            column: 17,
            span: 15641..15642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 588,
            column: 21,
            span: 15642..15646,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 588,
            column: 22,
            span: 15646..15647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 588,
            column: 26,
            span: 15647..15651,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 588,
            column: 27,
            span: 15651..15652,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 588,
            column: 28,
            span: 15652..15653,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        position: Position {
            line: 588,
            column: 32,
            span: 15654..15657,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 588,
            column: 33,
            span: 15657..15658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 589,
            column: 9,
            span: 15661..15667,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 589,
            column: 10,
            span: 15667..15668,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 589,
            column: 11,
            span: 15668..15669,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 589,
            column: 12,
            span: 15669..15670,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setvbuf",
        ),
        position: Position {
            line: 589,
            column: 19,
            span: 15670..15677,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 589,
            column: 20,
            span: 15677..15678,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no\"",
        ),
        position: Position {
            line: 589,
            column: 24,
            span: 15678..15682,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 589,
            column: 25,
            span: 15682..15683,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 589,
            column: 26,
            span: 15683..15684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 590,
            column: 4,
            span: 15687..15688,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 590,
            column: 5,
            span: 15688..15689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 590,
            column: 10,
            span: 15689..15694,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 590,
            column: 11,
            span: 15694..15695,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 590,
            column: 14,
            span: 15695..15698,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 590,
            column: 15,
            span: 15698..15699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        position: Position {
            line: 591,
            column: 5,
            span: 15702..15704,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 591,
            column: 6,
            span: 15704..15705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        position: Position {
            line: 591,
            column: 10,
            span: 15705..15709,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 591,
            column: 11,
            span: 15709..15710,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        position: Position {
            line: 591,
            column: 16,
            span: 15710..15715,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 591,
            column: 17,
            span: 15715..15716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 592,
            column: 9,
            span: 15719..15725,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 592,
            column: 10,
            span: 15725..15726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        position: Position {
            line: 592,
            column: 12,
            span: 15726..15728,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 592,
            column: 13,
            span: 15728..15729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 592,
            column: 17,
            span: 15729..15733,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 592,
            column: 18,
            span: 15733..15734,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"all\"",
        ),
        position: Position {
            line: 592,
            column: 23,
            span: 15734..15739,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 592,
            column: 24,
            span: 15739..15740,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 592,
            column: 27,
            span: 15741..15743,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 592,
            column: 31,
            span: 15744..15747,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 592,
            column: 32,
            span: 15747..15748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 593,
            column: 4,
            span: 15782..15783,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 593,
            column: 5,
            span: 15783..15784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 593,
            column: 10,
            span: 15784..15789,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 593,
            column: 11,
            span: 15789..15790,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 593,
            column: 12,
            span: 15790..15791,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 594,
            column: 4,
            span: 15794..15795,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 594,
            column: 6,
            span: 15796..15797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 594,
            column: 13,
            span: 15798..15804,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 594,
            column: 14,
            span: 15804..15805,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 594,
            column: 16,
            span: 15805..15807,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 594,
            column: 17,
            span: 15807..15808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 594,
            column: 21,
            span: 15808..15812,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 594,
            column: 22,
            span: 15812..15813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 594,
            column: 26,
            span: 15813..15817,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 594,
            column: 27,
            span: 15817..15818,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 594,
            column: 31,
            span: 15819..15822,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 594,
            column: 32,
            span: 15822..15823,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 594,
            column: 33,
            span: 15823..15824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 595,
            column: 9,
            span: 15827..15833,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 595,
            column: 10,
            span: 15833..15834,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 595,
            column: 11,
            span: 15834..15835,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 595,
            column: 12,
            span: 15835..15836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setvbuf",
        ),
        position: Position {
            line: 595,
            column: 19,
            span: 15836..15843,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 595,
            column: 20,
            span: 15843..15844,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        position: Position {
            line: 595,
            column: 26,
            span: 15844..15850,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 595,
            column: 27,
            span: 15850..15851,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 595,
            column: 28,
            span: 15851..15852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 596,
            column: 4,
            span: 15855..15856,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 596,
            column: 5,
            span: 15856..15857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 596,
            column: 10,
            span: 15857..15862,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 596,
            column: 11,
            span: 15862..15863,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 596,
            column: 14,
            span: 15863..15866,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 596,
            column: 15,
            span: 15866..15867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        position: Position {
            line: 597,
            column: 5,
            span: 15870..15872,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 597,
            column: 6,
            span: 15872..15873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        position: Position {
            line: 597,
            column: 10,
            span: 15873..15877,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 597,
            column: 11,
            span: 15877..15878,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        position: Position {
            line: 597,
            column: 16,
            span: 15878..15883,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 597,
            column: 17,
            span: 15883..15884,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 597,
            column: 19,
            span: 15884..15886,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 597,
            column: 20,
            span: 15886..15887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 598,
            column: 9,
            span: 15890..15896,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 598,
            column: 10,
            span: 15896..15897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        position: Position {
            line: 598,
            column: 12,
            span: 15897..15899,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 598,
            column: 13,
            span: 15899..15900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 598,
            column: 17,
            span: 15900..15904,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 598,
            column: 18,
            span: 15904..15905,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"all\"",
        ),
        position: Position {
            line: 598,
            column: 23,
            span: 15905..15910,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 598,
            column: 24,
            span: 15910..15911,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 598,
            column: 27,
            span: 15912..15914,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 598,
            column: 30,
            span: 15915..15917,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 598,
            column: 31,
            span: 15917..15918,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 599,
            column: 4,
            span: 15962..15963,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 599,
            column: 5,
            span: 15963..15964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 599,
            column: 10,
            span: 15964..15969,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 599,
            column: 11,
            span: 15969..15970,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\\n\"",
        ),
        position: Position {
            line: 599,
            column: 16,
            span: 15970..15975,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 599,
            column: 17,
            span: 15975..15976,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 599,
            column: 18,
            span: 15976..15977,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        position: Position {
            line: 599,
            column: 22,
            span: 15977..15981,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 599,
            column: 23,
            span: 15981..15982,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        position: Position {
            line: 599,
            column: 28,
            span: 15982..15987,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 599,
            column: 29,
            span: 15987..15988,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 599,
            column: 31,
            span: 15988..15990,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 599,
            column: 32,
            span: 15990..15991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 600,
            column: 9,
            span: 15994..16000,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 600,
            column: 10,
            span: 16000..16001,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        position: Position {
            line: 600,
            column: 12,
            span: 16001..16003,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 600,
            column: 13,
            span: 16003..16004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 600,
            column: 17,
            span: 16004..16008,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 600,
            column: 18,
            span: 16008..16009,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"all\"",
        ),
        position: Position {
            line: 600,
            column: 23,
            span: 16009..16014,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 600,
            column: 24,
            span: 16014..16015,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 600,
            column: 27,
            span: 16016..16018,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xa\\n\"",
        ),
        position: Position {
            line: 600,
            column: 34,
            span: 16019..16025,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 600,
            column: 35,
            span: 16025..16026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 601,
            column: 4,
            span: 16058..16059,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 601,
            column: 5,
            span: 16059..16060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 601,
            column: 10,
            span: 16060..16065,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 601,
            column: 11,
            span: 16065..16066,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 601,
            column: 12,
            span: 16066..16067,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 601,
            column: 13,
            span: 16067..16068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        position: Position {
            line: 601,
            column: 16,
            span: 16069..16071,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 601,
            column: 17,
            span: 16071..16072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 601,
            column: 22,
            span: 16072..16077,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 601,
            column: 23,
            span: 16077..16078,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 601,
            column: 24,
            span: 16078..16079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 602,
            column: 9,
            span: 16082..16088,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 602,
            column: 10,
            span: 16088..16089,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 602,
            column: 12,
            span: 16089..16091,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 602,
            column: 13,
            span: 16091..16092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 602,
            column: 19,
            span: 16092..16098,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 602,
            column: 20,
            span: 16098..16099,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 602,
            column: 24,
            span: 16099..16103,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 602,
            column: 25,
            span: 16103..16104,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 602,
            column: 26,
            span: 16104..16105,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 603,
            column: 0,
            span: 16106..16109,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 606,
            column: 3,
            span: 16112..16114,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 606,
            column: 7,
            span: 16115..16118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 606,
            column: 13,
            span: 16119..16124,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 606,
            column: 0,
            span: 16125..16129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 607,
            column: 8,
            span: 16132..16137,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 607,
            column: 9,
            span: 16137..16138,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing large files (> BUFSIZ)\"",
        ),
        position: Position {
            line: 607,
            column: 41,
            span: 16138..16170,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 607,
            column: 42,
            span: 16170..16171,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 608,
            column: 5,
            span: 16174..16176,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 608,
            column: 6,
            span: 16176..16177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 608,
            column: 12,
            span: 16177..16183,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 608,
            column: 13,
            span: 16183..16184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 608,
            column: 17,
            span: 16184..16188,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 608,
            column: 18,
            span: 16188..16189,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 609,
            column: 6,
            span: 16192..16195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 609,
            column: 8,
            span: 16196..16197,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 609,
            column: 9,
            span: 16197..16198,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 609,
            column: 10,
            span: 16197..16199,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 609,
            column: 11,
            span: 16199..16200,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5001",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 609,
            column: 15,
            span: 16199..16204,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 609,
            column: 18,
            span: 16205..16207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 609,
            column: 21,
            span: 16208..16210,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 609,
            column: 22,
            span: 16210..16211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 609,
            column: 27,
            span: 16211..16216,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 609,
            column: 28,
            span: 16216..16217,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0123456789123'",
        ),
        position: Position {
            line: 609,
            column: 43,
            span: 16217..16232,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 609,
            column: 44,
            span: 16232..16233,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 609,
            column: 0,
            span: 16234..16237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 610,
            column: 5,
            span: 16240..16242,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 610,
            column: 6,
            span: 16242..16243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 610,
            column: 11,
            span: 16243..16248,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 610,
            column: 12,
            span: 16248..16249,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n12346'",
        ),
        position: Position {
            line: 610,
            column: 21,
            span: 16249..16258,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 610,
            column: 22,
            span: 16258..16259,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 610,
            column: 23,
            span: 16259..16260,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 610,
            column: 28,
            span: 16260..16265,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 610,
            column: 29,
            span: 16265..16266,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 610,
            column: 30,
            span: 16266..16267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 611,
            column: 5,
            span: 16270..16272,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 611,
            column: 6,
            span: 16272..16273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 611,
            column: 11,
            span: 16273..16278,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 611,
            column: 12,
            span: 16278..16279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 611,
            column: 16,
            span: 16279..16283,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 611,
            column: 17,
            span: 16283..16284,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 612,
            column: 8,
            span: 16287..16292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 612,
            column: 10,
            span: 16293..16294,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 612,
            column: 12,
            span: 16295..16296,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 612,
            column: 15,
            span: 16297..16299,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 612,
            column: 16,
            span: 16299..16300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 612,
            column: 20,
            span: 16300..16304,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 612,
            column: 21,
            span: 16304..16305,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 612,
            column: 24,
            span: 16305..16308,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 612,
            column: 25,
            span: 16308..16309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 613,
            column: 5,
            span: 16312..16314,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 613,
            column: 6,
            span: 16314..16315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 613,
            column: 11,
            span: 16315..16320,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 613,
            column: 12,
            span: 16320..16321,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 613,
            column: 13,
            span: 16321..16322,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 613,
            column: 14,
            span: 16322..16323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        position: Position {
            line: 613,
            column: 18,
            span: 16323..16327,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 613,
            column: 19,
            span: 16327..16328,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'set'",
        ),
        position: Position {
            line: 613,
            column: 24,
            span: 16328..16333,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 613,
            column: 25,
            span: 16333..16334,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 613,
            column: 27,
            span: 16334..16336,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 613,
            column: 28,
            span: 16336..16337,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 614,
            column: 8,
            span: 16340..16345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 614,
            column: 10,
            span: 16346..16347,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 614,
            column: 12,
            span: 16348..16349,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 614,
            column: 15,
            span: 16350..16352,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 614,
            column: 16,
            span: 16352..16353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 614,
            column: 20,
            span: 16353..16357,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 614,
            column: 21,
            span: 16357..16358,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30001",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 614,
            column: 26,
            span: 16357..16363,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 614,
            column: 27,
            span: 16363..16364,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 614,
            column: 29,
            span: 16364..16366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 614,
            column: 31,
            span: 16366..16368,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 614,
            column: 32,
            span: 16368..16369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 614,
            column: 36,
            span: 16369..16373,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 614,
            column: 37,
            span: 16373..16374,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1005",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 614,
            column: 41,
            span: 16373..16378,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 614,
            column: 42,
            span: 16378..16379,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 614,
            column: 44,
            span: 16379..16381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 614,
            column: 46,
            span: 16381..16383,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 614,
            column: 47,
            span: 16383..16384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 614,
            column: 51,
            span: 16384..16388,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 614,
            column: 52,
            span: 16388..16389,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 614,
            column: 53,
            span: 16388..16390,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 614,
            column: 54,
            span: 16390..16391,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 614,
            column: 56,
            span: 16391..16393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 615,
            column: 15,
            span: 16406..16408,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 615,
            column: 16,
            span: 16408..16409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 615,
            column: 20,
            span: 16409..16413,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 615,
            column: 21,
            span: 16413..16414,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 615,
            column: 22,
            span: 16413..16415,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 615,
            column: 23,
            span: 16415..16416,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 615,
            column: 25,
            span: 16416..16418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 615,
            column: 27,
            span: 16418..16420,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 615,
            column: 28,
            span: 16420..16421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 615,
            column: 32,
            span: 16421..16425,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 615,
            column: 33,
            span: 16425..16426,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100003",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 615,
            column: 39,
            span: 16425..16432,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 615,
            column: 40,
            span: 16432..16433,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 616,
            column: 9,
            span: 16436..16442,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 616,
            column: 10,
            span: 16442..16443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 616,
            column: 11,
            span: 16443..16444,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 616,
            column: 14,
            span: 16445..16447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 616,
            column: 16,
            span: 16448..16449,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 616,
            column: 20,
            span: 16450..16453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 616,
            column: 27,
            span: 16454..16460,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 616,
            column: 28,
            span: 16460..16461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 616,
            column: 31,
            span: 16461..16464,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 616,
            column: 32,
            span: 16464..16465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 616,
            column: 33,
            span: 16465..16466,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 616,
            column: 34,
            span: 16466..16467,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 616,
            column: 37,
            span: 16468..16470,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5001",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 616,
            column: 42,
            span: 16470..16475,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 616,
            column: 43,
            span: 16475..16476,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 616,
            column: 45,
            span: 16475..16478,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 616,
            column: 47,
            span: 16479..16480,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 616,
            column: 49,
            span: 16480..16482,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 616,
            column: 50,
            span: 16482..16483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 617,
            column: 5,
            span: 16486..16488,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 617,
            column: 6,
            span: 16488..16489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 617,
            column: 11,
            span: 16489..16494,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 617,
            column: 12,
            span: 16494..16495,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 617,
            column: 13,
            span: 16495..16496,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 617,
            column: 14,
            span: 16496..16497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        position: Position {
            line: 617,
            column: 18,
            span: 16497..16501,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 617,
            column: 19,
            span: 16501..16502,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'set'",
        ),
        position: Position {
            line: 617,
            column: 24,
            span: 16502..16507,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 617,
            column: 25,
            span: 16507..16508,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 617,
            column: 27,
            span: 16508..16510,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 617,
            column: 28,
            span: 16510..16511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 618,
            column: 4,
            span: 16514..16515,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 618,
            column: 6,
            span: 16516..16517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 618,
            column: 9,
            span: 16518..16520,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 618,
            column: 10,
            span: 16520..16521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 618,
            column: 14,
            span: 16521..16525,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 618,
            column: 15,
            span: 16525..16526,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 618,
            column: 16,
            span: 16526..16527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 619,
            column: 9,
            span: 16544..16550,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 619,
            column: 10,
            span: 16550..16551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 619,
            column: 11,
            span: 16551..16552,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 619,
            column: 14,
            span: 16553..16555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 619,
            column: 16,
            span: 16556..16557,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 619,
            column: 18,
            span: 16557..16559,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n'",
        ),
        position: Position {
            line: 619,
            column: 22,
            span: 16559..16563,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 619,
            column: 24,
            span: 16563..16565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 619,
            column: 26,
            span: 16565..16567,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 619,
            column: 27,
            span: 16567..16568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 619,
            column: 31,
            span: 16568..16572,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 619,
            column: 32,
            span: 16572..16573,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 619,
            column: 33,
            span: 16573..16574,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 619,
            column: 34,
            span: 16574..16575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 620,
            column: 9,
            span: 16578..16584,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 620,
            column: 10,
            span: 16584..16585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 620,
            column: 12,
            span: 16585..16587,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 620,
            column: 13,
            span: 16587..16588,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 620,
            column: 17,
            span: 16588..16592,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 620,
            column: 18,
            span: 16592..16593,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 620,
            column: 19,
            span: 16593..16594,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 620,
            column: 22,
            span: 16595..16597,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 620,
            column: 26,
            span: 16598..16601,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 620,
            column: 27,
            span: 16601..16602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 621,
            column: 5,
            span: 16605..16607,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 621,
            column: 6,
            span: 16607..16608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 621,
            column: 11,
            span: 16608..16613,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 621,
            column: 12,
            span: 16613..16614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 621,
            column: 14,
            span: 16614..16616,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 621,
            column: 15,
            span: 16616..16617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 621,
            column: 20,
            span: 16617..16622,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 621,
            column: 21,
            span: 16622..16623,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 621,
            column: 22,
            span: 16623..16624,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 621,
            column: 23,
            span: 16624..16625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 622,
            column: 9,
            span: 16628..16634,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 622,
            column: 10,
            span: 16634..16635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 622,
            column: 12,
            span: 16635..16637,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 622,
            column: 13,
            span: 16637..16638,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 622,
            column: 19,
            span: 16638..16644,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 622,
            column: 20,
            span: 16644..16645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        position: Position {
            line: 622,
            column: 24,
            span: 16645..16649,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 622,
            column: 25,
            span: 16649..16650,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 622,
            column: 26,
            span: 16650..16651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 623,
            column: 4,
            span: 16654..16655,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 623,
            column: 6,
            span: 16656..16657,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 623,
            column: 10,
            span: 16658..16661,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 623,
            column: 11,
            span: 16661..16662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 623,
            column: 13,
            span: 16663..16664,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 623,
            column: 15,
            span: 16665..16666,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 623,
            column: 0,
            span: 16667..16670,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 624,
            column: 0,
            span: 16671..16674,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 626,
            column: 3,
            span: 16676..16678,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 626,
            column: 7,
            span: 16679..16682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        position: Position {
            line: 626,
            column: 13,
            span: 16683..16688,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 626,
            column: 0,
            span: 16689..16693,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 627,
            column: 8,
            span: 16696..16701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        position: Position {
            line: 627,
            column: 0,
            span: 16702..16710,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 628,
            column: 5,
            span: 16713..16715,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 629,
            column: 10,
            span: 16755..16760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 629,
            column: 14,
            span: 16761..16764,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 629,
            column: 16,
            span: 16765..16766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 629,
            column: 20,
            span: 16767..16770,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 629,
            column: 23,
            span: 16771..16773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ARG",
        ),
        position: Position {
            line: 629,
            column: 0,
            span: 16774..16778,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 630,
            column: 10,
            span: 16783..16788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 630,
            column: 12,
            span: 16789..16790,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 630,
            column: 14,
            span: 16791..16792,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 630,
            column: 0,
            span: 16792..16794,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 631,
            column: 10,
            span: 16799..16804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 631,
            column: 14,
            span: 16805..16808,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 631,
            column: 15,
            span: 16808..16809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 631,
            column: 16,
            span: 16809..16810,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 631,
            column: 17,
            span: 16810..16811,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 631,
            column: 20,
            span: 16812..16814,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 631,
            column: 22,
            span: 16815..16816,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 631,
            column: 24,
            span: 16817..16818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 631,
            column: 26,
            span: 16819..16820,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 631,
            column: 28,
            span: 16821..16822,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 631,
            column: 30,
            span: 16822..16824,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 631,
            column: 0,
            span: 16825..16828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        position: Position {
            line: 632,
            column: 13,
            span: 16833..16841,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 632,
            column: 15,
            span: 16842..16843,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        position: Position {
            line: 632,
            column: 19,
            span: 16844..16847,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 632,
            column: 22,
            span: 16848..16850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 632,
            column: 26,
            span: 16851..16854,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 632,
            column: 27,
            span: 16854..16855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 632,
            column: 28,
            span: 16855..16856,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 632,
            column: 30,
            span: 16857..16858,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 632,
            column: 32,
            span: 16858..16860,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 632,
            column: 33,
            span: 16860..16861,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 632,
            column: 36,
            span: 16862..16864,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        position: Position {
            line: 632,
            column: 40,
            span: 16865..16868,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 633,
            column: 0,
            span: 16871..16874,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 634,
            column: 8,
            span: 16877..16882,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 634,
            column: 9,
            span: 16882..16883,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing popen/pclose and execute\"",
        ),
        position: Position {
            line: 634,
            column: 43,
            span: 16883..16917,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 634,
            column: 44,
            span: 16917..16918,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 635,
            column: 8,
            span: 16921..16926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tests",
        ),
        position: Position {
            line: 635,
            column: 14,
            span: 16927..16932,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 635,
            column: 16,
            span: 16933..16934,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 635,
            column: 18,
            span: 16935..16936,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 637,
            column: 6,
            span: 16971..16972,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ls > /dev/null\"",
        ),
        position: Position {
            line: 637,
            column: 22,
            span: 16972..16988,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 637,
            column: 23,
            span: 16988..16989,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ok\"",
        ),
        position: Position {
            line: 637,
            column: 28,
            span: 16990..16994,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 637,
            column: 29,
            span: 16994..16995,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 637,
            column: 30,
            span: 16995..16996,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 638,
            column: 6,
            span: 17001..17002,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not-to-be-found-command\"",
        ),
        position: Position {
            line: 638,
            column: 31,
            span: 17002..17027,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 638,
            column: 32,
            span: 17027..17028,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exit\"",
        ),
        position: Position {
            line: 638,
            column: 39,
            span: 17029..17035,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 638,
            column: 40,
            span: 17035..17036,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 638,
            column: 41,
            span: 17036..17037,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 639,
            column: 6,
            span: 17042..17043,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exit 3\"",
        ),
        position: Position {
            line: 639,
            column: 14,
            span: 17043..17051,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 639,
            column: 15,
            span: 17051..17052,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exit\"",
        ),
        position: Position {
            line: 639,
            column: 22,
            span: 17053..17059,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 639,
            column: 23,
            span: 17059..17060,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 639,
            column: 25,
            span: 17060..17062,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 639,
            column: 26,
            span: 17062..17063,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 639,
            column: 27,
            span: 17063..17064,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 640,
            column: 6,
            span: 17069..17070,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exit 129\"",
        ),
        position: Position {
            line: 640,
            column: 16,
            span: 17070..17080,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 640,
            column: 17,
            span: 17080..17081,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exit\"",
        ),
        position: Position {
            line: 640,
            column: 24,
            span: 17082..17088,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 640,
            column: 25,
            span: 17088..17089,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "129",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 640,
            column: 29,
            span: 17089..17093,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 640,
            column: 30,
            span: 17093..17094,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 640,
            column: 31,
            span: 17094..17095,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 641,
            column: 6,
            span: 17100..17101,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"kill -s HUP $$\"",
        ),
        position: Position {
            line: 641,
            column: 22,
            span: 17101..17117,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 641,
            column: 23,
            span: 17117..17118,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"signal\"",
        ),
        position: Position {
            line: 641,
            column: 32,
            span: 17119..17127,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 641,
            column: 33,
            span: 17127..17128,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 641,
            column: 35,
            span: 17128..17130,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 641,
            column: 36,
            span: 17130..17131,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 641,
            column: 37,
            span: 17131..17132,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 642,
            column: 6,
            span: 17137..17138,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"kill -s KILL $$\"",
        ),
        position: Position {
            line: 642,
            column: 23,
            span: 17138..17155,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 642,
            column: 24,
            span: 17155..17156,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"signal\"",
        ),
        position: Position {
            line: 642,
            column: 33,
            span: 17157..17165,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 642,
            column: 34,
            span: 17165..17166,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 642,
            column: 36,
            span: 17166..17168,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 642,
            column: 37,
            span: 17168..17169,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 642,
            column: 38,
            span: 17169..17170,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 643,
            column: 6,
            span: 17175..17176,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sh -c 'kill -s HUP $$'\"",
        ),
        position: Position {
            line: 643,
            column: 30,
            span: 17176..17200,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 643,
            column: 31,
            span: 17200..17201,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exit\"",
        ),
        position: Position {
            line: 643,
            column: 38,
            span: 17202..17208,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 643,
            column: 39,
            span: 17208..17209,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 643,
            column: 40,
            span: 17209..17210,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 644,
            column: 6,
            span: 17215..17216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        position: Position {
            line: 644,
            column: 14,
            span: 17216..17224,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 644,
            column: 17,
            span: 17225..17227,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' -e \" \"'",
        ),
        position: Position {
            line: 644,
            column: 27,
            span: 17228..17237,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 644,
            column: 28,
            span: 17237..17238,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ok\"",
        ),
        position: Position {
            line: 644,
            column: 33,
            span: 17239..17243,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 644,
            column: 34,
            span: 17243..17244,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 644,
            column: 35,
            span: 17244..17245,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 645,
            column: 6,
            span: 17250..17251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        position: Position {
            line: 645,
            column: 14,
            span: 17251..17259,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 645,
            column: 17,
            span: 17260..17262,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' -e \"os.exit(0, true)\"'",
        ),
        position: Position {
            line: 645,
            column: 42,
            span: 17263..17287,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 645,
            column: 43,
            span: 17287..17288,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ok\"",
        ),
        position: Position {
            line: 645,
            column: 48,
            span: 17289..17293,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 645,
            column: 49,
            span: 17293..17294,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 645,
            column: 50,
            span: 17294..17295,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 646,
            column: 6,
            span: 17300..17301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        position: Position {
            line: 646,
            column: 14,
            span: 17301..17309,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 646,
            column: 17,
            span: 17310..17312,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' -e \"os.exit(20, true)\"'",
        ),
        position: Position {
            line: 646,
            column: 43,
            span: 17313..17338,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 646,
            column: 44,
            span: 17338..17339,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exit\"",
        ),
        position: Position {
            line: 646,
            column: 51,
            span: 17340..17346,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 646,
            column: 52,
            span: 17346..17347,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 646,
            column: 55,
            span: 17347..17350,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 646,
            column: 56,
            span: 17350..17351,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 646,
            column: 57,
            span: 17351..17352,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 647,
            column: 4,
            span: 17355..17356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 648,
            column: 8,
            span: 17359..17364,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 648,
            column: 9,
            span: 17364..17365,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n(some error messages are expected now)\"",
        ),
        position: Position {
            line: 648,
            column: 51,
            span: 17365..17407,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 648,
            column: 52,
            span: 17407..17408,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 649,
            column: 6,
            span: 17411..17414,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 649,
            column: 8,
            span: 17415..17416,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 649,
            column: 9,
            span: 17416..17417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 649,
            column: 11,
            span: 17418..17419,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 649,
            column: 14,
            span: 17420..17422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        position: Position {
            line: 649,
            column: 21,
            span: 17423..17429,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 649,
            column: 22,
            span: 17429..17430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tests",
        ),
        position: Position {
            line: 649,
            column: 27,
            span: 17430..17435,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 649,
            column: 28,
            span: 17435..17436,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 649,
            column: 0,
            span: 17437..17439,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 650,
            column: 10,
            span: 17444..17449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 650,
            column: 12,
            span: 17450..17451,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 650,
            column: 13,
            span: 17451..17452,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 650,
            column: 15,
            span: 17453..17454,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 650,
            column: 16,
            span: 17454..17455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 650,
            column: 18,
            span: 17456..17457,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 650,
            column: 20,
            span: 17458..17459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 650,
            column: 23,
            span: 17460..17462,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 650,
            column: 24,
            span: 17462..17463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "popen",
        ),
        position: Position {
            line: 650,
            column: 29,
            span: 17463..17468,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 650,
            column: 30,
            span: 17468..17469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 650,
            column: 31,
            span: 17469..17470,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 650,
            column: 32,
            span: 17470..17471,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 650,
            column: 33,
            span: 17470..17472,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 650,
            column: 34,
            span: 17472..17473,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 650,
            column: 35,
            span: 17473..17474,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 650,
            column: 36,
            span: 17474..17475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 650,
            column: 41,
            span: 17475..17480,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 650,
            column: 42,
            span: 17480..17481,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 650,
            column: 43,
            span: 17481..17482,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 651,
            column: 10,
            span: 17487..17492,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        position: Position {
            line: 651,
            column: 13,
            span: 17493..17495,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 651,
            column: 14,
            span: 17495..17496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y1",
        ),
        position: Position {
            line: 651,
            column: 17,
            span: 17497..17499,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 651,
            column: 18,
            span: 17499..17500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z1",
        ),
        position: Position {
            line: 651,
            column: 21,
            span: 17501..17503,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 651,
            column: 23,
            span: 17504..17505,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 651,
            column: 26,
            span: 17506..17508,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 651,
            column: 27,
            span: 17508..17509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        position: Position {
            line: 651,
            column: 34,
            span: 17509..17516,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 651,
            column: 35,
            span: 17516..17517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 651,
            column: 36,
            span: 17517..17518,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 651,
            column: 37,
            span: 17518..17519,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 651,
            column: 38,
            span: 17518..17520,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 651,
            column: 39,
            span: 17520..17521,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 651,
            column: 40,
            span: 17521..17522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 652,
            column: 11,
            span: 17527..17533,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 652,
            column: 12,
            span: 17533..17534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 652,
            column: 13,
            span: 17534..17535,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 652,
            column: 16,
            span: 17536..17538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        position: Position {
            line: 652,
            column: 19,
            span: 17539..17541,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 652,
            column: 23,
            span: 17542..17545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 652,
            column: 25,
            span: 17546..17547,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 652,
            column: 28,
            span: 17548..17550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y1",
        ),
        position: Position {
            line: 652,
            column: 31,
            span: 17551..17553,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 652,
            column: 35,
            span: 17554..17557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 652,
            column: 37,
            span: 17558..17559,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 652,
            column: 40,
            span: 17560..17562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z1",
        ),
        position: Position {
            line: 652,
            column: 43,
            span: 17563..17565,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 652,
            column: 44,
            span: 17565..17566,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 653,
            column: 7,
            span: 17571..17573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 653,
            column: 9,
            span: 17574..17575,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 653,
            column: 10,
            span: 17575..17576,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 653,
            column: 11,
            span: 17575..17577,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 653,
            column: 12,
            span: 17577..17578,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 653,
            column: 15,
            span: 17579..17581,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ok\"",
        ),
        position: Position {
            line: 653,
            column: 20,
            span: 17582..17586,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 653,
            column: 0,
            span: 17587..17591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 654,
            column: 13,
            span: 17598..17604,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 654,
            column: 14,
            span: 17604..17605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 654,
            column: 15,
            span: 17605..17606,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 654,
            column: 19,
            span: 17607..17610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 654,
            column: 21,
            span: 17611..17612,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 654,
            column: 24,
            span: 17613..17615,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'exit'",
        ),
        position: Position {
            line: 654,
            column: 31,
            span: 17616..17622,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 654,
            column: 35,
            span: 17623..17626,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 654,
            column: 37,
            span: 17627..17628,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 654,
            column: 40,
            span: 17629..17631,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 654,
            column: 42,
            span: 17631..17633,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 654,
            column: 43,
            span: 17633..17634,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 655,
            column: 0,
            span: 17639..17643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 656,
            column: 13,
            span: 17650..17656,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 656,
            column: 14,
            span: 17656..17657,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 656,
            column: 17,
            span: 17657..17660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 656,
            column: 19,
            span: 17661..17662,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 656,
            column: 23,
            span: 17663..17666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 656,
            column: 25,
            span: 17667..17668,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 656,
            column: 28,
            span: 17669..17671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 656,
            column: 30,
            span: 17672..17673,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 656,
            column: 31,
            span: 17673..17674,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 656,
            column: 32,
            span: 17673..17675,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 656,
            column: 33,
            span: 17675..17676,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 656,
            column: 34,
            span: 17676..17677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 658,
            column: 13,
            span: 17776..17782,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 658,
            column: 14,
            span: 17782..17783,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 658,
            column: 15,
            span: 17783..17784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 658,
            column: 16,
            span: 17784..17785,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 658,
            column: 17,
            span: 17785..17786,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 658,
            column: 18,
            span: 17785..17787,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 658,
            column: 19,
            span: 17787..17788,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 658,
            column: 22,
            span: 17789..17791,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 658,
            column: 26,
            span: 17792..17795,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 658,
            column: 30,
            span: 17796..17799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 658,
            column: 32,
            span: 17800..17801,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 658,
            column: 34,
            span: 17802..17803,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 658,
            column: 36,
            span: 17803..17805,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 658,
            column: 37,
            span: 17805..17806,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 658,
            column: 40,
            span: 17807..17809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 658,
            column: 42,
            span: 17810..17811,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 658,
            column: 43,
            span: 17811..17812,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 658,
            column: 44,
            span: 17811..17813,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 658,
            column: 45,
            span: 17813..17814,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 658,
            column: 48,
            span: 17815..17817,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 658,
            column: 50,
            span: 17818..17819,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 658,
            column: 51,
            span: 17819..17820,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 659,
            column: 0,
            span: 17825..17828,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 660,
            column: 0,
            span: 17831..17834,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 661,
            column: 0,
            span: 17835..17838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 665,
            column: 2,
            span: 17860..17861,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 665,
            column: 4,
            span: 17862..17863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 665,
            column: 7,
            span: 17864..17866,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 665,
            column: 8,
            span: 17866..17867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpfile",
        ),
        position: Position {
            line: 665,
            column: 15,
            span: 17867..17874,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 665,
            column: 16,
            span: 17874..17875,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 665,
            column: 17,
            span: 17875..17876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 666,
            column: 7,
            span: 17877..17883,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 666,
            column: 8,
            span: 17883..17884,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 666,
            column: 10,
            span: 17884..17886,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 666,
            column: 11,
            span: 17886..17887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 666,
            column: 15,
            span: 17887..17891,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 666,
            column: 16,
            span: 17891..17892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 666,
            column: 17,
            span: 17892..17893,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 666,
            column: 18,
            span: 17893..17894,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 666,
            column: 21,
            span: 17895..17897,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file\"",
        ),
        position: Position {
            line: 666,
            column: 28,
            span: 17898..17904,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 666,
            column: 29,
            span: 17904..17905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 667,
            column: 2,
            span: 17906..17907,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 667,
            column: 3,
            span: 17907..17908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 667,
            column: 8,
            span: 17908..17913,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 667,
            column: 9,
            span: 17913..17914,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 667,
            column: 14,
            span: 17914..17919,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 667,
            column: 15,
            span: 17919..17920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 668,
            column: 2,
            span: 17921..17922,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 668,
            column: 3,
            span: 17922..17923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        position: Position {
            line: 668,
            column: 7,
            span: 17923..17927,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 668,
            column: 8,
            span: 17927..17928,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        position: Position {
            line: 668,
            column: 13,
            span: 17928..17933,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 668,
            column: 14,
            span: 17933..17934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 669,
            column: 7,
            span: 17935..17941,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 669,
            column: 8,
            span: 17941..17942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 669,
            column: 9,
            span: 17942..17943,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 669,
            column: 10,
            span: 17943..17944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 669,
            column: 14,
            span: 17944..17948,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 669,
            column: 17,
            span: 17948..17951,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 669,
            column: 20,
            span: 17952..17954,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 669,
            column: 26,
            span: 17955..17960,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 669,
            column: 27,
            span: 17960..17961,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 671,
            column: 4,
            span: 17963..17966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 673,
            column: 6,
            span: 17972..17977,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 673,
            column: 9,
            span: 17977..17980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 675,
            column: 6,
            span: 17982..17987,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 675,
            column: 7,
            span: 17987..17988,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing date/time\"",
        ),
        position: Position {
            line: 675,
            column: 26,
            span: 17988..18007,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 675,
            column: 27,
            span: 18007..18008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 677,
            column: 7,
            span: 18010..18016,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 677,
            column: 8,
            span: 18016..18017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 677,
            column: 10,
            span: 18017..18019,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 677,
            column: 11,
            span: 18019..18020,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 677,
            column: 15,
            span: 18020..18024,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 677,
            column: 16,
            span: 18024..18025,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 677,
            column: 18,
            span: 18025..18027,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 677,
            column: 19,
            span: 18027..18028,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 677,
            column: 22,
            span: 18029..18031,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 677,
            column: 25,
            span: 18032..18034,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 677,
            column: 26,
            span: 18034..18035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 678,
            column: 7,
            span: 18036..18042,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 678,
            column: 8,
            span: 18042..18043,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 678,
            column: 10,
            span: 18043..18045,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 678,
            column: 11,
            span: 18045..18046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 678,
            column: 15,
            span: 18046..18050,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 678,
            column: 16,
            span: 18050..18051,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!\"",
        ),
        position: Position {
            line: 678,
            column: 19,
            span: 18051..18054,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 678,
            column: 20,
            span: 18054..18055,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 678,
            column: 23,
            span: 18056..18058,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 678,
            column: 26,
            span: 18059..18061,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 678,
            column: 27,
            span: 18061..18062,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 679,
            column: 7,
            span: 18063..18069,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 679,
            column: 8,
            span: 18069..18070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 679,
            column: 10,
            span: 18070..18072,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 679,
            column: 11,
            span: 18072..18073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 679,
            column: 15,
            span: 18073..18077,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 679,
            column: 16,
            span: 18077..18078,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\"",
        ),
        position: Position {
            line: 679,
            column: 22,
            span: 18078..18084,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 679,
            column: 23,
            span: 18084..18085,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 679,
            column: 26,
            span: 18086..18088,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\"",
        ),
        position: Position {
            line: 679,
            column: 33,
            span: 18089..18095,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 679,
            column: 34,
            span: 18095..18096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 680,
            column: 7,
            span: 18097..18103,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 680,
            column: 8,
            span: 18103..18104,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 680,
            column: 10,
            span: 18104..18106,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 680,
            column: 11,
            span: 18106..18107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 680,
            column: 15,
            span: 18107..18111,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 680,
            column: 16,
            span: 18111..18112,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!\\0\\0\"",
        ),
        position: Position {
            line: 680,
            column: 23,
            span: 18112..18119,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 680,
            column: 24,
            span: 18119..18120,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 680,
            column: 27,
            span: 18121..18123,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\"",
        ),
        position: Position {
            line: 680,
            column: 34,
            span: 18124..18130,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 680,
            column: 35,
            span: 18130..18131,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 681,
            column: 6,
            span: 18132..18137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 681,
            column: 8,
            span: 18138..18139,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 681,
            column: 10,
            span: 18140..18141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 681,
            column: 17,
            span: 18142..18148,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 681,
            column: 18,
            span: 18148..18149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 681,
            column: 21,
            span: 18149..18152,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 681,
            column: 22,
            span: 18152..18153,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 681,
            column: 25,
            span: 18153..18156,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 681,
            column: 26,
            span: 18156..18157,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 681,
            column: 32,
            span: 18157..18163,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 681,
            column: 33,
            span: 18163..18164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 682,
            column: 7,
            span: 18165..18171,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 682,
            column: 8,
            span: 18171..18172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 682,
            column: 10,
            span: 18172..18174,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 682,
            column: 11,
            span: 18174..18175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 682,
            column: 15,
            span: 18175..18179,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 682,
            column: 16,
            span: 18179..18180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 682,
            column: 17,
            span: 18180..18181,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 682,
            column: 18,
            span: 18181..18182,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 682,
            column: 21,
            span: 18183..18185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 682,
            column: 23,
            span: 18186..18187,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 682,
            column: 24,
            span: 18187..18188,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 683,
            column: 6,
            span: 18189..18194,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 683,
            column: 8,
            span: 18195..18196,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 683,
            column: 10,
            span: 18197..18198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 683,
            column: 13,
            span: 18199..18201,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 683,
            column: 14,
            span: 18201..18202,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 683,
            column: 18,
            span: 18202..18206,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 683,
            column: 19,
            span: 18206..18207,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 683,
            column: 20,
            span: 18207..18208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        position: Position {
            line: 684,
            column: 2,
            span: 18209..18210,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 684,
            column: 4,
            span: 18211..18212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 684,
            column: 7,
            span: 18213..18215,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 684,
            column: 8,
            span: 18215..18216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 684,
            column: 12,
            span: 18216..18220,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 684,
            column: 13,
            span: 18220..18221,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*t\"",
        ),
        position: Position {
            line: 684,
            column: 17,
            span: 18221..18225,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 684,
            column: 18,
            span: 18225..18226,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 684,
            column: 20,
            span: 18227..18228,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 684,
            column: 21,
            span: 18228..18229,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 685,
            column: 7,
            span: 18230..18236,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 685,
            column: 8,
            span: 18236..18237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 685,
            column: 10,
            span: 18237..18239,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 685,
            column: 11,
            span: 18239..18240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 685,
            column: 15,
            span: 18240..18244,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 685,
            column: 16,
            span: 18244..18245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 685,
            column: 22,
            span: 18245..18251,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 685,
            column: 23,
            span: 18251..18252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 685,
            column: 26,
            span: 18252..18255,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 685,
            column: 27,
            span: 18255..18256,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        position: Position {
            line: 685,
            column: 31,
            span: 18256..18260,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 685,
            column: 32,
            span: 18260..18261,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 685,
            column: 37,
            span: 18261..18266,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 685,
            column: 38,
            span: 18266..18267,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 685,
            column: 39,
            span: 18267..18268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 685,
            column: 41,
            span: 18269..18270,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 685,
            column: 42,
            span: 18270..18271,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 685,
            column: 45,
            span: 18272..18274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 686,
            column: 14,
            span: 18282..18288,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 686,
            column: 15,
            span: 18288..18289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 686,
            column: 18,
            span: 18289..18292,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 686,
            column: 19,
            span: 18292..18293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 686,
            column: 21,
            span: 18293..18295,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 686,
            column: 22,
            span: 18295..18296,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 686,
            column: 26,
            span: 18296..18300,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 686,
            column: 27,
            span: 18300..18301,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        position: Position {
            line: 686,
            column: 31,
            span: 18301..18305,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 686,
            column: 32,
            span: 18305..18306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 686,
            column: 34,
            span: 18307..18308,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 686,
            column: 35,
            span: 18308..18309,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 686,
            column: 36,
            span: 18309..18310,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 686,
            column: 41,
            span: 18310..18315,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 686,
            column: 42,
            span: 18315..18316,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 686,
            column: 43,
            span: 18316..18317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 687,
            column: 7,
            span: 18318..18324,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 687,
            column: 8,
            span: 18324..18325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 687,
            column: 10,
            span: 18325..18327,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 687,
            column: 11,
            span: 18327..18328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 687,
            column: 15,
            span: 18328..18332,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 687,
            column: 16,
            span: 18332..18333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 687,
            column: 22,
            span: 18333..18339,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 687,
            column: 23,
            span: 18339..18340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 687,
            column: 26,
            span: 18340..18343,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 687,
            column: 27,
            span: 18343..18344,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        position: Position {
            line: 687,
            column: 30,
            span: 18344..18347,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 687,
            column: 31,
            span: 18347..18348,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 687,
            column: 35,
            span: 18348..18352,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 687,
            column: 36,
            span: 18352..18353,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 687,
            column: 37,
            span: 18353..18354,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 687,
            column: 40,
            span: 18355..18357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 687,
            column: 47,
            span: 18358..18364,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 687,
            column: 48,
            span: 18364..18365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 687,
            column: 51,
            span: 18365..18368,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 687,
            column: 52,
            span: 18368..18369,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        position: Position {
            line: 687,
            column: 55,
            span: 18369..18372,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 687,
            column: 56,
            span: 18372..18373,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 687,
            column: 60,
            span: 18373..18377,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 687,
            column: 61,
            span: 18377..18378,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 687,
            column: 62,
            span: 18378..18379,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 689,
            column: 6,
            span: 18381..18386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 689,
            column: 8,
            span: 18387..18388,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 689,
            column: 10,
            span: 18389..18390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 689,
            column: 13,
            span: 18391..18393,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 689,
            column: 14,
            span: 18393..18394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 689,
            column: 18,
            span: 18394..18398,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 689,
            column: 19,
            span: 18398..18399,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 689,
            column: 20,
            span: 18399..18400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        position: Position {
            line: 690,
            column: 2,
            span: 18401..18402,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 690,
            column: 4,
            span: 18403..18404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 690,
            column: 7,
            span: 18405..18407,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 690,
            column: 8,
            span: 18407..18408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 690,
            column: 12,
            span: 18408..18412,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 690,
            column: 13,
            span: 18412..18413,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*t\"",
        ),
        position: Position {
            line: 690,
            column: 17,
            span: 18413..18417,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 690,
            column: 18,
            span: 18417..18418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 690,
            column: 20,
            span: 18419..18420,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 690,
            column: 21,
            span: 18420..18421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 691,
            column: 5,
            span: 18422..18426,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 691,
            column: 6,
            span: 18426..18427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 691,
            column: 8,
            span: 18427..18429,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 691,
            column: 9,
            span: 18429..18430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 691,
            column: 13,
            span: 18430..18434,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 691,
            column: 14,
            span: 18434..18435,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[assert(D.year==%Y and D.month==%m and D.day==%d and\n  D.hour==%H and D.min==%M and D.sec==%S and\n  D.wday==%w+1 and D.yday==%j and type(D.isdst) == 'boolean')]]",
        ),
        position: Position {
            line: 693,
            column: 64,
            span: 18435..18597,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 693,
            column: 65,
            span: 18597..18598,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 693,
            column: 67,
            span: 18599..18600,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 693,
            column: 68,
            span: 18600..18601,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 693,
            column: 69,
            span: 18601..18602,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 693,
            column: 70,
            span: 18602..18603,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 693,
            column: 71,
            span: 18603..18604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 695,
            column: 9,
            span: 18606..18614,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 695,
            column: 10,
            span: 18614..18615,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion specifier\"",
        ),
        position: Position {
            line: 695,
            column: 40,
            span: 18615..18645,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 695,
            column: 41,
            span: 18645..18646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 695,
            column: 44,
            span: 18647..18649,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 695,
            column: 45,
            span: 18649..18650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 695,
            column: 49,
            span: 18650..18654,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 695,
            column: 50,
            span: 18654..18655,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        position: Position {
            line: 695,
            column: 54,
            span: 18656..18659,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 695,
            column: 55,
            span: 18659..18660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 696,
            column: 9,
            span: 18661..18669,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 696,
            column: 10,
            span: 18669..18670,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion specifier\"",
        ),
        position: Position {
            line: 696,
            column: 40,
            span: 18670..18700,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 696,
            column: 41,
            span: 18700..18701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 696,
            column: 44,
            span: 18702..18704,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 696,
            column: 45,
            span: 18704..18705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 696,
            column: 49,
            span: 18705..18709,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 696,
            column: 50,
            span: 18709..18710,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%9\"",
        ),
        position: Position {
            line: 696,
            column: 55,
            span: 18711..18715,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 696,
            column: 56,
            span: 18715..18716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 697,
            column: 9,
            span: 18717..18725,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 697,
            column: 10,
            span: 18725..18726,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion specifier\"",
        ),
        position: Position {
            line: 697,
            column: 40,
            span: 18726..18756,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 697,
            column: 41,
            span: 18756..18757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 697,
            column: 44,
            span: 18758..18760,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 697,
            column: 45,
            span: 18760..18761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 697,
            column: 49,
            span: 18761..18765,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 697,
            column: 50,
            span: 18765..18766,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        position: Position {
            line: 697,
            column: 54,
            span: 18767..18770,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 697,
            column: 55,
            span: 18770..18771,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 698,
            column: 9,
            span: 18772..18780,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 698,
            column: 10,
            span: 18780..18781,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion specifier\"",
        ),
        position: Position {
            line: 698,
            column: 40,
            span: 18781..18811,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 698,
            column: 41,
            span: 18811..18812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 698,
            column: 44,
            span: 18813..18815,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 698,
            column: 45,
            span: 18815..18816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 698,
            column: 49,
            span: 18816..18820,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 698,
            column: 50,
            span: 18820..18821,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%O\"",
        ),
        position: Position {
            line: 698,
            column: 55,
            span: 18822..18826,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 698,
            column: 56,
            span: 18826..18827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 699,
            column: 9,
            span: 18828..18836,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 699,
            column: 10,
            span: 18836..18837,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion specifier\"",
        ),
        position: Position {
            line: 699,
            column: 40,
            span: 18837..18867,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 699,
            column: 41,
            span: 18867..18868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 699,
            column: 44,
            span: 18869..18871,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 699,
            column: 45,
            span: 18871..18872,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 699,
            column: 49,
            span: 18872..18876,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 699,
            column: 50,
            span: 18876..18877,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%E\"",
        ),
        position: Position {
            line: 699,
            column: 55,
            span: 18878..18882,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 699,
            column: 56,
            span: 18882..18883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 700,
            column: 9,
            span: 18884..18892,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 700,
            column: 10,
            span: 18892..18893,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion specifier\"",
        ),
        position: Position {
            line: 700,
            column: 40,
            span: 18893..18923,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 700,
            column: 41,
            span: 18923..18924,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 700,
            column: 44,
            span: 18925..18927,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 700,
            column: 45,
            span: 18927..18928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 700,
            column: 49,
            span: 18928..18932,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 700,
            column: 50,
            span: 18932..18933,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%Ea\"",
        ),
        position: Position {
            line: 700,
            column: 56,
            span: 18934..18939,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 700,
            column: 57,
            span: 18939..18940,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 702,
            column: 9,
            span: 18942..18950,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 702,
            column: 10,
            span: 18950..18951,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not an integer\"",
        ),
        position: Position {
            line: 702,
            column: 26,
            span: 18951..18967,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 702,
            column: 27,
            span: 18967..18968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 702,
            column: 30,
            span: 18969..18971,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 702,
            column: 31,
            span: 18971..18972,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 702,
            column: 35,
            span: 18972..18976,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 702,
            column: 36,
            span: 18976..18977,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 702,
            column: 38,
            span: 18978..18979,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        position: Position {
            line: 702,
            column: 42,
            span: 18979..18983,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 702,
            column: 43,
            span: 18983..18984,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 702,
            column: 47,
            span: 18983..18988,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 702,
            column: 48,
            span: 18988..18989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        position: Position {
            line: 702,
            column: 54,
            span: 18990..18995,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 702,
            column: 55,
            span: 18995..18996,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 702,
            column: 56,
            span: 18995..18997,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 702,
            column: 57,
            span: 18997..18998,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        position: Position {
            line: 702,
            column: 61,
            span: 18999..19002,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 702,
            column: 62,
            span: 19002..19003,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 702,
            column: 63,
            span: 19002..19004,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 702,
            column: 64,
            span: 19004..19005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hour",
        ),
        position: Position {
            line: 702,
            column: 69,
            span: 19006..19010,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 702,
            column: 70,
            span: 19010..19011,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        position: Position {
            line: 702,
            column: 73,
            span: 19011..19014,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 702,
            column: 74,
            span: 19014..19015,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 702,
            column: 75,
            span: 19015..19016,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 703,
            column: 9,
            span: 19017..19025,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 703,
            column: 10,
            span: 19025..19026,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not an integer\"",
        ),
        position: Position {
            line: 703,
            column: 26,
            span: 19026..19042,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 703,
            column: 27,
            span: 19042..19043,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 703,
            column: 30,
            span: 19044..19046,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 703,
            column: 31,
            span: 19046..19047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 703,
            column: 35,
            span: 19047..19051,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 703,
            column: 36,
            span: 19051..19052,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 703,
            column: 38,
            span: 19053..19054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        position: Position {
            line: 703,
            column: 42,
            span: 19054..19058,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 703,
            column: 43,
            span: 19058..19059,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 703,
            column: 47,
            span: 19058..19063,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 703,
            column: 48,
            span: 19063..19064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        position: Position {
            line: 703,
            column: 54,
            span: 19065..19070,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 703,
            column: 55,
            span: 19070..19071,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 703,
            column: 56,
            span: 19070..19072,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 703,
            column: 57,
            span: 19072..19073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        position: Position {
            line: 703,
            column: 61,
            span: 19074..19077,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 703,
            column: 62,
            span: 19077..19078,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 703,
            column: 63,
            span: 19077..19079,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 703,
            column: 64,
            span: 19079..19080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hour",
        ),
        position: Position {
            line: 703,
            column: 69,
            span: 19081..19085,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 703,
            column: 70,
            span: 19085..19086,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        position: Position {
            line: 703,
            column: 73,
            span: 19085..19089,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 703,
            column: 74,
            span: 19089..19090,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 703,
            column: 75,
            span: 19090..19091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 705,
            column: 9,
            span: 19093..19101,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 705,
            column: 10,
            span: 19101..19102,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"missing\"",
        ),
        position: Position {
            line: 705,
            column: 19,
            span: 19102..19111,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 705,
            column: 20,
            span: 19111..19112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 705,
            column: 23,
            span: 19113..19115,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 705,
            column: 24,
            span: 19115..19116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 705,
            column: 28,
            span: 19116..19120,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 705,
            column: 29,
            span: 19120..19121,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 705,
            column: 31,
            span: 19122..19123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hour",
        ),
        position: Position {
            line: 705,
            column: 35,
            span: 19123..19127,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 705,
            column: 37,
            span: 19128..19129,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 705,
            column: 40,
            span: 19129..19132,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 705,
            column: 41,
            span: 19132..19133,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 705,
            column: 42,
            span: 19133..19134,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 707,
            column: 3,
            span: 19154..19156,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 707,
            column: 7,
            span: 19157..19160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        position: Position {
            line: 707,
            column: 13,
            span: 19161..19166,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 707,
            column: 0,
            span: 19167..19171,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 709,
            column: 9,
            span: 19209..19215,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 709,
            column: 10,
            span: 19215..19216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 709,
            column: 14,
            span: 19216..19220,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 709,
            column: 15,
            span: 19220..19221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 709,
            column: 17,
            span: 19221..19223,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 709,
            column: 18,
            span: 19223..19224,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 709,
            column: 22,
            span: 19224..19228,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 709,
            column: 23,
            span: 19228..19229,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%Ex\"",
        ),
        position: Position {
            line: 709,
            column: 28,
            span: 19229..19234,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 709,
            column: 29,
            span: 19234..19235,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 709,
            column: 30,
            span: 19235..19236,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 709,
            column: 33,
            span: 19237..19239,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        position: Position {
            line: 709,
            column: 42,
            span: 19240..19248,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 709,
            column: 43,
            span: 19248..19249,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 710,
            column: 9,
            span: 19252..19258,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 710,
            column: 10,
            span: 19258..19259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 710,
            column: 14,
            span: 19259..19263,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 710,
            column: 15,
            span: 19263..19264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 710,
            column: 17,
            span: 19264..19266,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 710,
            column: 18,
            span: 19266..19267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 710,
            column: 22,
            span: 19267..19271,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 710,
            column: 23,
            span: 19271..19272,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%Oy\"",
        ),
        position: Position {
            line: 710,
            column: 28,
            span: 19272..19277,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 710,
            column: 29,
            span: 19277..19278,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 710,
            column: 30,
            span: 19278..19279,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 710,
            column: 33,
            span: 19280..19282,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        position: Position {
            line: 710,
            column: 42,
            span: 19283..19291,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 710,
            column: 43,
            span: 19291..19292,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 714,
            column: 5,
            span: 19346..19348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        position: Position {
            line: 714,
            column: 12,
            span: 19349..19355,
        },
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        position: Position {
            line: 714,
            column: 15,
            span: 19356..19358,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 714,
            column: 17,
            span: 19358..19360,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 714,
            column: 18,
            span: 19360..19361,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "62",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 714,
            column: 20,
            span: 19360..19363,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 714,
            column: 25,
            span: 19364..19368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 716,
            column: 13,
            span: 19438..19446,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 716,
            column: 14,
            span: 19446..19447,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out-of-bound\"",
        ),
        position: Position {
            line: 716,
            column: 28,
            span: 19447..19461,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 716,
            column: 29,
            span: 19461..19462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 716,
            column: 32,
            span: 19463..19465,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 716,
            column: 33,
            span: 19465..19466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 716,
            column: 37,
            span: 19466..19470,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 716,
            column: 38,
            span: 19470..19471,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 716,
            column: 40,
            span: 19472..19473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        position: Position {
            line: 716,
            column: 44,
            span: 19473..19477,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 716,
            column: 46,
            span: 19478..19479,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 716,
            column: 48,
            span: 19480..19481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        position: Position {
            line: 716,
            column: 54,
            span: 19481..19487,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 716,
            column: 55,
            span: 19487..19488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        position: Position {
            line: 716,
            column: 61,
            span: 19489..19494,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 716,
            column: 63,
            span: 19495..19496,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 716,
            column: 65,
            span: 19496..19498,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 716,
            column: 66,
            span: 19498..19499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        position: Position {
            line: 716,
            column: 70,
            span: 19500..19503,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 716,
            column: 72,
            span: 19504..19505,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 716,
            column: 74,
            span: 19505..19507,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 716,
            column: 75,
            span: 19507..19508,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 716,
            column: 76,
            span: 19508..19509,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 717,
            column: 7,
            span: 19514..19516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 717,
            column: 14,
            span: 19517..19523,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 717,
            column: 15,
            span: 19523..19524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 717,
            column: 23,
            span: 19524..19532,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 717,
            column: 24,
            span: 19532..19533,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i\"",
        ),
        position: Position {
            line: 717,
            column: 27,
            span: 19533..19536,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 717,
            column: 28,
            span: 19536..19537,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 717,
            column: 31,
            span: 19538..19540,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 717,
            column: 33,
            span: 19540..19542,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 717,
            column: 38,
            span: 19543..19547,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 718,
            column: 9,
            span: 19571..19573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testerr",
        ),
        position: Position {
            line: 718,
            column: 17,
            span: 19574..19581,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 718,
            column: 18,
            span: 19581..19582,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out-of-bound\"",
        ),
        position: Position {
            line: 718,
            column: 32,
            span: 19582..19596,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 718,
            column: 33,
            span: 19596..19597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 718,
            column: 36,
            span: 19598..19600,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 718,
            column: 37,
            span: 19600..19601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 718,
            column: 41,
            span: 19601..19605,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 718,
            column: 42,
            span: 19605..19606,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%Y\"",
        ),
        position: Position {
            line: 718,
            column: 47,
            span: 19607..19611,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 718,
            column: 48,
            span: 19611..19612,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 718,
            column: 50,
            span: 19612..19614,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 718,
            column: 51,
            span: 19614..19615,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 718,
            column: 53,
            span: 19614..19617,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 718,
            column: 54,
            span: 19617..19618,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 718,
            column: 0,
            span: 19619..19623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 720,
            column: 14,
            span: 19703..19708,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 720,
            column: 15,
            span: 19708..19709,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  4-byte time_t\"",
        ),
        position: Position {
            line: 720,
            column: 32,
            span: 19709..19726,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 720,
            column: 33,
            span: 19726..19727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 721,
            column: 17,
            span: 19736..19744,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 721,
            column: 18,
            span: 19744..19745,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cannot be represented\"",
        ),
        position: Position {
            line: 721,
            column: 41,
            span: 19745..19768,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 721,
            column: 42,
            span: 19768..19769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 721,
            column: 45,
            span: 19770..19772,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 721,
            column: 46,
            span: 19772..19773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 721,
            column: 50,
            span: 19773..19777,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 721,
            column: 51,
            span: 19777..19778,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 721,
            column: 53,
            span: 19779..19780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        position: Position {
            line: 721,
            column: 57,
            span: 19780..19784,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 721,
            column: 58,
            span: 19784..19785,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 721,
            column: 62,
            span: 19784..19789,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 721,
            column: 63,
            span: 19789..19790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        position: Position {
            line: 721,
            column: 69,
            span: 19791..19796,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 721,
            column: 70,
            span: 19796..19797,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 721,
            column: 71,
            span: 19796..19798,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 721,
            column: 72,
            span: 19798..19799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        position: Position {
            line: 721,
            column: 76,
            span: 19800..19803,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 721,
            column: 77,
            span: 19803..19804,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 721,
            column: 78,
            span: 19803..19805,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 721,
            column: 79,
            span: 19805..19806,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 721,
            column: 80,
            span: 19806..19807,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 722,
            column: 0,
            span: 19814..19818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 724,
            column: 14,
            span: 19899..19904,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 724,
            column: 15,
            span: 19904..19905,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  8-byte time_t\"",
        ),
        position: Position {
            line: 724,
            column: 32,
            span: 19905..19922,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 724,
            column: 33,
            span: 19922..19923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 725,
            column: 17,
            span: 19932..19940,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 725,
            column: 18,
            span: 19940..19941,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cannot be represented\"",
        ),
        position: Position {
            line: 725,
            column: 41,
            span: 19941..19964,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 725,
            column: 42,
            span: 19964..19965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 725,
            column: 45,
            span: 19966..19968,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 725,
            column: 46,
            span: 19968..19969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 725,
            column: 50,
            span: 19969..19973,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 725,
            column: 51,
            span: 19973..19974,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%Y\"",
        ),
        position: Position {
            line: 725,
            column: 56,
            span: 19975..19979,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 725,
            column: 57,
            span: 19979..19980,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 725,
            column: 59,
            span: 19980..19982,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 725,
            column: 60,
            span: 19982..19983,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 725,
            column: 62,
            span: 19982..19985,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 725,
            column: 63,
            span: 19985..19986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 727,
            column: 15,
            span: 20048..20054,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 727,
            column: 16,
            span: 20054..20055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 727,
            column: 24,
            span: 20055..20063,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 727,
            column: 25,
            span: 20063..20064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 727,
            column: 27,
            span: 20064..20066,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 727,
            column: 28,
            span: 20066..20067,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 727,
            column: 32,
            span: 20067..20071,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 727,
            column: 33,
            span: 20071..20072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        position: Position {
            line: 727,
            column: 37,
            span: 20072..20076,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 727,
            column: 38,
            span: 20076..20077,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 727,
            column: 42,
            span: 20076..20081,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 727,
            column: 43,
            span: 20081..20082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        position: Position {
            line: 727,
            column: 49,
            span: 20083..20088,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 727,
            column: 50,
            span: 20088..20089,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 727,
            column: 51,
            span: 20088..20090,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 727,
            column: 52,
            span: 20090..20091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        position: Position {
            line: 727,
            column: 56,
            span: 20092..20095,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 727,
            column: 57,
            span: 20095..20096,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 727,
            column: 58,
            span: 20095..20097,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 727,
            column: 59,
            span: 20097..20098,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 727,
            column: 60,
            span: 20098..20099,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 727,
            column: 61,
            span: 20099..20100,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 728,
            column: 0,
            span: 20107..20110,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 729,
            column: 9,
            span: 20115..20119,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 731,
            column: 12,
            span: 20183..20188,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 731,
            column: 13,
            span: 20188..20189,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  8-byte time_t\"",
        ),
        position: Position {
            line: 731,
            column: 30,
            span: 20189..20206,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 731,
            column: 31,
            span: 20206..20207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 732,
            column: 13,
            span: 20214..20220,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 732,
            column: 14,
            span: 20220..20221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 732,
            column: 22,
            span: 20221..20229,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 732,
            column: 23,
            span: 20229..20230,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 732,
            column: 25,
            span: 20230..20232,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 732,
            column: 26,
            span: 20232..20233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 732,
            column: 30,
            span: 20233..20237,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 732,
            column: 31,
            span: 20237..20238,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%Y\"",
        ),
        position: Position {
            line: 732,
            column: 35,
            span: 20238..20242,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 732,
            column: 36,
            span: 20242..20243,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 732,
            column: 38,
            span: 20243..20245,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 732,
            column: 39,
            span: 20245..20246,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 732,
            column: 41,
            span: 20245..20248,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 732,
            column: 42,
            span: 20248..20249,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 732,
            column: 43,
            span: 20249..20250,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 732,
            column: 44,
            span: 20250..20251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 734,
            column: 15,
            span: 20306..20314,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 734,
            column: 16,
            span: 20314..20315,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cannot be represented\"",
        ),
        position: Position {
            line: 734,
            column: 39,
            span: 20315..20338,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 734,
            column: 40,
            span: 20338..20339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 734,
            column: 43,
            span: 20340..20342,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 734,
            column: 44,
            span: 20342..20343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 734,
            column: 48,
            span: 20343..20347,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 734,
            column: 49,
            span: 20347..20348,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 734,
            column: 51,
            span: 20349..20350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        position: Position {
            line: 734,
            column: 55,
            span: 20350..20354,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 734,
            column: 56,
            span: 20354..20355,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 734,
            column: 57,
            span: 20354..20356,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 734,
            column: 58,
            span: 20356..20357,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 734,
            column: 60,
            span: 20356..20359,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 734,
            column: 61,
            span: 20359..20360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        position: Position {
            line: 734,
            column: 67,
            span: 20361..20366,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 734,
            column: 68,
            span: 20366..20367,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 734,
            column: 69,
            span: 20366..20368,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 734,
            column: 70,
            span: 20368..20369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        position: Position {
            line: 734,
            column: 74,
            span: 20370..20373,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 734,
            column: 75,
            span: 20373..20374,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 734,
            column: 76,
            span: 20373..20375,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 734,
            column: 77,
            span: 20375..20376,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 734,
            column: 78,
            span: 20376..20377,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 735,
            column: 0,
            span: 20382..20385,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 736,
            column: 0,
            span: 20388..20391,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 737,
            column: 0,
            span: 20392..20395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        position: Position {
            line: 740,
            column: 2,
            span: 20398..20399,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 740,
            column: 4,
            span: 20400..20401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 740,
            column: 7,
            span: 20402..20404,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 740,
            column: 8,
            span: 20404..20405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 740,
            column: 12,
            span: 20405..20409,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 740,
            column: 13,
            span: 20409..20410,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!*t\"",
        ),
        position: Position {
            line: 740,
            column: 18,
            span: 20410..20415,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 740,
            column: 19,
            span: 20415..20416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 740,
            column: 21,
            span: 20417..20418,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 740,
            column: 22,
            span: 20418..20419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 741,
            column: 5,
            span: 20420..20424,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 741,
            column: 6,
            span: 20424..20425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 741,
            column: 8,
            span: 20425..20427,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 741,
            column: 9,
            span: 20427..20428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 741,
            column: 13,
            span: 20428..20432,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 741,
            column: 14,
            span: 20432..20433,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[!assert(D.year==%Y and D.month==%m and D.day==%d and\n  D.hour==%H and D.min==%M and D.sec==%S and\n  D.wday==%w+1 and D.yday==%j and type(D.isdst) == 'boolean')]]",
        ),
        position: Position {
            line: 743,
            column: 64,
            span: 20433..20596,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 743,
            column: 65,
            span: 20596..20597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 743,
            column: 67,
            span: 20598..20599,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 743,
            column: 68,
            span: 20599..20600,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 743,
            column: 69,
            span: 20600..20601,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 743,
            column: 70,
            span: 20601..20602,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 743,
            column: 71,
            span: 20602..20603,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 745,
            column: 0,
            span: 20605..20607,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 746,
            column: 8,
            span: 20610..20615,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        position: Position {
            line: 746,
            column: 10,
            span: 20616..20617,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 746,
            column: 12,
            span: 20618..20619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 746,
            column: 15,
            span: 20620..20622,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 746,
            column: 16,
            span: 20622..20623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 746,
            column: 20,
            span: 20623..20627,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 746,
            column: 21,
            span: 20627..20628,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*t\"",
        ),
        position: Position {
            line: 746,
            column: 25,
            span: 20628..20632,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 746,
            column: 26,
            span: 20632..20633,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 747,
            column: 8,
            span: 20636..20641,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 747,
            column: 10,
            span: 20642..20643,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 747,
            column: 12,
            span: 20644..20645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 747,
            column: 15,
            span: 20646..20648,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 747,
            column: 16,
            span: 20648..20649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 747,
            column: 20,
            span: 20649..20653,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 747,
            column: 21,
            span: 20653..20654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        position: Position {
            line: 747,
            column: 22,
            span: 20654..20655,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 747,
            column: 23,
            span: 20655..20656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 748,
            column: 9,
            span: 20659..20665,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 748,
            column: 10,
            span: 20665..20666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 748,
            column: 14,
            span: 20666..20670,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 748,
            column: 15,
            span: 20670..20671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        position: Position {
            line: 748,
            column: 16,
            span: 20671..20672,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 748,
            column: 17,
            span: 20672..20673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isdst",
        ),
        position: Position {
            line: 748,
            column: 22,
            span: 20673..20678,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 748,
            column: 23,
            span: 20678..20679,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 748,
            column: 26,
            span: 20680..20682,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'boolean'",
        ),
        position: Position {
            line: 748,
            column: 36,
            span: 20683..20692,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 748,
            column: 37,
            span: 20692..20693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        position: Position {
            line: 749,
            column: 4,
            span: 20696..20697,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 749,
            column: 5,
            span: 20697..20698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isdst",
        ),
        position: Position {
            line: 749,
            column: 10,
            span: 20698..20703,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 749,
            column: 12,
            span: 20704..20705,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 749,
            column: 0,
            span: 20706..20709,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 750,
            column: 8,
            span: 20712..20717,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 750,
            column: 11,
            span: 20718..20720,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 750,
            column: 13,
            span: 20721..20722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 750,
            column: 16,
            span: 20723..20725,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 750,
            column: 17,
            span: 20725..20726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 750,
            column: 21,
            span: 20726..20730,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 750,
            column: 22,
            span: 20730..20731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        position: Position {
            line: 750,
            column: 23,
            span: 20731..20732,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 750,
            column: 24,
            span: 20732..20733,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 751,
            column: 9,
            span: 20736..20742,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 751,
            column: 10,
            span: 20742..20743,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 751,
            column: 11,
            span: 20743..20744,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 751,
            column: 14,
            span: 20745..20747,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 751,
            column: 17,
            span: 20748..20750,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 751,
            column: 18,
            span: 20750..20751,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 752,
            column: 0,
            span: 20797..20800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 754,
            column: 2,
            span: 20802..20803,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 754,
            column: 4,
            span: 20804..20805,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 754,
            column: 7,
            span: 20806..20808,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 754,
            column: 8,
            span: 20808..20809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 754,
            column: 12,
            span: 20809..20813,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 754,
            column: 13,
            span: 20813..20814,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        position: Position {
            line: 754,
            column: 14,
            span: 20814..20815,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 754,
            column: 15,
            span: 20815..20816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        position: Position {
            line: 755,
            column: 2,
            span: 20817..20818,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 755,
            column: 3,
            span: 20818..20819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        position: Position {
            line: 755,
            column: 7,
            span: 20819..20823,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 755,
            column: 9,
            span: 20824..20825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        position: Position {
            line: 755,
            column: 11,
            span: 20826..20827,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 755,
            column: 12,
            span: 20827..20828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        position: Position {
            line: 755,
            column: 16,
            span: 20828..20832,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 755,
            column: 17,
            span: 20832..20833,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 755,
            column: 18,
            span: 20832..20834,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 755,
            column: 19,
            span: 20834..20835,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 756,
            column: 6,
            span: 20836..20841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 756,
            column: 9,
            span: 20842..20844,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 756,
            column: 11,
            span: 20845..20846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 756,
            column: 14,
            span: 20847..20849,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 756,
            column: 15,
            span: 20849..20850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 756,
            column: 19,
            span: 20850..20854,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 756,
            column: 20,
            span: 20854..20855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        position: Position {
            line: 756,
            column: 21,
            span: 20855..20856,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 756,
            column: 22,
            span: 20856..20857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 758,
            column: 7,
            span: 20882..20888,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 758,
            column: 8,
            span: 20888..20889,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 758,
            column: 12,
            span: 20889..20893,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 758,
            column: 13,
            span: 20893..20894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        position: Position {
            line: 758,
            column: 16,
            span: 20894..20897,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 758,
            column: 17,
            span: 20897..20898,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 758,
            column: 19,
            span: 20898..20900,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 758,
            column: 20,
            span: 20900..20901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "difftime",
        ),
        position: Position {
            line: 758,
            column: 28,
            span: 20901..20909,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 758,
            column: 29,
            span: 20909..20910,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 758,
            column: 30,
            span: 20910..20911,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 758,
            column: 31,
            span: 20911..20912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 758,
            column: 33,
            span: 20912..20914,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 758,
            column: 34,
            span: 20914..20915,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 758,
            column: 35,
            span: 20915..20916,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 758,
            column: 36,
            span: 20916..20917,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 758,
            column: 38,
            span: 20916..20919,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 758,
            column: 39,
            span: 20919..20920,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3600",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 758,
            column: 43,
            span: 20919..20924,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 758,
            column: 44,
            span: 20924..20925,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 758,
            column: 46,
            span: 20926..20927,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "365",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 758,
            column: 50,
            span: 20927..20931,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 758,
            column: 51,
            span: 20931..20932,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 758,
            column: 53,
            span: 20933..20934,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 758,
            column: 55,
            span: 20934..20936,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 758,
            column: 56,
            span: 20936..20937,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 761,
            column: 2,
            span: 21004..21005,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 761,
            column: 4,
            span: 21006..21007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 761,
            column: 7,
            span: 21008..21010,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 761,
            column: 8,
            span: 21010..21011,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 761,
            column: 12,
            span: 21011..21015,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 761,
            column: 13,
            span: 21015..21016,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 761,
            column: 14,
            span: 21016..21017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 762,
            column: 3,
            span: 21018..21020,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 762,
            column: 5,
            span: 21021..21022,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 762,
            column: 8,
            span: 21023..21025,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 762,
            column: 9,
            span: 21025..21026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 762,
            column: 13,
            span: 21026..21030,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 762,
            column: 14,
            span: 21030..21031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 762,
            column: 16,
            span: 21031..21033,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 762,
            column: 17,
            span: 21033..21034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 762,
            column: 21,
            span: 21034..21038,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 762,
            column: 22,
            span: 21038..21039,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*t\"",
        ),
        position: Position {
            line: 762,
            column: 26,
            span: 21039..21043,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 762,
            column: 27,
            span: 21043..21044,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 762,
            column: 28,
            span: 21044..21045,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 763,
            column: 6,
            span: 21046..21051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        position: Position {
            line: 763,
            column: 11,
            span: 21052..21056,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 763,
            column: 13,
            span: 21057..21058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 763,
            column: 16,
            span: 21059..21061,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 763,
            column: 17,
            span: 21061..21062,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "difftime",
        ),
        position: Position {
            line: 763,
            column: 25,
            span: 21062..21070,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 763,
            column: 26,
            span: 21070..21071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 763,
            column: 28,
            span: 21071..21073,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 763,
            column: 29,
            span: 21073..21074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 763,
            column: 30,
            span: 21074..21075,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 763,
            column: 31,
            span: 21075..21076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 764,
            column: 7,
            span: 21077..21083,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 764,
            column: 8,
            span: 21083..21084,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 764,
            column: 9,
            span: 21083..21085,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 764,
            column: 12,
            span: 21086..21088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        position: Position {
            line: 764,
            column: 17,
            span: 21089..21093,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 764,
            column: 21,
            span: 21094..21097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        position: Position {
            line: 764,
            column: 26,
            span: 21098..21102,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 764,
            column: 29,
            span: 21103..21105,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 764,
            column: 31,
            span: 21105..21107,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 764,
            column: 32,
            span: 21107..21108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        position: Position {
            line: 765,
            column: 5,
            span: 21109..21113,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 765,
            column: 7,
            span: 21114..21115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 765,
            column: 10,
            span: 21116..21118,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 765,
            column: 11,
            span: 21118..21119,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "difftime",
        ),
        position: Position {
            line: 765,
            column: 19,
            span: 21119..21127,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 765,
            column: 20,
            span: 21127..21128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 765,
            column: 21,
            span: 21128..21129,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 765,
            column: 22,
            span: 21129..21130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 765,
            column: 24,
            span: 21130..21132,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 765,
            column: 25,
            span: 21132..21133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 766,
            column: 7,
            span: 21134..21140,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 766,
            column: 8,
            span: 21140..21141,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 766,
            column: 9,
            span: 21141..21142,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 766,
            column: 10,
            span: 21141..21143,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 766,
            column: 13,
            span: 21144..21146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        position: Position {
            line: 766,
            column: 18,
            span: 21147..21151,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 766,
            column: 22,
            span: 21152..21155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        position: Position {
            line: 766,
            column: 27,
            span: 21156..21160,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 766,
            column: 30,
            span: 21161..21163,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 766,
            column: 32,
            span: 21163..21165,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 766,
            column: 33,
            span: 21165..21166,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 768,
            column: 6,
            span: 21168..21173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 768,
            column: 9,
            span: 21174..21176,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 768,
            column: 11,
            span: 21177..21178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 768,
            column: 14,
            span: 21179..21181,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 768,
            column: 15,
            span: 21181..21182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 768,
            column: 19,
            span: 21182..21186,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 768,
            column: 20,
            span: 21186..21187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        position: Position {
            line: 768,
            column: 24,
            span: 21187..21191,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 768,
            column: 25,
            span: 21191..21192,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 768,
            column: 29,
            span: 21191..21196,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 768,
            column: 30,
            span: 21196..21197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        position: Position {
            line: 768,
            column: 36,
            span: 21198..21203,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 768,
            column: 37,
            span: 21203..21204,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 768,
            column: 39,
            span: 21203..21206,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 768,
            column: 40,
            span: 21206..21207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        position: Position {
            line: 768,
            column: 44,
            span: 21208..21211,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 768,
            column: 45,
            span: 21211..21212,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 768,
            column: 46,
            span: 21211..21213,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 768,
            column: 47,
            span: 21213..21214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hour",
        ),
        position: Position {
            line: 768,
            column: 52,
            span: 21215..21219,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 768,
            column: 53,
            span: 21219..21220,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 768,
            column: 55,
            span: 21219..21222,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 768,
            column: 56,
            span: 21222..21223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        position: Position {
            line: 768,
            column: 60,
            span: 21224..21227,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 768,
            column: 61,
            span: 21227..21228,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 768,
            column: 63,
            span: 21227..21230,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 768,
            column: 64,
            span: 21230..21231,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 769,
            column: 6,
            span: 21232..21237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 769,
            column: 9,
            span: 21238..21240,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 769,
            column: 11,
            span: 21241..21242,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 769,
            column: 14,
            span: 21243..21245,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 769,
            column: 15,
            span: 21245..21246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 769,
            column: 19,
            span: 21246..21250,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 769,
            column: 20,
            span: 21250..21251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        position: Position {
            line: 769,
            column: 24,
            span: 21251..21255,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 769,
            column: 25,
            span: 21255..21256,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 769,
            column: 29,
            span: 21255..21260,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 769,
            column: 30,
            span: 21260..21261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        position: Position {
            line: 769,
            column: 36,
            span: 21262..21267,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 769,
            column: 37,
            span: 21267..21268,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 769,
            column: 39,
            span: 21267..21270,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 769,
            column: 40,
            span: 21270..21271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        position: Position {
            line: 769,
            column: 44,
            span: 21272..21275,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 769,
            column: 45,
            span: 21275..21276,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 769,
            column: 46,
            span: 21275..21277,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 769,
            column: 47,
            span: 21277..21278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hour",
        ),
        position: Position {
            line: 769,
            column: 52,
            span: 21279..21283,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 769,
            column: 53,
            span: 21283..21284,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 769,
            column: 55,
            span: 21283..21286,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 769,
            column: 56,
            span: 21286..21287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        position: Position {
            line: 769,
            column: 60,
            span: 21288..21291,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 769,
            column: 61,
            span: 21291..21292,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 769,
            column: 63,
            span: 21291..21294,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 769,
            column: 64,
            span: 21294..21295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sec",
        ),
        position: Position {
            line: 769,
            column: 68,
            span: 21296..21299,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 769,
            column: 69,
            span: 21299..21300,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 769,
            column: 71,
            span: 21299..21302,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 769,
            column: 72,
            span: 21302..21303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 770,
            column: 7,
            span: 21304..21310,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 770,
            column: 8,
            span: 21310..21311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 770,
            column: 10,
            span: 21311..21313,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 770,
            column: 11,
            span: 21313..21314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "difftime",
        ),
        position: Position {
            line: 770,
            column: 19,
            span: 21314..21322,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 770,
            column: 20,
            span: 21322..21323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 770,
            column: 22,
            span: 21323..21325,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 770,
            column: 23,
            span: 21325..21326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 770,
            column: 25,
            span: 21326..21328,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 770,
            column: 26,
            span: 21328..21329,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 770,
            column: 29,
            span: 21330..21332,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 770,
            column: 32,
            span: 21332..21335,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 770,
            column: 33,
            span: 21335..21336,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 770,
            column: 34,
            span: 21335..21337,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 770,
            column: 35,
            span: 21337..21338,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 770,
            column: 37,
            span: 21337..21340,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 770,
            column: 38,
            span: 21340..21341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 773,
            column: 3,
            span: 21393..21395,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 773,
            column: 5,
            span: 21396..21397,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 773,
            column: 7,
            span: 21398..21399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        position: Position {
            line: 773,
            column: 11,
            span: 21399..21403,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 773,
            column: 13,
            span: 21404..21405,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2005",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 773,
            column: 18,
            span: 21405..21410,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 773,
            column: 19,
            span: 21410..21411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        position: Position {
            line: 773,
            column: 25,
            span: 21412..21417,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 773,
            column: 27,
            span: 21418..21419,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 773,
            column: 29,
            span: 21419..21421,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 773,
            column: 30,
            span: 21421..21422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        position: Position {
            line: 773,
            column: 34,
            span: 21423..21426,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 773,
            column: 36,
            span: 21427..21428,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 773,
            column: 38,
            span: 21428..21430,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 773,
            column: 39,
            span: 21430..21431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hour",
        ),
        position: Position {
            line: 773,
            column: 44,
            span: 21432..21436,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 773,
            column: 46,
            span: 21437..21438,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 773,
            column: 48,
            span: 21438..21440,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 773,
            column: 49,
            span: 21440..21441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        position: Position {
            line: 773,
            column: 53,
            span: 21442..21445,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 773,
            column: 55,
            span: 21446..21447,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 773,
            column: 57,
            span: 21447..21449,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 773,
            column: 58,
            span: 21449..21450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sec",
        ),
        position: Position {
            line: 773,
            column: 62,
            span: 21451..21454,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 773,
            column: 64,
            span: 21455..21456,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 773,
            column: 66,
            span: 21457..21458,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3602",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 773,
            column: 70,
            span: 21457..21462,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 773,
            column: 71,
            span: 21462..21463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 774,
            column: 3,
            span: 21464..21466,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 774,
            column: 4,
            span: 21466..21467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 774,
            column: 8,
            span: 21467..21471,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 774,
            column: 9,
            span: 21471..21472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 774,
            column: 11,
            span: 21472..21474,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 774,
            column: 12,
            span: 21474..21475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 775,
            column: 7,
            span: 21476..21482,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 775,
            column: 8,
            span: 21482..21483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 775,
            column: 10,
            span: 21483..21485,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 775,
            column: 11,
            span: 21485..21486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        position: Position {
            line: 775,
            column: 14,
            span: 21486..21489,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 775,
            column: 17,
            span: 21490..21492,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 775,
            column: 20,
            span: 21492..21495,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 775,
            column: 24,
            span: 21496..21499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 775,
            column: 27,
            span: 21500..21502,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 775,
            column: 28,
            span: 21502..21503,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        position: Position {
            line: 775,
            column: 33,
            span: 21503..21508,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 775,
            column: 36,
            span: 21509..21511,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 775,
            column: 39,
            span: 21511..21514,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 775,
            column: 43,
            span: 21515..21518,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 775,
            column: 46,
            span: 21519..21521,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 775,
            column: 47,
            span: 21521..21522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        position: Position {
            line: 775,
            column: 51,
            span: 21522..21526,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 775,
            column: 54,
            span: 21527..21529,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2004",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 775,
            column: 59,
            span: 21529..21534,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 775,
            column: 0,
            span: 21535..21538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 776,
            column: 10,
            span: 21546..21548,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 776,
            column: 11,
            span: 21548..21549,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hour",
        ),
        position: Position {
            line: 776,
            column: 15,
            span: 21549..21553,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 776,
            column: 18,
            span: 21554..21556,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 776,
            column: 21,
            span: 21556..21559,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 776,
            column: 25,
            span: 21560..21563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 776,
            column: 28,
            span: 21564..21566,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 776,
            column: 29,
            span: 21566..21567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        position: Position {
            line: 776,
            column: 32,
            span: 21567..21570,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 776,
            column: 35,
            span: 21571..21573,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "59",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 776,
            column: 38,
            span: 21573..21576,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 776,
            column: 42,
            span: 21577..21580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 776,
            column: 45,
            span: 21581..21583,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 776,
            column: 46,
            span: 21583..21584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sec",
        ),
        position: Position {
            line: 776,
            column: 49,
            span: 21584..21587,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 776,
            column: 52,
            span: 21588..21590,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "58",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 776,
            column: 55,
            span: 21590..21593,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 776,
            column: 0,
            span: 21594..21597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 777,
            column: 10,
            span: 21605..21607,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 777,
            column: 11,
            span: 21607..21608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yday",
        ),
        position: Position {
            line: 777,
            column: 15,
            span: 21608..21612,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 777,
            column: 18,
            span: 21613..21615,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "366",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 777,
            column: 22,
            span: 21615..21619,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 777,
            column: 23,
            span: 21619..21620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 779,
            column: 3,
            span: 21622..21624,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 779,
            column: 4,
            span: 21624..21625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 779,
            column: 10,
            span: 21625..21631,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 779,
            column: 11,
            span: 21631..21632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 779,
            column: 13,
            span: 21632..21634,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 779,
            column: 14,
            span: 21634..21635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        position: Position {
            line: 779,
            column: 20,
            span: 21635..21641,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 779,
            column: 21,
            span: 21641..21642,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 780,
            column: 6,
            span: 21643..21648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 780,
            column: 8,
            span: 21649..21650,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 780,
            column: 10,
            span: 21651..21652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 780,
            column: 13,
            span: 21653..21655,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 780,
            column: 14,
            span: 21655..21656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        position: Position {
            line: 780,
            column: 18,
            span: 21656..21660,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 780,
            column: 19,
            span: 21660..21661,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%d %m %Y %H %M %S'",
        ),
        position: Position {
            line: 780,
            column: 38,
            span: 21661..21680,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 780,
            column: 39,
            span: 21680..21681,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 781,
            column: 6,
            span: 21682..21687,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 781,
            column: 8,
            span: 21688..21689,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 781,
            column: 9,
            span: 21689..21690,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 781,
            column: 11,
            span: 21691..21692,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 781,
            column: 12,
            span: 21692..21693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 781,
            column: 14,
            span: 21694..21695,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 781,
            column: 15,
            span: 21695..21696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 781,
            column: 17,
            span: 21697..21698,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 781,
            column: 18,
            span: 21698..21699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        position: Position {
            line: 781,
            column: 22,
            span: 21700..21703,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 781,
            column: 23,
            span: 21703..21704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 781,
            column: 25,
            span: 21705..21706,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 781,
            column: 27,
            span: 21707..21708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 781,
            column: 34,
            span: 21709..21715,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 781,
            column: 35,
            span: 21715..21716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 781,
            column: 40,
            span: 21716..21721,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 781,
            column: 41,
            span: 21721..21722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 781,
            column: 42,
            span: 21722..21723,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 781,
            column: 43,
            span: 21723..21724,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%d+) (%d+) (%d+) (%d+) (%d+) (%d+)\"",
        ),
        position: Position {
            line: 782,
            column: 67,
            span: 21754..21791,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 782,
            column: 68,
            span: 21791..21792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 783,
            column: 2,
            span: 21793..21794,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 783,
            column: 4,
            span: 21795..21796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 783,
            column: 13,
            span: 21797..21805,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 783,
            column: 14,
            span: 21805..21806,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 783,
            column: 15,
            span: 21806..21807,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 783,
            column: 16,
            span: 21807..21808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 784,
            column: 2,
            span: 21809..21810,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 784,
            column: 4,
            span: 21811..21812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 784,
            column: 13,
            span: 21813..21821,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 784,
            column: 14,
            span: 21821..21822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 784,
            column: 15,
            span: 21822..21823,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 784,
            column: 16,
            span: 21823..21824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 785,
            column: 2,
            span: 21825..21826,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 785,
            column: 4,
            span: 21827..21828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 785,
            column: 13,
            span: 21829..21837,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 785,
            column: 14,
            span: 21837..21838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 785,
            column: 15,
            span: 21838..21839,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 785,
            column: 16,
            span: 21839..21840,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 786,
            column: 2,
            span: 21841..21842,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 786,
            column: 4,
            span: 21843..21844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 786,
            column: 13,
            span: 21845..21853,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 786,
            column: 14,
            span: 21853..21854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 786,
            column: 15,
            span: 21854..21855,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 786,
            column: 16,
            span: 21855..21856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        position: Position {
            line: 787,
            column: 4,
            span: 21857..21860,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 787,
            column: 6,
            span: 21861..21862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 787,
            column: 15,
            span: 21863..21871,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 787,
            column: 16,
            span: 21871..21872,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        position: Position {
            line: 787,
            column: 19,
            span: 21872..21875,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 787,
            column: 20,
            span: 21875..21876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 788,
            column: 2,
            span: 21877..21878,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 788,
            column: 4,
            span: 21879..21880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 788,
            column: 13,
            span: 21881..21889,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 788,
            column: 14,
            span: 21889..21890,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 788,
            column: 15,
            span: 21890..21891,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 788,
            column: 16,
            span: 21891..21892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 789,
            column: 3,
            span: 21893..21895,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 789,
            column: 4,
            span: 21895..21896,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 789,
            column: 9,
            span: 21896..21901,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 789,
            column: 10,
            span: 21901..21902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 789,
            column: 16,
            span: 21902..21908,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 789,
            column: 17,
            span: 21908..21909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 789,
            column: 23,
            span: 21909..21915,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 789,
            column: 24,
            span: 21915..21916,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'test done on %2.2d/%2.2d/%d'",
        ),
        position: Position {
            line: 789,
            column: 53,
            span: 21916..21945,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 789,
            column: 54,
            span: 21945..21946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 789,
            column: 56,
            span: 21947..21948,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 789,
            column: 57,
            span: 21948..21949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 789,
            column: 59,
            span: 21950..21951,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 789,
            column: 60,
            span: 21951..21952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 789,
            column: 62,
            span: 21953..21954,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 789,
            column: 63,
            span: 21954..21955,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 789,
            column: 64,
            span: 21955..21956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 790,
            column: 3,
            span: 21957..21959,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 790,
            column: 4,
            span: 21959..21960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 790,
            column: 9,
            span: 21960..21965,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 790,
            column: 10,
            span: 21965..21966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 790,
            column: 16,
            span: 21966..21972,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 790,
            column: 17,
            span: 21972..21973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 790,
            column: 23,
            span: 21973..21979,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 790,
            column: 24,
            span: 21979..21980,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "', at %2.2d:%2.2d:%2.2d\\n'",
        ),
        position: Position {
            line: 790,
            column: 50,
            span: 21980..22006,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 790,
            column: 51,
            span: 22006..22007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 790,
            column: 53,
            span: 22008..22009,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 790,
            column: 54,
            span: 22009..22010,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        position: Position {
            line: 790,
            column: 58,
            span: 22011..22014,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 790,
            column: 59,
            span: 22014..22015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 790,
            column: 61,
            span: 22016..22017,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 790,
            column: 62,
            span: 22017..22018,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 790,
            column: 63,
            span: 22018..22019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 791,
            column: 3,
            span: 22020..22022,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 791,
            column: 4,
            span: 22022..22023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 791,
            column: 9,
            span: 22023..22028,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 791,
            column: 10,
            span: 22028..22029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 791,
            column: 16,
            span: 22029..22035,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 791,
            column: 17,
            span: 22035..22036,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 791,
            column: 23,
            span: 22036..22042,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 791,
            column: 24,
            span: 22042..22043,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%s\\n'",
        ),
        position: Position {
            line: 791,
            column: 30,
            span: 22043..22049,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 791,
            column: 31,
            span: 22049..22050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_VERSION",
        ),
        position: Position {
            line: 791,
            column: 40,
            span: 22051..22059,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 791,
            column: 41,
            span: 22059..22060,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 791,
            column: 42,
            span: 22060..22061,
        },
    },
]
