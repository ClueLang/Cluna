---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/utf8.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
        column: 6,
        span: 99..104,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing UTF-8 library\"",
        ),
        line: 4,
        column: 30,
        span: 105..128,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 6,
        span: 130..135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 6,
        column: 11,
        span: 136..140,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 13,
        span: 141..142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 6,
        column: 21,
        span: 143..150,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'utf8'",
        ),
        line: 6,
        column: 27,
        span: 150..156,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 9,
        column: 6,
        span: 159..164,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 9,
        column: 15,
        span: 165..173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 9,
        column: 26,
        span: 174..184,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 28,
        span: 185..186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 9,
        column: 31,
        span: 186..189,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 9,
        column: 32,
        span: 189..190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 9,
        column: 34,
        span: 191..192,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 9,
        column: 35,
        span: 192..193,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 9,
        column: 39,
        span: 194..197,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 40,
        span: 197..198,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 10,
        column: 8,
        span: 201..206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 10,
        column: 10,
        span: 207..208,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 10,
        column: 11,
        span: 208..209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 10,
        column: 15,
        span: 210..213,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 10,
        column: 17,
        span: 214..215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 10,
        column: 23,
        span: 216..221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 24,
        span: 221..222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 10,
        column: 25,
        span: 222..223,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 10,
        column: 26,
        span: 223..224,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 10,
        column: 30,
        span: 225..228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 31,
        span: 228..229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 11,
        column: 9,
        span: 232..238,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 10,
        span: 238..239,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 11,
        column: 13,
        span: 239..242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 11,
        column: 15,
        span: 243..244,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 11,
        column: 19,
        span: 245..248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 11,
        column: 26,
        span: 249..255,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 11,
        column: 27,
        span: 255..256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 11,
        column: 31,
        span: 256..260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 32,
        span: 260..261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 11,
        column: 35,
        span: 261..264,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 11,
        column: 36,
        span: 264..265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 11,
        column: 40,
        span: 266..269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 41,
        span: 269..270,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 42,
        span: 270..271,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 12,
        column: 0,
        span: 272..275,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 15,
        column: 6,
        span: 278..283,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 15,
        column: 15,
        span: 284..292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 15,
        column: 19,
        span: 293..296,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 21,
        span: 297..298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 15,
        column: 22,
        span: 298..299,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 23,
        span: 299..300,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 16,
        column: 9,
        span: 303..309,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 16,
        column: 11,
        span: 310..311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 16,
        column: 17,
        span: 311..317,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 16,
        column: 18,
        span: 317..318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 16,
        column: 22,
        span: 318..322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 23,
        span: 322..323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 16,
        column: 24,
        span: 323..324,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 16,
        column: 25,
        span: 324..325,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[\\x80-\\xBF]\"",
        ),
        line: 16,
        column: 39,
        span: 326..339,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 16,
        column: 40,
        span: 339..340,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 16,
        column: 43,
        span: 341..343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 44,
        span: 343..344,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 17,
        column: 0,
        span: 345..348,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 20,
        column: 6,
        span: 351..356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "justone",
        ),
        line: 20,
        column: 14,
        span: 357..364,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 20,
        column: 16,
        span: 365..366,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^\"",
        ),
        line: 20,
        column: 20,
        span: 367..370,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 20,
        column: 23,
        span: 371..373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 20,
        column: 28,
        span: 374..378,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 20,
        column: 29,
        span: 378..379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "charpattern",
        ),
        line: 20,
        column: 40,
        span: 379..390,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 20,
        column: 43,
        span: 391..393,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"$\"",
        ),
        line: 20,
        column: 47,
        span: 394..397,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 23,
        column: 6,
        span: 439..444,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 23,
        column: 15,
        span: 445..453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 23,
        column: 27,
        span: 454..465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 29,
        span: 466..467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 23,
        column: 30,
        span: 467..468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 23,
        column: 31,
        span: 468..469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 23,
        column: 33,
        span: 470..471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 34,
        span: 471..472,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 24,
        column: 8,
        span: 475..480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ts",
        ),
        line: 24,
        column: 11,
        span: 481..483,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 13,
        span: 484..485,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 24,
        column: 15,
        span: 486..487,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return '\"",
        ),
        line: 24,
        column: 25,
        span: 487..497,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 24,
        column: 26,
        span: 497..498,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 25,
        column: 6,
        span: 501..504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 25,
        column: 8,
        span: 505..506,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 25,
        column: 10,
        span: 507..508,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 12,
        span: 508..510,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 13,
        span: 510..511,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 25,
        column: 15,
        span: 512..513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 25,
        column: 16,
        span: 513..514,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 25,
        column: 19,
        span: 515..517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ts",
        ),
        line: 25,
        column: 22,
        span: 518..520,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 25,
        column: 23,
        span: 520..521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 25,
        column: 24,
        span: 521..522,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 25,
        column: 26,
        span: 523..524,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 28,
        span: 524..526,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 25,
        column: 29,
        span: 526..527,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 25,
        column: 31,
        span: 528..529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 25,
        column: 38,
        span: 530..536,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 25,
        column: 39,
        span: 536..537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 25,
        column: 45,
        span: 537..543,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 46,
        span: 543..544,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\\\u{%x}\"",
        ),
        line: 25,
        column: 55,
        span: 544..553,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 56,
        span: 553..554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 25,
        column: 58,
        span: 555..556,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 25,
        column: 59,
        span: 556..557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 25,
        column: 60,
        span: 557..558,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 25,
        column: 61,
        span: 558..559,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 62,
        span: 559..560,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 25,
        column: 0,
        span: 561..564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ts",
        ),
        line: 26,
        column: 5,
        span: 567..569,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 26,
        column: 6,
        span: 569..570,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 26,
        column: 7,
        span: 570..571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 26,
        column: 8,
        span: 571..572,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 26,
        column: 10,
        span: 573..574,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 12,
        span: 574..576,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 26,
        column: 13,
        span: 576..577,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 26,
        column: 15,
        span: 578..579,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'\"",
        ),
        line: 26,
        column: 19,
        span: 580..583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ts",
        ),
        line: 27,
        column: 5,
        span: 586..588,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 27,
        column: 7,
        span: 589..590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 27,
        column: 13,
        span: 591..596,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 27,
        column: 14,
        span: 596..597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 27,
        column: 20,
        span: 597..603,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 21,
        span: 603..604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ts",
        ),
        line: 27,
        column: 23,
        span: 604..606,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 24,
        span: 606..607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 28,
        column: 9,
        span: 610..616,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 10,
        span: 616..617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 28,
        column: 16,
        span: 617..623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 17,
        span: 623..624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 28,
        column: 21,
        span: 624..628,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 22,
        span: 628..629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ts",
        ),
        line: 28,
        column: 24,
        span: 629..631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 25,
        span: 631..632,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 26,
        span: 632..633,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 27,
        span: 633..634,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 28,
        span: 634..635,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 28,
        column: 31,
        span: 636..638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 28,
        column: 33,
        span: 639..640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 34,
        span: 640..641,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 29,
        column: 0,
        span: 642..645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 31,
        column: 7,
        span: 647..653,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 8,
        span: 653..654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 31,
        column: 12,
        span: 654..658,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 31,
        column: 13,
        span: 658..659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        line: 31,
        column: 19,
        span: 659..665,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 20,
        span: 665..666,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 31,
        column: 25,
        span: 666..671,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
        column: 26,
        span: 671..672,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 28,
        span: 672..674,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 29,
        span: 674..675,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 31,
        column: 32,
        span: 676..678,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 31,
        column: 36,
        span: 679..682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 37,
        span: 682..683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 32,
        column: 7,
        span: 684..690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 8,
        span: 690..691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 32,
        column: 12,
        span: 691..695,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 32,
        column: 13,
        span: 695..696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        line: 32,
        column: 19,
        span: 696..702,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 20,
        span: 702..703,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 32,
        column: 25,
        span: 703..708,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 26,
        span: 708..709,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 32,
        column: 28,
        span: 710..711,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 29,
        span: 710..712,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 30,
        span: 712..713,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 32,
        column: 33,
        span: 714..716,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 32,
        column: 37,
        span: 717..720,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 38,
        span: 720..721,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 35,
        column: 6,
        span: 763..768,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 35,
        column: 15,
        span: 769..777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 35,
        column: 21,
        span: 778..783,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 23,
        span: 784..785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 35,
        column: 24,
        span: 785..786,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 35,
        column: 25,
        span: 786..787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 35,
        column: 27,
        span: 788..789,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 28,
        span: 789..790,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 36,
        column: 8,
        span: 793..798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 36,
        column: 10,
        span: 799..800,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 36,
        column: 12,
        span: 801..802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 36,
        column: 17,
        span: 803..807,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 36,
        column: 18,
        span: 807..808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 36,
        column: 21,
        span: 808..811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 22,
        span: 811..812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 36,
        column: 23,
        span: 812..813,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 24,
        span: 813..814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 37,
        column: 9,
        span: 818..824,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 10,
        span: 824..825,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 37,
        column: 11,
        span: 825..826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 37,
        column: 12,
        span: 826..827,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 37,
        column: 15,
        span: 828..830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 37,
        column: 17,
        span: 831..832,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 37,
        column: 21,
        span: 833..836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 37,
        column: 25,
        span: 837..840,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 26,
        span: 840..841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 37,
        column: 27,
        span: 841..842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 28,
        span: 842..843,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 37,
        column: 31,
        span: 844..846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 37,
        column: 33,
        span: 847..848,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 34,
        span: 848..849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 38,
        column: 9,
        span: 852..858,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 10,
        span: 858..859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 38,
        column: 14,
        span: 859..863,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 15,
        span: 863..864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 38,
        column: 19,
        span: 864..868,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 20,
        span: 868..869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 38,
        column: 25,
        span: 869..874,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 26,
        span: 874..875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 38,
        column: 32,
        span: 875..881,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 33,
        span: 881..882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 38,
        column: 34,
        span: 882..883,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 35,
        span: 883..884,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 36,
        span: 884..885,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 38,
        column: 39,
        span: 886..888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 38,
        column: 41,
        span: 889..890,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 42,
        span: 890..891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 40,
        column: 9,
        span: 895..901,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 10,
        span: 901..902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 40,
        column: 14,
        span: 902..906,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 40,
        column: 15,
        span: 906..907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        line: 40,
        column: 21,
        span: 907..913,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 22,
        span: 913..914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 40,
        column: 23,
        span: 914..915,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 24,
        span: 915..916,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 26,
        span: 916..918,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 27,
        span: 918..919,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 40,
        column: 30,
        span: 920..922,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 32,
        span: 922..924,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 33,
        span: 924..925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 42,
        column: 14,
        span: 929..940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 15,
        span: 940..941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 42,
        column: 16,
        span: 941..942,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 42,
        column: 17,
        span: 942..943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 42,
        column: 19,
        span: 944..945,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 20,
        span: 945..946,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 44,
        column: 8,
        span: 950..955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 44,
        column: 11,
        span: 956..958,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 44,
        column: 13,
        span: 959..960,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 44,
        column: 15,
        span: 961..962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 44,
        column: 19,
        span: 962..966,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
        column: 20,
        span: 966..967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        line: 44,
        column: 29,
        span: 967..976,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 30,
        span: 976..977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 44,
        column: 31,
        span: 977..978,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 32,
        span: 978..979,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 44,
        column: 34,
        span: 979..981,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 35,
        span: 981..982,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 44,
        column: 37,
        span: 983..984,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 44,
        column: 38,
        span: 983..985,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 39,
        span: 985..986,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 44,
        column: 40,
        span: 986..987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 45,
        column: 9,
        span: 990..996,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 10,
        span: 996..997,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 45,
        column: 11,
        span: 997..998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 45,
        column: 12,
        span: 998..999,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 45,
        column: 15,
        span: 1000..1002,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 45,
        column: 17,
        span: 1003..1004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 45,
        column: 19,
        span: 1004..1006,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 20,
        span: 1006..1007,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 46,
        column: 6,
        span: 1010..1013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 46,
        column: 8,
        span: 1014..1015,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 46,
        column: 10,
        span: 1016..1017,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 12,
        span: 1017..1019,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 13,
        span: 1019..1020,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 46,
        column: 15,
        span: 1021..1022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 46,
        column: 16,
        span: 1022..1023,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 46,
        column: 19,
        span: 1024..1026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 46,
        column: 26,
        span: 1027..1033,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 27,
        span: 1033..1034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 46,
        column: 28,
        span: 1034..1035,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 46,
        column: 29,
        span: 1035..1036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 46,
        column: 30,
        span: 1036..1037,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 46,
        column: 31,
        span: 1037..1038,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 46,
        column: 34,
        span: 1039..1041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 46,
        column: 37,
        span: 1042..1044,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 46,
        column: 38,
        span: 1044..1045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 46,
        column: 39,
        span: 1045..1046,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 46,
        column: 40,
        span: 1046..1047,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 41,
        span: 1047..1048,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 46,
        column: 0,
        span: 1049..1052,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 48,
        column: 6,
        span: 1056..1059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 48,
        column: 8,
        span: 1060..1061,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 48,
        column: 10,
        span: 1062..1063,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 48,
        column: 12,
        span: 1063..1065,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 13,
        span: 1065..1066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 48,
        column: 15,
        span: 1067..1068,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 48,
        column: 0,
        span: 1069..1071,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 49,
        column: 10,
        span: 1076..1081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 49,
        column: 13,
        span: 1082..1084,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 49,
        column: 15,
        span: 1085..1086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 49,
        column: 20,
        span: 1087..1091,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 49,
        column: 21,
        span: 1091..1092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        line: 49,
        column: 27,
        span: 1092..1098,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 28,
        span: 1098..1099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 49,
        column: 29,
        span: 1099..1100,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
        column: 30,
        span: 1100..1101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 49,
        column: 32,
        span: 1102..1103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 33,
        span: 1103..1104,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 50,
        column: 10,
        span: 1141..1146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi1",
        ),
        line: 50,
        column: 14,
        span: 1147..1150,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 50,
        column: 16,
        span: 1151..1152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 50,
        column: 21,
        span: 1153..1157,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 50,
        column: 22,
        span: 1157..1158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        line: 50,
        column: 28,
        span: 1158..1164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 29,
        span: 1164..1165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 50,
        column: 30,
        span: 1165..1166,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 31,
        span: 1166..1167,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 33,
        span: 1167..1169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 34,
        span: 1169..1170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 50,
        column: 37,
        span: 1171..1173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 38,
        span: 1173..1174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 51,
        column: 11,
        span: 1206..1212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 12,
        span: 1212..1213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 51,
        column: 18,
        span: 1213..1219,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 51,
        column: 19,
        span: 1219..1220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 51,
        column: 23,
        span: 1220..1224,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 24,
        span: 1224..1225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 51,
        column: 30,
        span: 1225..1231,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 51,
        column: 31,
        span: 1231..1232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 51,
        column: 34,
        span: 1232..1235,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 35,
        span: 1235..1236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 51,
        column: 36,
        span: 1236..1237,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 37,
        span: 1237..1238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 51,
        column: 40,
        span: 1239..1241,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 41,
        span: 1241..1242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi1",
        ),
        line: 51,
        column: 45,
        span: 1243..1246,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 51,
        column: 47,
        span: 1247..1248,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 49,
        span: 1248..1250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 50,
        span: 1250..1251,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 51,
        span: 1251..1252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "justone",
        ),
        line: 51,
        column: 59,
        span: 1253..1260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 60,
        span: 1260..1261,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 61,
        span: 1261..1262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 52,
        column: 11,
        span: 1267..1273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 12,
        span: 1273..1274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 52,
        column: 16,
        span: 1274..1278,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 52,
        column: 17,
        span: 1278..1279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        line: 52,
        column: 23,
        span: 1279..1285,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 24,
        span: 1285..1286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 52,
        column: 25,
        span: 1286..1287,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
        column: 26,
        span: 1287..1288,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 52,
        column: 28,
        span: 1289..1290,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 52,
        column: 29,
        span: 1289..1291,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
        column: 30,
        span: 1291..1292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi1",
        ),
        line: 52,
        column: 34,
        span: 1293..1296,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 35,
        span: 1296..1297,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 52,
        column: 38,
        span: 1298..1300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 52,
        column: 41,
        span: 1301..1303,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 42,
        span: 1303..1304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 53,
        column: 11,
        span: 1309..1315,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 12,
        span: 1315..1316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 53,
        column: 16,
        span: 1316..1320,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 53,
        column: 17,
        span: 1320..1321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        line: 53,
        column: 23,
        span: 1321..1327,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 24,
        span: 1327..1328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 53,
        column: 25,
        span: 1328..1329,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 26,
        span: 1329..1330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 53,
        column: 28,
        span: 1331..1332,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 53,
        column: 30,
        span: 1333..1334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 53,
        column: 32,
        span: 1335..1336,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 53,
        column: 34,
        span: 1337..1338,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
        column: 36,
        span: 1338..1340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 37,
        span: 1340..1341,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 53,
        column: 40,
        span: 1342..1344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 53,
        column: 43,
        span: 1345..1347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 44,
        span: 1347..1348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 54,
        column: 11,
        span: 1353..1359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 12,
        span: 1359..1360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi1",
        ),
        line: 54,
        column: 15,
        span: 1360..1363,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 54,
        column: 17,
        span: 1364..1365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 54,
        column: 20,
        span: 1366..1368,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 54,
        column: 23,
        span: 1369..1371,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 54,
        column: 25,
        span: 1372..1373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 54,
        column: 29,
        span: 1373..1377,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 54,
        column: 30,
        span: 1377..1378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 54,
        column: 34,
        span: 1378..1382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 35,
        span: 1382..1383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 54,
        column: 39,
        span: 1383..1387,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 54,
        column: 40,
        span: 1387..1388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        line: 54,
        column: 49,
        span: 1388..1397,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 50,
        span: 1397..1398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 54,
        column: 51,
        span: 1398..1399,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 52,
        span: 1399..1400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 54,
        column: 55,
        span: 1401..1403,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 56,
        span: 1403..1404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 57,
        span: 1404..1405,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 58,
        span: 1405..1406,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 55,
        column: 8,
        span: 1411..1414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 55,
        column: 10,
        span: 1415..1416,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 55,
        column: 12,
        span: 1417..1418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 55,
        column: 15,
        span: 1419..1421,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 55,
        column: 16,
        span: 1421..1422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi1",
        ),
        line: 55,
        column: 20,
        span: 1423..1426,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 55,
        column: 22,
        span: 1427..1428,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 55,
        column: 24,
        span: 1428..1430,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 55,
        column: 27,
        span: 1431..1433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 56,
        column: 13,
        span: 1441..1447,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 14,
        span: 1447..1448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 56,
        column: 18,
        span: 1448..1452,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 56,
        column: 19,
        span: 1452..1453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        line: 56,
        column: 25,
        span: 1453..1459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 26,
        span: 1459..1460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 56,
        column: 27,
        span: 1460..1461,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 28,
        span: 1461..1462,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 30,
        span: 1462..1464,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 31,
        span: 1464..1465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 56,
        column: 33,
        span: 1466..1467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 34,
        span: 1467..1468,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 56,
        column: 37,
        span: 1469..1471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 56,
        column: 40,
        span: 1472..1474,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 41,
        span: 1474..1475,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 57,
        column: 0,
        span: 1480..1483,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 58,
        column: 8,
        span: 1488..1491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 58,
        column: 10,
        span: 1492..1493,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
        column: 12,
        span: 1494..1495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 58,
        column: 15,
        span: 1496..1498,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 58,
        column: 17,
        span: 1499..1500,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 19,
        span: 1500..1502,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 20,
        span: 1502..1503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi1",
        ),
        line: 58,
        column: 24,
        span: 1504..1507,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 58,
        column: 26,
        span: 1508..1509,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 28,
        span: 1509..1511,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 58,
        column: 0,
        span: 1512..1514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 59,
        column: 13,
        span: 1521..1527,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 14,
        span: 1527..1528,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 59,
        column: 17,
        span: 1528..1531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 59,
        column: 22,
        span: 1532..1536,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
        column: 23,
        span: 1536..1537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 59,
        column: 26,
        span: 1537..1540,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 27,
        span: 1540..1541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 59,
        column: 28,
        span: 1541..1542,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 29,
        span: 1542..1543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 59,
        column: 31,
        span: 1544..1545,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 32,
        span: 1545..1546,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 33,
        span: 1546..1547,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 60,
        column: 0,
        span: 1552..1555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 61,
        column: 10,
        span: 1559..1565,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 11,
        span: 1565..1566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 61,
        column: 15,
        span: 1566..1570,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
        column: 16,
        span: 1570..1571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 61,
        column: 19,
        span: 1571..1574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 20,
        span: 1574..1575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 61,
        column: 21,
        span: 1575..1576,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 22,
        span: 1576..1577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 61,
        column: 25,
        span: 1578..1580,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 26,
        span: 1580..1581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 61,
        column: 29,
        span: 1582..1584,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 30,
        span: 1584..1585,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 61,
        column: 33,
        span: 1586..1588,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
        column: 35,
        span: 1588..1590,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 36,
        span: 1590..1591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 62,
        column: 10,
        span: 1595..1601,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 11,
        span: 1601..1602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 62,
        column: 15,
        span: 1602..1606,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 62,
        column: 16,
        span: 1606..1607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 62,
        column: 19,
        span: 1607..1610,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 20,
        span: 1610..1611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 62,
        column: 21,
        span: 1611..1612,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 62,
        column: 22,
        span: 1612..1613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 62,
        column: 25,
        span: 1614..1616,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 62,
        column: 26,
        span: 1616..1617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi1",
        ),
        line: 62,
        column: 30,
        span: 1618..1621,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 62,
        column: 32,
        span: 1622..1623,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 62,
        column: 34,
        span: 1623..1625,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 35,
        span: 1625..1626,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 62,
        column: 38,
        span: 1627..1629,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 62,
        column: 40,
        span: 1629..1631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 41,
        span: 1631..1632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 63,
        column: 10,
        span: 1636..1642,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 11,
        span: 1642..1643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 63,
        column: 15,
        span: 1643..1647,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 63,
        column: 16,
        span: 1647..1648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 63,
        column: 19,
        span: 1648..1651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 20,
        span: 1651..1652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 63,
        column: 21,
        span: 1652..1653,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 22,
        span: 1653..1654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 63,
        column: 25,
        span: 1655..1657,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 26,
        span: 1657..1658,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 63,
        column: 29,
        span: 1659..1661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 63,
        column: 31,
        span: 1662..1663,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 63,
        column: 33,
        span: 1664..1665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 63,
        column: 35,
        span: 1666..1667,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 63,
        column: 37,
        span: 1668..1669,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 63,
        column: 39,
        span: 1669..1671,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 40,
        span: 1671..1672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 64,
        column: 10,
        span: 1676..1682,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 11,
        span: 1682..1683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 64,
        column: 15,
        span: 1683..1687,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 64,
        column: 16,
        span: 1687..1688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 64,
        column: 19,
        span: 1688..1691,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 20,
        span: 1691..1692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 64,
        column: 21,
        span: 1692..1693,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 22,
        span: 1693..1694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi1",
        ),
        line: 64,
        column: 26,
        span: 1695..1698,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 27,
        span: 1698..1699,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 64,
        column: 30,
        span: 1700..1702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 64,
        column: 32,
        span: 1703..1704,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 64,
        column: 34,
        span: 1705..1706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 64,
        column: 36,
        span: 1707..1708,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 37,
        span: 1708..1709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 65,
        column: 10,
        span: 1713..1719,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 11,
        span: 1719..1720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 65,
        column: 15,
        span: 1720..1724,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 65,
        column: 16,
        span: 1724..1725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 65,
        column: 19,
        span: 1725..1728,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 20,
        span: 1728..1729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 65,
        column: 21,
        span: 1729..1730,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 22,
        span: 1730..1731,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 24,
        span: 1731..1733,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 25,
        span: 1733..1734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 65,
        column: 28,
        span: 1735..1737,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 29,
        span: 1737..1738,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 65,
        column: 32,
        span: 1739..1741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 65,
        column: 34,
        span: 1742..1743,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 35,
        span: 1743..1744,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 66,
        column: 0,
        span: 1747..1750,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 68,
        column: 8,
        span: 1754..1759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 68,
        column: 10,
        span: 1760..1761,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 68,
        column: 12,
        span: 1762..1763,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 0,
        span: 1763..1765,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 69,
        column: 6,
        span: 1768..1771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 69,
        column: 8,
        span: 1772..1773,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 9,
        span: 1773..1774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 69,
        column: 11,
        span: 1775..1776,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 69,
        column: 14,
        span: 1777..1779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 69,
        column: 19,
        span: 1780..1784,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 69,
        column: 20,
        span: 1784..1785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codes",
        ),
        line: 69,
        column: 25,
        span: 1785..1790,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 26,
        span: 1790..1791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 69,
        column: 27,
        span: 1791..1792,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 28,
        span: 1792..1793,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 69,
        column: 0,
        span: 1794..1796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 70,
        column: 6,
        span: 1801..1802,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 70,
        column: 8,
        span: 1803..1804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 70,
        column: 10,
        span: 1805..1806,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 70,
        column: 12,
        span: 1807..1808,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
        column: 0,
        span: 1808..1810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 71,
        column: 11,
        span: 1815..1821,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 12,
        span: 1821..1822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 71,
        column: 13,
        span: 1822..1823,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 16,
        span: 1824..1826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 71,
        column: 18,
        span: 1827..1828,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 71,
        column: 19,
        span: 1828..1829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 71,
        column: 20,
        span: 1829..1830,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 71,
        column: 21,
        span: 1830..1831,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 71,
        column: 25,
        span: 1832..1835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 71,
        column: 27,
        span: 1836..1837,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 30,
        span: 1838..1840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 71,
        column: 35,
        span: 1841..1845,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
        column: 36,
        span: 1845..1846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        line: 71,
        column: 42,
        span: 1846..1852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 43,
        span: 1852..1853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 71,
        column: 44,
        span: 1853..1854,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 45,
        span: 1854..1855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 71,
        column: 47,
        span: 1856..1857,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 48,
        span: 1857..1858,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 49,
        span: 1858..1859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 72,
        column: 11,
        span: 1864..1870,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 12,
        span: 1870..1871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 72,
        column: 16,
        span: 1871..1875,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 72,
        column: 17,
        span: 1875..1876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        line: 72,
        column: 26,
        span: 1876..1885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 27,
        span: 1885..1886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 72,
        column: 28,
        span: 1886..1887,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 29,
        span: 1887..1888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 72,
        column: 31,
        span: 1889..1890,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 32,
        span: 1890..1891,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 72,
        column: 35,
        span: 1892..1894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 72,
        column: 37,
        span: 1895..1896,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 38,
        span: 1896..1897,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 73,
        column: 0,
        span: 1900..1903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 74,
        column: 9,
        span: 1906..1912,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 10,
        span: 1912..1913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 74,
        column: 11,
        span: 1913..1914,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 74,
        column: 14,
        span: 1915..1917,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 74,
        column: 16,
        span: 1918..1919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 74,
        column: 17,
        span: 1919..1920,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 18,
        span: 1920..1921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 76,
        column: 4,
        span: 1925..1926,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 76,
        column: 6,
        span: 1927..1928,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
        column: 0,
        span: 1928..1930,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 77,
        column: 6,
        span: 1933..1936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 77,
        column: 8,
        span: 1937..1938,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
        column: 9,
        span: 1938..1939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 77,
        column: 11,
        span: 1940..1941,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 77,
        column: 14,
        span: 1942..1944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 77,
        column: 19,
        span: 1945..1949,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 77,
        column: 20,
        span: 1949..1950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codes",
        ),
        line: 77,
        column: 25,
        span: 1950..1955,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 26,
        span: 1955..1956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 77,
        column: 27,
        span: 1956..1957,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 28,
        span: 1957..1958,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 77,
        column: 0,
        span: 1959..1961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 78,
        column: 6,
        span: 1966..1967,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 78,
        column: 8,
        span: 1968..1969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 78,
        column: 10,
        span: 1970..1971,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 78,
        column: 12,
        span: 1972..1973,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
        column: 0,
        span: 1973..1975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 79,
        column: 11,
        span: 1980..1986,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 12,
        span: 1986..1987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 79,
        column: 13,
        span: 1987..1988,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 79,
        column: 16,
        span: 1989..1991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 79,
        column: 18,
        span: 1992..1993,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 79,
        column: 19,
        span: 1993..1994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 79,
        column: 20,
        span: 1994..1995,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 79,
        column: 21,
        span: 1995..1996,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 79,
        column: 25,
        span: 1997..2000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 79,
        column: 27,
        span: 2001..2002,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 79,
        column: 30,
        span: 2003..2005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 79,
        column: 35,
        span: 2006..2010,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 79,
        column: 36,
        span: 2010..2011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        line: 79,
        column: 42,
        span: 2011..2017,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 43,
        span: 2017..2018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 79,
        column: 44,
        span: 2018..2019,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 79,
        column: 45,
        span: 2019..2020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 79,
        column: 47,
        span: 2021..2022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 48,
        span: 2022..2023,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 49,
        span: 2023..2024,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 80,
        column: 0,
        span: 2028..2031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 81,
        column: 9,
        span: 2034..2040,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 10,
        span: 2040..2041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 81,
        column: 11,
        span: 2041..2042,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 81,
        column: 14,
        span: 2043..2045,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 81,
        column: 16,
        span: 2046..2047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 81,
        column: 17,
        span: 2047..2048,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 18,
        span: 2048..2049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 83,
        column: 4,
        span: 2053..2054,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 83,
        column: 6,
        span: 2055..2056,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 0,
        span: 2056..2058,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 84,
        column: 6,
        span: 2061..2064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 84,
        column: 8,
        span: 2065..2066,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 84,
        column: 11,
        span: 2067..2069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 84,
        column: 18,
        span: 2070..2076,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 84,
        column: 19,
        span: 2076..2077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 84,
        column: 25,
        span: 2077..2083,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 26,
        span: 2083..2084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 84,
        column: 27,
        span: 2084..2085,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 28,
        span: 2085..2086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 84,
        column: 33,
        span: 2087..2091,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 84,
        column: 34,
        span: 2091..2092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "charpattern",
        ),
        line: 84,
        column: 45,
        span: 2092..2103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 46,
        span: 2103..2104,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 84,
        column: 0,
        span: 2105..2107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 85,
        column: 6,
        span: 2112..2113,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 85,
        column: 8,
        span: 2114..2115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 85,
        column: 10,
        span: 2116..2117,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 85,
        column: 12,
        span: 2118..2119,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 0,
        span: 2119..2121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 86,
        column: 11,
        span: 2126..2132,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 12,
        span: 2132..2133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 86,
        column: 13,
        span: 2133..2134,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 86,
        column: 16,
        span: 2135..2137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 86,
        column: 21,
        span: 2138..2142,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 86,
        column: 22,
        span: 2142..2143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 86,
        column: 26,
        span: 2143..2147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 27,
        span: 2147..2148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 86,
        column: 28,
        span: 2148..2149,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 86,
        column: 29,
        span: 2149..2150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 86,
        column: 30,
        span: 2150..2151,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 86,
        column: 31,
        span: 2151..2152,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 32,
        span: 2152..2153,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 33,
        span: 2153..2154,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 87,
        column: 0,
        span: 2157..2160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 88,
        column: 9,
        span: 2163..2169,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 10,
        span: 2169..2170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 88,
        column: 11,
        span: 2170..2171,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 88,
        column: 14,
        span: 2172..2174,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 88,
        column: 16,
        span: 2175..2176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 88,
        column: 17,
        span: 2176..2177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 18,
        span: 2177..2178,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 90,
        column: 6,
        span: 2182..2185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 90,
        column: 8,
        span: 2186..2187,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 90,
        column: 10,
        span: 2188..2189,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
        column: 12,
        span: 2189..2191,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 13,
        span: 2191..2192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 90,
        column: 15,
        span: 2193..2194,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 90,
        column: 0,
        span: 2195..2197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 91,
        column: 11,
        span: 2202..2208,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 12,
        span: 2208..2209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 91,
        column: 16,
        span: 2209..2213,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 91,
        column: 17,
        span: 2213..2214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        line: 91,
        column: 23,
        span: 2214..2220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 24,
        span: 2220..2221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 91,
        column: 25,
        span: 2221..2222,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 26,
        span: 2222..2223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 91,
        column: 28,
        span: 2224..2225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 29,
        span: 2225..2226,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 91,
        column: 32,
        span: 2227..2229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 91,
        column: 37,
        span: 2230..2234,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 91,
        column: 38,
        span: 2234..2235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        line: 91,
        column: 44,
        span: 2235..2241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 45,
        span: 2241..2242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 91,
        column: 46,
        span: 2242..2243,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 47,
        span: 2243..2244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 91,
        column: 49,
        span: 2245..2246,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 91,
        column: 51,
        span: 2247..2248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 91,
        column: 53,
        span: 2249..2250,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 91,
        column: 55,
        span: 2251..2252,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 91,
        column: 57,
        span: 2252..2254,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 58,
        span: 2254..2255,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 91,
        column: 60,
        span: 2256..2257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 91,
        column: 61,
        span: 2257..2258,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 91,
        column: 63,
        span: 2259..2260,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 91,
        column: 65,
        span: 2260..2262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 66,
        span: 2262..2263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 67,
        span: 2263..2264,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 92,
        column: 0,
        span: 2267..2270,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 94,
        column: 0,
        span: 2272..2275,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 97,
        column: 3,
        span: 2278..2280,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 98,
        column: 8,
        span: 2318..2323,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 98,
        column: 17,
        span: 2324..2332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 98,
        column: 23,
        span: 2333..2338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 25,
        span: 2339..2340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 98,
        column: 26,
        span: 2340..2341,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 27,
        span: 2341..2342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 98,
        column: 29,
        span: 2343..2344,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 30,
        span: 2344..2345,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 99,
        column: 10,
        span: 2350..2355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 99,
        column: 12,
        span: 2356..2357,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
        column: 13,
        span: 2357..2358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 99,
        column: 15,
        span: 2359..2360,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 99,
        column: 17,
        span: 2361..2362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 99,
        column: 22,
        span: 2363..2367,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 99,
        column: 23,
        span: 2367..2368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 99,
        column: 26,
        span: 2368..2371,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 27,
        span: 2371..2372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 99,
        column: 28,
        span: 2372..2373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 29,
        span: 2373..2374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 100,
        column: 11,
        span: 2379..2385,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 12,
        span: 2385..2386,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 100,
        column: 15,
        span: 2386..2389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 100,
        column: 17,
        span: 2390..2391,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 100,
        column: 21,
        span: 2392..2395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 100,
        column: 23,
        span: 2396..2397,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 100,
        column: 26,
        span: 2398..2400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 100,
        column: 28,
        span: 2401..2402,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 29,
        span: 2402..2403,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 101,
        column: 0,
        span: 2406..2409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 102,
        column: 8,
        span: 2412..2417,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 9,
        span: 2417..2418,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\\xE3def\"",
        ),
        line: 102,
        column: 21,
        span: 2418..2430,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
        column: 22,
        span: 2430..2431,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 24,
        span: 2431..2433,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 25,
        span: 2433..2434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 103,
        column: 8,
        span: 2437..2442,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 9,
        span: 2442..2443,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"汉字\\x80\"",
        ),
        line: 103,
        column: 17,
        span: 2443..2451,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 103,
        column: 18,
        span: 2451..2452,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 103,
        column: 20,
        span: 2453..2454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 21,
        span: 2454..2455,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"汉字\"",
        ),
        line: 103,
        column: 25,
        span: 2455..2459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 26,
        span: 2459..2460,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 103,
        column: 28,
        span: 2461..2462,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 30,
        span: 2462..2464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 31,
        span: 2464..2465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 104,
        column: 8,
        span: 2468..2473,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 9,
        span: 2473..2474,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xF4\\x9F\\xBF\"",
        ),
        line: 104,
        column: 23,
        span: 2474..2488,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 104,
        column: 24,
        span: 2488..2489,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
        column: 26,
        span: 2489..2491,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 27,
        span: 2491..2492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 105,
        column: 8,
        span: 2495..2500,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 9,
        span: 2500..2501,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xF4\\x9F\\xBF\\xBF\"",
        ),
        line: 105,
        column: 27,
        span: 2501..2519,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 28,
        span: 2519..2520,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 30,
        span: 2520..2522,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 31,
        span: 2522..2523,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 106,
        column: 0,
        span: 2524..2527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 109,
        column: 11,
        span: 2552..2562,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 12,
        span: 2562..2563,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid UTF%-8 code\"",
        ),
        line: 109,
        column: 33,
        span: 2563..2584,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 109,
        column: 34,
        span: 2584..2585,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 110,
        column: 11,
        span: 2588..2596,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 13,
        span: 2597..2598,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 14,
        span: 2598..2599,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 111,
        column: 10,
        span: 2604..2609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 111,
        column: 12,
        span: 2610..2611,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 111,
        column: 14,
        span: 2612..2613,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab\\xff\"",
        ),
        line: 111,
        column: 23,
        span: 2614..2622,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 112,
        column: 8,
        span: 2627..2630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 112,
        column: 10,
        span: 2631..2632,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 112,
        column: 13,
        span: 2633..2635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 112,
        column: 18,
        span: 2636..2640,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 112,
        column: 19,
        span: 2640..2641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codes",
        ),
        line: 112,
        column: 24,
        span: 2641..2646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 25,
        span: 2646..2647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 112,
        column: 26,
        span: 2647..2648,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 27,
        span: 2648..2649,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 112,
        column: 30,
        span: 2650..2652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 112,
        column: 37,
        span: 2653..2659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 38,
        span: 2659..2660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 112,
        column: 39,
        span: 2660..2661,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 40,
        span: 2661..2662,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 112,
        column: 0,
        span: 2663..2666,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 113,
        column: 6,
        span: 2669..2672,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 7,
        span: 2672..2673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 117,
        column: 11,
        span: 2716..2726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 12,
        span: 2726..2727,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"position out of range\"",
        ),
        line: 117,
        column: 35,
        span: 2727..2750,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 36,
        span: 2750..2751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 117,
        column: 41,
        span: 2752..2756,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 117,
        column: 42,
        span: 2756..2757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        line: 117,
        column: 48,
        span: 2757..2763,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 49,
        span: 2763..2764,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        line: 117,
        column: 55,
        span: 2765..2770,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 56,
        span: 2770..2771,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 58,
        span: 2771..2773,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 59,
        span: 2773..2774,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 61,
        span: 2774..2776,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 62,
        span: 2776..2777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 118,
        column: 11,
        span: 2778..2788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 12,
        span: 2788..2789,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"position out of range\"",
        ),
        line: 118,
        column: 35,
        span: 2789..2812,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 36,
        span: 2812..2813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 118,
        column: 41,
        span: 2814..2818,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 118,
        column: 42,
        span: 2818..2819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        line: 118,
        column: 48,
        span: 2819..2825,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 49,
        span: 2825..2826,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        line: 118,
        column: 55,
        span: 2827..2832,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 56,
        span: 2832..2833,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 58,
        span: 2833..2835,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 59,
        span: 2835..2836,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 118,
        column: 61,
        span: 2837..2838,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 62,
        span: 2837..2839,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 63,
        span: 2839..2840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 119,
        column: 11,
        span: 2841..2851,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 12,
        span: 2851..2852,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"position out of range\"",
        ),
        line: 119,
        column: 35,
        span: 2852..2875,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 119,
        column: 36,
        span: 2875..2876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 119,
        column: 41,
        span: 2877..2881,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 119,
        column: 42,
        span: 2881..2882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        line: 119,
        column: 48,
        span: 2882..2888,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 119,
        column: 49,
        span: 2888..2889,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 119,
        column: 52,
        span: 2890..2892,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 119,
        column: 53,
        span: 2892..2893,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 55,
        span: 2893..2895,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 119,
        column: 56,
        span: 2895..2896,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 58,
        span: 2896..2898,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 59,
        span: 2898..2899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 120,
        column: 11,
        span: 2900..2910,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 12,
        span: 2910..2911,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"position out of range\"",
        ),
        line: 120,
        column: 35,
        span: 2911..2934,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 36,
        span: 2934..2935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 120,
        column: 41,
        span: 2936..2940,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 120,
        column: 42,
        span: 2940..2941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        line: 120,
        column: 48,
        span: 2941..2947,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 49,
        span: 2947..2948,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 120,
        column: 52,
        span: 2949..2951,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 53,
        span: 2951..2952,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 55,
        span: 2952..2954,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 56,
        span: 2954..2955,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 120,
        column: 58,
        span: 2956..2957,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 59,
        span: 2956..2958,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 60,
        span: 2958..2959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 121,
        column: 11,
        span: 2960..2970,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 12,
        span: 2970..2971,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"continuation byte\"",
        ),
        line: 121,
        column: 31,
        span: 2971..2990,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 32,
        span: 2990..2991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 121,
        column: 37,
        span: 2992..2996,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 121,
        column: 38,
        span: 2996..2997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        line: 121,
        column: 44,
        span: 2997..3003,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 45,
        span: 3003..3004,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"𦧺\"",
        ),
        line: 121,
        column: 49,
        span: 3005..3008,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 50,
        span: 3008..3009,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 52,
        span: 3009..3011,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 53,
        span: 3011..3012,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 55,
        span: 3012..3014,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 56,
        span: 3014..3015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 122,
        column: 11,
        span: 3016..3026,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 12,
        span: 3026..3027,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"continuation byte\"",
        ),
        line: 122,
        column: 31,
        span: 3027..3046,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 32,
        span: 3046..3047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 122,
        column: 37,
        span: 3048..3052,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 122,
        column: 38,
        span: 3052..3053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        line: 122,
        column: 44,
        span: 3053..3059,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 45,
        span: 3059..3060,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"𦧺\"",
        ),
        line: 122,
        column: 49,
        span: 3061..3064,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 50,
        span: 3064..3065,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 52,
        span: 3065..3067,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 53,
        span: 3067..3068,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 55,
        span: 3068..3070,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 56,
        span: 3070..3071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 123,
        column: 11,
        span: 3072..3082,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 12,
        span: 3082..3083,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"continuation byte\"",
        ),
        line: 123,
        column: 31,
        span: 3083..3102,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 32,
        span: 3102..3103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 123,
        column: 37,
        span: 3104..3108,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 123,
        column: 38,
        span: 3108..3109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        line: 123,
        column: 44,
        span: 3109..3115,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 45,
        span: 3115..3116,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\x80\"",
        ),
        line: 123,
        column: 52,
        span: 3117..3123,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 53,
        span: 3123..3124,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 123,
        column: 55,
        span: 3124..3126,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 56,
        span: 3126..3127,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 127,
        column: 6,
        span: 3131..3136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 127,
        column: 8,
        span: 3137..3138,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 127,
        column: 10,
        span: 3139..3140,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hello World\"",
        ),
        line: 127,
        column: 24,
        span: 3141..3154,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 128,
        column: 6,
        span: 3155..3160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 128,
        column: 8,
        span: 3161..3162,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 128,
        column: 10,
        span: 3163..3164,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 128,
        column: 12,
        span: 3165..3166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 128,
        column: 18,
        span: 3166..3172,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 128,
        column: 19,
        span: 3172..3173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 128,
        column: 23,
        span: 3173..3177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 24,
        span: 3177..3178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 128,
        column: 25,
        span: 3178..3179,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 26,
        span: 3179..3180,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 28,
        span: 3180..3182,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 29,
        span: 3182..3183,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 128,
        column: 31,
        span: 3184..3185,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 32,
        span: 3184..3186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 33,
        span: 3186..3187,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 128,
        column: 34,
        span: 3187..3188,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 129,
        column: 4,
        span: 3189..3192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 129,
        column: 6,
        span: 3193..3194,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 129,
        column: 8,
        span: 3195..3196,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
        column: 10,
        span: 3196..3198,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 11,
        span: 3198..3199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 129,
        column: 16,
        span: 3200..3204,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 129,
        column: 17,
        span: 3204..3205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 129,
        column: 20,
        span: 3205..3208,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 21,
        span: 3208..3209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 129,
        column: 22,
        span: 3209..3210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 23,
        span: 3210..3211,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 129,
        column: 26,
        span: 3212..3214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 129,
        column: 33,
        span: 3215..3221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 34,
        span: 3221..3222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 129,
        column: 35,
        span: 3222..3223,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 129,
        column: 36,
        span: 3223..3224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 129,
        column: 37,
        span: 3224..3225,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 129,
        column: 38,
        span: 3225..3226,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 129,
        column: 41,
        span: 3227..3229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 129,
        column: 48,
        span: 3230..3236,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 129,
        column: 49,
        span: 3236..3237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 129,
        column: 53,
        span: 3237..3241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 54,
        span: 3241..3242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 129,
        column: 55,
        span: 3242..3243,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 56,
        span: 3243..3244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 129,
        column: 58,
        span: 3245..3246,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 59,
        span: 3246..3247,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 60,
        span: 3247..3248,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 129,
        column: 0,
        span: 3249..3252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 130,
        column: 6,
        span: 3253..3258,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 7,
        span: 3258..3259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 130,
        column: 8,
        span: 3259..3260,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 9,
        span: 3260..3261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 130,
        column: 11,
        span: 3262..3263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 12,
        span: 3263..3264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 132,
        column: 6,
        span: 3266..3271,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 7,
        span: 3271..3272,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"汉字/漢字\"",
        ),
        line: 132,
        column: 14,
        span: 3272..3279,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 15,
        span: 3279..3280,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 132,
        column: 17,
        span: 3281..3282,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "27721",
                    after_decimal: "",
                },
            ),
        ),
        line: 132,
        column: 22,
        span: 3281..3287,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 23,
        span: 3287..3288,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23383",
                    after_decimal: "",
                },
            ),
        ),
        line: 132,
        column: 29,
        span: 3288..3294,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 30,
        span: 3294..3295,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "47",
                    after_decimal: "",
                },
            ),
        ),
        line: 132,
        column: 33,
        span: 3295..3298,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 34,
        span: 3298..3299,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "28450",
                    after_decimal: "",
                },
            ),
        ),
        line: 132,
        column: 40,
        span: 3299..3305,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 41,
        span: 3305..3306,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23383",
                    after_decimal: "",
                },
            ),
        ),
        line: 132,
        column: 47,
        span: 3306..3312,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 48,
        span: 3312..3313,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 132,
        column: 49,
        span: 3313..3314,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 50,
        span: 3314..3315,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 134,
        column: 0,
        span: 3317..3319,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 135,
        column: 8,
        span: 3322..3327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 135,
        column: 10,
        span: 3328..3329,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 135,
        column: 12,
        span: 3330..3331,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"áéí\\128\"",
        ),
        line: 135,
        column: 22,
        span: 3332..3341,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 136,
        column: 8,
        span: 3344..3349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 136,
        column: 10,
        span: 3350..3351,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 136,
        column: 12,
        span: 3352..3353,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 136,
        column: 14,
        span: 3354..3355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 136,
        column: 18,
        span: 3355..3359,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 136,
        column: 19,
        span: 3359..3360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        line: 136,
        column: 28,
        span: 3360..3369,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 29,
        span: 3369..3370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 136,
        column: 30,
        span: 3370..3371,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 31,
        span: 3371..3372,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 136,
        column: 32,
        span: 3371..3373,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 33,
        span: 3373..3374,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 136,
        column: 34,
        span: 3374..3375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 136,
        column: 35,
        span: 3375..3376,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 136,
        column: 37,
        span: 3377..3378,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 136,
        column: 39,
        span: 3378..3380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 40,
        span: 3380..3381,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 136,
        column: 41,
        span: 3381..3382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 137,
        column: 9,
        span: 3385..3391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 10,
        span: 3391..3392,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 137,
        column: 11,
        span: 3392..3393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 137,
        column: 12,
        span: 3393..3394,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 137,
        column: 15,
        span: 3395..3397,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 17,
        span: 3397..3399,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 137,
        column: 21,
        span: 3400..3403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 137,
        column: 23,
        span: 3404..3405,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 137,
        column: 24,
        span: 3405..3406,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 25,
        span: 3405..3407,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 137,
        column: 26,
        span: 3407..3408,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 137,
        column: 29,
        span: 3409..3411,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "225",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 33,
        span: 3411..3415,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 137,
        column: 37,
        span: 3416..3419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 137,
        column: 39,
        span: 3420..3421,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 137,
        column: 40,
        span: 3421..3422,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 41,
        span: 3421..3423,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 137,
        column: 42,
        span: 3423..3424,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 137,
        column: 45,
        span: 3425..3427,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "233",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 49,
        span: 3427..3431,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 137,
        column: 53,
        span: 3432..3435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 137,
        column: 55,
        span: 3436..3437,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 137,
        column: 56,
        span: 3437..3438,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 57,
        span: 3437..3439,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 137,
        column: 58,
        span: 3439..3440,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 137,
        column: 61,
        span: 3441..3443,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "237",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 65,
        span: 3443..3447,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 66,
        span: 3447..3448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 138,
        column: 13,
        span: 3451..3461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 14,
        span: 3461..3462,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid UTF%-8 code\"",
        ),
        line: 138,
        column: 35,
        span: 3462..3483,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 36,
        span: 3483..3484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 138,
        column: 41,
        span: 3485..3489,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 138,
        column: 42,
        span: 3489..3490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        line: 138,
        column: 51,
        span: 3490..3499,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 52,
        span: 3499..3500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 138,
        column: 54,
        span: 3501..3502,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 55,
        span: 3502..3503,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 57,
        span: 3503..3505,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 58,
        span: 3505..3506,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 138,
        column: 60,
        span: 3507..3508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 138,
        column: 61,
        span: 3508..3509,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 62,
        span: 3509..3510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 139,
        column: 13,
        span: 3513..3523,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 14,
        span: 3523..3524,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of range\"",
        ),
        line: 139,
        column: 28,
        span: 3524..3538,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 29,
        span: 3538..3539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 139,
        column: 34,
        span: 3540..3544,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 139,
        column: 35,
        span: 3544..3545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        line: 139,
        column: 44,
        span: 3545..3554,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 45,
        span: 3554..3555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 139,
        column: 47,
        span: 3556..3557,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 48,
        span: 3557..3558,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 139,
        column: 50,
        span: 3559..3560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 139,
        column: 51,
        span: 3560..3561,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 139,
        column: 53,
        span: 3562..3563,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
        column: 55,
        span: 3563..3565,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 56,
        span: 3565..3566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 140,
        column: 4,
        span: 3569..3570,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 140,
        column: 6,
        span: 3571..3572,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 140,
        column: 8,
        span: 3573..3574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 140,
        column: 12,
        span: 3574..3578,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 140,
        column: 13,
        span: 3578..3579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        line: 140,
        column: 22,
        span: 3579..3588,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 23,
        span: 3588..3589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 140,
        column: 24,
        span: 3589..3590,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 25,
        span: 3590..3591,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 27,
        span: 3591..3593,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 28,
        span: 3593..3594,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 30,
        span: 3594..3596,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 31,
        span: 3596..3597,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 140,
        column: 32,
        span: 3597..3598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 141,
        column: 9,
        span: 3601..3607,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 10,
        span: 3607..3608,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 141,
        column: 11,
        span: 3608..3609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 141,
        column: 12,
        span: 3609..3610,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
        column: 15,
        span: 3611..3613,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
        column: 17,
        span: 3613..3615,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 18,
        span: 3615..3616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 142,
        column: 13,
        span: 3619..3629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 14,
        span: 3629..3630,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of range\"",
        ),
        line: 142,
        column: 28,
        span: 3630..3644,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
        column: 29,
        span: 3644..3645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 142,
        column: 34,
        span: 3646..3650,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 142,
        column: 35,
        span: 3650..3651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        line: 142,
        column: 44,
        span: 3651..3660,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
        column: 45,
        span: 3660..3661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 142,
        column: 47,
        span: 3662..3663,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
        column: 48,
        span: 3663..3664,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 142,
        column: 50,
        span: 3665..3666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 51,
        span: 3666..3667,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 142,
        column: 52,
        span: 3667..3668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 142,
        column: 53,
        span: 3668..3669,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 142,
        column: 55,
        span: 3670..3671,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
        column: 57,
        span: 3671..3673,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 58,
        span: 3673..3674,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
        column: 59,
        span: 3674..3675,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
        column: 61,
        span: 3675..3677,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 62,
        span: 3677..3678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 143,
        column: 13,
        span: 3681..3691,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 14,
        span: 3691..3692,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of range\"",
        ),
        line: 143,
        column: 28,
        span: 3692..3706,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 29,
        span: 3706..3707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 143,
        column: 34,
        span: 3708..3712,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 143,
        column: 35,
        span: 3712..3713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        line: 143,
        column: 44,
        span: 3713..3722,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 45,
        span: 3722..3723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 143,
        column: 47,
        span: 3724..3725,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 48,
        span: 3725..3726,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
        column: 50,
        span: 3726..3728,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 51,
        span: 3728..3729,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 143,
        column: 53,
        span: 3730..3731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 143,
        column: 54,
        span: 3731..3732,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 143,
        column: 56,
        span: 3733..3734,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
        column: 58,
        span: 3734..3736,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 59,
        span: 3736..3737,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 144,
        column: 0,
        span: 3738..3741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 146,
        column: 7,
        span: 3743..3749,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 8,
        span: 3749..3750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 146,
        column: 12,
        span: 3750..3754,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 146,
        column: 13,
        span: 3754..3755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 146,
        column: 17,
        span: 3755..3759,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 18,
        span: 3759..3760,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 19,
        span: 3760..3761,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 146,
        column: 22,
        span: 3762..3764,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 146,
        column: 25,
        span: 3765..3767,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 26,
        span: 3767..3768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 147,
        column: 7,
        span: 3769..3775,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 8,
        span: 3775..3776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 147,
        column: 12,
        span: 3776..3780,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 147,
        column: 13,
        span: 3780..3781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 147,
        column: 17,
        span: 3781..3785,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 18,
        span: 3785..3786,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "97",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
        column: 20,
        span: 3785..3788,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 147,
        column: 21,
        span: 3788..3789,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "98",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
        column: 24,
        span: 3789..3792,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 147,
        column: 25,
        span: 3792..3793,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "99",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
        column: 28,
        span: 3793..3796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 29,
        span: 3796..3797,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 147,
        column: 32,
        span: 3798..3800,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        line: 147,
        column: 38,
        span: 3801..3806,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 39,
        span: 3806..3807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 149,
        column: 7,
        span: 3809..3815,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 8,
        span: 3815..3816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 149,
        column: 12,
        span: 3816..3820,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 149,
        column: 13,
        span: 3820..3821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        line: 149,
        column: 22,
        span: 3821..3830,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 23,
        span: 3830..3831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 149,
        column: 27,
        span: 3831..3835,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 149,
        column: 28,
        span: 3835..3836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 149,
        column: 32,
        span: 3836..3840,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 33,
        span: 3840..3841,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x10FFFF",
            ),
        ),
        line: 149,
        column: 41,
        span: 3840..3849,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 42,
        span: 3849..3850,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 43,
        span: 3850..3851,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 149,
        column: 46,
        span: 3852..3854,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x10FFFF",
            ),
        ),
        line: 149,
        column: 55,
        span: 3854..3863,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 56,
        span: 3863..3864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 151,
        column: 11,
        span: 3866..3876,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 12,
        span: 3876..3877,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"value out of range\"",
        ),
        line: 151,
        column: 32,
        span: 3877..3897,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
        column: 33,
        span: 3897..3898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 151,
        column: 38,
        span: 3899..3903,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 151,
        column: 39,
        span: 3903..3904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 151,
        column: 43,
        span: 3904..3908,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
        column: 44,
        span: 3908..3909,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x10FFFF",
            ),
        ),
        line: 151,
        column: 53,
        span: 3909..3918,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 151,
        column: 55,
        span: 3919..3920,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 151,
        column: 57,
        span: 3920..3922,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 58,
        span: 3922..3923,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 153,
        column: 6,
        span: 3925..3930,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 153,
        column: 15,
        span: 3931..3939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        line: 153,
        column: 23,
        span: 3940..3947,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 25,
        span: 3948..3949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 153,
        column: 26,
        span: 3949..3950,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 27,
        span: 3950..3951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 154,
        column: 13,
        span: 3954..3964,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 14,
        span: 3964..3965,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid UTF%-8 code\"",
        ),
        line: 154,
        column: 35,
        span: 3965..3986,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 36,
        span: 3986..3987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 154,
        column: 41,
        span: 3988..3992,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 154,
        column: 42,
        span: 3992..3993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "codepoint",
        ),
        line: 154,
        column: 51,
        span: 3993..4002,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 52,
        span: 4002..4003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 154,
        column: 54,
        span: 4004..4005,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 55,
        span: 4005..4006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 155,
        column: 9,
        span: 4009..4015,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 10,
        span: 4015..4016,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 155,
        column: 13,
        span: 4016..4019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 155,
        column: 18,
        span: 4020..4024,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 155,
        column: 19,
        span: 4024..4025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 155,
        column: 22,
        span: 4025..4028,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 23,
        span: 4028..4029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 155,
        column: 24,
        span: 4029..4030,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 25,
        span: 4030..4031,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 26,
        span: 4031..4032,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 156,
        column: 0,
        span: 4033..4036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        line: 159,
        column: 8,
        span: 4102..4109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 9,
        span: 4109..4110,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xF4\\x9F\\xBF\\xBF\"",
        ),
        line: 159,
        column: 27,
        span: 4110..4128,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 28,
        span: 4128..4129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        line: 162,
        column: 8,
        span: 4153..4160,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 9,
        span: 4160..4161,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xC0\\x80\"",
        ),
        line: 162,
        column: 19,
        span: 4161..4171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 20,
        span: 4171..4172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        line: 163,
        column: 8,
        span: 4190..4197,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 9,
        span: 4197..4198,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xC1\\xBF\"",
        ),
        line: 163,
        column: 19,
        span: 4198..4208,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 20,
        span: 4208..4209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        line: 164,
        column: 8,
        span: 4255..4262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 9,
        span: 4262..4263,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xE0\\x9F\\xBF\"",
        ),
        line: 164,
        column: 23,
        span: 4263..4277,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 24,
        span: 4277..4278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        line: 165,
        column: 8,
        span: 4322..4329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 9,
        span: 4329..4330,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xF0\\x8F\\xBF\\xBF\"",
        ),
        line: 165,
        column: 27,
        span: 4330..4348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 28,
        span: 4348..4349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        line: 169,
        column: 8,
        span: 4409..4416,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 9,
        span: 4416..4417,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\x80\"",
        ),
        line: 169,
        column: 15,
        span: 4417..4423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 16,
        span: 4423..4424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        line: 170,
        column: 8,
        span: 4447..4454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 9,
        span: 4454..4455,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xBF\"",
        ),
        line: 170,
        column: 15,
        span: 4455..4461,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 16,
        span: 4461..4462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        line: 171,
        column: 8,
        span: 4485..4492,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 9,
        span: 4492..4493,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xFE\"",
        ),
        line: 171,
        column: 15,
        span: 4493..4499,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 16,
        span: 4499..4500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "invalid",
        ),
        line: 172,
        column: 8,
        span: 4518..4525,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 9,
        span: 4525..4526,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xFF\"",
        ),
        line: 172,
        column: 15,
        span: 4526..4532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 16,
        span: 4532..4533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 176,
        column: 6,
        span: 4569..4574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 7,
        span: 4574..4575,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 176,
        column: 9,
        span: 4575..4577,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 10,
        span: 4577..4578,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 176,
        column: 12,
        span: 4579..4580,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 176,
        column: 13,
        span: 4580..4581,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 14,
        span: 4581..4582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 179,
        column: 2,
        span: 4637..4638,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 179,
        column: 4,
        span: 4639..4640,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0 \\x7F\\z\n     \\xC2\\x80 \\xDF\\xBF\\z\n     \\xE0\\xA0\\x80 \\xEF\\xBF\\xBF\\z\n     \\xF0\\x90\\x80\\x80  \\xF4\\x8F\\xBF\\xBF\"",
        ),
        line: 182,
        column: 41,
        span: 4641..4750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 183,
        column: 2,
        span: 4751..4752,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 183,
        column: 4,
        span: 4753..4754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 183,
        column: 11,
        span: 4755..4761,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 183,
        column: 12,
        span: 4761..4762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 183,
        column: 16,
        span: 4762..4766,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 17,
        span: 4766..4767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 183,
        column: 18,
        span: 4767..4768,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 183,
        column: 19,
        span: 4768..4769,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" \"",
        ),
        line: 183,
        column: 23,
        span: 4770..4773,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 183,
        column: 24,
        span: 4773..4774,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 183,
        column: 27,
        span: 4775..4777,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 28,
        span: 4777..4778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 184,
        column: 6,
        span: 4779..4784,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 7,
        span: 4784..4785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 184,
        column: 8,
        span: 4785..4786,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 9,
        span: 4786..4787,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 184,
        column: 11,
        span: 4788..4789,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 184,
        column: 12,
        span: 4788..4790,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 13,
        span: 4790..4791,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7F",
            ),
        ),
        line: 184,
        column: 17,
        span: 4790..4795,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 18,
        span: 4795..4796,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x80",
            ),
        ),
        line: 184,
        column: 23,
        span: 4796..4801,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 24,
        span: 4801..4802,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7FF",
            ),
        ),
        line: 184,
        column: 29,
        span: 4801..4807,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 30,
        span: 4807..4808,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x800",
            ),
        ),
        line: 184,
        column: 36,
        span: 4808..4814,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 37,
        span: 4814..4815,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFF",
            ),
        ),
        line: 184,
        column: 43,
        span: 4814..4821,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 44,
        span: 4821..4822,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x10000",
            ),
        ),
        line: 184,
        column: 52,
        span: 4822..4830,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 53,
        span: 4830..4831,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x10FFFF",
            ),
        ),
        line: 184,
        column: 61,
        span: 4830..4839,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 184,
        column: 62,
        span: 4839..4840,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 63,
        span: 4840..4841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 186,
        column: 2,
        span: 4843..4844,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 186,
        column: 4,
        span: 4845..4846,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"日本語a-4\\0éó\"",
        ),
        line: 186,
        column: 17,
        span: 4847..4859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 187,
        column: 6,
        span: 4860..4865,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 7,
        span: 4865..4866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 187,
        column: 8,
        span: 4866..4867,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 9,
        span: 4867..4868,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 187,
        column: 11,
        span: 4869..4870,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "26085",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 16,
        span: 4869..4875,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 17,
        span: 4875..4876,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "26412",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 23,
        span: 4876..4882,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 24,
        span: 4882..4883,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35486",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 30,
        span: 4883..4889,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 31,
        span: 4889..4890,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "97",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 34,
        span: 4890..4893,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 35,
        span: 4893..4894,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 38,
        span: 4894..4897,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 39,
        span: 4897..4898,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "52",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 42,
        span: 4898..4901,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 43,
        span: 4901..4902,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 45,
        span: 4902..4904,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 46,
        span: 4904..4905,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "233",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 50,
        span: 4905..4909,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 51,
        span: 4909..4910,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "243",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 55,
        span: 4910..4914,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 187,
        column: 56,
        span: 4914..4915,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 57,
        span: 4915..4916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 191,
        column: 6,
        span: 4947..4952,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 7,
        span: 4952..4953,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"𣲷𠜎𠱓𡁻𠵼ab𠺢\"",
        ),
        line: 191,
        column: 17,
        span: 4953..4963,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
        column: 18,
        span: 4963..4964,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 192,
        column: 8,
        span: 4971..4972,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x23CB7",
            ),
        ),
        line: 192,
        column: 15,
        span: 4971..4979,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 16,
        span: 4979..4980,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x2070E",
            ),
        ),
        line: 192,
        column: 24,
        span: 4980..4988,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 25,
        span: 4988..4989,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x20C53",
            ),
        ),
        line: 192,
        column: 33,
        span: 4989..4997,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 34,
        span: 4997..4998,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x2107B",
            ),
        ),
        line: 192,
        column: 42,
        span: 4998..5006,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 43,
        span: 5006..5007,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x20D7C",
            ),
        ),
        line: 192,
        column: 51,
        span: 5007..5015,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 52,
        span: 5015..5016,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x61",
            ),
        ),
        line: 192,
        column: 57,
        span: 5016..5021,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 58,
        span: 5021..5022,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x62",
            ),
        ),
        line: 192,
        column: 63,
        span: 5022..5027,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 64,
        span: 5027..5028,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x20EA2",
            ),
        ),
        line: 192,
        column: 72,
        span: 5028..5036,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 73,
        span: 5036..5037,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 192,
        column: 74,
        span: 5037..5038,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 75,
        span: 5038..5039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 194,
        column: 6,
        span: 5041..5046,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 7,
        span: 5046..5047,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"𨳊𩶘𦧺𨳒𥄫𤓓\\xF4\\x8F\\xBF\\xBF\"",
        ),
        line: 194,
        column: 31,
        span: 5047..5071,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 194,
        column: 32,
        span: 5071..5072,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 195,
        column: 8,
        span: 5079..5080,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x28CCA",
            ),
        ),
        line: 195,
        column: 15,
        span: 5079..5087,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 16,
        span: 5087..5088,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x29D98",
            ),
        ),
        line: 195,
        column: 24,
        span: 5088..5096,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 25,
        span: 5096..5097,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x269FA",
            ),
        ),
        line: 195,
        column: 33,
        span: 5097..5105,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 34,
        span: 5105..5106,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x28CD2",
            ),
        ),
        line: 195,
        column: 42,
        span: 5106..5114,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 43,
        span: 5114..5115,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x2512B",
            ),
        ),
        line: 195,
        column: 51,
        span: 5115..5123,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 52,
        span: 5123..5124,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x244D3",
            ),
        ),
        line: 195,
        column: 60,
        span: 5124..5132,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 61,
        span: 5132..5133,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x10ffff",
            ),
        ),
        line: 195,
        column: 70,
        span: 5133..5142,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 195,
        column: 71,
        span: 5142..5143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 72,
        span: 5143..5144,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 198,
        column: 6,
        span: 5147..5152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 198,
        column: 8,
        span: 5153..5154,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 198,
        column: 10,
        span: 5155..5156,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 198,
        column: 0,
        span: 5156..5158,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 199,
        column: 4,
        span: 5159..5162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 199,
        column: 6,
        span: 5163..5164,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
        column: 7,
        span: 5164..5165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 199,
        column: 9,
        span: 5166..5167,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 199,
        column: 12,
        span: 5168..5170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 199,
        column: 19,
        span: 5171..5177,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 199,
        column: 20,
        span: 5177..5178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 199,
        column: 26,
        span: 5178..5184,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 27,
        span: 5184..5185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 199,
        column: 28,
        span: 5185..5186,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
        column: 29,
        span: 5186..5187,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"()(\"",
        ),
        line: 199,
        column: 35,
        span: 5188..5193,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 199,
        column: 38,
        span: 5194..5196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 199,
        column: 43,
        span: 5197..5201,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 199,
        column: 44,
        span: 5201..5202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "charpattern",
        ),
        line: 199,
        column: 55,
        span: 5202..5213,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 199,
        column: 58,
        span: 5214..5216,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\")\"",
        ),
        line: 199,
        column: 62,
        span: 5217..5220,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 63,
        span: 5220..5221,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 199,
        column: 0,
        span: 5222..5224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 200,
        column: 4,
        span: 5227..5228,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 200,
        column: 6,
        span: 5229..5230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 200,
        column: 8,
        span: 5231..5232,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 200,
        column: 10,
        span: 5233..5234,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 200,
        column: 0,
        span: 5234..5236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 201,
        column: 9,
        span: 5239..5245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 10,
        span: 5245..5246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 201,
        column: 14,
        span: 5246..5250,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 201,
        column: 15,
        span: 5250..5251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        line: 201,
        column: 21,
        span: 5251..5257,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 22,
        span: 5257..5258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 201,
        column: 23,
        span: 5258..5259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 201,
        column: 24,
        span: 5259..5260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 201,
        column: 26,
        span: 5261..5262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 27,
        span: 5262..5263,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 201,
        column: 30,
        span: 5264..5266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 201,
        column: 32,
        span: 5267..5268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 33,
        span: 5268..5269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 202,
        column: 9,
        span: 5272..5278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 10,
        span: 5278..5279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 202,
        column: 14,
        span: 5279..5283,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 202,
        column: 15,
        span: 5283..5284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 202,
        column: 18,
        span: 5284..5287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 19,
        span: 5287..5288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 202,
        column: 20,
        span: 5288..5289,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 202,
        column: 21,
        span: 5289..5290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 202,
        column: 23,
        span: 5291..5292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 24,
        span: 5292..5293,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 202,
        column: 27,
        span: 5294..5296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 202,
        column: 32,
        span: 5297..5301,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 202,
        column: 33,
        span: 5301..5302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 202,
        column: 36,
        span: 5302..5305,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 37,
        span: 5305..5306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 202,
        column: 38,
        span: 5306..5307,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 39,
        span: 5307..5308,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 202,
        column: 41,
        span: 5309..5310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 202,
        column: 43,
        span: 5311..5312,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 202,
        column: 45,
        span: 5313..5314,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 202,
        column: 47,
        span: 5314..5316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 48,
        span: 5316..5317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 203,
        column: 9,
        span: 5320..5326,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 10,
        span: 5326..5327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 203,
        column: 14,
        span: 5327..5331,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 203,
        column: 15,
        span: 5331..5332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 203,
        column: 18,
        span: 5332..5335,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 19,
        span: 5335..5336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 203,
        column: 20,
        span: 5336..5337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 21,
        span: 5337..5338,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 203,
        column: 24,
        span: 5339..5341,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 203,
        column: 26,
        span: 5341..5343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 27,
        span: 5343..5344,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 204,
        column: 6,
        span: 5347..5350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 204,
        column: 8,
        span: 5351..5352,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 204,
        column: 10,
        span: 5353..5354,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 12,
        span: 5354..5356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 13,
        span: 5356..5357,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 204,
        column: 15,
        span: 5358..5359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 204,
        column: 16,
        span: 5359..5360,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 204,
        column: 18,
        span: 5361..5362,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 20,
        span: 5362..5364,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 204,
        column: 0,
        span: 5365..5367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 205,
        column: 11,
        span: 5372..5378,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 12,
        span: 5378..5379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "utf8",
        ),
        line: 205,
        column: 16,
        span: 5379..5383,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 205,
        column: 17,
        span: 5383..5384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "offset",
        ),
        line: 205,
        column: 23,
        span: 5384..5390,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 24,
        span: 5390..5391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 205,
        column: 25,
        span: 5391..5392,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
        column: 26,
        span: 5392..5393,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
        column: 28,
        span: 5393..5395,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
        column: 29,
        span: 5395..5396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 205,
        column: 31,
        span: 5397..5398,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 205,
        column: 33,
        span: 5399..5400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 205,
        column: 35,
        span: 5401..5402,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 205,
        column: 37,
        span: 5403..5404,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
        column: 39,
        span: 5404..5406,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 40,
        span: 5406..5407,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 205,
        column: 43,
        span: 5408..5410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 205,
        column: 45,
        span: 5411..5412,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 46,
        span: 5412..5413,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 206,
        column: 0,
        span: 5416..5419,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 207,
        column: 0,
        span: 5420..5423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 209,
        column: 6,
        span: 5425..5430,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ok'",
        ),
        line: 209,
        column: 10,
        span: 5430..5434,
    },
]
