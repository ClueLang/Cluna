---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/main.lua
---
[
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 6,
        column: 3,
        span: 203..205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 6,
        column: 9,
        span: 206..211,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 6,
        column: 14,
        span: 212..216,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 6,
        column: 21,
        span: 217..223,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 6,
        column: 0,
        span: 224..227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 12,
        column: 6,
        span: 317..322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 8,
        span: 323..324,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing stand-alone interpreter\"",
        ),
        line: 12,
        column: 41,
        span: 324..357,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 42,
        span: 357..358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 14,
        column: 7,
        span: 360..366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
        column: 8,
        span: 366..367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 14,
        column: 10,
        span: 367..369,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 14,
        column: 11,
        span: 369..370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        line: 14,
        column: 18,
        span: 370..377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
        column: 19,
        span: 377..378,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 20,
        span: 378..379,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 21,
        span: 379..380,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 16,
        column: 6,
        span: 416..421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 16,
        column: 10,
        span: 422..425,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 16,
        column: 12,
        span: 426..427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 16,
        column: 16,
        span: 428..431,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 16,
        column: 19,
        span: 432..434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ARG",
        ),
        line: 16,
        column: 0,
        span: 435..439,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 18,
        column: 6,
        span: 441..446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 18,
        column: 11,
        span: 447..451,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 18,
        column: 13,
        span: 452..453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 18,
        column: 16,
        span: 454..456,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 18,
        column: 17,
        span: 456..457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        line: 18,
        column: 24,
        span: 457..464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 25,
        span: 464..465,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 26,
        span: 465..466,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 19,
        column: 6,
        span: 467..472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        line: 19,
        column: 16,
        span: 473..482,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 19,
        column: 18,
        span: 483..484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 19,
        column: 21,
        span: 485..487,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 19,
        column: 22,
        span: 487..488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        line: 19,
        column: 29,
        span: 488..495,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 30,
        span: 495..496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 31,
        span: 496..497,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 20,
        column: 6,
        span: 498..503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 20,
        column: 10,
        span: 504..507,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 20,
        column: 12,
        span: 508..509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 20,
        column: 15,
        span: 510..512,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 20,
        column: 16,
        span: 512..513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        line: 20,
        column: 23,
        span: 513..520,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 24,
        span: 520..521,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 25,
        span: 521..522,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 22,
        column: 6,
        span: 524..529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 22,
        column: 0,
        span: 530..538,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 23,
        column: 0,
        span: 539..541,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 24,
        column: 8,
        span: 544..549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 24,
        column: 10,
        span: 550..551,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 12,
        span: 552..553,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 24,
        column: 0,
        span: 553..555,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 25,
        column: 8,
        span: 558..563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 25,
        column: 12,
        span: 564..567,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 25,
        column: 13,
        span: 567..568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 25,
        column: 14,
        span: 568..569,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 25,
        column: 15,
        span: 569..570,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 25,
        column: 18,
        span: 571..573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 25,
        column: 20,
        span: 574..575,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 25,
        column: 21,
        span: 575..576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 25,
        column: 22,
        span: 576..577,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 25,
        column: 23,
        span: 577..578,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 24,
        span: 577..579,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 25,
        column: 0,
        span: 580..583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 26,
        column: 11,
        span: 586..594,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 26,
        column: 13,
        span: 595..596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 26,
        column: 17,
        span: 597..600,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 26,
        column: 18,
        span: 600..601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 26,
        column: 19,
        span: 601..602,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 26,
        column: 20,
        span: 602..603,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 21,
        span: 602..604,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 26,
        column: 22,
        span: 604..605,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 27,
        column: 0,
        span: 606..609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 28,
        column: 6,
        span: 610..615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 7,
        span: 615..616,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"progname: \"",
        ),
        line: 28,
        column: 19,
        span: 616..628,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 28,
        column: 21,
        span: 628..630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 28,
        column: 29,
        span: 630..638,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 30,
        span: 638..639,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 30,
        column: 6,
        span: 641..646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 30,
        column: 15,
        span: 647..655,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 30,
        column: 17,
        span: 656..657,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 30,
        column: 26,
        span: 658..666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 28,
        span: 667..668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 30,
        column: 29,
        span: 668..669,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
        column: 30,
        span: 669..670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 30,
        column: 32,
        span: 671..672,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 33,
        span: 672..673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 31,
        column: 4,
        span: 676..677,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 31,
        column: 6,
        span: 678..679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 31,
        column: 8,
        span: 680..681,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 31,
        column: 11,
        span: 682..684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 31,
        column: 0,
        span: 685..689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 32,
        column: 5,
        span: 692..694,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 32,
        column: 6,
        span: 694..695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 32,
        column: 12,
        span: 695..701,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 13,
        span: 701..702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 32,
        column: 14,
        span: 702..703,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 15,
        span: 703..704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 33,
        column: 5,
        span: 707..709,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 33,
        column: 6,
        span: 709..710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 33,
        column: 11,
        span: 710..715,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 12,
        span: 715..716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 33,
        column: 13,
        span: 716..717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 14,
        span: 717..718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 34,
        column: 9,
        span: 721..727,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 10,
        span: 727..728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 34,
        column: 12,
        span: 728..730,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 34,
        column: 13,
        span: 730..731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 34,
        column: 18,
        span: 731..736,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 19,
        span: 736..737,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 20,
        span: 737..738,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 21,
        span: 738..739,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 35,
        column: 0,
        span: 740..743,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 37,
        column: 6,
        span: 745..750,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 37,
        column: 15,
        span: 751..759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 37,
        column: 25,
        span: 760..769,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 27,
        span: 770..771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 28,
        span: 771..772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 38,
        column: 5,
        span: 775..777,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 6,
        span: 777..778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 38,
        column: 11,
        span: 778..783,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 12,
        span: 783..784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 38,
        column: 15,
        span: 784..787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 16,
        span: 787..788,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 39,
        column: 8,
        span: 791..796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 39,
        column: 10,
        span: 797..798,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 39,
        column: 12,
        span: 799..800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 39,
        column: 15,
        span: 801..803,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
        column: 16,
        span: 803..804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 39,
        column: 20,
        span: 804..808,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 21,
        span: 808..809,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 39,
        column: 24,
        span: 809..812,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 25,
        span: 812..813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 40,
        column: 5,
        span: 816..818,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 40,
        column: 6,
        span: 818..819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 40,
        column: 11,
        span: 819..824,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 12,
        span: 824..825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 13,
        span: 825..826,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 40,
        column: 14,
        span: 826..827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 40,
        column: 19,
        span: 827..832,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 20,
        span: 832..833,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 21,
        span: 833..834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 41,
        column: 9,
        span: 837..843,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 10,
        span: 843..844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 41,
        column: 12,
        span: 844..846,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
        column: 13,
        span: 846..847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 41,
        column: 19,
        span: 847..853,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 20,
        span: 853..854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 41,
        column: 23,
        span: 854..857,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 24,
        span: 857..858,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 25,
        span: 858..859,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 42,
        column: 9,
        span: 862..868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 42,
        column: 0,
        span: 869..870,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 43,
        column: 0,
        span: 871..874,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 45,
        column: 6,
        span: 876..881,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 45,
        column: 15,
        span: 882..890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        line: 45,
        column: 28,
        span: 891..903,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 30,
        span: 904..905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 45,
        column: 31,
        span: 905..906,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 32,
        span: 906..907,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 46,
        column: 8,
        span: 910..915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 46,
        column: 10,
        span: 916..917,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 46,
        column: 12,
        span: 918..919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 46,
        column: 22,
        span: 920..929,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 23,
        span: 929..930,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 24,
        span: 930..931,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 47,
        column: 6,
        span: 934..937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 47,
        column: 11,
        span: 938..942,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 47,
        column: 14,
        span: 943..945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 47,
        column: 21,
        span: 946..952,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 47,
        column: 22,
        span: 952..953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 47,
        column: 28,
        span: 953..959,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 29,
        span: 959..960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 47,
        column: 30,
        span: 960..961,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 47,
        column: 31,
        span: 961..962,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".-\\n\"",
        ),
        line: 47,
        column: 38,
        span: 963..969,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 39,
        span: 969..970,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 47,
        column: 0,
        span: 971..973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 48,
        column: 11,
        span: 978..984,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 12,
        span: 984..985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 48,
        column: 18,
        span: 985..991,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 48,
        column: 19,
        span: 991..992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 48,
        column: 23,
        span: 992..996,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 24,
        span: 996..997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 48,
        column: 25,
        span: 997..998,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 26,
        span: 998..999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 48,
        column: 31,
        span: 1000..1004,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 32,
        span: 1004..1005,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 48,
        column: 34,
        span: 1005..1007,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 35,
        span: 1007..1008,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 48,
        column: 40,
        span: 1009..1013,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 41,
        span: 1013..1014,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 42,
        span: 1014..1015,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 49,
        column: 0,
        span: 1018..1021,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 50,
        column: 0,
        span: 1022..1025,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 52,
        column: 6,
        span: 1027..1032,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 52,
        column: 15,
        span: 1033..1041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 52,
        column: 24,
        span: 1042..1050,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 26,
        span: 1051..1052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 52,
        column: 27,
        span: 1052..1053,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 28,
        span: 1053..1054,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 53,
        column: 8,
        span: 1057..1062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 53,
        column: 10,
        span: 1063..1064,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 53,
        column: 12,
        span: 1065..1066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 53,
        column: 22,
        span: 1067..1076,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 23,
        span: 1076..1077,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 24,
        span: 1077..1078,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 54,
        column: 5,
        span: 1081..1083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 54,
        column: 7,
        span: 1084..1085,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 54,
        column: 10,
        span: 1086..1088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 54,
        column: 12,
        span: 1089..1090,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 54,
        column: 17,
        span: 1091..1095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 54,
        column: 23,
        span: 1096..1101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 24,
        span: 1101..1102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 54,
        column: 30,
        span: 1102..1108,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 54,
        column: 31,
        span: 1108..1109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 54,
        column: 37,
        span: 1109..1115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 38,
        span: 1115..1116,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'%s' - '%s'\\n\"",
        ),
        line: 54,
        column: 53,
        span: 1116..1131,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 54,
        span: 1131..1132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 54,
        column: 56,
        span: 1133..1134,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 57,
        span: 1134..1135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 54,
        column: 59,
        span: 1136..1137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 60,
        span: 1137..1138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 61,
        span: 1138..1139,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 54,
        column: 0,
        span: 1140..1143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 55,
        column: 9,
        span: 1146..1152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 10,
        span: 1152..1153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 55,
        column: 11,
        span: 1153..1154,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 55,
        column: 14,
        span: 1155..1157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 55,
        column: 16,
        span: 1158..1159,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 17,
        span: 1159..1160,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 56,
        column: 9,
        span: 1163..1169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 56,
        column: 0,
        span: 1170..1171,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 57,
        column: 0,
        span: 1172..1175,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 60,
        column: 6,
        span: 1178..1183,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 60,
        column: 15,
        span: 1184..1192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 60,
        column: 19,
        span: 1193..1196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 21,
        span: 1197..1198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 60,
        column: 22,
        span: 1198..1199,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 60,
        column: 23,
        span: 1199..1200,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 60,
        column: 27,
        span: 1201..1204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 28,
        span: 1204..1205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 61,
        column: 4,
        span: 1208..1209,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 61,
        column: 6,
        span: 1210..1211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 61,
        column: 13,
        span: 1212..1218,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
        column: 14,
        span: 1218..1219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 61,
        column: 18,
        span: 1219..1223,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 19,
        span: 1223..1224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 61,
        column: 20,
        span: 1224..1225,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 21,
        span: 1225..1226,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua\"",
        ),
        line: 61,
        column: 27,
        span: 1227..1232,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 28,
        span: 1232..1233,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        line: 61,
        column: 32,
        span: 1234..1237,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 61,
        column: 34,
        span: 1237..1239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 61,
        column: 42,
        span: 1239..1247,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 61,
        column: 44,
        span: 1247..1249,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        line: 61,
        column: 47,
        span: 1249..1252,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 48,
        span: 1252..1253,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
        column: 50,
        span: 1253..1255,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 51,
        span: 1255..1256,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 62,
        column: 8,
        span: 1259..1264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 62,
        column: 10,
        span: 1265..1266,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 62,
        column: 12,
        span: 1267..1268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 62,
        column: 19,
        span: 1269..1275,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 62,
        column: 20,
        span: 1275..1276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 62,
        column: 26,
        span: 1276..1282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 27,
        span: 1282..1283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 62,
        column: 28,
        span: 1283..1284,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 62,
        column: 29,
        span: 1284..1285,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 62,
        column: 33,
        span: 1286..1289,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 34,
        span: 1289..1290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 63,
        column: 9,
        span: 1293..1299,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 10,
        span: 1299..1300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 63,
        column: 12,
        span: 1300..1302,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 63,
        column: 13,
        span: 1302..1303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        line: 63,
        column: 20,
        span: 1303..1310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 21,
        span: 1310..1311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 63,
        column: 22,
        span: 1311..1312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 23,
        span: 1312..1313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 24,
        span: 1313..1314,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 64,
        column: 0,
        span: 1315..1318,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 66,
        column: 6,
        span: 1320..1325,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 66,
        column: 15,
        span: 1326..1334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 66,
        column: 21,
        span: 1335..1340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 23,
        span: 1341..1342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 66,
        column: 26,
        span: 1342..1345,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 27,
        span: 1345..1346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 66,
        column: 29,
        span: 1347..1348,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 30,
        span: 1348..1349,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 66,
        column: 34,
        span: 1350..1353,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 35,
        span: 1353..1354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 67,
        column: 4,
        span: 1357..1358,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 67,
        column: 6,
        span: 1359..1360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 67,
        column: 13,
        span: 1361..1367,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
        column: 14,
        span: 1367..1368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 67,
        column: 18,
        span: 1368..1372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 19,
        span: 1372..1373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 67,
        column: 20,
        span: 1373..1374,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 21,
        span: 1374..1375,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua\"",
        ),
        line: 67,
        column: 27,
        span: 1376..1381,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 28,
        span: 1381..1382,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        line: 67,
        column: 32,
        span: 1383..1386,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 67,
        column: 34,
        span: 1386..1388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 67,
        column: 42,
        span: 1388..1396,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 67,
        column: 44,
        span: 1396..1398,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        line: 67,
        column: 47,
        span: 1398..1401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 48,
        span: 1401..1402,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 67,
        column: 50,
        span: 1402..1404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 51,
        span: 1404..1405,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 68,
        column: 8,
        span: 1408..1413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 68,
        column: 10,
        span: 1414..1415,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 68,
        column: 12,
        span: 1416..1417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 68,
        column: 19,
        span: 1418..1424,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 68,
        column: 20,
        span: 1424..1425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 68,
        column: 26,
        span: 1425..1431,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 27,
        span: 1431..1432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 68,
        column: 28,
        span: 1432..1433,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 29,
        span: 1433..1434,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 68,
        column: 33,
        span: 1435..1438,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 34,
        span: 1438..1439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 69,
        column: 4,
        span: 1442..1443,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 69,
        column: 6,
        span: 1444..1445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 69,
        column: 13,
        span: 1446..1452,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 69,
        column: 14,
        span: 1452..1453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 69,
        column: 20,
        span: 1453..1459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 21,
        span: 1459..1460,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s 2> %s\"",
        ),
        line: 69,
        column: 31,
        span: 1460..1470,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 32,
        span: 1470..1471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 69,
        column: 34,
        span: 1472..1473,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 35,
        span: 1473..1474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 69,
        column: 39,
        span: 1475..1478,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 40,
        span: 1478..1479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 70,
        column: 9,
        span: 1511..1517,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 10,
        span: 1517..1518,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 70,
        column: 13,
        span: 1518..1521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 70,
        column: 16,
        span: 1522..1524,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 70,
        column: 17,
        span: 1524..1525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        line: 70,
        column: 24,
        span: 1525..1532,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 25,
        span: 1532..1533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 70,
        column: 26,
        span: 1533..1534,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 27,
        span: 1534..1535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 28,
        span: 1535..1536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 71,
        column: 9,
        span: 1539..1545,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 10,
        span: 1545..1546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 71,
        column: 16,
        span: 1546..1552,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
        column: 17,
        span: 1552..1553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 71,
        column: 21,
        span: 1553..1557,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 22,
        span: 1557..1558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 71,
        column: 31,
        span: 1558..1567,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 32,
        span: 1567..1568,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 33,
        span: 1568..1569,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 34,
        span: 1569..1570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 71,
        column: 38,
        span: 1571..1574,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 39,
        span: 1574..1575,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 41,
        span: 1575..1577,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 42,
        span: 1577..1578,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 71,
        column: 47,
        span: 1579..1583,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 48,
        span: 1583..1584,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 49,
        span: 1584..1585,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 72,
        column: 0,
        span: 1610..1613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 74,
        column: 4,
        span: 1615..1618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 5,
        span: 1618..1619,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua -v'",
        ),
        line: 74,
        column: 13,
        span: 1619..1627,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 14,
        span: 1627..1628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 76,
        column: 6,
        span: 1630..1635,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 7,
        span: 1635..1636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 76,
        column: 13,
        span: 1636..1642,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 76,
        column: 14,
        span: 1642..1643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 76,
        column: 20,
        span: 1643..1649,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 21,
        span: 1649..1650,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(temporary program file used in these tests: %s)\"",
        ),
        line: 76,
        column: 71,
        span: 1650..1700,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
        column: 72,
        span: 1700..1701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 76,
        column: 77,
        span: 1702..1706,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 78,
        span: 1706..1707,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 79,
        span: 1707..1708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 79,
        column: 9,
        span: 1737..1745,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 79,
        column: 11,
        span: 1745..1747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 80,
        column: 4,
        span: 1748..1751,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 5,
        span: 1751..1752,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua - < %s > %s'",
        ),
        line: 80,
        column: 22,
        span: 1752..1769,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 23,
        span: 1769..1770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 80,
        column: 28,
        span: 1771..1775,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 29,
        span: 1775..1776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 80,
        column: 33,
        span: 1777..1780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 34,
        span: 1780..1781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 81,
        column: 9,
        span: 1782..1790,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 10,
        span: 1790..1791,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 81,
        column: 12,
        span: 1791..1793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 13,
        span: 1793..1794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 83,
        column: 9,
        span: 1796..1804,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  print(\n1, a\n)\n]]",
        ),
        line: 87,
        column: 3,
        span: 1804..1825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 88,
        column: 4,
        span: 1826..1829,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 5,
        span: 1829..1830,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua - < %s > %s'",
        ),
        line: 88,
        column: 22,
        span: 1830..1847,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 88,
        column: 23,
        span: 1847..1848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 88,
        column: 28,
        span: 1849..1853,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 88,
        column: 29,
        span: 1853..1854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 88,
        column: 33,
        span: 1855..1858,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 34,
        span: 1858..1859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 89,
        column: 9,
        span: 1860..1868,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 10,
        span: 1868..1869,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\\tnil\\n\"",
        ),
        line: 89,
        column: 20,
        span: 1869..1879,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 21,
        span: 1879..1880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 91,
        column: 4,
        span: 1882..1885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 5,
        span: 1885..1886,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'echo \"print(10)\\nprint(2)\\n\" | lua > %s'",
        ),
        line: 91,
        column: 46,
        span: 1886..1927,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 47,
        span: 1927..1928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 91,
        column: 51,
        span: 1929..1932,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 52,
        span: 1932..1933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 92,
        column: 9,
        span: 1934..1942,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 10,
        span: 1942..1943,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\\n2\\n\"",
        ),
        line: 92,
        column: 19,
        span: 1943..1952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 20,
        span: 1952..1953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 96,
        column: 4,
        span: 1975..1978,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 5,
        span: 1978..1979,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'echo \"print(arg[1])\" | lua - -h > %s'",
        ),
        line: 96,
        column: 43,
        span: 1979..2017,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
        column: 44,
        span: 2017..2018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 96,
        column: 48,
        span: 2019..2022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 49,
        span: 2022..2023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 97,
        column: 9,
        span: 2024..2032,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 10,
        span: 2032..2033,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-h\\n\"",
        ),
        line: 97,
        column: 16,
        span: 2033..2039,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 17,
        span: 2039..2040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 101,
        column: 9,
        span: 2085..2093,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 10,
        span: 2093..2094,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(package.path)\"",
        ),
        line: 101,
        column: 31,
        span: 2094..2115,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 32,
        span: 2115..2116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 104,
        column: 4,
        span: 2135..2138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 5,
        span: 2138..2139,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT= LUA_PATH=x lua %s > %s'",
        ),
        line: 104,
        column: 43,
        span: 2139..2177,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 104,
        column: 44,
        span: 2177..2178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 104,
        column: 49,
        span: 2179..2183,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 104,
        column: 50,
        span: 2183..2184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 104,
        column: 54,
        span: 2185..2188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 55,
        span: 2188..2189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 105,
        column: 9,
        span: 2190..2198,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 10,
        span: 2198..2199,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\\n\"",
        ),
        line: 105,
        column: 15,
        span: 2199..2204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 16,
        span: 2204..2205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 108,
        column: 4,
        span: 2232..2235,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 5,
        span: 2235..2236,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT= LUA_PATH_5_3=y LUA_PATH=x lua %s > %s'",
        ),
        line: 108,
        column: 58,
        span: 2236..2289,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 108,
        column: 59,
        span: 2289..2290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 108,
        column: 64,
        span: 2291..2295,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 108,
        column: 65,
        span: 2295..2296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 108,
        column: 69,
        span: 2297..2300,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 70,
        span: 2300..2301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 109,
        column: 9,
        span: 2302..2310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 10,
        span: 2310..2311,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\\n\"",
        ),
        line: 109,
        column: 15,
        span: 2311..2316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 16,
        span: 2316..2317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 112,
        column: 9,
        span: 2337..2345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 10,
        span: 2345..2346,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(package.cpath)\"",
        ),
        line: 112,
        column: 32,
        span: 2346..2368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 33,
        span: 2368..2369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 113,
        column: 4,
        span: 2370..2373,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 5,
        span: 2373..2374,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT= LUA_CPATH=xuxu lua %s > %s'",
        ),
        line: 113,
        column: 47,
        span: 2374..2416,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 113,
        column: 48,
        span: 2416..2417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 113,
        column: 53,
        span: 2418..2422,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 113,
        column: 54,
        span: 2422..2423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 113,
        column: 58,
        span: 2424..2427,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 59,
        span: 2427..2428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 114,
        column: 9,
        span: 2429..2437,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 10,
        span: 2437..2438,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\\n\"",
        ),
        line: 114,
        column: 18,
        span: 2438..2446,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 19,
        span: 2446..2447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 117,
        column: 4,
        span: 2475..2478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 5,
        span: 2478..2479,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT= LUA_CPATH_5_3=yacc LUA_CPATH=x lua %s > %s'",
        ),
        line: 117,
        column: 63,
        span: 2479..2537,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 64,
        span: 2537..2538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 117,
        column: 69,
        span: 2539..2543,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 70,
        span: 2543..2544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 117,
        column: 74,
        span: 2545..2548,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 75,
        span: 2548..2549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 118,
        column: 9,
        span: 2550..2558,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 10,
        span: 2558..2559,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yacc\\n\"",
        ),
        line: 118,
        column: 18,
        span: 2559..2567,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 19,
        span: 2567..2568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 121,
        column: 9,
        span: 2619..2627,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 10,
        span: 2627..2628,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(X)\"",
        ),
        line: 121,
        column: 20,
        span: 2628..2638,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 21,
        span: 2638..2639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 122,
        column: 4,
        span: 2640..2643,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 5,
        span: 2643..2644,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT=\"X=tonumber(arg[1])\" lua %s 3.2 > %s'",
        ),
        line: 122,
        column: 56,
        span: 2644..2695,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 57,
        span: 2695..2696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 122,
        column: 62,
        span: 2697..2701,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 63,
        span: 2701..2702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 122,
        column: 67,
        span: 2703..2706,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 68,
        span: 2706..2707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 123,
        column: 9,
        span: 2708..2716,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 10,
        span: 2716..2717,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3.2\\n\"",
        ),
        line: 123,
        column: 17,
        span: 2717..2724,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 18,
        span: 2724..2725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 126,
        column: 9,
        span: 2752..2760,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 10,
        span: 2760..2761,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(X)\"",
        ),
        line: 126,
        column: 20,
        span: 2761..2771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 21,
        span: 2771..2772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 127,
        column: 4,
        span: 2773..2776,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 5,
        span: 2776..2777,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT_5_3=\"X=10\" LUA_INIT=\"X=3\" lua %s > %s'",
        ),
        line: 127,
        column: 57,
        span: 2777..2829,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
        column: 58,
        span: 2829..2830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 127,
        column: 63,
        span: 2831..2835,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
        column: 64,
        span: 2835..2836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 127,
        column: 68,
        span: 2837..2840,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 69,
        span: 2840..2841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 128,
        column: 9,
        span: 2842..2850,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 10,
        span: 2850..2851,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\\n\"",
        ),
        line: 128,
        column: 16,
        span: 2851..2857,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 17,
        span: 2857..2858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 131,
        column: 9,
        span: 2887..2895,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 10,
        span: 2895..2896,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x = x or 10; print(x); x = x + 1\"",
        ),
        line: 131,
        column: 44,
        span: 2896..2930,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 45,
        span: 2930..2931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 132,
        column: 4,
        span: 2932..2935,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 5,
        span: 2935..2936,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT=\"@%s\" lua %s > %s'",
        ),
        line: 132,
        column: 37,
        span: 2936..2968,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 38,
        span: 2968..2969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 132,
        column: 43,
        span: 2970..2974,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 44,
        span: 2974..2975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 132,
        column: 49,
        span: 2976..2980,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 50,
        span: 2980..2981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 132,
        column: 54,
        span: 2982..2985,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 55,
        span: 2985..2986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 133,
        column: 9,
        span: 2987..2995,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 10,
        span: 2995..2996,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\\n11\\n\"",
        ),
        line: 133,
        column: 20,
        span: 2996..3006,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 21,
        span: 3006..3007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 136,
        column: 6,
        span: 3036..3041,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 7,
        span: 3041..3042,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LUA_INIT:1: msg'",
        ),
        line: 136,
        column: 24,
        span: 3042..3059,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 25,
        span: 3059..3060,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT=\"error(\\'msg\\')\" lua'",
        ),
        line: 136,
        column: 61,
        span: 3061..3096,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 62,
        span: 3096..3097,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 139,
        column: 6,
        span: 3119..3124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        line: 139,
        column: 18,
        span: 3125..3136,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 19,
        span: 3136..3137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultCpath",
        ),
        line: 139,
        column: 0,
        span: 3138..3150,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 141,
        column: 0,
        span: 3152..3154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 142,
        column: 11,
        span: 3157..3165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 12,
        span: 3165..3166,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(package.path, package.cpath)\"",
        ),
        line: 142,
        column: 48,
        span: 3166..3202,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 49,
        span: 3202..3203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 143,
        column: 6,
        span: 3206..3209,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 7,
        span: 3209..3210,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT=\"error(10)\" LUA_PATH=xxx LUA_CPATH=xxx lua -E %s > %s'",
        ),
        line: 143,
        column: 75,
        span: 3210..3278,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 76,
        span: 3278..3279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 144,
        column: 12,
        span: 3287..3291,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 144,
        column: 13,
        span: 3291..3292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 144,
        column: 17,
        span: 3293..3296,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 18,
        span: 3296..3297,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 145,
        column: 8,
        span: 3300..3305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 145,
        column: 12,
        span: 3306..3309,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 145,
        column: 14,
        span: 3310..3311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 145,
        column: 24,
        span: 3312..3321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 25,
        span: 3321..3322,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 26,
        span: 3322..3323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        line: 146,
        column: 14,
        span: 3326..3337,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 146,
        column: 16,
        span: 3338..3339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 146,
        column: 23,
        span: 3340..3346,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 146,
        column: 24,
        span: 3346..3347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 146,
        column: 29,
        span: 3347..3352,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 30,
        span: 3352..3353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 146,
        column: 33,
        span: 3353..3356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 34,
        span: 3356..3357,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^(.-)\\t\"",
        ),
        line: 146,
        column: 44,
        span: 3358..3367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 45,
        span: 3367..3368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultCpath",
        ),
        line: 147,
        column: 15,
        span: 3371..3383,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 147,
        column: 17,
        span: 3384..3385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 147,
        column: 24,
        span: 3386..3392,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 147,
        column: 25,
        span: 3392..3393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 147,
        column: 30,
        span: 3393..3398,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 31,
        span: 3398..3399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 147,
        column: 34,
        span: 3399..3402,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 147,
        column: 35,
        span: 3402..3403,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\t(.-)$\"",
        ),
        line: 147,
        column: 45,
        span: 3404..3413,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 46,
        span: 3413..3414,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 148,
        column: 0,
        span: 3415..3418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 151,
        column: 7,
        span: 3445..3451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 8,
        span: 3451..3452,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 151,
        column: 11,
        span: 3452..3455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 151,
        column: 18,
        span: 3456..3462,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 151,
        column: 19,
        span: 3462..3463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 151,
        column: 23,
        span: 3463..3467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 24,
        span: 3467..3468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        line: 151,
        column: 35,
        span: 3468..3479,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
        column: 36,
        span: 3479..3480,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xxx\"",
        ),
        line: 151,
        column: 42,
        span: 3481..3486,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 43,
        span: 3486..3487,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 151,
        column: 0,
        span: 3488..3491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 152,
        column: 14,
        span: 3499..3505,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 152,
        column: 15,
        span: 3505..3506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 152,
        column: 19,
        span: 3506..3510,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 20,
        span: 3510..3511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        line: 152,
        column: 31,
        span: 3511..3522,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 32,
        span: 3522..3523,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua\"",
        ),
        line: 152,
        column: 38,
        span: 3524..3529,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 39,
        span: 3529..3530,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 152,
        column: 0,
        span: 3531..3534,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 153,
        column: 11,
        span: 3542..3545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 153,
        column: 18,
        span: 3546..3552,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 153,
        column: 19,
        span: 3552..3553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 153,
        column: 23,
        span: 3553..3557,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 24,
        span: 3557..3558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultCpath",
        ),
        line: 153,
        column: 36,
        span: 3558..3570,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 37,
        span: 3570..3571,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xxx\"",
        ),
        line: 153,
        column: 43,
        span: 3572..3577,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 44,
        span: 3577..3578,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 153,
        column: 0,
        span: 3579..3582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 154,
        column: 14,
        span: 3590..3596,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 154,
        column: 15,
        span: 3596..3597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 154,
        column: 19,
        span: 3597..3601,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 20,
        span: 3601..3602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultCpath",
        ),
        line: 154,
        column: 32,
        span: 3602..3614,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 33,
        span: 3614..3615,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua\"",
        ),
        line: 154,
        column: 39,
        span: 3616..3621,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 40,
        span: 3621..3622,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 41,
        span: 3622..3623,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 158,
        column: 6,
        span: 3670..3675,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 158,
        column: 15,
        span: 3676..3684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        line: 158,
        column: 23,
        span: 3685..3692,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 25,
        span: 3693..3694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 158,
        column: 26,
        span: 3694..3695,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 27,
        span: 3695..3696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 159,
        column: 11,
        span: 3699..3707,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 12,
        span: 3707..3708,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(package.path)\"",
        ),
        line: 159,
        column: 33,
        span: 3708..3729,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 34,
        span: 3729..3730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 160,
        column: 6,
        span: 3733..3736,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 7,
        span: 3736..3737,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_PATH=\"%s\" lua %s > %s'",
        ),
        line: 160,
        column: 38,
        span: 3737..3768,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 160,
        column: 39,
        span: 3768..3769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 160,
        column: 41,
        span: 3770..3771,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 160,
        column: 42,
        span: 3771..3772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 160,
        column: 47,
        span: 3773..3777,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 160,
        column: 48,
        span: 3777..3778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 160,
        column: 52,
        span: 3779..3782,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 53,
        span: 3782..3783,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 161,
        column: 8,
        span: 3786..3791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 161,
        column: 17,
        span: 3792..3800,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 161,
        column: 19,
        span: 3801..3802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 161,
        column: 29,
        span: 3803..3812,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 30,
        span: 3812..3813,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 31,
        span: 3813..3814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 162,
        column: 11,
        span: 3817..3825,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 162,
        column: 13,
        span: 3826..3827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 162,
        column: 20,
        span: 3828..3834,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 162,
        column: 21,
        span: 3834..3835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 162,
        column: 24,
        span: 3835..3838,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 25,
        span: 3838..3839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 162,
        column: 33,
        span: 3839..3847,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 162,
        column: 34,
        span: 3847..3848,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 162,
        column: 36,
        span: 3848..3850,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 162,
        column: 37,
        span: 3850..3851,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 162,
        column: 39,
        span: 3852..3853,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 162,
        column: 40,
        span: 3852..3854,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 41,
        span: 3854..3855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 163,
        column: 9,
        span: 3885..3891,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 10,
        span: 3891..3892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 163,
        column: 16,
        span: 3892..3898,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 163,
        column: 17,
        span: 3898..3899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 163,
        column: 21,
        span: 3899..3903,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 22,
        span: 3903..3904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 163,
        column: 23,
        span: 3904..3905,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 163,
        column: 24,
        span: 3905..3906,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";;\"",
        ),
        line: 163,
        column: 29,
        span: 3907..3911,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 163,
        column: 30,
        span: 3911..3912,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 163,
        column: 34,
        span: 3913..3916,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 163,
        column: 36,
        span: 3916..3918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        line: 163,
        column: 47,
        span: 3918..3929,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 163,
        column: 49,
        span: 3929..3931,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 163,
        column: 52,
        span: 3931..3934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 53,
        span: 3934..3935,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 163,
        column: 56,
        span: 3936..3938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 163,
        column: 65,
        span: 3939..3947,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 66,
        span: 3947..3948,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 164,
        column: 0,
        span: 3949..3952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        line: 166,
        column: 8,
        span: 3954..3961,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 9,
        span: 3961..3962,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 166,
        column: 12,
        span: 3962..3965,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 13,
        span: 3965..3966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        line: 167,
        column: 8,
        span: 3967..3974,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 9,
        span: 3974..3975,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";;\"",
        ),
        line: 167,
        column: 13,
        span: 3975..3979,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 14,
        span: 3979..3980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        line: 168,
        column: 8,
        span: 3981..3988,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 9,
        span: 3988..3989,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";;;\"",
        ),
        line: 168,
        column: 14,
        span: 3989..3994,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 15,
        span: 3994..3995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        line: 169,
        column: 8,
        span: 3996..4003,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 9,
        span: 4003..4004,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";;;;\"",
        ),
        line: 169,
        column: 15,
        span: 4004..4010,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 16,
        span: 4010..4011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        line: 170,
        column: 8,
        span: 4012..4019,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 9,
        span: 4019..4020,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";;;;;\"",
        ),
        line: 170,
        column: 16,
        span: 4020..4027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 17,
        span: 4027..4028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        line: 171,
        column: 8,
        span: 4029..4036,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 9,
        span: 4036..4037,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";;a;;;bc\"",
        ),
        line: 171,
        column: 19,
        span: 4037..4047,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 20,
        span: 4047..4048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 175,
        column: 9,
        span: 4086..4094,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 10,
        span: 4094..4095,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(1); a=2; return {x=15}\"",
        ),
        line: 175,
        column: 40,
        span: 4095..4125,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 41,
        span: 4125..4126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 176,
        column: 9,
        span: 4127..4135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 10,
        span: 4135..4136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 11,
        span: 4136..4137,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(a); print(_G['%s'].x)\"",
        ),
        line: 176,
        column: 40,
        span: 4137..4166,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 41,
        span: 4166..4167,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 176,
        column: 42,
        span: 4167..4168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 176,
        column: 48,
        span: 4168..4174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 49,
        span: 4174..4175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 176,
        column: 53,
        span: 4175..4179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 54,
        span: 4179..4180,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 55,
        span: 4180..4181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        line: 176,
        column: 65,
        span: 4182..4191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 66,
        span: 4191..4192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 177,
        column: 4,
        span: 4193..4196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 5,
        span: 4196..4197,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_PATH=\"?;;\" lua -l %s -l%s -lstring -l io %s > %s'",
        ),
        line: 177,
        column: 63,
        span: 4197..4255,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 64,
        span: 4255..4256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 177,
        column: 69,
        span: 4257..4261,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 70,
        span: 4261..4262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        line: 177,
        column: 80,
        span: 4263..4272,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 81,
        span: 4272..4273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        line: 177,
        column: 91,
        span: 4274..4283,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 92,
        span: 4283..4284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 177,
        column: 96,
        span: 4285..4288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 97,
        span: 4288..4289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 178,
        column: 9,
        span: 4290..4298,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 10,
        span: 4298..4299,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\\n2\\n15\\n2\\n15\\n\"",
        ),
        line: 178,
        column: 29,
        span: 4299..4318,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 30,
        span: 4318..4319,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 181,
        column: 6,
        span: 4341..4346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 181,
        column: 8,
        span: 4347..4348,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 181,
        column: 10,
        span: 4349..4350,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  assert(#arg == 3 and arg[1] == 'a' and\n         arg[2] == 'b' and arg[3] == 'c')\n  assert(arg[-1] == '--' and arg[-2] == \"-e \" and arg[-3] == '%s')\n  assert(arg[4] == nil and arg[-4] == nil)\n  local a, b, c = ...\n  assert(... == 'a' and a == 'a' and b == 'b' and c == 'c')\n]]",
        ),
        line: 188,
        column: 3,
        span: 4351..4631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 189,
        column: 2,
        span: 4632..4633,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 189,
        column: 4,
        span: 4634..4635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 189,
        column: 11,
        span: 4636..4642,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 189,
        column: 12,
        span: 4642..4643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 189,
        column: 18,
        span: 4643..4649,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 19,
        span: 4649..4650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 189,
        column: 20,
        span: 4650..4651,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 189,
        column: 21,
        span: 4651..4652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 189,
        column: 30,
        span: 4653..4661,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 31,
        span: 4661..4662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 190,
        column: 9,
        span: 4663..4671,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 10,
        span: 4671..4672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 190,
        column: 11,
        span: 4672..4673,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 12,
        span: 4673..4674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 191,
        column: 4,
        span: 4675..4678,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 5,
        span: 4678..4679,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua \"-e \" -- %s a b c'",
        ),
        line: 191,
        column: 28,
        span: 4679..4702,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
        column: 29,
        span: 4702..4703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 191,
        column: 34,
        span: 4704..4708,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 35,
        span: 4708..4709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 194,
        column: 9,
        span: 4784..4792,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(arg)\"",
        ),
        line: 194,
        column: 22,
        span: 4792..4805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 195,
        column: 9,
        span: 4806..4814,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 10,
        span: 4814..4815,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(arg)\"",
        ),
        line: 195,
        column: 23,
        span: 4815..4828,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 24,
        span: 4828..4829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        line: 195,
        column: 34,
        span: 4830..4839,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 35,
        span: 4839..4840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 196,
        column: 4,
        span: 4841..4844,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 5,
        span: 4844..4845,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_PATH=\"?;;\" lua -l%s - < %s'",
        ),
        line: 196,
        column: 41,
        span: 4845..4881,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 196,
        column: 42,
        span: 4881..4882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 196,
        column: 47,
        span: 4883..4887,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 196,
        column: 48,
        span: 4887..4888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        line: 196,
        column: 58,
        span: 4889..4898,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 59,
        span: 4898..4899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 199,
        column: 4,
        span: 4936..4939,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 5,
        span: 4939..4940,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'echo \"print(...)\" | lua -e \"arg[1] = 100\" - > %s'",
        ),
        line: 199,
        column: 55,
        span: 4940..4990,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
        column: 56,
        span: 4990..4991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 199,
        column: 60,
        span: 4992..4995,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 61,
        span: 4995..4996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 200,
        column: 9,
        span: 4997..5005,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 10,
        span: 5005..5006,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"100\\n\"",
        ),
        line: 200,
        column: 17,
        span: 5006..5013,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 18,
        span: 5013..5014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 201,
        column: 6,
        span: 5015..5020,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 7,
        span: 5020..5021,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'arg' is not a table\"",
        ),
        line: 201,
        column: 29,
        span: 5021..5043,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 201,
        column: 30,
        span: 5043..5044,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'echo \"\" | lua -e \"arg = 1\" -'",
        ),
        line: 201,
        column: 61,
        span: 5045..5075,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 62,
        span: 5075..5076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 204,
        column: 4,
        span: 5103..5106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 5,
        span: 5106..5107,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'echo 10 | lua -e \"print=nil\" -i > /dev/null 2> %s'",
        ),
        line: 204,
        column: 56,
        span: 5107..5158,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 57,
        span: 5158..5159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 204,
        column: 61,
        span: 5160..5163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 62,
        span: 5163..5164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 205,
        column: 7,
        span: 5165..5171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 8,
        span: 5171..5172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 205,
        column: 14,
        span: 5172..5178,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 205,
        column: 15,
        span: 5178..5179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 205,
        column: 19,
        span: 5179..5183,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 20,
        span: 5183..5184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 205,
        column: 29,
        span: 5184..5193,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 30,
        span: 5193..5194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 31,
        span: 5194..5195,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
        column: 32,
        span: 5195..5196,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error calling 'print'\"",
        ),
        line: 205,
        column: 56,
        span: 5197..5220,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 57,
        span: 5220..5221,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 58,
        span: 5221..5222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 208,
        column: 4,
        span: 5246..5249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 5,
        span: 5249..5250,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'echo \"io.stderr:write(1000)\\ncont\" | lua -e \"require\\'debug\\'.debug()\" 2> %s'",
        ),
        line: 208,
        column: 83,
        span: 5250..5328,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 208,
        column: 84,
        span: 5328..5329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 208,
        column: 88,
        span: 5330..5333,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 89,
        span: 5333..5334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 209,
        column: 9,
        span: 5335..5343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 10,
        span: 5343..5344,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua_debug> 1000lua_debug> \"",
        ),
        line: 209,
        column: 38,
        span: 5344..5372,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 39,
        span: 5372..5373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 212,
        column: 9,
        span: 5398..5406,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[print(({...})[30])]]",
        ),
        line: 212,
        column: 31,
        span: 5406..5428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 213,
        column: 4,
        span: 5429..5432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 5,
        span: 5432..5433,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s %s > %s'",
        ),
        line: 213,
        column: 21,
        span: 5433..5449,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 22,
        span: 5449..5450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 213,
        column: 27,
        span: 5451..5455,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 28,
        span: 5455..5456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 213,
        column: 35,
        span: 5457..5463,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 213,
        column: 36,
        span: 5463..5464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 213,
        column: 39,
        span: 5464..5467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 40,
        span: 5467..5468,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" a\"",
        ),
        line: 213,
        column: 44,
        span: 5468..5472,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 45,
        span: 5472..5473,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 213,
        column: 48,
        span: 5473..5476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 49,
        span: 5476..5477,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 50,
        span: 5477..5478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 213,
        column: 54,
        span: 5479..5482,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 55,
        span: 5482..5483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 214,
        column: 9,
        span: 5484..5492,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 10,
        span: 5492..5493,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\\n\"",
        ),
        line: 214,
        column: 15,
        span: 5493..5498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 16,
        span: 5498..5499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 216,
        column: 4,
        span: 5501..5504,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 5,
        span: 5504..5505,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua \"-eprint(1)\" -ea=3 -e \"print(a)\" > %s]]",
        ),
        line: 216,
        column: 50,
        span: 5505..5550,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
        column: 51,
        span: 5550..5551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 216,
        column: 55,
        span: 5552..5555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 56,
        span: 5555..5556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 217,
        column: 9,
        span: 5557..5565,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 10,
        span: 5565..5566,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\\n3\\n\"",
        ),
        line: 217,
        column: 18,
        span: 5566..5574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 19,
        span: 5574..5575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 220,
        column: 9,
        span: 5601..5609,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n(6*2-6) -- ===\na =\n10\nprint(a)\na]]",
        ),
        line: 225,
        column: 4,
        span: 5609..5646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 226,
        column: 4,
        span: 5647..5650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 5,
        span: 5650..5651,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]",
        ),
        line: 226,
        column: 52,
        span: 5651..5698,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
        column: 53,
        span: 5698..5699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 226,
        column: 58,
        span: 5700..5704,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
        column: 59,
        span: 5704..5705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 226,
        column: 63,
        span: 5706..5709,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 64,
        span: 5709..5710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        line: 227,
        column: 13,
        span: 5711..5723,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 14,
        span: 5723..5724,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"6\\n10\\n10\\n\\n\"",
        ),
        line: 227,
        column: 29,
        span: 5724..5739,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 30,
        span: 5739..5740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 229,
        column: 9,
        span: 5742..5750,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
        column: 10,
        span: 5750..5751,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = [[b\\nc\\nd\\ne]]\\n=a\"",
        ),
        line: 229,
        column: 34,
        span: 5751..5775,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
        column: 35,
        span: 5775..5776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 230,
        column: 4,
        span: 5777..5780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 5,
        span: 5780..5781,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]",
        ),
        line: 230,
        column: 52,
        span: 5781..5828,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
        column: 53,
        span: 5828..5829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 230,
        column: 58,
        span: 5830..5834,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
        column: 59,
        span: 5834..5835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 230,
        column: 63,
        span: 5836..5839,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 64,
        span: 5839..5840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        line: 231,
        column: 13,
        span: 5841..5853,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 14,
        span: 5853..5854,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\\nc\\nd\\ne\\n\\n\"",
        ),
        line: 231,
        column: 30,
        span: 5854..5870,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 31,
        span: 5870..5871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        line: 233,
        column: 7,
        span: 5873..5879,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 233,
        column: 9,
        span: 5880..5881,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 233,
        column: 15,
        span: 5882..5887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 234,
        column: 9,
        span: 5888..5896,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ --\na = 2\n]]",
        ),
        line: 236,
        column: 3,
        span: 5896..5910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 237,
        column: 4,
        span: 5911..5914,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 5,
        span: 5914..5915,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua \"-e_PROMPT='%s'\" -i < %s > %s]]",
        ),
        line: 237,
        column: 42,
        span: 5915..5952,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 43,
        span: 5952..5953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        line: 237,
        column: 50,
        span: 5954..5960,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 51,
        span: 5960..5961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 237,
        column: 56,
        span: 5962..5966,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 57,
        span: 5966..5967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 237,
        column: 61,
        span: 5968..5971,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 62,
        span: 5971..5972,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 238,
        column: 6,
        span: 5973..5978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 238,
        column: 8,
        span: 5979..5980,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 238,
        column: 10,
        span: 5981..5982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 238,
        column: 20,
        span: 5983..5992,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 21,
        span: 5992..5993,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 22,
        span: 5993..5994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 239,
        column: 7,
        span: 5995..6001,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 8,
        span: 6001..6002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 239,
        column: 14,
        span: 6002..6008,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 239,
        column: 15,
        span: 6008..6009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 239,
        column: 19,
        span: 6009..6013,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 20,
        span: 6013..6014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 239,
        column: 21,
        span: 6014..6015,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 239,
        column: 22,
        span: 6015..6016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        line: 239,
        column: 29,
        span: 6017..6023,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 239,
        column: 32,
        span: 6024..6026,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".*\"",
        ),
        line: 239,
        column: 37,
        span: 6027..6031,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 239,
        column: 40,
        span: 6032..6034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        line: 239,
        column: 47,
        span: 6035..6041,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 239,
        column: 50,
        span: 6042..6044,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".*\"",
        ),
        line: 239,
        column: 55,
        span: 6045..6049,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 239,
        column: 58,
        span: 6050..6052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        line: 239,
        column: 65,
        span: 6053..6059,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 66,
        span: 6059..6060,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 67,
        span: 6060..6061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 242,
        column: 9,
        span: 6089..6097,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\ndebug = require \"debug\"\nm = {x=0}\nsetmetatable(m, {__tostring = function(x)\n  return tostring(debug.getinfo(4).currentline + x.x)\nend})\nerror(m)\n]]",
        ),
        line: 249,
        column: 3,
        span: 6097..6247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 250,
        column: 6,
        span: 6248..6253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 7,
        span: 6253..6254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 250,
        column: 15,
        span: 6254..6262,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 250,
        column: 18,
        span: 6263..6265,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\": 6\\n\"",
        ),
        line: 250,
        column: 26,
        span: 6266..6273,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 250,
        column: 27,
        span: 6273..6274,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua %s]]",
        ),
        line: 250,
        column: 38,
        span: 6275..6285,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 250,
        column: 39,
        span: 6285..6286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 250,
        column: 44,
        span: 6287..6291,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 45,
        span: 6291..6292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 252,
        column: 9,
        span: 6294..6302,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 10,
        span: 6302..6303,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error{}\"",
        ),
        line: 252,
        column: 19,
        span: 6303..6312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 20,
        span: 6312..6313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 253,
        column: 6,
        span: 6314..6319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 7,
        span: 6319..6320,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error object is a table value\"",
        ),
        line: 253,
        column: 38,
        span: 6320..6351,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 39,
        span: 6351..6352,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua %s]]",
        ),
        line: 253,
        column: 50,
        span: 6353..6363,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 51,
        span: 6363..6364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 253,
        column: 56,
        span: 6365..6369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 57,
        span: 6369..6370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 257,
        column: 2,
        span: 6403..6404,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 257,
        column: 4,
        span: 6405..6406,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[=[ -- \nfunction f ( x ) \n  local a = [[\nxuxu\n]]\n  local b = \"\\\nxuxu\\n\"\n  if x == 11 then return 1 + 12 , 2 + 20 end  --[[ test multiple returns ]]\n  return x + 1 \n  --\\\\\nend\nreturn( f( 100 ) )\nassert( a == b )\ndo return f( 11 ) end  ]=]",
        ),
        line: 270,
        column: 27,
        span: 6407..6644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 271,
        column: 2,
        span: 6645..6646,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 271,
        column: 4,
        span: 6647..6648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 271,
        column: 11,
        span: 6649..6655,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 271,
        column: 12,
        span: 6655..6656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 271,
        column: 16,
        span: 6656..6660,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 17,
        span: 6660..6661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 271,
        column: 18,
        span: 6661..6662,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 271,
        column: 19,
        span: 6662..6663,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        line: 271,
        column: 23,
        span: 6664..6667,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 271,
        column: 24,
        span: 6667..6668,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n\\n'",
        ),
        line: 271,
        column: 31,
        span: 6669..6675,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 32,
        span: 6675..6676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 272,
        column: 9,
        span: 6713..6721,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 272,
        column: 10,
        span: 6721..6722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 272,
        column: 11,
        span: 6722..6723,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 272,
        column: 12,
        span: 6723..6724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 273,
        column: 4,
        span: 6725..6728,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 5,
        span: 6728..6729,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]",
        ),
        line: 273,
        column: 52,
        span: 6729..6776,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 273,
        column: 53,
        span: 6776..6777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 273,
        column: 58,
        span: 6778..6782,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 273,
        column: 59,
        span: 6782..6783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 273,
        column: 63,
        span: 6784..6787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 64,
        span: 6787..6788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        line: 274,
        column: 13,
        span: 6789..6801,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 14,
        span: 6801..6802,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"101\\n13\\t22\\n\\n\"",
        ),
        line: 274,
        column: 31,
        span: 6802..6819,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 32,
        span: 6819..6820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 276,
        column: 9,
        span: 6824..6832,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[#comment in 1st line without \\n at the end]]",
        ),
        line: 276,
        column: 55,
        span: 6832..6878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 277,
        column: 4,
        span: 6879..6882,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 5,
        span: 6882..6883,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s'",
        ),
        line: 277,
        column: 13,
        span: 6883..6891,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 14,
        span: 6891..6892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 277,
        column: 19,
        span: 6893..6897,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 20,
        span: 6897..6898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 279,
        column: 9,
        span: 6902..6910,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[#test line number when file starts with comment line\ndebug = require\"debug\"\nprint(debug.getinfo(1).currentline)\n]]",
        ),
        line: 282,
        column: 3,
        span: 6910..7026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 283,
        column: 4,
        span: 7027..7030,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
        column: 5,
        span: 7030..7031,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s > %s'",
        ),
        line: 283,
        column: 18,
        span: 7031..7044,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 283,
        column: 19,
        span: 7044..7045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 283,
        column: 24,
        span: 7046..7050,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 283,
        column: 25,
        span: 7050..7051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 283,
        column: 29,
        span: 7052..7055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
        column: 30,
        span: 7055..7056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        line: 284,
        column: 13,
        span: 7057..7069,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
        column: 14,
        span: 7069..7070,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'3'",
        ),
        line: 284,
        column: 17,
        span: 7070..7073,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
        column: 18,
        span: 7073..7074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 287,
        column: 9,
        span: 7107..7115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
        column: 10,
        span: 7115..7116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 287,
        column: 16,
        span: 7116..7122,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 287,
        column: 17,
        span: 7122..7123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 287,
        column: 23,
        span: 7123..7129,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
        column: 24,
        span: 7129..7130,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[io.output(%q); io.write('alo')]]",
        ),
        line: 287,
        column: 58,
        span: 7130..7164,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
        column: 59,
        span: 7164..7165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 287,
        column: 63,
        span: 7166..7169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
        column: 64,
        span: 7169..7170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
        column: 65,
        span: 7170..7171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 288,
        column: 4,
        span: 7172..7175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
        column: 5,
        span: 7175..7176,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s'",
        ),
        line: 288,
        column: 13,
        span: 7176..7184,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 288,
        column: 14,
        span: 7184..7185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 288,
        column: 19,
        span: 7186..7190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
        column: 20,
        span: 7190..7191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 289,
        column: 9,
        span: 7192..7200,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 10,
        span: 7200..7201,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 289,
        column: 15,
        span: 7201..7206,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 16,
        span: 7206..7207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 292,
        column: 4,
        span: 7258..7261,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
        column: 5,
        span: 7261..7262,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -v  -e\"print'hello'\" > %s]]",
        ),
        line: 292,
        column: 38,
        span: 7262..7295,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 292,
        column: 39,
        span: 7295..7296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 292,
        column: 43,
        span: 7297..7300,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
        column: 44,
        span: 7300..7301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 293,
        column: 2,
        span: 7302..7303,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 293,
        column: 4,
        span: 7304..7305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 293,
        column: 14,
        span: 7306..7315,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
        column: 15,
        span: 7315..7316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
        column: 16,
        span: 7316..7317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 294,
        column: 7,
        span: 7318..7324,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 8,
        span: 7324..7325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 294,
        column: 14,
        span: 7325..7331,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 294,
        column: 15,
        span: 7331..7332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 294,
        column: 19,
        span: 7332..7336,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 20,
        span: 7336..7337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 294,
        column: 21,
        span: 7337..7338,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 294,
        column: 22,
        span: 7338..7339,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"PUC%-Rio\\nhello\"",
        ),
        line: 294,
        column: 40,
        span: 7340..7357,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 41,
        span: 7357..7358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 42,
        span: 7358..7359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 298,
        column: 9,
        span: 7381..7389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 10,
        span: 7389..7390,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os.exit(nil, true)\"",
        ),
        line: 298,
        column: 30,
        span: 7390..7410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 31,
        span: 7410..7411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 299,
        column: 4,
        span: 7412..7415,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 5,
        span: 7415..7416,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s'",
        ),
        line: 299,
        column: 13,
        span: 7416..7424,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 299,
        column: 14,
        span: 7424..7425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 299,
        column: 19,
        span: 7426..7430,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 20,
        span: 7430..7431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 300,
        column: 9,
        span: 7432..7440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 300,
        column: 10,
        span: 7440..7441,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os.exit(0, true)\"",
        ),
        line: 300,
        column: 28,
        span: 7441..7459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 300,
        column: 29,
        span: 7459..7460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 301,
        column: 4,
        span: 7461..7464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 5,
        span: 7464..7465,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s'",
        ),
        line: 301,
        column: 13,
        span: 7465..7473,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
        column: 14,
        span: 7473..7474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 301,
        column: 19,
        span: 7475..7479,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 20,
        span: 7479..7480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 302,
        column: 9,
        span: 7481..7489,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 10,
        span: 7489..7490,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os.exit(true, true)\"",
        ),
        line: 302,
        column: 31,
        span: 7490..7511,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 32,
        span: 7511..7512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 303,
        column: 4,
        span: 7513..7516,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 5,
        span: 7516..7517,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s'",
        ),
        line: 303,
        column: 13,
        span: 7517..7525,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 303,
        column: 14,
        span: 7525..7526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 303,
        column: 19,
        span: 7527..7531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 20,
        span: 7531..7532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 304,
        column: 9,
        span: 7533..7541,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 10,
        span: 7541..7542,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os.exit(1, true)\"",
        ),
        line: 304,
        column: 28,
        span: 7542..7560,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
        column: 29,
        span: 7560..7561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 305,
        column: 6,
        span: 7562..7567,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 305,
        column: 7,
        span: 7567..7568,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 305,
        column: 9,
        span: 7568..7570,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 305,
        column: 10,
        span: 7570..7571,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua %s\"",
        ),
        line: 305,
        column: 19,
        span: 7572..7580,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 305,
        column: 20,
        span: 7580..7581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 305,
        column: 25,
        span: 7582..7586,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 305,
        column: 26,
        span: 7586..7587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 306,
        column: 9,
        span: 7604..7612,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
        column: 10,
        span: 7612..7613,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os.exit(false, true)\"",
        ),
        line: 306,
        column: 32,
        span: 7613..7635,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
        column: 33,
        span: 7635..7636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 307,
        column: 6,
        span: 7637..7642,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
        column: 7,
        span: 7642..7643,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 307,
        column: 9,
        span: 7643..7645,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 307,
        column: 10,
        span: 7645..7646,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua %s\"",
        ),
        line: 307,
        column: 19,
        span: 7647..7655,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 307,
        column: 20,
        span: 7655..7656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 307,
        column: 25,
        span: 7657..7661,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
        column: 26,
        span: 7661..7662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 310,
        column: 7,
        span: 7706..7712,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 8,
        span: 7712..7713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 310,
        column: 10,
        span: 7713..7715,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 310,
        column: 11,
        span: 7715..7716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 310,
        column: 17,
        span: 7716..7722,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 18,
        span: 7722..7723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 310,
        column: 22,
        span: 7723..7727,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 23,
        span: 7727..7728,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 24,
        span: 7728..7729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 311,
        column: 7,
        span: 7730..7736,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 8,
        span: 7736..7737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 311,
        column: 10,
        span: 7737..7739,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 311,
        column: 11,
        span: 7739..7740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 311,
        column: 17,
        span: 7740..7746,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 18,
        span: 7746..7747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        line: 311,
        column: 27,
        span: 7747..7756,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 28,
        span: 7756..7757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 29,
        span: 7757..7758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 312,
        column: 7,
        span: 7759..7765,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
        column: 8,
        span: 7765..7766,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 312,
        column: 11,
        span: 7766..7769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 312,
        column: 14,
        span: 7770..7772,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 312,
        column: 15,
        span: 7772..7773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 312,
        column: 21,
        span: 7773..7779,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
        column: 22,
        span: 7779..7780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 312,
        column: 25,
        span: 7780..7783,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 26,
        span: 7783..7784,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 27,
        span: 7784..7785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 315,
        column: 6,
        span: 7806..7811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 315,
        column: 7,
        span: 7811..7812,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unrecognized option '-h'\"",
        ),
        line: 315,
        column: 33,
        span: 7812..7838,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 315,
        column: 34,
        span: 7838..7839,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -h\"",
        ),
        line: 315,
        column: 43,
        span: 7840..7848,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 315,
        column: 44,
        span: 7848..7849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 316,
        column: 6,
        span: 7850..7855,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 7,
        span: 7855..7856,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unrecognized option '---'\"",
        ),
        line: 316,
        column: 34,
        span: 7856..7883,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 316,
        column: 35,
        span: 7883..7884,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua ---\"",
        ),
        line: 316,
        column: 45,
        span: 7885..7894,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 46,
        span: 7894..7895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 317,
        column: 6,
        span: 7896..7901,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 7,
        span: 7901..7902,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unrecognized option '-Ex'\"",
        ),
        line: 317,
        column: 34,
        span: 7902..7929,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 35,
        span: 7929..7930,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -Ex\"",
        ),
        line: 317,
        column: 45,
        span: 7931..7940,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 46,
        span: 7940..7941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 318,
        column: 6,
        span: 7942..7947,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
        column: 7,
        span: 7947..7948,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unrecognized option '-vv'\"",
        ),
        line: 318,
        column: 34,
        span: 7948..7975,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 318,
        column: 35,
        span: 7975..7976,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -vv\"",
        ),
        line: 318,
        column: 45,
        span: 7977..7986,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
        column: 46,
        span: 7986..7987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 319,
        column: 6,
        span: 7988..7993,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 7,
        span: 7993..7994,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unrecognized option '-iv'\"",
        ),
        line: 319,
        column: 34,
        span: 7994..8021,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 319,
        column: 35,
        span: 8021..8022,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -iv\"",
        ),
        line: 319,
        column: 45,
        span: 8023..8032,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 46,
        span: 8032..8033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 320,
        column: 6,
        span: 8034..8039,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
        column: 7,
        span: 8039..8040,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'-e' needs argument\"",
        ),
        line: 320,
        column: 28,
        span: 8040..8061,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 320,
        column: 29,
        span: 8061..8062,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -e\"",
        ),
        line: 320,
        column: 38,
        span: 8063..8071,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
        column: 39,
        span: 8071..8072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 321,
        column: 6,
        span: 8073..8078,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 7,
        span: 8078..8079,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"syntax error\"",
        ),
        line: 321,
        column: 21,
        span: 8079..8093,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 321,
        column: 22,
        span: 8093..8094,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -e a\"",
        ),
        line: 321,
        column: 33,
        span: 8095..8105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 34,
        span: 8105..8106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 322,
        column: 6,
        span: 8107..8112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 7,
        span: 8112..8113,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'-l' needs argument\"",
        ),
        line: 322,
        column: 28,
        span: 8113..8134,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 322,
        column: 29,
        span: 8134..8135,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -l\"",
        ),
        line: 322,
        column: 38,
        span: 8136..8144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 39,
        span: 8144..8145,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 325,
        column: 3,
        span: 8148..8150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 325,
        column: 5,
        span: 8151..8152,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 325,
        column: 10,
        span: 8153..8157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 326,
        column: 8,
        span: 8184..8189,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
        column: 9,
        span: 8189..8190,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing 'not enough memory' to create a state\"",
        ),
        line: 326,
        column: 56,
        span: 8190..8237,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
        column: 57,
        span: 8237..8238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 327,
        column: 8,
        span: 8241..8246,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 9,
        span: 8246..8247,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not enough memory\"",
        ),
        line: 327,
        column: 28,
        span: 8247..8266,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 327,
        column: 29,
        span: 8266..8267,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"env MEMLIMIT=100 lua\"",
        ),
        line: 327,
        column: 52,
        span: 8268..8290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 53,
        span: 8290..8291,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 328,
        column: 0,
        span: 8292..8295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 329,
        column: 6,
        span: 8296..8301,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 7,
        span: 8301..8302,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 329,
        column: 10,
        span: 8302..8305,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 11,
        span: 8305..8306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 331,
        column: 6,
        span: 8308..8313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
        column: 7,
        span: 8313..8314,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing Ctrl C'",
        ),
        line: 331,
        column: 23,
        span: 8314..8330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
        column: 24,
        span: 8330..8331,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 332,
        column: 0,
        span: 8332..8334,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 334,
        column: 8,
        span: 8361..8366,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 334,
        column: 17,
        span: 8367..8375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kill",
        ),
        line: 334,
        column: 22,
        span: 8376..8380,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 334,
        column: 24,
        span: 8381..8382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        line: 334,
        column: 27,
        span: 8382..8385,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 334,
        column: 28,
        span: 8385..8386,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 335,
        column: 11,
        span: 8391..8397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 335,
        column: 14,
        span: 8398..8400,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 335,
        column: 15,
        span: 8400..8401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        line: 335,
        column: 22,
        span: 8401..8408,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 335,
        column: 23,
        span: 8408..8409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 335,
        column: 29,
        span: 8409..8415,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 335,
        column: 30,
        span: 8415..8416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 335,
        column: 36,
        span: 8416..8422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 335,
        column: 37,
        span: 8422..8423,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'kill -INT %d 2> /dev/null'",
        ),
        line: 335,
        column: 64,
        span: 8423..8450,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 335,
        column: 65,
        span: 8450..8451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        line: 335,
        column: 69,
        span: 8452..8455,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 335,
        column: 70,
        span: 8455..8456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 335,
        column: 71,
        span: 8456..8457,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 336,
        column: 0,
        span: 8460..8463,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 340,
        column: 8,
        span: 8566..8571,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 340,
        column: 17,
        span: 8572..8580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "runback",
        ),
        line: 340,
        column: 25,
        span: 8581..8588,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 27,
        span: 8589..8590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "luaprg",
        ),
        line: 340,
        column: 33,
        span: 8590..8596,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 34,
        span: 8596..8597,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 342,
        column: 10,
        span: 8669..8674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "shellprg",
        ),
        line: 342,
        column: 19,
        span: 8675..8683,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 342,
        column: 21,
        span: 8684..8685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 342,
        column: 28,
        span: 8686..8692,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 342,
        column: 29,
        span: 8692..8693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 342,
        column: 35,
        span: 8693..8699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 36,
        span: 8699..8700,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%s -e \"%s\" & echo $!'",
        ),
        line: 342,
        column: 58,
        span: 8700..8722,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 59,
        span: 8722..8723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 342,
        column: 68,
        span: 8724..8732,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 69,
        span: 8732..8733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "luaprg",
        ),
        line: 342,
        column: 76,
        span: 8734..8740,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 77,
        span: 8740..8741,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 343,
        column: 10,
        span: 8746..8751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 343,
        column: 12,
        span: 8752..8753,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 343,
        column: 14,
        span: 8754..8755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 343,
        column: 17,
        span: 8756..8758,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 343,
        column: 18,
        span: 8758..8759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "popen",
        ),
        line: 343,
        column: 23,
        span: 8759..8764,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 24,
        span: 8764..8765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "shellprg",
        ),
        line: 343,
        column: 32,
        span: 8765..8773,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 343,
        column: 33,
        span: 8773..8774,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        line: 343,
        column: 37,
        span: 8775..8778,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
        column: 38,
        span: 8778..8779,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 344,
        column: 10,
        span: 8806..8811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        line: 344,
        column: 14,
        span: 8812..8815,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 344,
        column: 16,
        span: 8816..8817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 344,
        column: 18,
        span: 8818..8819,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 344,
        column: 19,
        span: 8819..8820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 344,
        column: 23,
        span: 8820..8824,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 344,
        column: 24,
        span: 8824..8825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 344,
        column: 25,
        span: 8825..8826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 345,
        column: 10,
        span: 8859..8864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 345,
        column: 11,
        span: 8864..8865,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(if test fails now, it may leave a Lua script running in \\z\n            background, pid \"",
        ),
        line: 346,
        column: 30,
        span: 8865..8955,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 346,
        column: 33,
        span: 8956..8958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        line: 346,
        column: 37,
        span: 8959..8962,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 346,
        column: 40,
        span: 8963..8965,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\")\"",
        ),
        line: 346,
        column: 44,
        span: 8966..8969,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 45,
        span: 8969..8970,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 347,
        column: 11,
        span: 8975..8981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 347,
        column: 13,
        span: 8982..8983,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
        column: 14,
        span: 8983..8984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        line: 347,
        column: 0,
        span: 8985..8988,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 348,
        column: 0,
        span: 8991..8994,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 351,
        column: 8,
        span: 9069..9074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 351,
        column: 10,
        span: 9075..9076,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 351,
        column: 11,
        span: 9076..9077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        line: 351,
        column: 15,
        span: 9078..9081,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 351,
        column: 17,
        span: 9082..9083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "runback",
        ),
        line: 351,
        column: 25,
        span: 9084..9091,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    pcall(function () print(12); while true do end end); print(42)]]",
        ),
        line: 352,
        column: 69,
        span: 9091..9162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 354,
        column: 9,
        span: 9206..9212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 10,
        span: 9212..9213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 354,
        column: 11,
        span: 9213..9214,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 354,
        column: 12,
        span: 9214..9215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 354,
        column: 16,
        span: 9215..9219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 17,
        span: 9219..9220,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 18,
        span: 9220..9221,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 354,
        column: 21,
        span: 9222..9224,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"12\"",
        ),
        line: 354,
        column: 26,
        span: 9225..9229,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 27,
        span: 9229..9230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kill",
        ),
        line: 355,
        column: 7,
        span: 9233..9237,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
        column: 8,
        span: 9237..9238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        line: 355,
        column: 11,
        span: 9238..9241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
        column: 12,
        span: 9241..9242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 357,
        column: 9,
        span: 9355..9361,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 357,
        column: 10,
        span: 9361..9362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 357,
        column: 11,
        span: 9362..9363,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 357,
        column: 12,
        span: 9363..9364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 357,
        column: 16,
        span: 9364..9368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 357,
        column: 17,
        span: 9368..9369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 357,
        column: 18,
        span: 9369..9370,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 357,
        column: 21,
        span: 9371..9373,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"42\"",
        ),
        line: 357,
        column: 26,
        span: 9374..9378,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 357,
        column: 27,
        span: 9378..9379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 358,
        column: 9,
        span: 9402..9408,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 10,
        span: 9408..9409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 358,
        column: 11,
        span: 9409..9410,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 358,
        column: 12,
        span: 9410..9411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 358,
        column: 17,
        span: 9411..9416,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 18,
        span: 9416..9417,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 19,
        span: 9417..9418,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 20,
        span: 9418..9419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 359,
        column: 8,
        span: 9422..9427,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 359,
        column: 9,
        span: 9427..9428,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"done\"",
        ),
        line: 359,
        column: 15,
        span: 9428..9434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 359,
        column: 16,
        span: 9434..9435,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 362,
        column: 8,
        span: 9484..9489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 362,
        column: 10,
        span: 9490..9491,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 362,
        column: 11,
        span: 9491..9492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        line: 362,
        column: 15,
        span: 9493..9496,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 362,
        column: 17,
        span: 9497..9498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "runback",
        ),
        line: 362,
        column: 25,
        span: 9499..9506,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    print(15); string.find(string.rep('a', 100000), '.*b')]]",
        ),
        line: 363,
        column: 61,
        span: 9506..9569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 365,
        column: 9,
        span: 9613..9619,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 365,
        column: 10,
        span: 9619..9620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 365,
        column: 11,
        span: 9620..9621,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 365,
        column: 12,
        span: 9621..9622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 365,
        column: 16,
        span: 9622..9626,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 365,
        column: 17,
        span: 9626..9627,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
        column: 18,
        span: 9627..9628,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 365,
        column: 21,
        span: 9629..9631,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"15\"",
        ),
        line: 365,
        column: 26,
        span: 9632..9636,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
        column: 27,
        span: 9636..9637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 366,
        column: 9,
        span: 9640..9646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
        column: 10,
        span: 9646..9647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 366,
        column: 12,
        span: 9647..9649,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 366,
        column: 13,
        span: 9649..9650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        line: 366,
        column: 20,
        span: 9650..9657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
        column: 21,
        span: 9657..9658,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sleep 1\"",
        ),
        line: 366,
        column: 30,
        span: 9658..9667,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 31,
        span: 9667..9668,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 32,
        span: 9668..9669,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 368,
        column: 8,
        span: 9736..9741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 368,
        column: 10,
        span: 9742..9743,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 368,
        column: 12,
        span: 9744..9745,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 0,
        span: 9745..9749,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 369,
        column: 6,
        span: 9752..9755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 369,
        column: 8,
        span: 9756..9757,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 369,
        column: 10,
        span: 9758..9759,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 369,
        column: 12,
        span: 9759..9761,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 369,
        column: 13,
        span: 9761..9762,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 369,
        column: 17,
        span: 9762..9766,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 369,
        column: 20,
        span: 9767..9769,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 370,
        column: 7,
        span: 9800..9802,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 370,
        column: 11,
        span: 9803..9806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kill",
        ),
        line: 370,
        column: 16,
        span: 9807..9811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 370,
        column: 17,
        span: 9811..9812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        line: 370,
        column: 20,
        span: 9812..9815,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 370,
        column: 21,
        span: 9815..9816,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 370,
        column: 26,
        span: 9817..9821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 371,
        column: 8,
        span: 9848..9849,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 371,
        column: 10,
        span: 9850..9851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 371,
        column: 12,
        span: 9852..9853,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 372,
        column: 0,
        span: 9892..9897,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 373,
        column: 0,
        span: 9902..9905,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 374,
        column: 0,
        span: 9908..9911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 375,
        column: 9,
        span: 9914..9920,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 375,
        column: 10,
        span: 9920..9921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 375,
        column: 11,
        span: 9921..9922,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 375,
        column: 12,
        span: 9922..9923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 375,
        column: 17,
        span: 9923..9928,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 375,
        column: 18,
        span: 9928..9929,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 375,
        column: 19,
        span: 9929..9930,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 375,
        column: 20,
        span: 9930..9931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 376,
        column: 9,
        span: 9934..9940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
        column: 10,
        span: 9940..9941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 376,
        column: 11,
        span: 9941..9942,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 376,
        column: 14,
        span: 9943..9945,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 376,
        column: 16,
        span: 9945..9947,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
        column: 17,
        span: 9947..9948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 377,
        column: 8,
        span: 9951..9956,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 9,
        span: 9956..9957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 377,
        column: 15,
        span: 9957..9963,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 377,
        column: 16,
        span: 9963..9964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 377,
        column: 22,
        span: 9964..9970,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 23,
        span: 9970..9971,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"done (with %d kills)\"",
        ),
        line: 377,
        column: 45,
        span: 9971..9993,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 377,
        column: 46,
        span: 9993..9994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 377,
        column: 48,
        span: 9995..9996,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 49,
        span: 9996..9997,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 50,
        span: 9997..9998,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 379,
        column: 0,
        span: 10000..10003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 381,
        column: 6,
        span: 10005..10010,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 381,
        column: 7,
        span: 10010..10011,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        line: 381,
        column: 11,
        span: 10011..10015,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 381,
        column: 12,
        span: 10015..10016,
    },
]
