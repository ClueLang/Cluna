---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/tpack.lua
---
[
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 4,
            column: 6,
            span: 100..105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 4,
            column: 11,
            span: 106..110,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 4,
            column: 13,
            span: 111..112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 4,
            column: 20,
            span: 113..119,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 4,
            column: 21,
            span: 119..120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 4,
            column: 0,
            span: 120..124,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 5,
            column: 6,
            span: 125..130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 5,
            column: 15,
            span: 131..139,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 5,
            column: 17,
            span: 140..141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 5,
            column: 24,
            span: 142..148,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 5,
            column: 25,
            span: 148..149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 5,
            column: 0,
            span: 149..157,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 6,
            column: 6,
            span: 158..163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 6,
            column: 13,
            span: 164..170,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 6,
            column: 15,
            span: 171..172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 6,
            column: 22,
            span: 173..179,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 6,
            column: 23,
            span: 179..180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 6,
            column: 0,
            span: 180..186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 8,
            column: 6,
            span: 188..193,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing pack/unpack\"",
        ),
        position: Position {
            line: 8,
            column: 28,
            span: 194..215,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 11,
            column: 6,
            span: 246..251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NB",
        ),
        position: Position {
            line: 11,
            column: 9,
            span: 252..254,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 11,
            column: 11,
            span: 255..256,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 11,
            column: 0,
            span: 256..259,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 13,
            column: 6,
            span: 261..266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeshort",
        ),
        position: Position {
            line: 13,
            column: 16,
            span: 267..276,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 13,
            column: 18,
            span: 277..278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 13,
            column: 27,
            span: 279..287,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 13,
            column: 28,
            span: 287..288,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"h\"",
        ),
        position: Position {
            line: 13,
            column: 31,
            span: 288..291,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 13,
            column: 32,
            span: 291..292,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 14,
            column: 6,
            span: 293..298,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeint",
        ),
        position: Position {
            line: 14,
            column: 14,
            span: 299..306,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 14,
            column: 16,
            span: 307..308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 14,
            column: 25,
            span: 309..317,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 14,
            column: 26,
            span: 317..318,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i\"",
        ),
        position: Position {
            line: 14,
            column: 29,
            span: 318..321,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 14,
            column: 30,
            span: 321..322,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 15,
            column: 6,
            span: 323..328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizelong",
        ),
        position: Position {
            line: 15,
            column: 15,
            span: 329..337,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 15,
            column: 17,
            span: 338..339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 15,
            column: 26,
            span: 340..348,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 15,
            column: 27,
            span: 348..349,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 15,
            column: 30,
            span: 349..352,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 15,
            column: 31,
            span: 352..353,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 16,
            column: 6,
            span: 354..359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizesize_t",
        ),
        position: Position {
            line: 16,
            column: 17,
            span: 360..370,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 16,
            column: 19,
            span: 371..372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 16,
            column: 28,
            span: 373..381,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 16,
            column: 29,
            span: 381..382,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"T\"",
        ),
        position: Position {
            line: 16,
            column: 32,
            span: 382..385,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 16,
            column: 33,
            span: 385..386,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 17,
            column: 6,
            span: 387..392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 17,
            column: 13,
            span: 393..399,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 17,
            column: 15,
            span: 400..401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 17,
            column: 24,
            span: 402..410,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 17,
            column: 25,
            span: 410..411,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"j\"",
        ),
        position: Position {
            line: 17,
            column: 28,
            span: 411..414,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 17,
            column: 29,
            span: 414..415,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 18,
            column: 6,
            span: 416..421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizefloat",
        ),
        position: Position {
            line: 18,
            column: 16,
            span: 422..431,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 18,
            column: 18,
            span: 432..433,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 18,
            column: 27,
            span: 434..442,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 28,
            span: 442..443,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        position: Position {
            line: 18,
            column: 31,
            span: 443..446,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 32,
            span: 446..447,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 19,
            column: 6,
            span: 448..453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizedouble",
        ),
        position: Position {
            line: 19,
            column: 17,
            span: 454..464,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 19,
            column: 19,
            span: 465..466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 19,
            column: 28,
            span: 467..475,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 19,
            column: 29,
            span: 475..476,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"d\"",
        ),
        position: Position {
            line: 19,
            column: 32,
            span: 476..479,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 19,
            column: 33,
            span: 479..480,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 20,
            column: 6,
            span: 481..486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizenumber",
        ),
        position: Position {
            line: 20,
            column: 17,
            span: 487..497,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 20,
            column: 19,
            span: 498..499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 20,
            column: 28,
            span: 500..508,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 20,
            column: 29,
            span: 508..509,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 20,
            column: 32,
            span: 509..512,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 20,
            column: 33,
            span: 512..513,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 21,
            column: 6,
            span: 514..519,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "little",
        ),
        position: Position {
            line: 21,
            column: 13,
            span: 520..526,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 21,
            column: 15,
            span: 527..528,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 17,
            span: 529..530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 21,
            column: 21,
            span: 530..534,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 22,
            span: 534..535,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i2\"",
        ),
        position: Position {
            line: 21,
            column: 26,
            span: 535..539,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 21,
            column: 27,
            span: 539..540,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 21,
            column: 29,
            span: 540..542,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 30,
            span: 542..543,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 21,
            column: 33,
            span: 544..546,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\1\\0\"",
        ),
        position: Position {
            line: 21,
            column: 40,
            span: 547..553,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 41,
            span: 553..554,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 22,
            column: 6,
            span: 555..560,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "align",
        ),
        position: Position {
            line: 22,
            column: 12,
            span: 561..566,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 22,
            column: 14,
            span: 567..568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 22,
            column: 23,
            span: 569..577,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 22,
            column: 24,
            span: 577..578,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!xXi16\"",
        ),
        position: Position {
            line: 22,
            column: 32,
            span: 578..586,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 22,
            column: 33,
            span: 586..587,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 24,
            column: 7,
            span: 589..595,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 24,
            column: 8,
            span: 595..596,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 24,
            column: 9,
            span: 595..597,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 24,
            column: 12,
            span: 598..600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeshort",
        ),
        position: Position {
            line: 24,
            column: 22,
            span: 601..610,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 24,
            column: 26,
            span: 611..614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeshort",
        ),
        position: Position {
            line: 24,
            column: 36,
            span: 615..624,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 24,
            column: 39,
            span: 625..627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeint",
        ),
        position: Position {
            line: 24,
            column: 47,
            span: 628..635,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 24,
            column: 51,
            span: 636..639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeint",
        ),
        position: Position {
            line: 24,
            column: 59,
            span: 640..647,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 24,
            column: 62,
            span: 648..650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizelong",
        ),
        position: Position {
            line: 24,
            column: 71,
            span: 651..659,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 24,
            column: 0,
            span: 660..663,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizefloat",
        ),
        position: Position {
            line: 25,
            column: 17,
            span: 671..680,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 25,
            column: 20,
            span: 681..683,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizedouble",
        ),
        position: Position {
            line: 25,
            column: 31,
            span: 684..694,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 25,
            column: 32,
            span: 694..695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 27,
            column: 6,
            span: 697..702,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 27,
            column: 7,
            span: 702..703,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"platform:\"",
        ),
        position: Position {
            line: 27,
            column: 18,
            span: 703..714,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 27,
            column: 19,
            span: 714..715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 28,
            column: 6,
            span: 716..721,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 7,
            span: 721..722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 28,
            column: 13,
            span: 722..728,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 28,
            column: 14,
            span: 728..729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 28,
            column: 20,
            span: 729..735,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 21,
            span: 735..736,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\tshort %d, int %d, long %d, size_t %d, float %d, double %d,\\n\\z\n   \\tlua Integer %d, lua Number %d\"",
        ),
        position: Position {
            line: 30,
            column: 36,
            span: 739..840,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 30,
            column: 37,
            span: 840..841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeshort",
        ),
        position: Position {
            line: 31,
            column: 13,
            span: 845..854,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 14,
            span: 854..855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeint",
        ),
        position: Position {
            line: 31,
            column: 22,
            span: 856..863,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 23,
            span: 863..864,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizelong",
        ),
        position: Position {
            line: 31,
            column: 32,
            span: 865..873,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 33,
            span: 873..874,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizesize_t",
        ),
        position: Position {
            line: 31,
            column: 44,
            span: 875..885,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 45,
            span: 885..886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizefloat",
        ),
        position: Position {
            line: 31,
            column: 55,
            span: 887..896,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 56,
            span: 896..897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizedouble",
        ),
        position: Position {
            line: 31,
            column: 67,
            span: 898..908,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 68,
            span: 908..909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 32,
            column: 10,
            span: 913..919,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 32,
            column: 11,
            span: 919..920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizenumber",
        ),
        position: Position {
            line: 32,
            column: 22,
            span: 921..931,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 23,
            span: 931..932,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 24,
            span: 932..933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 33,
            column: 6,
            span: 934..939,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 7,
            span: 939..940,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\t\"",
        ),
        position: Position {
            line: 33,
            column: 11,
            span: 940..944,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 33,
            column: 14,
            span: 945..947,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 16,
            span: 948..949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "little",
        ),
        position: Position {
            line: 33,
            column: 22,
            span: 949..955,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 33,
            column: 26,
            span: 956..959,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"little\"",
        ),
        position: Position {
            line: 33,
            column: 35,
            span: 960..968,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 33,
            column: 38,
            span: 969..971,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"big\"",
        ),
        position: Position {
            line: 33,
            column: 44,
            span: 972..977,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 45,
            span: 977..978,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 33,
            column: 48,
            span: 979..981,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" endian\"",
        ),
        position: Position {
            line: 33,
            column: 58,
            span: 982..991,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 59,
            span: 991..992,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 34,
            column: 6,
            span: 993..998,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 34,
            column: 7,
            span: 998..999,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\talignment: \"",
        ),
        position: Position {
            line: 34,
            column: 22,
            span: 999..1014,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 34,
            column: 25,
            span: 1015..1017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "align",
        ),
        position: Position {
            line: 34,
            column: 31,
            span: 1018..1023,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 34,
            column: 32,
            span: 1023..1024,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 38,
            column: 9,
            span: 1056..1064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 38,
            column: 20,
            span: 1065..1075,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 38,
            column: 22,
            span: 1076..1077,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 38,
            column: 25,
            span: 1077..1080,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 38,
            column: 26,
            span: 1080..1081,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 38,
            column: 28,
            span: 1082..1083,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 38,
            column: 29,
            span: 1083..1084,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 38,
            column: 33,
            span: 1085..1088,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 38,
            column: 34,
            span: 1088..1089,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 39,
            column: 8,
            span: 1092..1097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        position: Position {
            line: 39,
            column: 15,
            span: 1098..1104,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 39,
            column: 16,
            span: 1104..1105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 39,
            column: 20,
            span: 1106..1109,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 39,
            column: 22,
            span: 1110..1111,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 39,
            column: 28,
            span: 1112..1117,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 39,
            column: 29,
            span: 1117..1118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 39,
            column: 30,
            span: 1118..1119,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 39,
            column: 31,
            span: 1119..1120,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 39,
            column: 35,
            span: 1121..1124,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 39,
            column: 36,
            span: 1124..1125,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 41,
            column: 9,
            span: 1157..1163,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 10,
            span: 1163..1164,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 41,
            column: 13,
            span: 1164..1167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        position: Position {
            line: 41,
            column: 20,
            span: 1168..1174,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 41,
            column: 24,
            span: 1175..1178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 41,
            column: 31,
            span: 1179..1185,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 41,
            column: 32,
            span: 1185..1186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 41,
            column: 36,
            span: 1186..1190,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 37,
            span: 1190..1191,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 41,
            column: 40,
            span: 1191..1194,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 41,
            column: 41,
            span: 1194..1195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 41,
            column: 45,
            span: 1196..1199,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 46,
            span: 1199..1200,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 47,
            span: 1200..1201,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 42,
            column: 0,
            span: 1202..1205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 45,
            column: 7,
            span: 1247..1253,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 8,
            span: 1253..1254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 45,
            column: 14,
            span: 1254..1260,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 15,
            span: 1260..1261,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B\"",
        ),
        position: Position {
            line: 45,
            column: 18,
            span: 1261..1264,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 19,
            span: 1264..1265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 45,
            column: 24,
            span: 1266..1270,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 25,
            span: 1270..1271,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B\"",
        ),
        position: Position {
            line: 45,
            column: 28,
            span: 1271..1274,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 29,
            span: 1274..1275,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xff",
            ),
        ),
        position: Position {
            line: 45,
            column: 34,
            span: 1275..1280,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 35,
            span: 1280..1281,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 36,
            span: 1281..1282,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 45,
            column: 39,
            span: 1283..1285,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xff",
            ),
        ),
        position: Position {
            line: 45,
            column: 44,
            span: 1285..1290,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 45,
            span: 1290..1291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 46,
            column: 7,
            span: 1292..1298,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 8,
            span: 1298..1299,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 46,
            column: 14,
            span: 1299..1305,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 15,
            span: 1305..1306,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 46,
            column: 18,
            span: 1306..1309,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 19,
            span: 1309..1310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 46,
            column: 24,
            span: 1311..1315,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 25,
            span: 1315..1316,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 46,
            column: 28,
            span: 1316..1319,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 29,
            span: 1319..1320,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7f",
            ),
        ),
        position: Position {
            line: 46,
            column: 34,
            span: 1320..1325,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 35,
            span: 1325..1326,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 36,
            span: 1326..1327,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 46,
            column: 39,
            span: 1328..1330,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7f",
            ),
        ),
        position: Position {
            line: 46,
            column: 44,
            span: 1330..1335,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 45,
            span: 1335..1336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 47,
            column: 7,
            span: 1337..1343,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 8,
            span: 1343..1344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 47,
            column: 14,
            span: 1344..1350,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 15,
            span: 1350..1351,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 47,
            column: 18,
            span: 1351..1354,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 47,
            column: 19,
            span: 1354..1355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 47,
            column: 24,
            span: 1356..1360,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 25,
            span: 1360..1361,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 47,
            column: 28,
            span: 1361..1364,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 47,
            column: 29,
            span: 1364..1365,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 47,
            column: 31,
            span: 1366..1367,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x80",
            ),
        ),
        position: Position {
            line: 47,
            column: 35,
            span: 1366..1371,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 36,
            span: 1371..1372,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 37,
            span: 1372..1373,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 47,
            column: 40,
            span: 1374..1376,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 47,
            column: 42,
            span: 1377..1378,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x80",
            ),
        ),
        position: Position {
            line: 47,
            column: 46,
            span: 1377..1382,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 47,
            span: 1382..1383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 49,
            column: 7,
            span: 1385..1391,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 8,
            span: 1391..1392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 49,
            column: 14,
            span: 1392..1398,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 15,
            span: 1398..1399,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"H\"",
        ),
        position: Position {
            line: 49,
            column: 18,
            span: 1399..1402,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 49,
            column: 19,
            span: 1402..1403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 49,
            column: 24,
            span: 1404..1408,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 25,
            span: 1408..1409,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"H\"",
        ),
        position: Position {
            line: 49,
            column: 28,
            span: 1409..1412,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 49,
            column: 29,
            span: 1412..1413,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffff",
            ),
        ),
        position: Position {
            line: 49,
            column: 36,
            span: 1413..1420,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 37,
            span: 1420..1421,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 38,
            span: 1421..1422,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 49,
            column: 41,
            span: 1423..1425,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffff",
            ),
        ),
        position: Position {
            line: 49,
            column: 48,
            span: 1425..1432,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 49,
            span: 1432..1433,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 50,
            column: 7,
            span: 1434..1440,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 8,
            span: 1440..1441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 50,
            column: 14,
            span: 1441..1447,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 15,
            span: 1447..1448,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"h\"",
        ),
        position: Position {
            line: 50,
            column: 18,
            span: 1448..1451,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 50,
            column: 19,
            span: 1451..1452,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 50,
            column: 24,
            span: 1453..1457,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 25,
            span: 1457..1458,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"h\"",
        ),
        position: Position {
            line: 50,
            column: 28,
            span: 1458..1461,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 50,
            column: 29,
            span: 1461..1462,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7fff",
            ),
        ),
        position: Position {
            line: 50,
            column: 36,
            span: 1462..1469,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 37,
            span: 1469..1470,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 38,
            span: 1470..1471,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 50,
            column: 41,
            span: 1472..1474,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7fff",
            ),
        ),
        position: Position {
            line: 50,
            column: 48,
            span: 1474..1481,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 49,
            span: 1481..1482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 51,
            column: 7,
            span: 1483..1489,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 8,
            span: 1489..1490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 51,
            column: 14,
            span: 1490..1496,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 15,
            span: 1496..1497,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"h\"",
        ),
        position: Position {
            line: 51,
            column: 18,
            span: 1497..1500,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 51,
            column: 19,
            span: 1500..1501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 51,
            column: 24,
            span: 1502..1506,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 25,
            span: 1506..1507,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"h\"",
        ),
        position: Position {
            line: 51,
            column: 28,
            span: 1507..1510,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 51,
            column: 29,
            span: 1510..1511,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 51,
            column: 31,
            span: 1512..1513,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x8000",
            ),
        ),
        position: Position {
            line: 51,
            column: 37,
            span: 1512..1519,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 38,
            span: 1519..1520,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 39,
            span: 1520..1521,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 51,
            column: 42,
            span: 1522..1524,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 51,
            column: 44,
            span: 1525..1526,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x8000",
            ),
        ),
        position: Position {
            line: 51,
            column: 50,
            span: 1525..1532,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 51,
            span: 1532..1533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 53,
            column: 7,
            span: 1535..1541,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 8,
            span: 1541..1542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 53,
            column: 14,
            span: 1542..1548,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 15,
            span: 1548..1549,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        position: Position {
            line: 53,
            column: 18,
            span: 1549..1552,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 53,
            column: 19,
            span: 1552..1553,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 53,
            column: 24,
            span: 1554..1558,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 25,
            span: 1558..1559,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        position: Position {
            line: 53,
            column: 28,
            span: 1559..1562,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 53,
            column: 29,
            span: 1562..1563,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        position: Position {
            line: 53,
            column: 40,
            span: 1563..1574,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 41,
            span: 1574..1575,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 42,
            span: 1575..1576,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 53,
            column: 45,
            span: 1577..1579,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        position: Position {
            line: 53,
            column: 56,
            span: 1579..1590,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 57,
            span: 1590..1591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 54,
            column: 7,
            span: 1592..1598,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 8,
            span: 1598..1599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 54,
            column: 14,
            span: 1599..1605,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 15,
            span: 1605..1606,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 54,
            column: 18,
            span: 1606..1609,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 54,
            column: 19,
            span: 1609..1610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 54,
            column: 24,
            span: 1611..1615,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 25,
            span: 1615..1616,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 54,
            column: 28,
            span: 1616..1619,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 54,
            column: 29,
            span: 1619..1620,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7fffffff",
            ),
        ),
        position: Position {
            line: 54,
            column: 40,
            span: 1620..1631,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 41,
            span: 1631..1632,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 42,
            span: 1632..1633,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 54,
            column: 45,
            span: 1634..1636,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7fffffff",
            ),
        ),
        position: Position {
            line: 54,
            column: 56,
            span: 1636..1647,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 57,
            span: 1647..1648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 55,
            column: 7,
            span: 1649..1655,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 8,
            span: 1655..1656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 55,
            column: 14,
            span: 1656..1662,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 15,
            span: 1662..1663,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 55,
            column: 18,
            span: 1663..1666,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 19,
            span: 1666..1667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 55,
            column: 24,
            span: 1668..1672,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 25,
            span: 1672..1673,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 55,
            column: 28,
            span: 1673..1676,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 29,
            span: 1676..1677,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 55,
            column: 31,
            span: 1678..1679,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x80000000",
            ),
        ),
        position: Position {
            line: 55,
            column: 41,
            span: 1678..1689,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 42,
            span: 1689..1690,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 43,
            span: 1690..1691,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 55,
            column: 46,
            span: 1692..1694,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 55,
            column: 48,
            span: 1695..1696,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x80000000",
            ),
        ),
        position: Position {
            line: 55,
            column: 58,
            span: 1695..1706,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 59,
            span: 1706..1707,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 58,
            column: 4,
            span: 1710..1713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 58,
            column: 6,
            span: 1714..1715,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 58,
            column: 8,
            span: 1716..1717,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 58,
            column: 10,
            span: 1717..1719,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 11,
            span: 1719..1720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NB",
        ),
        position: Position {
            line: 58,
            column: 14,
            span: 1721..1723,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 58,
            column: 0,
            span: 1724..1726,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 60,
            column: 8,
            span: 1782..1787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 60,
            column: 10,
            span: 1788..1789,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 60,
            column: 12,
            span: 1790..1791,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 60,
            column: 19,
            span: 1792..1798,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 60,
            column: 20,
            span: 1798..1799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 60,
            column: 23,
            span: 1799..1802,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 24,
            span: 1802..1803,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xff\"",
        ),
        position: Position {
            line: 60,
            column: 30,
            span: 1803..1809,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 60,
            column: 31,
            span: 1809..1810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 60,
            column: 33,
            span: 1811..1812,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 34,
            span: 1812..1813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 61,
            column: 9,
            span: 1816..1822,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 10,
            span: 1822..1823,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 61,
            column: 14,
            span: 1823..1827,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 15,
            span: 1827..1828,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i\"",
        ),
        position: Position {
            line: 61,
            column: 18,
            span: 1828..1831,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 61,
            column: 21,
            span: 1832..1834,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 61,
            column: 23,
            span: 1835..1836,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 24,
            span: 1836..1837,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 61,
            column: 26,
            span: 1838..1839,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 61,
            column: 27,
            span: 1838..1840,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 28,
            span: 1840..1841,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 61,
            column: 31,
            span: 1842..1844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 61,
            column: 33,
            span: 1845..1846,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 34,
            span: 1846..1847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 62,
            column: 9,
            span: 1850..1856,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 10,
            span: 1856..1857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 62,
            column: 18,
            span: 1857..1865,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 19,
            span: 1865..1866,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i\"",
        ),
        position: Position {
            line: 62,
            column: 22,
            span: 1866..1869,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 62,
            column: 25,
            span: 1870..1872,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 62,
            column: 27,
            span: 1873..1874,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 28,
            span: 1874..1875,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 62,
            column: 31,
            span: 1876..1878,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 62,
            column: 33,
            span: 1879..1880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 62,
            column: 34,
            span: 1880..1881,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 35,
            span: 1881..1882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 63,
            column: 9,
            span: 1885..1891,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 10,
            span: 1891..1892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 63,
            column: 16,
            span: 1892..1898,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 17,
            span: 1898..1899,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i\"",
        ),
        position: Position {
            line: 63,
            column: 20,
            span: 1899..1902,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 63,
            column: 23,
            span: 1903..1905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 63,
            column: 25,
            span: 1906..1907,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 63,
            column: 26,
            span: 1907..1908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 63,
            column: 28,
            span: 1909..1910,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 29,
            span: 1910..1911,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 63,
            column: 32,
            span: 1912..1914,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 63,
            column: 34,
            span: 1915..1916,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 63,
            column: 35,
            span: 1915..1917,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 36,
            span: 1917..1918,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 66,
            column: 4,
            span: 1963..1964,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 66,
            column: 6,
            span: 1965..1966,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xAA\"",
        ),
        position: Position {
            line: 66,
            column: 13,
            span: 1967..1973,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 66,
            column: 16,
            span: 1974..1976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 66,
            column: 23,
            span: 1977..1983,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 66,
            column: 24,
            span: 1983..1984,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 66,
            column: 27,
            span: 1984..1987,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 66,
            column: 28,
            span: 1987..1988,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        position: Position {
            line: 66,
            column: 32,
            span: 1988..1992,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 66,
            column: 33,
            span: 1992..1993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 66,
            column: 35,
            span: 1994..1995,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 66,
            column: 37,
            span: 1996..1997,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 66,
            column: 39,
            span: 1997..1999,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 66,
            column: 40,
            span: 1999..2000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 67,
            column: 9,
            span: 2003..2009,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 10,
            span: 2009..2010,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 67,
            column: 14,
            span: 2010..2014,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 15,
            span: 2014..2015,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<I\"",
        ),
        position: Position {
            line: 67,
            column: 19,
            span: 2015..2019,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 67,
            column: 22,
            span: 2020..2022,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 67,
            column: 24,
            span: 2023..2024,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 25,
            span: 2024..2025,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xAA",
            ),
        ),
        position: Position {
            line: 67,
            column: 30,
            span: 2025..2030,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 31,
            span: 2030..2031,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 67,
            column: 34,
            span: 2032..2034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 67,
            column: 36,
            span: 2035..2036,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 37,
            span: 2036..2037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 68,
            column: 9,
            span: 2040..2046,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 10,
            span: 2046..2047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 68,
            column: 16,
            span: 2047..2053,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 17,
            span: 2053..2054,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<I\"",
        ),
        position: Position {
            line: 68,
            column: 21,
            span: 2054..2058,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 68,
            column: 24,
            span: 2059..2061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 68,
            column: 26,
            span: 2062..2063,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 68,
            column: 27,
            span: 2063..2064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 68,
            column: 29,
            span: 2065..2066,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 30,
            span: 2066..2067,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 68,
            column: 33,
            span: 2068..2070,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xAA",
            ),
        ),
        position: Position {
            line: 68,
            column: 38,
            span: 2070..2075,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 39,
            span: 2075..2076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 69,
            column: 9,
            span: 2079..2085,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 10,
            span: 2085..2086,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 69,
            column: 14,
            span: 2086..2090,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 15,
            span: 2090..2091,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">I\"",
        ),
        position: Position {
            line: 69,
            column: 19,
            span: 2091..2095,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 69,
            column: 22,
            span: 2096..2098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 69,
            column: 24,
            span: 2099..2100,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 69,
            column: 25,
            span: 2100..2101,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xAA",
            ),
        ),
        position: Position {
            line: 69,
            column: 30,
            span: 2101..2106,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 31,
            span: 2106..2107,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 69,
            column: 34,
            span: 2108..2110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 69,
            column: 36,
            span: 2111..2112,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 69,
            column: 37,
            span: 2112..2113,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "reverse",
        ),
        position: Position {
            line: 69,
            column: 44,
            span: 2113..2120,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 45,
            span: 2120..2121,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 46,
            span: 2121..2122,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 47,
            span: 2122..2123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 70,
            column: 9,
            span: 2126..2132,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 10,
            span: 2132..2133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 70,
            column: 16,
            span: 2133..2139,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 17,
            span: 2139..2140,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">I\"",
        ),
        position: Position {
            line: 70,
            column: 21,
            span: 2140..2144,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 70,
            column: 24,
            span: 2145..2147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 70,
            column: 26,
            span: 2148..2149,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 27,
            span: 2149..2150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 70,
            column: 29,
            span: 2151..2152,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 70,
            column: 30,
            span: 2152..2153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "reverse",
        ),
        position: Position {
            line: 70,
            column: 37,
            span: 2153..2160,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 38,
            span: 2160..2161,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 39,
            span: 2161..2162,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 40,
            span: 2162..2163,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 70,
            column: 43,
            span: 2164..2166,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xAA",
            ),
        ),
        position: Position {
            line: 70,
            column: 48,
            span: 2166..2171,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 49,
            span: 2171..2172,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 71,
            column: 0,
            span: 2173..2176,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 73,
            column: 0,
            span: 2178..2180,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 74,
            column: 8,
            span: 2183..2188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 74,
            column: 13,
            span: 2189..2193,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 74,
            column: 15,
            span: 2194..2195,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x13121110090807060504030201",
            ),
        ),
        position: Position {
            line: 74,
            column: 0,
            span: 2195..2224,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 75,
            column: 8,
            span: 2227..2232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 75,
            column: 10,
            span: 2233..2234,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 75,
            column: 12,
            span: 2235..2236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 75,
            column: 17,
            span: 2237..2241,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 18,
            span: 2241..2242,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<j\"",
        ),
        position: Position {
            line: 75,
            column: 22,
            span: 2242..2246,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 23,
            span: 2246..2247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 75,
            column: 28,
            span: 2248..2252,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 29,
            span: 2252..2253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 76,
            column: 9,
            span: 2256..2262,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 10,
            span: 2262..2263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 76,
            column: 16,
            span: 2263..2269,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 17,
            span: 2269..2270,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<j\"",
        ),
        position: Position {
            line: 76,
            column: 21,
            span: 2270..2274,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 22,
            span: 2274..2275,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 76,
            column: 24,
            span: 2276..2277,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 25,
            span: 2277..2278,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 76,
            column: 28,
            span: 2279..2281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 76,
            column: 33,
            span: 2282..2286,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 34,
            span: 2286..2287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 77,
            column: 9,
            span: 2290..2296,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 77,
            column: 10,
            span: 2296..2297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 77,
            column: 16,
            span: 2297..2303,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 77,
            column: 17,
            span: 2303..2304,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<i\"",
        ),
        position: Position {
            line: 77,
            column: 21,
            span: 2304..2308,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 77,
            column: 24,
            span: 2309..2311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 77,
            column: 31,
            span: 2312..2318,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 77,
            column: 33,
            span: 2319..2320,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 77,
            column: 35,
            span: 2320..2322,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 36,
            span: 2322..2323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 77,
            column: 38,
            span: 2324..2325,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 77,
            column: 41,
            span: 2326..2328,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        position: Position {
            line: 77,
            column: 46,
            span: 2329..2333,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 77,
            column: 47,
            span: 2333..2334,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 77,
            column: 50,
            span: 2335..2337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 77,
            column: 55,
            span: 2338..2342,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 77,
            column: 56,
            span: 2342..2343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 78,
            column: 9,
            span: 2346..2352,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 10,
            span: 2352..2353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 78,
            column: 16,
            span: 2353..2359,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 17,
            span: 2359..2360,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<i\"",
        ),
        position: Position {
            line: 78,
            column: 21,
            span: 2360..2364,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 78,
            column: 24,
            span: 2365..2367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 78,
            column: 31,
            span: 2368..2374,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 78,
            column: 33,
            span: 2375..2376,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 78,
            column: 35,
            span: 2376..2378,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 36,
            span: 2378..2379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 78,
            column: 38,
            span: 2380..2381,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 78,
            column: 41,
            span: 2382..2384,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        position: Position {
            line: 78,
            column: 46,
            span: 2385..2389,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 47,
            span: 2389..2390,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 78,
            column: 50,
            span: 2391..2393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 78,
            column: 55,
            span: 2394..2398,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 56,
            span: 2398..2399,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 80,
            column: 6,
            span: 2403..2406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 80,
            column: 8,
            span: 2407..2408,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 80,
            column: 10,
            span: 2409..2410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 80,
            column: 17,
            span: 2411..2417,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 80,
            column: 19,
            span: 2418..2419,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 80,
            column: 21,
            span: 2419..2421,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 22,
            span: 2421..2422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NB",
        ),
        position: Position {
            line: 80,
            column: 25,
            span: 2423..2425,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 80,
            column: 0,
            span: 2426..2428,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 81,
            column: 10,
            span: 2433..2438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 81,
            column: 12,
            span: 2439..2440,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 81,
            column: 14,
            span: 2441..2442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 81,
            column: 19,
            span: 2443..2447,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 20,
            span: 2447..2448,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<j\"",
        ),
        position: Position {
            line: 81,
            column: 24,
            span: 2448..2452,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 81,
            column: 25,
            span: 2452..2453,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 81,
            column: 27,
            span: 2454..2455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 81,
            column: 31,
            span: 2455..2459,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 32,
            span: 2459..2460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 82,
            column: 11,
            span: 2465..2471,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 12,
            span: 2471..2472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 82,
            column: 18,
            span: 2472..2478,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 19,
            span: 2478..2479,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<j\"",
        ),
        position: Position {
            line: 82,
            column: 23,
            span: 2479..2483,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 82,
            column: 24,
            span: 2483..2484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 82,
            column: 26,
            span: 2485..2486,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 27,
            span: 2486..2487,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 82,
            column: 30,
            span: 2488..2490,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 82,
            column: 32,
            span: 2491..2492,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 82,
            column: 36,
            span: 2492..2496,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 37,
            span: 2496..2497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 84,
            column: 11,
            span: 2544..2550,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 12,
            span: 2550..2551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 84,
            column: 18,
            span: 2551..2557,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 19,
            span: 2557..2558,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<i\"",
        ),
        position: Position {
            line: 84,
            column: 23,
            span: 2558..2562,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 84,
            column: 26,
            span: 2563..2565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 84,
            column: 28,
            span: 2566..2567,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 84,
            column: 29,
            span: 2567..2568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 84,
            column: 31,
            span: 2569..2570,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 84,
            column: 34,
            span: 2571..2573,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 36,
            span: 2574..2575,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xFF\"",
        ),
        position: Position {
            line: 84,
            column: 42,
            span: 2575..2581,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 43,
            span: 2581..2582,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 84,
            column: 44,
            span: 2582..2583,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 84,
            column: 47,
            span: 2583..2586,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 48,
            span: 2586..2587,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 84,
            column: 49,
            span: 2587..2588,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 84,
            column: 51,
            span: 2589..2590,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 84,
            column: 58,
            span: 2591..2597,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 59,
            span: 2597..2598,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 60,
            span: 2598..2599,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 84,
            column: 63,
            span: 2600..2602,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 84,
            column: 65,
            span: 2603..2604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 84,
            column: 69,
            span: 2604..2608,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 70,
            span: 2608..2609,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 85,
            column: 11,
            span: 2614..2620,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 12,
            span: 2620..2621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 85,
            column: 18,
            span: 2621..2627,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 19,
            span: 2627..2628,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">i\"",
        ),
        position: Position {
            line: 85,
            column: 23,
            span: 2628..2632,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 85,
            column: 26,
            span: 2633..2635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 85,
            column: 28,
            span: 2636..2637,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 85,
            column: 29,
            span: 2637..2638,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 31,
            span: 2639..2640,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xFF\"",
        ),
        position: Position {
            line: 85,
            column: 37,
            span: 2640..2646,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 38,
            span: 2646..2647,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 85,
            column: 39,
            span: 2647..2648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 85,
            column: 42,
            span: 2648..2651,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 43,
            span: 2651..2652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 85,
            column: 44,
            span: 2652..2653,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 85,
            column: 46,
            span: 2654..2655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 85,
            column: 53,
            span: 2656..2662,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 54,
            span: 2662..2663,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 85,
            column: 57,
            span: 2664..2666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 85,
            column: 59,
            span: 2667..2668,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 85,
            column: 60,
            span: 2668..2669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "reverse",
        ),
        position: Position {
            line: 85,
            column: 67,
            span: 2669..2676,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 68,
            span: 2676..2677,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 69,
            span: 2677..2678,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 70,
            span: 2678..2679,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 85,
            column: 73,
            span: 2680..2682,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 85,
            column: 75,
            span: 2683..2684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 85,
            column: 79,
            span: 2684..2688,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 80,
            span: 2688..2689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 86,
            column: 11,
            span: 2694..2700,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 12,
            span: 2700..2701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 86,
            column: 18,
            span: 2701..2707,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 19,
            span: 2707..2708,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<I\"",
        ),
        position: Position {
            line: 86,
            column: 23,
            span: 2708..2712,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 86,
            column: 26,
            span: 2713..2715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 86,
            column: 28,
            span: 2716..2717,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 29,
            span: 2717..2718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 86,
            column: 31,
            span: 2719..2720,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 86,
            column: 34,
            span: 2721..2723,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 36,
            span: 2724..2725,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        position: Position {
            line: 86,
            column: 40,
            span: 2725..2729,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 41,
            span: 2729..2730,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 86,
            column: 42,
            span: 2730..2731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 86,
            column: 45,
            span: 2731..2734,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 46,
            span: 2734..2735,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 86,
            column: 47,
            span: 2735..2736,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 86,
            column: 49,
            span: 2737..2738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 86,
            column: 56,
            span: 2739..2745,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 57,
            span: 2745..2746,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 58,
            span: 2746..2747,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 86,
            column: 61,
            span: 2748..2750,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 86,
            column: 63,
            span: 2751..2752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 86,
            column: 67,
            span: 2752..2756,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 68,
            span: 2756..2757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 89,
            column: 15,
            span: 2780..2790,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 89,
            column: 16,
            span: 2790..2791,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"does not fit\"",
        ),
        position: Position {
            line: 89,
            column: 30,
            span: 2791..2805,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 31,
            span: 2805..2806,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 89,
            column: 38,
            span: 2807..2813,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 39,
            span: 2813..2814,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<I\"",
        ),
        position: Position {
            line: 89,
            column: 44,
            span: 2815..2819,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 89,
            column: 47,
            span: 2820..2822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 89,
            column: 49,
            span: 2823..2824,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 50,
            span: 2824..2825,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 89,
            column: 52,
            span: 2826..2827,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\x00\"",
        ),
        position: Position {
            line: 89,
            column: 58,
            span: 2827..2833,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 89,
            column: 59,
            span: 2833..2834,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 89,
            column: 60,
            span: 2834..2835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 89,
            column: 63,
            span: 2835..2838,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 89,
            column: 64,
            span: 2838..2839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 89,
            column: 65,
            span: 2839..2840,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 89,
            column: 67,
            span: 2841..2842,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 89,
            column: 69,
            span: 2842..2844,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 89,
            column: 70,
            span: 2844..2845,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 89,
            column: 73,
            span: 2846..2848,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\1\"",
        ),
        position: Position {
            line: 89,
            column: 78,
            span: 2849..2853,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 89,
            column: 79,
            span: 2853..2854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 90,
            column: 15,
            span: 2859..2869,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 90,
            column: 16,
            span: 2869..2870,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"does not fit\"",
        ),
        position: Position {
            line: 90,
            column: 30,
            span: 2870..2884,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 90,
            column: 31,
            span: 2884..2885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 90,
            column: 38,
            span: 2886..2892,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 90,
            column: 39,
            span: 2892..2893,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">i\"",
        ),
        position: Position {
            line: 90,
            column: 44,
            span: 2894..2898,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 90,
            column: 47,
            span: 2899..2901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 90,
            column: 49,
            span: 2902..2903,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 90,
            column: 50,
            span: 2903..2904,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\1\"",
        ),
        position: Position {
            line: 90,
            column: 55,
            span: 2905..2909,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 90,
            column: 58,
            span: 2910..2912,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 90,
            column: 60,
            span: 2913..2914,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\x00\"",
        ),
        position: Position {
            line: 90,
            column: 66,
            span: 2914..2920,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 90,
            column: 67,
            span: 2920..2921,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 90,
            column: 68,
            span: 2921..2922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 90,
            column: 71,
            span: 2922..2925,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 90,
            column: 72,
            span: 2925..2926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 90,
            column: 73,
            span: 2926..2927,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 90,
            column: 75,
            span: 2928..2929,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 90,
            column: 77,
            span: 2929..2931,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 90,
            column: 78,
            span: 2931..2932,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 90,
            column: 79,
            span: 2932..2933,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 91,
            column: 0,
            span: 2936..2939,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 92,
            column: 0,
            span: 2940..2943,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 94,
            column: 4,
            span: 2945..2948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 94,
            column: 6,
            span: 2949..2950,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 94,
            column: 8,
            span: 2951..2952,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 94,
            column: 10,
            span: 2952..2954,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 94,
            column: 11,
            span: 2954..2955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 94,
            column: 18,
            span: 2956..2962,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 94,
            column: 0,
            span: 2963..2965,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 95,
            column: 8,
            span: 2968..2973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lstr",
        ),
        position: Position {
            line: 95,
            column: 13,
            span: 2974..2978,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 95,
            column: 15,
            span: 2979..2980,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\1\\2\\3\\4\\5\\6\\7\\8\\9\\10\\11\\12\\13\"",
        ),
        position: Position {
            line: 95,
            column: 48,
            span: 2981..3013,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 96,
            column: 8,
            span: 3016..3021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 96,
            column: 13,
            span: 3022..3026,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 96,
            column: 15,
            span: 3027..3028,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x13121110090807060504030201",
            ),
        ),
        position: Position {
            line: 96,
            column: 0,
            span: 3028..3057,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 97,
            column: 8,
            span: 3060..3065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 97,
            column: 10,
            span: 3066..3067,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 97,
            column: 12,
            span: 3068..3069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 97,
            column: 17,
            span: 3070..3074,
        },
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        position: Position {
            line: 97,
            column: 19,
            span: 3075..3076,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 21,
            span: 3077..3078,
        },
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        position: Position {
            line: 97,
            column: 22,
            span: 3078..3079,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 23,
            span: 3079..3080,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 97,
            column: 24,
            span: 3080..3081,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 97,
            column: 25,
            span: 3080..3082,
        },
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        position: Position {
            line: 97,
            column: 28,
            span: 3083..3085,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 30,
            span: 3086..3087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 97,
            column: 31,
            span: 3087..3088,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 97,
            column: 33,
            span: 3089..3090,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 97,
            column: 35,
            span: 3090..3092,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 36,
            span: 3092..3093,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 37,
            span: 3093..3094,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 38,
            span: 3094..3095,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 98,
            column: 8,
            span: 3098..3103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 98,
            column: 10,
            span: 3104..3105,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 98,
            column: 12,
            span: 3106..3107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 98,
            column: 19,
            span: 3108..3114,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 98,
            column: 20,
            span: 3114..3115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 98,
            column: 23,
            span: 3115..3118,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 98,
            column: 24,
            span: 3118..3119,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lstr",
        ),
        position: Position {
            line: 98,
            column: 28,
            span: 3119..3123,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 98,
            column: 29,
            span: 3123..3124,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 31,
            span: 3124..3126,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 98,
            column: 32,
            span: 3126..3127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 98,
            column: 34,
            span: 3128..3129,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 98,
            column: 35,
            span: 3129..3130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 99,
            column: 9,
            span: 3133..3139,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 99,
            column: 10,
            span: 3139..3140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 99,
            column: 14,
            span: 3140..3144,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 99,
            column: 15,
            span: 3144..3145,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<i\"",
        ),
        position: Position {
            line: 99,
            column: 19,
            span: 3145..3149,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 99,
            column: 22,
            span: 3150..3152,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 99,
            column: 24,
            span: 3153..3154,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 99,
            column: 25,
            span: 3154..3155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 99,
            column: 27,
            span: 3156..3157,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 99,
            column: 28,
            span: 3157..3158,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 99,
            column: 31,
            span: 3159..3161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 99,
            column: 33,
            span: 3162..3163,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 99,
            column: 34,
            span: 3163..3164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 100,
            column: 9,
            span: 3167..3173,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 10,
            span: 3173..3174,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 100,
            column: 14,
            span: 3174..3178,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 15,
            span: 3178..3179,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">i\"",
        ),
        position: Position {
            line: 100,
            column: 19,
            span: 3179..3183,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 100,
            column: 22,
            span: 3184..3186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 100,
            column: 24,
            span: 3187..3188,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 100,
            column: 25,
            span: 3188..3189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 100,
            column: 27,
            span: 3190..3191,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 28,
            span: 3191..3192,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 100,
            column: 31,
            span: 3193..3195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 100,
            column: 33,
            span: 3196..3197,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 100,
            column: 34,
            span: 3197..3198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "reverse",
        ),
        position: Position {
            line: 100,
            column: 41,
            span: 3198..3205,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 42,
            span: 3205..3206,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 43,
            span: 3206..3207,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 44,
            span: 3207..3208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 101,
            column: 9,
            span: 3211..3217,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 10,
            span: 3217..3218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 101,
            column: 16,
            span: 3218..3224,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 17,
            span: 3224..3225,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">i\"",
        ),
        position: Position {
            line: 101,
            column: 21,
            span: 3225..3229,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 101,
            column: 24,
            span: 3230..3232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 101,
            column: 26,
            span: 3233..3234,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 101,
            column: 27,
            span: 3234..3235,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 101,
            column: 29,
            span: 3236..3237,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 101,
            column: 30,
            span: 3237..3238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "reverse",
        ),
        position: Position {
            line: 101,
            column: 37,
            span: 3238..3245,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 38,
            span: 3245..3246,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 101,
            column: 39,
            span: 3246..3247,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 101,
            column: 40,
            span: 3247..3248,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 101,
            column: 43,
            span: 3249..3251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 101,
            column: 45,
            span: 3252..3253,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 101,
            column: 46,
            span: 3253..3254,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 102,
            column: 0,
            span: 3255..3258,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 105,
            column: 0,
            span: 3278..3280,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 106,
            column: 8,
            span: 3283..3288,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 106,
            column: 10,
            span: 3289..3290,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 106,
            column: 12,
            span: 3291..3292,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xf0",
            ),
        ),
        position: Position {
            line: 106,
            column: 0,
            span: 3292..3297,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 107,
            column: 6,
            span: 3300..3303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 107,
            column: 8,
            span: 3304..3305,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 107,
            column: 10,
            span: 3306..3307,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 107,
            column: 12,
            span: 3307..3309,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 13,
            span: 3309..3310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 107,
            column: 20,
            span: 3311..3317,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 107,
            column: 22,
            span: 3318..3319,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 107,
            column: 24,
            span: 3319..3321,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 107,
            column: 0,
            span: 3322..3324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 108,
            column: 11,
            span: 3329..3335,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 12,
            span: 3335..3336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 108,
            column: 18,
            span: 3336..3342,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 19,
            span: 3342..3343,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<i\"",
        ),
        position: Position {
            line: 108,
            column: 23,
            span: 3343..3347,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 108,
            column: 25,
            span: 3347..3349,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 108,
            column: 26,
            span: 3349..3350,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 108,
            column: 27,
            span: 3350..3351,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xf0\"",
        ),
        position: Position {
            line: 108,
            column: 34,
            span: 3352..3358,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 108,
            column: 36,
            span: 3358..3360,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 37,
            span: 3360..3361,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xff\"",
        ),
        position: Position {
            line: 108,
            column: 43,
            span: 3361..3367,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 44,
            span: 3367..3368,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 108,
            column: 45,
            span: 3368..3369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 108,
            column: 48,
            span: 3369..3372,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 49,
            span: 3372..3373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 108,
            column: 50,
            span: 3373..3374,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 108,
            column: 52,
            span: 3375..3376,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 54,
            span: 3376..3378,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 55,
            span: 3378..3379,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 56,
            span: 3379..3380,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 108,
            column: 59,
            span: 3381..3383,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 108,
            column: 61,
            span: 3384..3385,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 63,
            span: 3384..3387,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 64,
            span: 3387..3388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 109,
            column: 11,
            span: 3393..3399,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 12,
            span: 3399..3400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 109,
            column: 18,
            span: 3400..3406,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 19,
            span: 3406..3407,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">I\"",
        ),
        position: Position {
            line: 109,
            column: 23,
            span: 3407..3411,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 109,
            column: 25,
            span: 3411..3413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 109,
            column: 26,
            span: 3413..3414,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 109,
            column: 27,
            span: 3414..3415,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xf0\"",
        ),
        position: Position {
            line: 109,
            column: 34,
            span: 3416..3422,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 109,
            column: 36,
            span: 3422..3424,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 37,
            span: 3424..3425,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xff\"",
        ),
        position: Position {
            line: 109,
            column: 43,
            span: 3425..3431,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 109,
            column: 44,
            span: 3431..3432,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 109,
            column: 45,
            span: 3432..3433,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 109,
            column: 48,
            span: 3433..3436,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 49,
            span: 3436..3437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 109,
            column: 50,
            span: 3437..3438,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 109,
            column: 52,
            span: 3439..3440,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 109,
            column: 54,
            span: 3440..3442,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 109,
            column: 55,
            span: 3442..3443,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 109,
            column: 56,
            span: 3443..3444,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 109,
            column: 59,
            span: 3445..3447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 109,
            column: 61,
            span: 3448..3449,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 109,
            column: 62,
            span: 3449..3450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 110,
            column: 6,
            span: 3455..3456,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 110,
            column: 8,
            span: 3457..3458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 110,
            column: 10,
            span: 3459..3460,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 110,
            column: 12,
            span: 3461..3462,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "256",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 110,
            column: 16,
            span: 3462..3466,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 110,
            column: 18,
            span: 3467..3468,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xff",
            ),
        ),
        position: Position {
            line: 110,
            column: 0,
            span: 3468..3473,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 111,
            column: 0,
            span: 3476..3479,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 112,
            column: 0,
            span: 3480..3483,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 115,
            column: 0,
            span: 3505..3507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 116,
            column: 9,
            span: 3510..3516,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 116,
            column: 10,
            span: 3516..3517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 116,
            column: 14,
            span: 3517..3521,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 116,
            column: 15,
            span: 3521..3522,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">i2 <i2\"",
        ),
        position: Position {
            line: 116,
            column: 24,
            span: 3522..3531,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 25,
            span: 3531..3532,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 116,
            column: 28,
            span: 3532..3535,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 29,
            span: 3535..3536,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 116,
            column: 32,
            span: 3536..3539,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 116,
            column: 33,
            span: 3539..3540,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 116,
            column: 36,
            span: 3541..3543,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\10\\20\\0\"",
        ),
        position: Position {
            line: 116,
            column: 49,
            span: 3544..3556,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 116,
            column: 50,
            span: 3556..3557,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 117,
            column: 8,
            span: 3560..3565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 117,
            column: 10,
            span: 3566..3567,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 117,
            column: 11,
            span: 3567..3568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 117,
            column: 13,
            span: 3569..3570,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 117,
            column: 15,
            span: 3571..3572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 117,
            column: 22,
            span: 3573..3579,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 117,
            column: 23,
            span: 3579..3580,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<i2 >i2\"",
        ),
        position: Position {
            line: 117,
            column: 32,
            span: 3580..3589,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 117,
            column: 33,
            span: 3589..3590,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\10\\0\\0\\20\"",
        ),
        position: Position {
            line: 117,
            column: 46,
            span: 3591..3603,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 117,
            column: 47,
            span: 3603..3604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 118,
            column: 9,
            span: 3607..3613,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 118,
            column: 10,
            span: 3613..3614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 118,
            column: 11,
            span: 3614..3615,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 118,
            column: 14,
            span: 3616..3618,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 118,
            column: 17,
            span: 3618..3621,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 118,
            column: 21,
            span: 3622..3625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 118,
            column: 23,
            span: 3626..3627,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 118,
            column: 26,
            span: 3628..3630,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 118,
            column: 29,
            span: 3630..3633,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 118,
            column: 30,
            span: 3633..3634,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 119,
            column: 9,
            span: 3637..3643,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 10,
            span: 3643..3644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 119,
            column: 14,
            span: 3644..3648,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 15,
            span: 3648..3649,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=i4\"",
        ),
        position: Position {
            line: 119,
            column: 20,
            span: 3649..3654,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 119,
            column: 21,
            span: 3654..3655,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2001",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 119,
            column: 26,
            span: 3655..3660,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 27,
            span: 3660..3661,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 119,
            column: 30,
            span: 3662..3664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 119,
            column: 35,
            span: 3665..3669,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 36,
            span: 3669..3670,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i4\"",
        ),
        position: Position {
            line: 119,
            column: 40,
            span: 3670..3674,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 119,
            column: 41,
            span: 3674..3675,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2001",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 119,
            column: 46,
            span: 3675..3680,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 47,
            span: 3680..3681,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 48,
            span: 3681..3682,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 120,
            column: 0,
            span: 3683..3686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 122,
            column: 6,
            span: 3688..3693,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 122,
            column: 7,
            span: 3693..3694,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing invalid formats\"",
        ),
        position: Position {
            line: 122,
            column: 32,
            span: 3694..3719,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 122,
            column: 33,
            span: 3719..3720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 124,
            column: 11,
            span: 3722..3732,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 12,
            span: 3732..3733,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of limits\"",
        ),
        position: Position {
            line: 124,
            column: 27,
            span: 3733..3748,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 124,
            column: 28,
            span: 3748..3749,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 124,
            column: 33,
            span: 3750..3754,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 124,
            column: 34,
            span: 3754..3755,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i0\"",
        ),
        position: Position {
            line: 124,
            column: 39,
            span: 3756..3760,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 124,
            column: 40,
            span: 3760..3761,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 124,
            column: 42,
            span: 3761..3763,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 43,
            span: 3763..3764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 125,
            column: 11,
            span: 3765..3775,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 12,
            span: 3775..3776,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of limits\"",
        ),
        position: Position {
            line: 125,
            column: 27,
            span: 3776..3791,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 28,
            span: 3791..3792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 125,
            column: 33,
            span: 3793..3797,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 34,
            span: 3797..3798,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i\"",
        ),
        position: Position {
            line: 125,
            column: 38,
            span: 3799..3802,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 125,
            column: 41,
            span: 3803..3805,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NB",
        ),
        position: Position {
            line: 125,
            column: 44,
            span: 3806..3808,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 125,
            column: 46,
            span: 3809..3810,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 125,
            column: 48,
            span: 3810..3812,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 49,
            span: 3812..3813,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 125,
            column: 51,
            span: 3813..3815,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 52,
            span: 3815..3816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 126,
            column: 11,
            span: 3817..3827,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 126,
            column: 12,
            span: 3827..3828,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of limits\"",
        ),
        position: Position {
            line: 126,
            column: 27,
            span: 3828..3843,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 126,
            column: 28,
            span: 3843..3844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 126,
            column: 33,
            span: 3845..3849,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 126,
            column: 34,
            span: 3849..3850,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!\"",
        ),
        position: Position {
            line: 126,
            column: 38,
            span: 3851..3854,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 126,
            column: 41,
            span: 3855..3857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NB",
        ),
        position: Position {
            line: 126,
            column: 44,
            span: 3858..3860,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 126,
            column: 46,
            span: 3861..3862,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 126,
            column: 48,
            span: 3862..3864,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 126,
            column: 49,
            span: 3864..3865,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 126,
            column: 51,
            span: 3865..3867,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 126,
            column: 52,
            span: 3867..3868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 127,
            column: 11,
            span: 3869..3879,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 12,
            span: 3879..3880,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%(17%) out of limits %[1,16%]\"",
        ),
        position: Position {
            line: 127,
            column: 43,
            span: 3880..3911,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 127,
            column: 44,
            span: 3911..3912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 127,
            column: 49,
            span: 3913..3917,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 127,
            column: 50,
            span: 3917..3918,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Xi\"",
        ),
        position: Position {
            line: 127,
            column: 55,
            span: 3919..3923,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 127,
            column: 58,
            span: 3924..3926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NB",
        ),
        position: Position {
            line: 127,
            column: 61,
            span: 3927..3929,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 127,
            column: 63,
            span: 3930..3931,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 127,
            column: 65,
            span: 3931..3933,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 66,
            span: 3933..3934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 128,
            column: 11,
            span: 3935..3945,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 12,
            span: 3945..3946,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid format option 'r'\"",
        ),
        position: Position {
            line: 128,
            column: 39,
            span: 3946..3973,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 40,
            span: 3973..3974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 128,
            column: 45,
            span: 3975..3979,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 46,
            span: 3979..3980,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i3r\"",
        ),
        position: Position {
            line: 128,
            column: 52,
            span: 3981..3986,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 53,
            span: 3986..3987,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 55,
            span: 3987..3989,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 56,
            span: 3989..3990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 129,
            column: 11,
            span: 3991..4001,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 12,
            span: 4001..4002,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"16%-byte integer\"",
        ),
        position: Position {
            line: 129,
            column: 30,
            span: 4002..4020,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 31,
            span: 4020..4021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 129,
            column: 38,
            span: 4022..4028,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 39,
            span: 4028..4029,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i16\"",
        ),
        position: Position {
            line: 129,
            column: 45,
            span: 4030..4035,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 46,
            span: 4035..4036,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 129,
            column: 53,
            span: 4037..4043,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 129,
            column: 54,
            span: 4043..4044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 129,
            column: 57,
            span: 4044..4047,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 58,
            span: 4047..4048,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\3'",
        ),
        position: Position {
            line: 129,
            column: 62,
            span: 4048..4052,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 63,
            span: 4052..4053,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 129,
            column: 66,
            span: 4053..4056,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 67,
            span: 4056..4057,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 68,
            span: 4057..4058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 130,
            column: 11,
            span: 4059..4069,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 130,
            column: 12,
            span: 4069..4070,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not power of 2\"",
        ),
        position: Position {
            line: 130,
            column: 28,
            span: 4070..4086,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 29,
            span: 4086..4087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 130,
            column: 34,
            span: 4088..4092,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 35,
            span: 4092..4093,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!4i3\"",
        ),
        position: Position {
            line: 130,
            column: 42,
            span: 4094..4100,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 43,
            span: 4100..4101,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 130,
            column: 45,
            span: 4101..4103,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 46,
            span: 4103..4104,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 130,
            column: 47,
            span: 4104..4105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 131,
            column: 11,
            span: 4106..4116,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 131,
            column: 12,
            span: 4116..4117,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"missing size\"",
        ),
        position: Position {
            line: 131,
            column: 26,
            span: 4117..4131,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 131,
            column: 27,
            span: 4131..4132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 131,
            column: 32,
            span: 4133..4137,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 131,
            column: 33,
            span: 4137..4138,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        position: Position {
            line: 131,
            column: 37,
            span: 4139..4142,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 131,
            column: 38,
            span: 4142..4143,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 131,
            column: 41,
            span: 4144..4146,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 131,
            column: 42,
            span: 4146..4147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 132,
            column: 11,
            span: 4148..4158,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 132,
            column: 12,
            span: 4158..4159,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"variable%-length format\"",
        ),
        position: Position {
            line: 132,
            column: 37,
            span: 4159..4184,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 132,
            column: 38,
            span: 4184..4185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 132,
            column: 47,
            span: 4186..4194,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 132,
            column: 48,
            span: 4194..4195,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s\"",
        ),
        position: Position {
            line: 132,
            column: 52,
            span: 4196..4199,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 132,
            column: 53,
            span: 4199..4200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 133,
            column: 11,
            span: 4201..4211,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 133,
            column: 12,
            span: 4211..4212,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"variable%-length format\"",
        ),
        position: Position {
            line: 133,
            column: 37,
            span: 4212..4237,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 133,
            column: 38,
            span: 4237..4238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 133,
            column: 47,
            span: 4239..4247,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 133,
            column: 48,
            span: 4247..4248,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"z\"",
        ),
        position: Position {
            line: 133,
            column: 52,
            span: 4249..4252,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 133,
            column: 53,
            span: 4252..4253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 136,
            column: 11,
            span: 4320..4330,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 136,
            column: 12,
            span: 4330..4331,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid format\"",
        ),
        position: Position {
            line: 136,
            column: 28,
            span: 4331..4347,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 136,
            column: 29,
            span: 4347..4348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 136,
            column: 38,
            span: 4349..4357,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 136,
            column: 39,
            span: 4357..4358,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c1\"",
        ),
        position: Position {
            line: 136,
            column: 44,
            span: 4359..4363,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 136,
            column: 47,
            span: 4364..4366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 136,
            column: 54,
            span: 4367..4373,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 136,
            column: 55,
            span: 4373..4374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 136,
            column: 58,
            span: 4374..4377,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 136,
            column: 59,
            span: 4377..4378,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        position: Position {
            line: 136,
            column: 62,
            span: 4378..4381,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 136,
            column: 63,
            span: 4381..4382,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 136,
            column: 66,
            span: 4382..4385,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 67,
            span: 4385..4386,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 68,
            span: 4386..4387,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 138,
            column: 3,
            span: 4389..4391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 138,
            column: 12,
            span: 4392..4400,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 138,
            column: 13,
            span: 4400..4401,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i\"",
        ),
        position: Position {
            line: 138,
            column: 16,
            span: 4401..4404,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 138,
            column: 17,
            span: 4404..4405,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 138,
            column: 20,
            span: 4406..4408,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 138,
            column: 22,
            span: 4408..4410,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 138,
            column: 0,
            span: 4411..4415,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 140,
            column: 8,
            span: 4479..4484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 140,
            column: 10,
            span: 4485..4486,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 140,
            column: 12,
            span: 4487..4488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 140,
            column: 19,
            span: 4489..4495,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 140,
            column: 20,
            span: 4495..4496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 140,
            column: 23,
            span: 4496..4499,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 140,
            column: 24,
            span: 4499..4500,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c268435456\"",
        ),
        position: Position {
            line: 140,
            column: 36,
            span: 4500..4512,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 37,
            span: 4512..4513,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 39,
            span: 4513..4515,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 140,
            column: 40,
            span: 4515..4516,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 41,
            span: 4515..4517,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 140,
            column: 42,
            span: 4517..4518,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 141,
            column: 13,
            span: 4521..4531,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 141,
            column: 14,
            span: 4531..4532,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too large\"",
        ),
        position: Position {
            line: 141,
            column: 25,
            span: 4532..4543,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 141,
            column: 26,
            span: 4543..4544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 141,
            column: 35,
            span: 4545..4553,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 141,
            column: 36,
            span: 4553..4554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 141,
            column: 38,
            span: 4555..4556,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 141,
            column: 39,
            span: 4556..4557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 143,
            column: 4,
            span: 4580..4581,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 143,
            column: 6,
            span: 4582..4583,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 143,
            column: 13,
            span: 4584..4590,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 143,
            column: 14,
            span: 4590..4591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 143,
            column: 17,
            span: 4591..4594,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 143,
            column: 18,
            span: 4594..4595,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c268435456\"",
        ),
        position: Position {
            line: 143,
            column: 30,
            span: 4595..4607,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 143,
            column: 31,
            span: 4607..4608,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 143,
            column: 33,
            span: 4608..4610,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 143,
            column: 34,
            span: 4610..4611,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 143,
            column: 35,
            span: 4610..4612,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 143,
            column: 37,
            span: 4613..4614,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 143,
            column: 39,
            span: 4614..4616,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 143,
            column: 40,
            span: 4616..4617,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 143,
            column: 43,
            span: 4618..4620,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c268435455\"",
        ),
        position: Position {
            line: 143,
            column: 56,
            span: 4621..4633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 144,
            column: 9,
            span: 4636..4642,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 10,
            span: 4642..4643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 144,
            column: 18,
            span: 4643..4651,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 19,
            span: 4651..4652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 144,
            column: 20,
            span: 4652..4653,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 144,
            column: 21,
            span: 4653..4654,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 144,
            column: 24,
            span: 4655..4657,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7fffffff",
            ),
        ),
        position: Position {
            line: 144,
            column: 35,
            span: 4657..4668,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 144,
            column: 36,
            span: 4668..4669,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 145,
            column: 0,
            span: 4670..4673,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 148,
            column: 4,
            span: 4698..4701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 148,
            column: 6,
            span: 4702..4703,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 148,
            column: 8,
            span: 4704..4705,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 148,
            column: 10,
            span: 4705..4707,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 148,
            column: 11,
            span: 4707..4708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 148,
            column: 18,
            span: 4709..4715,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 148,
            column: 20,
            span: 4716..4717,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 148,
            column: 22,
            span: 4717..4719,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 148,
            column: 0,
            span: 4720..4722,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 149,
            column: 8,
            span: 4725..4730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "umax",
        ),
        position: Position {
            line: 149,
            column: 13,
            span: 4731..4735,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 149,
            column: 15,
            span: 4736..4737,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 149,
            column: 17,
            span: 4738..4739,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 18,
            span: 4738..4740,
        },
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        position: Position {
            line: 149,
            column: 21,
            span: 4741..4743,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 149,
            column: 23,
            span: 4744..4745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 149,
            column: 24,
            span: 4745..4746,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 149,
            column: 26,
            span: 4747..4748,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 28,
            span: 4748..4750,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 149,
            column: 29,
            span: 4750..4751,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 149,
            column: 30,
            span: 4751..4752,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 149,
            column: 32,
            span: 4753..4754,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 0,
            span: 4754..4756,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 150,
            column: 8,
            span: 4759..4764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 150,
            column: 12,
            span: 4765..4768,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 150,
            column: 14,
            span: 4769..4770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "umax",
        ),
        position: Position {
            line: 150,
            column: 19,
            span: 4771..4775,
        },
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        position: Position {
            line: 150,
            column: 22,
            span: 4776..4778,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 150,
            column: 0,
            span: 4778..4780,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 151,
            column: 8,
            span: 4783..4788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        position: Position {
            line: 151,
            column: 12,
            span: 4789..4792,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 151,
            column: 14,
            span: 4793..4794,
        },
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        position: Position {
            line: 151,
            column: 16,
            span: 4795..4796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 151,
            column: 0,
            span: 4796..4799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 152,
            column: 13,
            span: 4802..4812,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 152,
            column: 14,
            span: 4812..4813,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"overflow\"",
        ),
        position: Position {
            line: 152,
            column: 24,
            span: 4813..4823,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 25,
            span: 4823..4824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 152,
            column: 30,
            span: 4825..4829,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 31,
            span: 4829..4830,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<I\"",
        ),
        position: Position {
            line: 152,
            column: 36,
            span: 4831..4835,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 152,
            column: 39,
            span: 4836..4838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 152,
            column: 41,
            span: 4839..4840,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 42,
            span: 4840..4841,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 152,
            column: 44,
            span: 4842..4843,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 45,
            span: 4842..4844,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 152,
            column: 46,
            span: 4844..4845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 153,
            column: 13,
            span: 4848..4858,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 14,
            span: 4858..4859,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"overflow\"",
        ),
        position: Position {
            line: 153,
            column: 24,
            span: 4859..4869,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 153,
            column: 25,
            span: 4869..4870,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 153,
            column: 30,
            span: 4871..4875,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 153,
            column: 31,
            span: 4875..4876,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<I\"",
        ),
        position: Position {
            line: 153,
            column: 36,
            span: 4877..4881,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 153,
            column: 39,
            span: 4882..4884,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 153,
            column: 41,
            span: 4885..4886,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 153,
            column: 42,
            span: 4886..4887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        position: Position {
            line: 153,
            column: 46,
            span: 4888..4891,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 47,
            span: 4891..4892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 154,
            column: 13,
            span: 4895..4905,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 154,
            column: 14,
            span: 4905..4906,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"overflow\"",
        ),
        position: Position {
            line: 154,
            column: 24,
            span: 4906..4916,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 154,
            column: 25,
            span: 4916..4917,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 154,
            column: 30,
            span: 4918..4922,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 154,
            column: 31,
            span: 4922..4923,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">I\"",
        ),
        position: Position {
            line: 154,
            column: 36,
            span: 4924..4928,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 154,
            column: 39,
            span: 4929..4931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 154,
            column: 41,
            span: 4932..4933,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 154,
            column: 42,
            span: 4933..4934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "umax",
        ),
        position: Position {
            line: 154,
            column: 47,
            span: 4935..4939,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 154,
            column: 49,
            span: 4940..4941,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 154,
            column: 51,
            span: 4941..4943,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 154,
            column: 52,
            span: 4943..4944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 156,
            column: 13,
            span: 4948..4958,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 14,
            span: 4958..4959,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"overflow\"",
        ),
        position: Position {
            line: 156,
            column: 24,
            span: 4959..4969,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 25,
            span: 4969..4970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 156,
            column: 30,
            span: 4971..4975,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 31,
            span: 4975..4976,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">i\"",
        ),
        position: Position {
            line: 156,
            column: 36,
            span: 4977..4981,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 156,
            column: 39,
            span: 4982..4984,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 156,
            column: 41,
            span: 4985..4986,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 42,
            span: 4986..4987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "umax",
        ),
        position: Position {
            line: 156,
            column: 47,
            span: 4988..4992,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 48,
            span: 4992..4993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 157,
            column: 13,
            span: 4996..5006,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 157,
            column: 14,
            span: 5006..5007,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"overflow\"",
        ),
        position: Position {
            line: 157,
            column: 24,
            span: 5007..5017,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 25,
            span: 5017..5018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 157,
            column: 30,
            span: 5019..5023,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 31,
            span: 5023..5024,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">i\"",
        ),
        position: Position {
            line: 157,
            column: 36,
            span: 5025..5029,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 157,
            column: 39,
            span: 5030..5032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 157,
            column: 41,
            span: 5033..5034,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 42,
            span: 5034..5035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 157,
            column: 46,
            span: 5036..5039,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 157,
            column: 48,
            span: 5040..5041,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 157,
            column: 50,
            span: 5041..5043,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 157,
            column: 51,
            span: 5043..5044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 158,
            column: 13,
            span: 5047..5057,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 158,
            column: 14,
            span: 5057..5058,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"overflow\"",
        ),
        position: Position {
            line: 158,
            column: 24,
            span: 5058..5068,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 158,
            column: 25,
            span: 5068..5069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 158,
            column: 30,
            span: 5070..5074,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 158,
            column: 31,
            span: 5074..5075,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<i\"",
        ),
        position: Position {
            line: 158,
            column: 36,
            span: 5076..5080,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 158,
            column: 39,
            span: 5081..5083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 158,
            column: 41,
            span: 5084..5085,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 158,
            column: 42,
            span: 5085..5086,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        position: Position {
            line: 158,
            column: 46,
            span: 5087..5090,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 158,
            column: 48,
            span: 5091..5092,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 158,
            column: 50,
            span: 5092..5094,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 158,
            column: 51,
            span: 5094..5095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 160,
            column: 9,
            span: 5099..5105,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 160,
            column: 10,
            span: 5105..5106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 160,
            column: 16,
            span: 5106..5112,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 160,
            column: 17,
            span: 5112..5113,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">i\"",
        ),
        position: Position {
            line: 160,
            column: 21,
            span: 5113..5117,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 160,
            column: 24,
            span: 5118..5120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 160,
            column: 26,
            span: 5121..5122,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 160,
            column: 27,
            span: 5122..5123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 160,
            column: 32,
            span: 5124..5128,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 160,
            column: 33,
            span: 5128..5129,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">i\"",
        ),
        position: Position {
            line: 160,
            column: 37,
            span: 5129..5133,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 160,
            column: 40,
            span: 5134..5136,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 160,
            column: 42,
            span: 5137..5138,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 160,
            column: 43,
            span: 5138..5139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 160,
            column: 47,
            span: 5140..5143,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 160,
            column: 48,
            span: 5143..5144,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 160,
            column: 49,
            span: 5144..5145,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 160,
            column: 52,
            span: 5146..5148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 160,
            column: 56,
            span: 5149..5152,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 160,
            column: 57,
            span: 5152..5153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 161,
            column: 9,
            span: 5156..5162,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 161,
            column: 10,
            span: 5162..5163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 161,
            column: 16,
            span: 5163..5169,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 161,
            column: 17,
            span: 5169..5170,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<i\"",
        ),
        position: Position {
            line: 161,
            column: 21,
            span: 5170..5174,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 161,
            column: 24,
            span: 5175..5177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 161,
            column: 26,
            span: 5178..5179,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 161,
            column: 27,
            span: 5179..5180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 161,
            column: 32,
            span: 5181..5185,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 161,
            column: 33,
            span: 5185..5186,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<i\"",
        ),
        position: Position {
            line: 161,
            column: 37,
            span: 5186..5190,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 161,
            column: 40,
            span: 5191..5193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 161,
            column: 42,
            span: 5194..5195,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 161,
            column: 43,
            span: 5195..5196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        position: Position {
            line: 161,
            column: 47,
            span: 5197..5200,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 161,
            column: 48,
            span: 5200..5201,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 161,
            column: 49,
            span: 5201..5202,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 161,
            column: 52,
            span: 5203..5205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        position: Position {
            line: 161,
            column: 56,
            span: 5206..5209,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 161,
            column: 57,
            span: 5209..5210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 162,
            column: 9,
            span: 5213..5219,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 10,
            span: 5219..5220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 162,
            column: 16,
            span: 5220..5226,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 17,
            span: 5226..5227,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">I\"",
        ),
        position: Position {
            line: 162,
            column: 21,
            span: 5227..5231,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 162,
            column: 24,
            span: 5232..5234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 162,
            column: 26,
            span: 5235..5236,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 27,
            span: 5236..5237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 162,
            column: 32,
            span: 5238..5242,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 33,
            span: 5242..5243,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">I\"",
        ),
        position: Position {
            line: 162,
            column: 37,
            span: 5243..5247,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 162,
            column: 40,
            span: 5248..5250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 162,
            column: 42,
            span: 5251..5252,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 43,
            span: 5252..5253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "umax",
        ),
        position: Position {
            line: 162,
            column: 48,
            span: 5254..5258,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 49,
            span: 5258..5259,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 50,
            span: 5259..5260,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 162,
            column: 53,
            span: 5261..5263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "umax",
        ),
        position: Position {
            line: 162,
            column: 58,
            span: 5264..5268,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 59,
            span: 5268..5269,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 163,
            column: 0,
            span: 5270..5273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 166,
            column: 7,
            span: 5295..5301,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 8,
            span: 5301..5302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 166,
            column: 14,
            span: 5302..5308,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 15,
            span: 5308..5309,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">j\"",
        ),
        position: Position {
            line: 166,
            column: 19,
            span: 5309..5313,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 166,
            column: 20,
            span: 5313..5314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 166,
            column: 25,
            span: 5315..5319,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 26,
            span: 5319..5320,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">j\"",
        ),
        position: Position {
            line: 166,
            column: 30,
            span: 5320..5324,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 166,
            column: 31,
            span: 5324..5325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 166,
            column: 36,
            span: 5326..5330,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 166,
            column: 37,
            span: 5330..5331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxinteger",
        ),
        position: Position {
            line: 166,
            column: 47,
            span: 5331..5341,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 48,
            span: 5341..5342,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 49,
            span: 5342..5343,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 166,
            column: 52,
            span: 5344..5346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 166,
            column: 57,
            span: 5347..5351,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 166,
            column: 58,
            span: 5351..5352,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxinteger",
        ),
        position: Position {
            line: 166,
            column: 68,
            span: 5352..5362,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 69,
            span: 5362..5363,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 167,
            column: 7,
            span: 5364..5370,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 167,
            column: 8,
            span: 5370..5371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 167,
            column: 14,
            span: 5371..5377,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 167,
            column: 15,
            span: 5377..5378,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<j\"",
        ),
        position: Position {
            line: 167,
            column: 19,
            span: 5378..5382,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 167,
            column: 20,
            span: 5382..5383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 167,
            column: 25,
            span: 5384..5388,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 167,
            column: 26,
            span: 5388..5389,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<j\"",
        ),
        position: Position {
            line: 167,
            column: 30,
            span: 5389..5393,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 167,
            column: 31,
            span: 5393..5394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 167,
            column: 36,
            span: 5395..5399,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 167,
            column: 37,
            span: 5399..5400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mininteger",
        ),
        position: Position {
            line: 167,
            column: 47,
            span: 5400..5410,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 167,
            column: 48,
            span: 5410..5411,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 167,
            column: 49,
            span: 5411..5412,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 167,
            column: 52,
            span: 5413..5415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 167,
            column: 57,
            span: 5416..5420,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 167,
            column: 58,
            span: 5420..5421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mininteger",
        ),
        position: Position {
            line: 167,
            column: 68,
            span: 5421..5431,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 167,
            column: 69,
            span: 5431..5432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 168,
            column: 7,
            span: 5433..5439,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 8,
            span: 5439..5440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 168,
            column: 14,
            span: 5440..5446,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 15,
            span: 5446..5447,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<J\"",
        ),
        position: Position {
            line: 168,
            column: 19,
            span: 5447..5451,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 168,
            column: 20,
            span: 5451..5452,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 168,
            column: 25,
            span: 5453..5457,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 26,
            span: 5457..5458,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<j\"",
        ),
        position: Position {
            line: 168,
            column: 30,
            span: 5458..5462,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 168,
            column: 31,
            span: 5462..5463,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 168,
            column: 33,
            span: 5464..5465,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 168,
            column: 34,
            span: 5464..5466,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 35,
            span: 5466..5467,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 36,
            span: 5467..5468,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 168,
            column: 39,
            span: 5469..5471,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 168,
            column: 41,
            span: 5472..5473,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 168,
            column: 42,
            span: 5472..5474,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 43,
            span: 5474..5475,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 170,
            column: 3,
            span: 5507..5509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "little",
        ),
        position: Position {
            line: 170,
            column: 10,
            span: 5510..5516,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 170,
            column: 0,
            span: 5517..5521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 171,
            column: 9,
            span: 5524..5530,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 10,
            span: 5530..5531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 171,
            column: 14,
            span: 5531..5535,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 15,
            span: 5535..5536,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        position: Position {
            line: 171,
            column: 18,
            span: 5536..5539,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 171,
            column: 19,
            span: 5539..5540,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 171,
            column: 22,
            span: 5540..5543,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 23,
            span: 5543..5544,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 171,
            column: 26,
            span: 5545..5547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 171,
            column: 31,
            span: 5548..5552,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 32,
            span: 5552..5553,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<f\"",
        ),
        position: Position {
            line: 171,
            column: 36,
            span: 5553..5557,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 171,
            column: 37,
            span: 5557..5558,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 171,
            column: 40,
            span: 5558..5561,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 41,
            span: 5561..5562,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 42,
            span: 5562..5563,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 172,
            column: 0,
            span: 5564..5568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 173,
            column: 9,
            span: 5571..5577,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 10,
            span: 5577..5578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 173,
            column: 14,
            span: 5578..5582,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 15,
            span: 5582..5583,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        position: Position {
            line: 173,
            column: 18,
            span: 5583..5586,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 173,
            column: 19,
            span: 5586..5587,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 173,
            column: 22,
            span: 5587..5590,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 23,
            span: 5590..5591,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 173,
            column: 26,
            span: 5592..5594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 173,
            column: 31,
            span: 5595..5599,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 32,
            span: 5599..5600,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">f\"",
        ),
        position: Position {
            line: 173,
            column: 36,
            span: 5600..5604,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 173,
            column: 37,
            span: 5604..5605,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 173,
            column: 40,
            span: 5605..5608,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 41,
            span: 5608..5609,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 42,
            span: 5609..5610,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 174,
            column: 0,
            span: 5611..5614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 176,
            column: 6,
            span: 5616..5621,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing pack/unpack of floating-point numbers\"",
        ),
        position: Position {
            line: 176,
            column: 54,
            span: 5622..5669,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 178,
            column: 4,
            span: 5672..5675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 178,
            column: 6,
            span: 5676..5677,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 7,
            span: 5677..5678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 178,
            column: 9,
            span: 5679..5680,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 178,
            column: 12,
            span: 5681..5683,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        position: Position {
            line: 178,
            column: 19,
            span: 5684..5690,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 178,
            column: 20,
            span: 5690..5691,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 21,
            span: 5690..5692,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 22,
            span: 5692..5693,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 178,
            column: 24,
            span: 5694..5695,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 27,
            span: 5694..5698,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 28,
            span: 5698..5699,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".9",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 32,
            span: 5699..5703,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 33,
            span: 5703..5704,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 35,
            span: 5704..5706,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 178,
            column: 36,
            span: 5706..5707,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 37,
            span: 5706..5708,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 38,
            span: 5708..5709,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 178,
            column: 40,
            span: 5710..5711,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 41,
            span: 5710..5712,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 178,
            column: 42,
            span: 5712..5713,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 43,
            span: 5712..5714,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 44,
            span: 5714..5715,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "20",
            },
        ),
        position: Position {
            line: 178,
            column: 49,
            span: 5715..5720,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 50,
            span: 5720..5721,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 178,
            column: 52,
            span: 5722..5723,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "20",
            },
        ),
        position: Position {
            line: 178,
            column: 56,
            span: 5722..5727,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 57,
            span: 5727..5728,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 61,
            span: 5728..5732,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 62,
            span: 5732..5733,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: ".7",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 69,
            span: 5733..5740,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 178,
            column: 70,
            span: 5740..5741,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 178,
            column: 0,
            span: 5742..5744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 179,
            column: 11,
            span: 5749..5755,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 179,
            column: 12,
            span: 5755..5756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 179,
            column: 18,
            span: 5756..5762,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 179,
            column: 19,
            span: 5762..5763,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 179,
            column: 22,
            span: 5763..5766,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 179,
            column: 23,
            span: 5766..5767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 179,
            column: 28,
            span: 5768..5772,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 179,
            column: 29,
            span: 5772..5773,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 179,
            column: 32,
            span: 5773..5776,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 179,
            column: 33,
            span: 5776..5777,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 179,
            column: 35,
            span: 5778..5779,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 179,
            column: 36,
            span: 5779..5780,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 179,
            column: 37,
            span: 5780..5781,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 179,
            column: 40,
            span: 5782..5784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 179,
            column: 42,
            span: 5785..5786,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 179,
            column: 43,
            span: 5786..5787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 180,
            column: 11,
            span: 5792..5798,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 180,
            column: 12,
            span: 5798..5799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 180,
            column: 18,
            span: 5799..5805,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 180,
            column: 19,
            span: 5805..5806,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<n\"",
        ),
        position: Position {
            line: 180,
            column: 23,
            span: 5806..5810,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 180,
            column: 24,
            span: 5810..5811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 180,
            column: 29,
            span: 5812..5816,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 180,
            column: 30,
            span: 5816..5817,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<n\"",
        ),
        position: Position {
            line: 180,
            column: 34,
            span: 5817..5821,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 180,
            column: 35,
            span: 5821..5822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 180,
            column: 37,
            span: 5823..5824,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 180,
            column: 38,
            span: 5824..5825,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 180,
            column: 39,
            span: 5825..5826,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 180,
            column: 42,
            span: 5827..5829,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 180,
            column: 44,
            span: 5830..5831,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 180,
            column: 45,
            span: 5831..5832,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 181,
            column: 11,
            span: 5837..5843,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 12,
            span: 5843..5844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 181,
            column: 18,
            span: 5844..5850,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 19,
            span: 5850..5851,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">n\"",
        ),
        position: Position {
            line: 181,
            column: 23,
            span: 5851..5855,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 181,
            column: 24,
            span: 5855..5856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 181,
            column: 29,
            span: 5857..5861,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 30,
            span: 5861..5862,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">n\"",
        ),
        position: Position {
            line: 181,
            column: 34,
            span: 5862..5866,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 181,
            column: 35,
            span: 5866..5867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 181,
            column: 37,
            span: 5868..5869,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 38,
            span: 5869..5870,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 39,
            span: 5870..5871,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 181,
            column: 42,
            span: 5872..5874,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 181,
            column: 44,
            span: 5875..5876,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 45,
            span: 5876..5877,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 182,
            column: 11,
            span: 5882..5888,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 182,
            column: 12,
            span: 5888..5889,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 182,
            column: 16,
            span: 5889..5893,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 182,
            column: 17,
            span: 5893..5894,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<f\"",
        ),
        position: Position {
            line: 182,
            column: 21,
            span: 5894..5898,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 182,
            column: 22,
            span: 5898..5899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 182,
            column: 24,
            span: 5900..5901,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 182,
            column: 25,
            span: 5901..5902,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 182,
            column: 28,
            span: 5903..5905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 182,
            column: 33,
            span: 5906..5910,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 182,
            column: 34,
            span: 5910..5911,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">f\"",
        ),
        position: Position {
            line: 182,
            column: 38,
            span: 5911..5915,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 182,
            column: 39,
            span: 5915..5916,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 182,
            column: 41,
            span: 5917..5918,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 182,
            column: 42,
            span: 5918..5919,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 182,
            column: 43,
            span: 5919..5920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "reverse",
        ),
        position: Position {
            line: 182,
            column: 50,
            span: 5920..5927,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 182,
            column: 51,
            span: 5927..5928,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 182,
            column: 52,
            span: 5928..5929,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 182,
            column: 53,
            span: 5929..5930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 183,
            column: 11,
            span: 5935..5941,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 183,
            column: 12,
            span: 5941..5942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 183,
            column: 16,
            span: 5942..5946,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 183,
            column: 17,
            span: 5946..5947,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">d\"",
        ),
        position: Position {
            line: 183,
            column: 21,
            span: 5947..5951,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 183,
            column: 22,
            span: 5951..5952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 183,
            column: 24,
            span: 5953..5954,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 183,
            column: 25,
            span: 5954..5955,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 183,
            column: 28,
            span: 5956..5958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 183,
            column: 33,
            span: 5959..5963,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 183,
            column: 34,
            span: 5963..5964,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<d\"",
        ),
        position: Position {
            line: 183,
            column: 38,
            span: 5964..5968,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 183,
            column: 39,
            span: 5968..5969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 183,
            column: 41,
            span: 5970..5971,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 183,
            column: 42,
            span: 5971..5972,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 183,
            column: 43,
            span: 5972..5973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "reverse",
        ),
        position: Position {
            line: 183,
            column: 50,
            span: 5973..5980,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 183,
            column: 51,
            span: 5980..5981,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 183,
            column: 52,
            span: 5981..5982,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 183,
            column: 53,
            span: 5982..5983,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 184,
            column: 0,
            span: 5984..5987,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 187,
            column: 4,
            span: 6050..6053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 187,
            column: 6,
            span: 6054..6055,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 7,
            span: 6055..6056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 187,
            column: 9,
            span: 6057..6058,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 187,
            column: 12,
            span: 6059..6061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        position: Position {
            line: 187,
            column: 19,
            span: 6062..6068,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 187,
            column: 20,
            span: 6068..6069,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 187,
            column: 21,
            span: 6068..6070,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 22,
            span: 6070..6071,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 187,
            column: 24,
            span: 6072..6073,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        position: Position {
            line: 187,
            column: 27,
            span: 6072..6076,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 28,
            span: 6076..6077,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 187,
            column: 30,
            span: 6077..6079,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 187,
            column: 31,
            span: 6079..6080,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 187,
            column: 32,
            span: 6079..6081,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 33,
            span: 6081..6082,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 187,
            column: 35,
            span: 6083..6084,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 187,
            column: 36,
            span: 6083..6085,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 187,
            column: 37,
            span: 6085..6086,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 187,
            column: 38,
            span: 6085..6087,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 39,
            span: 6087..6088,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "10",
            },
        ),
        position: Position {
            line: 187,
            column: 44,
            span: 6088..6093,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 45,
            span: 6093..6094,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 187,
            column: 47,
            span: 6095..6096,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "9",
            },
        ),
        position: Position {
            line: 187,
            column: 50,
            span: 6095..6099,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 51,
            span: 6099..6100,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        position: Position {
            line: 187,
            column: 55,
            span: 6100..6104,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 56,
            span: 6104..6105,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: ".25",
                },
            ),
        ),
        position: Position {
            line: 187,
            column: 64,
            span: 6105..6113,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 187,
            column: 65,
            span: 6113..6114,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 187,
            column: 0,
            span: 6115..6117,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 188,
            column: 9,
            span: 6120..6126,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 10,
            span: 6126..6127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 188,
            column: 16,
            span: 6127..6133,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 17,
            span: 6133..6134,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<f\"",
        ),
        position: Position {
            line: 188,
            column: 21,
            span: 6134..6138,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 188,
            column: 22,
            span: 6138..6139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 188,
            column: 27,
            span: 6140..6144,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 28,
            span: 6144..6145,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<f\"",
        ),
        position: Position {
            line: 188,
            column: 32,
            span: 6145..6149,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 188,
            column: 33,
            span: 6149..6150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 188,
            column: 35,
            span: 6151..6152,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 36,
            span: 6152..6153,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 37,
            span: 6153..6154,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 188,
            column: 40,
            span: 6155..6157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 188,
            column: 42,
            span: 6158..6159,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 43,
            span: 6159..6160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 189,
            column: 9,
            span: 6163..6169,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 10,
            span: 6169..6170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 189,
            column: 16,
            span: 6170..6176,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 17,
            span: 6176..6177,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">f\"",
        ),
        position: Position {
            line: 189,
            column: 21,
            span: 6177..6181,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 189,
            column: 22,
            span: 6181..6182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 189,
            column: 27,
            span: 6183..6187,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 28,
            span: 6187..6188,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">f\"",
        ),
        position: Position {
            line: 189,
            column: 32,
            span: 6188..6192,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 189,
            column: 33,
            span: 6192..6193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 189,
            column: 35,
            span: 6194..6195,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 36,
            span: 6195..6196,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 37,
            span: 6196..6197,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 189,
            column: 40,
            span: 6198..6200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 189,
            column: 42,
            span: 6201..6202,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 43,
            span: 6202..6203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 190,
            column: 9,
            span: 6206..6212,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 10,
            span: 6212..6213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 190,
            column: 16,
            span: 6213..6219,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 17,
            span: 6219..6220,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<d\"",
        ),
        position: Position {
            line: 190,
            column: 21,
            span: 6220..6224,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 190,
            column: 22,
            span: 6224..6225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 190,
            column: 27,
            span: 6226..6230,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 28,
            span: 6230..6231,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<d\"",
        ),
        position: Position {
            line: 190,
            column: 32,
            span: 6231..6235,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 190,
            column: 33,
            span: 6235..6236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 190,
            column: 35,
            span: 6237..6238,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 190,
            column: 36,
            span: 6238..6239,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 190,
            column: 37,
            span: 6239..6240,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 190,
            column: 40,
            span: 6241..6243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 190,
            column: 42,
            span: 6244..6245,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 190,
            column: 43,
            span: 6245..6246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 191,
            column: 9,
            span: 6249..6255,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 10,
            span: 6255..6256,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 191,
            column: 16,
            span: 6256..6262,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 17,
            span: 6262..6263,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">d\"",
        ),
        position: Position {
            line: 191,
            column: 21,
            span: 6263..6267,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 191,
            column: 22,
            span: 6267..6268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 191,
            column: 27,
            span: 6269..6273,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 28,
            span: 6273..6274,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">d\"",
        ),
        position: Position {
            line: 191,
            column: 32,
            span: 6274..6278,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 191,
            column: 33,
            span: 6278..6279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 191,
            column: 35,
            span: 6280..6281,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 36,
            span: 6281..6282,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 37,
            span: 6282..6283,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 191,
            column: 40,
            span: 6284..6286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 191,
            column: 42,
            span: 6287..6288,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 43,
            span: 6288..6289,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 192,
            column: 0,
            span: 6290..6293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 194,
            column: 6,
            span: 6295..6300,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing pack/unpack of strings\"",
        ),
        position: Position {
            line: 194,
            column: 39,
            span: 6301..6333,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 195,
            column: 0,
            span: 6334..6336,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 196,
            column: 8,
            span: 6339..6344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 196,
            column: 10,
            span: 6345..6346,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 196,
            column: 12,
            span: 6347..6348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 196,
            column: 19,
            span: 6349..6355,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 196,
            column: 20,
            span: 6355..6356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 196,
            column: 23,
            span: 6356..6359,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 196,
            column: 24,
            span: 6359..6360,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        position: Position {
            line: 196,
            column: 29,
            span: 6360..6365,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 196,
            column: 30,
            span: 6365..6366,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 196,
            column: 35,
            span: 6366..6371,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 196,
            column: 36,
            span: 6371..6372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 197,
            column: 9,
            span: 6375..6381,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 197,
            column: 10,
            span: 6381..6382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 197,
            column: 14,
            span: 6382..6386,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 197,
            column: 15,
            span: 6386..6387,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"zB\"",
        ),
        position: Position {
            line: 197,
            column: 19,
            span: 6387..6391,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 197,
            column: 20,
            span: 6391..6392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 197,
            column: 22,
            span: 6393..6394,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 197,
            column: 23,
            span: 6394..6395,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "247",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 197,
            column: 27,
            span: 6395..6399,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 197,
            column: 28,
            span: 6399..6400,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 197,
            column: 31,
            span: 6401..6403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 197,
            column: 33,
            span: 6404..6405,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 197,
            column: 36,
            span: 6406..6408,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\xF7\"",
        ),
        position: Position {
            line: 197,
            column: 45,
            span: 6409..6417,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 197,
            column: 46,
            span: 6417..6418,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 198,
            column: 8,
            span: 6421..6426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        position: Position {
            line: 198,
            column: 11,
            span: 6427..6429,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 198,
            column: 12,
            span: 6429..6430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 198,
            column: 14,
            span: 6431..6432,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 198,
            column: 16,
            span: 6433..6434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 198,
            column: 23,
            span: 6435..6441,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 198,
            column: 24,
            span: 6441..6442,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"zB\"",
        ),
        position: Position {
            line: 198,
            column: 28,
            span: 6442..6446,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 198,
            column: 29,
            span: 6446..6447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 198,
            column: 31,
            span: 6448..6449,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 198,
            column: 34,
            span: 6450..6452,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\xF9\"",
        ),
        position: Position {
            line: 198,
            column: 43,
            span: 6453..6461,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 198,
            column: 44,
            span: 6461..6462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 199,
            column: 9,
            span: 6465..6471,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 199,
            column: 10,
            span: 6471..6472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 199,
            column: 11,
            span: 6472..6473,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 199,
            column: 14,
            span: 6474..6476,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "249",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 199,
            column: 18,
            span: 6476..6480,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 199,
            column: 22,
            span: 6481..6484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        position: Position {
            line: 199,
            column: 25,
            span: 6485..6487,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 199,
            column: 28,
            span: 6488..6490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 199,
            column: 30,
            span: 6491..6492,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 199,
            column: 31,
            span: 6492..6493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        position: Position {
            line: 200,
            column: 5,
            span: 6496..6498,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 200,
            column: 7,
            span: 6499..6500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 200,
            column: 12,
            span: 6501..6505,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 200,
            column: 13,
            span: 6505..6506,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s\"",
        ),
        position: Position {
            line: 200,
            column: 16,
            span: 6506..6509,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 200,
            column: 17,
            span: 6509..6510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 200,
            column: 19,
            span: 6511..6512,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 200,
            column: 20,
            span: 6512..6513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 201,
            column: 9,
            span: 6516..6522,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 201,
            column: 10,
            span: 6522..6523,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 201,
            column: 16,
            span: 6523..6529,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 201,
            column: 17,
            span: 6529..6530,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s\"",
        ),
        position: Position {
            line: 201,
            column: 20,
            span: 6530..6533,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 201,
            column: 21,
            span: 6533..6534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        position: Position {
            line: 201,
            column: 24,
            span: 6535..6537,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 201,
            column: 25,
            span: 6537..6538,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 201,
            column: 28,
            span: 6539..6541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 201,
            column: 30,
            span: 6542..6543,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 201,
            column: 31,
            span: 6543..6544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 203,
            column: 13,
            span: 6548..6558,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 203,
            column: 14,
            span: 6558..6559,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"does not fit\"",
        ),
        position: Position {
            line: 203,
            column: 28,
            span: 6559..6573,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 203,
            column: 29,
            span: 6573..6574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 203,
            column: 34,
            span: 6575..6579,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 203,
            column: 35,
            span: 6579..6580,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s1\"",
        ),
        position: Position {
            line: 203,
            column: 40,
            span: 6581..6585,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 203,
            column: 41,
            span: 6585..6586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 203,
            column: 43,
            span: 6587..6588,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 203,
            column: 44,
            span: 6588..6589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 205,
            column: 13,
            span: 6593..6603,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 205,
            column: 14,
            span: 6603..6604,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"contains zeros\"",
        ),
        position: Position {
            line: 205,
            column: 30,
            span: 6604..6620,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 31,
            span: 6620..6621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 205,
            column: 36,
            span: 6622..6626,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 37,
            span: 6626..6627,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"z\"",
        ),
        position: Position {
            line: 205,
            column: 41,
            span: 6628..6631,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 42,
            span: 6631..6632,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\\0\"",
        ),
        position: Position {
            line: 205,
            column: 50,
            span: 6633..6640,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 205,
            column: 51,
            span: 6640..6641,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 205,
            column: 52,
            span: 6641..6642,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 207,
            column: 6,
            span: 6646..6649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 207,
            column: 8,
            span: 6650..6651,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 207,
            column: 10,
            span: 6652..6653,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 207,
            column: 12,
            span: 6653..6655,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 207,
            column: 13,
            span: 6655..6656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NB",
        ),
        position: Position {
            line: 207,
            column: 16,
            span: 6657..6659,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 207,
            column: 0,
            span: 6660..6662,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 208,
            column: 10,
            span: 6667..6672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        position: Position {
            line: 208,
            column: 13,
            span: 6673..6675,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 208,
            column: 15,
            span: 6676..6677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 208,
            column: 20,
            span: 6678..6682,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 208,
            column: 21,
            span: 6682..6683,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s\"",
        ),
        position: Position {
            line: 208,
            column: 24,
            span: 6683..6686,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 208,
            column: 27,
            span: 6687..6689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 208,
            column: 29,
            span: 6690..6691,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 208,
            column: 30,
            span: 6691..6692,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 208,
            column: 32,
            span: 6693..6694,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 208,
            column: 33,
            span: 6694..6695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 209,
            column: 11,
            span: 6700..6706,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 209,
            column: 12,
            span: 6706..6707,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 209,
            column: 18,
            span: 6707..6713,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 209,
            column: 19,
            span: 6713..6714,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s\"",
        ),
        position: Position {
            line: 209,
            column: 22,
            span: 6714..6717,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 209,
            column: 25,
            span: 6718..6720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 209,
            column: 27,
            span: 6721..6722,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 209,
            column: 28,
            span: 6722..6723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        position: Position {
            line: 209,
            column: 31,
            span: 6724..6726,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 209,
            column: 32,
            span: 6726..6727,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 209,
            column: 35,
            span: 6728..6730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 209,
            column: 37,
            span: 6731..6732,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 209,
            column: 41,
            span: 6733..6736,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 209,
            column: 43,
            span: 6737..6738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        position: Position {
            line: 209,
            column: 45,
            span: 6738..6740,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 209,
            column: 48,
            span: 6741..6743,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 209,
            column: 50,
            span: 6744..6745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 209,
            column: 51,
            span: 6745..6746,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 209,
            column: 53,
            span: 6747..6748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 209,
            column: 55,
            span: 6749..6750,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 209,
            column: 56,
            span: 6750..6751,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 210,
            column: 0,
            span: 6754..6757,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 211,
            column: 0,
            span: 6758..6761,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 213,
            column: 0,
            span: 6763..6765,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 214,
            column: 8,
            span: 6768..6773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 214,
            column: 10,
            span: 6774..6775,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 214,
            column: 12,
            span: 6776..6777,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 214,
            column: 17,
            span: 6778..6782,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 214,
            column: 18,
            span: 6782..6783,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s\"",
        ),
        position: Position {
            line: 214,
            column: 21,
            span: 6783..6786,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 214,
            column: 22,
            span: 6786..6787,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 214,
            column: 28,
            span: 6788..6793,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 214,
            column: 29,
            span: 6793..6794,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 215,
            column: 13,
            span: 6797..6807,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 215,
            column: 14,
            span: 6807..6808,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too short\"",
        ),
        position: Position {
            line: 215,
            column: 25,
            span: 6808..6819,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 215,
            column: 26,
            span: 6819..6820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 215,
            column: 33,
            span: 6821..6827,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 215,
            column: 34,
            span: 6827..6828,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s\"",
        ),
        position: Position {
            line: 215,
            column: 38,
            span: 6829..6832,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 215,
            column: 39,
            span: 6832..6833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 215,
            column: 41,
            span: 6834..6835,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 215,
            column: 42,
            span: 6835..6836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 215,
            column: 45,
            span: 6836..6839,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 215,
            column: 46,
            span: 6839..6840,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 215,
            column: 47,
            span: 6839..6841,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 215,
            column: 48,
            span: 6841..6842,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 215,
            column: 50,
            span: 6843..6844,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 215,
            column: 51,
            span: 6843..6845,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 215,
            column: 52,
            span: 6845..6846,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 215,
            column: 53,
            span: 6846..6847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 216,
            column: 13,
            span: 6850..6860,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 216,
            column: 14,
            span: 6860..6861,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too short\"",
        ),
        position: Position {
            line: 216,
            column: 25,
            span: 6861..6872,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 216,
            column: 26,
            span: 6872..6873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 216,
            column: 33,
            span: 6874..6880,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 216,
            column: 34,
            span: 6880..6881,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c5\"",
        ),
        position: Position {
            line: 216,
            column: 39,
            span: 6882..6886,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 216,
            column: 40,
            span: 6886..6887,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcd\"",
        ),
        position: Position {
            line: 216,
            column: 47,
            span: 6888..6894,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 216,
            column: 48,
            span: 6894..6895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 217,
            column: 13,
            span: 6898..6908,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 217,
            column: 14,
            span: 6908..6909,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of limits\"",
        ),
        position: Position {
            line: 217,
            column: 29,
            span: 6909..6924,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 217,
            column: 30,
            span: 6924..6925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 217,
            column: 35,
            span: 6926..6930,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 217,
            column: 36,
            span: 6930..6931,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s100\"",
        ),
        position: Position {
            line: 217,
            column: 43,
            span: 6932..6938,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 217,
            column: 44,
            span: 6938..6939,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 217,
            column: 50,
            span: 6940..6945,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 217,
            column: 51,
            span: 6945..6946,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 218,
            column: 0,
            span: 6947..6950,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 220,
            column: 0,
            span: 6952..6954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 221,
            column: 9,
            span: 6957..6963,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 221,
            column: 10,
            span: 6963..6964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 221,
            column: 14,
            span: 6964..6968,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 221,
            column: 15,
            span: 6968..6969,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c0\"",
        ),
        position: Position {
            line: 221,
            column: 19,
            span: 6969..6973,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 221,
            column: 20,
            span: 6973..6974,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 221,
            column: 23,
            span: 6975..6977,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 221,
            column: 24,
            span: 6977..6978,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 221,
            column: 27,
            span: 6979..6981,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 221,
            column: 30,
            span: 6982..6984,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 221,
            column: 31,
            span: 6984..6985,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 222,
            column: 9,
            span: 6988..6994,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 222,
            column: 10,
            span: 6994..6995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 222,
            column: 18,
            span: 6995..7003,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 222,
            column: 19,
            span: 7003..7004,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c0\"",
        ),
        position: Position {
            line: 222,
            column: 23,
            span: 7004..7008,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 222,
            column: 24,
            span: 7008..7009,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 222,
            column: 27,
            span: 7010..7012,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 222,
            column: 29,
            span: 7012..7014,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 222,
            column: 30,
            span: 7014..7015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 223,
            column: 9,
            span: 7018..7024,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 223,
            column: 10,
            span: 7024..7025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 223,
            column: 16,
            span: 7025..7031,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 223,
            column: 17,
            span: 7031..7032,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c0\"",
        ),
        position: Position {
            line: 223,
            column: 21,
            span: 7032..7036,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 223,
            column: 22,
            span: 7036..7037,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 223,
            column: 25,
            span: 7038..7040,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 223,
            column: 26,
            span: 7040..7041,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 223,
            column: 29,
            span: 7042..7044,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 223,
            column: 32,
            span: 7045..7047,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 223,
            column: 33,
            span: 7047..7048,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 224,
            column: 9,
            span: 7051..7057,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 224,
            column: 10,
            span: 7057..7058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 224,
            column: 14,
            span: 7058..7062,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 224,
            column: 15,
            span: 7062..7063,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<! c3\"",
        ),
        position: Position {
            line: 224,
            column: 22,
            span: 7063..7070,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 224,
            column: 23,
            span: 7070..7071,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        position: Position {
            line: 224,
            column: 29,
            span: 7072..7077,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 224,
            column: 30,
            span: 7077..7078,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 224,
            column: 33,
            span: 7079..7081,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        position: Position {
            line: 224,
            column: 39,
            span: 7082..7087,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 224,
            column: 40,
            span: 7087..7088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 225,
            column: 9,
            span: 7091..7097,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 225,
            column: 10,
            span: 7097..7098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 225,
            column: 18,
            span: 7098..7106,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 225,
            column: 19,
            span: 7106..7107,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<! c3\"",
        ),
        position: Position {
            line: 225,
            column: 26,
            span: 7107..7114,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 225,
            column: 27,
            span: 7114..7115,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 225,
            column: 30,
            span: 7116..7118,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 225,
            column: 32,
            span: 7118..7120,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 225,
            column: 33,
            span: 7120..7121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 226,
            column: 9,
            span: 7124..7130,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 226,
            column: 10,
            span: 7130..7131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 226,
            column: 14,
            span: 7131..7135,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 226,
            column: 15,
            span: 7135..7136,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">!4 c6\"",
        ),
        position: Position {
            line: 226,
            column: 23,
            span: 7136..7144,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 226,
            column: 24,
            span: 7144..7145,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcdef\"",
        ),
        position: Position {
            line: 226,
            column: 33,
            span: 7146..7154,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 226,
            column: 34,
            span: 7154..7155,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 226,
            column: 37,
            span: 7156..7158,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcdef\"",
        ),
        position: Position {
            line: 226,
            column: 46,
            span: 7159..7167,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 226,
            column: 47,
            span: 7167..7168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 227,
            column: 9,
            span: 7171..7177,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 227,
            column: 10,
            span: 7177..7178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 227,
            column: 14,
            span: 7178..7182,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 227,
            column: 15,
            span: 7182..7183,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c3\"",
        ),
        position: Position {
            line: 227,
            column: 19,
            span: 7183..7187,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 227,
            column: 20,
            span: 7187..7188,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123\"",
        ),
        position: Position {
            line: 227,
            column: 26,
            span: 7189..7194,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 227,
            column: 27,
            span: 7194..7195,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 227,
            column: 30,
            span: 7196..7198,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123\"",
        ),
        position: Position {
            line: 227,
            column: 36,
            span: 7199..7204,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 227,
            column: 37,
            span: 7204..7205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 228,
            column: 9,
            span: 7208..7214,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 228,
            column: 10,
            span: 7214..7215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 228,
            column: 14,
            span: 7215..7219,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 228,
            column: 15,
            span: 7219..7220,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c0\"",
        ),
        position: Position {
            line: 228,
            column: 19,
            span: 7220..7224,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 228,
            column: 20,
            span: 7224..7225,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 228,
            column: 23,
            span: 7226..7228,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 228,
            column: 24,
            span: 7228..7229,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 228,
            column: 27,
            span: 7230..7232,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 228,
            column: 30,
            span: 7233..7235,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 228,
            column: 31,
            span: 7235..7236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 229,
            column: 9,
            span: 7239..7245,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 229,
            column: 10,
            span: 7245..7246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 229,
            column: 14,
            span: 7246..7250,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 229,
            column: 15,
            span: 7250..7251,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c8\"",
        ),
        position: Position {
            line: 229,
            column: 19,
            span: 7251..7255,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 20,
            span: 7255..7256,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456\"",
        ),
        position: Position {
            line: 229,
            column: 29,
            span: 7257..7265,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 229,
            column: 30,
            span: 7265..7266,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 229,
            column: 33,
            span: 7267..7269,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456\\0\\0\"",
        ),
        position: Position {
            line: 229,
            column: 46,
            span: 7270..7282,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 229,
            column: 47,
            span: 7282..7283,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 230,
            column: 9,
            span: 7286..7292,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 230,
            column: 10,
            span: 7292..7293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 230,
            column: 14,
            span: 7293..7297,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 230,
            column: 15,
            span: 7297..7298,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c88\"",
        ),
        position: Position {
            line: 230,
            column: 20,
            span: 7298..7303,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 230,
            column: 21,
            span: 7303..7304,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 230,
            column: 24,
            span: 7305..7307,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 25,
            span: 7307..7308,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 230,
            column: 28,
            span: 7309..7311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 230,
            column: 35,
            span: 7312..7318,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 230,
            column: 36,
            span: 7318..7319,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 230,
            column: 39,
            span: 7319..7322,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 230,
            column: 40,
            span: 7322..7323,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        position: Position {
            line: 230,
            column: 44,
            span: 7323..7327,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 230,
            column: 45,
            span: 7327..7328,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "88",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 230,
            column: 48,
            span: 7328..7331,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 49,
            span: 7331..7332,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 50,
            span: 7332..7333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 231,
            column: 9,
            span: 7336..7342,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 231,
            column: 10,
            span: 7342..7343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 231,
            column: 14,
            span: 7343..7347,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 231,
            column: 15,
            span: 7347..7348,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c188\"",
        ),
        position: Position {
            line: 231,
            column: 21,
            span: 7348..7354,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 231,
            column: 22,
            span: 7354..7355,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab\"",
        ),
        position: Position {
            line: 231,
            column: 27,
            span: 7356..7360,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 231,
            column: 28,
            span: 7360..7361,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 231,
            column: 31,
            span: 7362..7364,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab\"",
        ),
        position: Position {
            line: 231,
            column: 36,
            span: 7365..7369,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 231,
            column: 39,
            span: 7370..7372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 231,
            column: 46,
            span: 7373..7379,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 231,
            column: 47,
            span: 7379..7380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 231,
            column: 50,
            span: 7380..7383,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 231,
            column: 51,
            span: 7383..7384,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        position: Position {
            line: 231,
            column: 55,
            span: 7384..7388,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 231,
            column: 56,
            span: 7388..7389,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "188",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 231,
            column: 60,
            span: 7389..7393,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 231,
            column: 62,
            span: 7394..7395,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 231,
            column: 64,
            span: 7395..7397,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 231,
            column: 65,
            span: 7397..7398,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 231,
            column: 66,
            span: 7398..7399,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 232,
            column: 8,
            span: 7402..7407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 232,
            column: 10,
            span: 7408..7409,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 232,
            column: 11,
            span: 7409..7410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 232,
            column: 13,
            span: 7411..7412,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 232,
            column: 14,
            span: 7412..7413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 232,
            column: 16,
            span: 7414..7415,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 232,
            column: 18,
            span: 7416..7417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 232,
            column: 25,
            span: 7418..7424,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 232,
            column: 26,
            span: 7424..7425,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!4 z c3\"",
        ),
        position: Position {
            line: 232,
            column: 35,
            span: 7425..7434,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 232,
            column: 36,
            span: 7434..7435,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcdefghi\\0xyz\"",
        ),
        position: Position {
            line: 232,
            column: 53,
            span: 7436..7452,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 232,
            column: 54,
            span: 7452..7453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 233,
            column: 9,
            span: 7456..7462,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 233,
            column: 10,
            span: 7462..7463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 233,
            column: 11,
            span: 7463..7464,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 233,
            column: 14,
            span: 7465..7467,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcdefghi\"",
        ),
        position: Position {
            line: 233,
            column: 26,
            span: 7468..7479,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 233,
            column: 30,
            span: 7480..7483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 233,
            column: 32,
            span: 7484..7485,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 233,
            column: 35,
            span: 7486..7488,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xyz\"",
        ),
        position: Position {
            line: 233,
            column: 41,
            span: 7489..7494,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 233,
            column: 45,
            span: 7495..7498,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 233,
            column: 47,
            span: 7499..7500,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 233,
            column: 50,
            span: 7501..7503,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 233,
            column: 53,
            span: 7503..7506,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 233,
            column: 54,
            span: 7506..7507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 234,
            column: 13,
            span: 7510..7520,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 234,
            column: 14,
            span: 7520..7521,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"longer than\"",
        ),
        position: Position {
            line: 234,
            column: 27,
            span: 7521..7534,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 28,
            span: 7534..7535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 234,
            column: 33,
            span: 7536..7540,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 34,
            span: 7540..7541,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c3\"",
        ),
        position: Position {
            line: 234,
            column: 39,
            span: 7542..7546,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 40,
            span: 7546..7547,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1234\"",
        ),
        position: Position {
            line: 234,
            column: 47,
            span: 7548..7554,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 234,
            column: 48,
            span: 7554..7555,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 235,
            column: 0,
            span: 7556..7559,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 239,
            column: 0,
            span: 7601..7603,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 240,
            column: 8,
            span: 7606..7611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 240,
            column: 10,
            span: 7612..7613,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 240,
            column: 12,
            span: 7614..7615,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 240,
            column: 17,
            span: 7616..7620,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 240,
            column: 18,
            span: 7620..7621,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<b h b f d f n i\"",
        ),
        position: Position {
            line: 240,
            column: 36,
            span: 7621..7639,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 240,
            column: 37,
            span: 7639..7640,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 240,
            column: 39,
            span: 7640..7642,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 240,
            column: 40,
            span: 7642..7643,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 240,
            column: 42,
            span: 7643..7645,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 240,
            column: 43,
            span: 7645..7646,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 240,
            column: 45,
            span: 7646..7648,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 240,
            column: 46,
            span: 7648..7649,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 240,
            column: 48,
            span: 7649..7651,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 240,
            column: 49,
            span: 7651..7652,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 240,
            column: 51,
            span: 7652..7654,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 240,
            column: 52,
            span: 7654..7655,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 240,
            column: 54,
            span: 7655..7657,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 240,
            column: 55,
            span: 7657..7658,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 240,
            column: 57,
            span: 7658..7660,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 240,
            column: 58,
            span: 7660..7661,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 240,
            column: 60,
            span: 7661..7663,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 240,
            column: 61,
            span: 7663..7664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 241,
            column: 9,
            span: 7667..7673,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 241,
            column: 10,
            span: 7673..7674,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 241,
            column: 11,
            span: 7674..7675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 241,
            column: 12,
            span: 7675..7676,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 241,
            column: 15,
            span: 7677..7679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 241,
            column: 24,
            span: 7680..7688,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 241,
            column: 25,
            span: 7688..7689,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<b h b f d f n i\"",
        ),
        position: Position {
            line: 241,
            column: 43,
            span: 7689..7707,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 241,
            column: 44,
            span: 7707..7708,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 241,
            column: 45,
            span: 7708..7709,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 242,
            column: 8,
            span: 7712..7717,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 242,
            column: 10,
            span: 7718..7719,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 11,
            span: 7719..7720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 242,
            column: 13,
            span: 7721..7722,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 14,
            span: 7722..7723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 242,
            column: 16,
            span: 7724..7725,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 17,
            span: 7725..7726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 242,
            column: 19,
            span: 7727..7728,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 20,
            span: 7728..7729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 242,
            column: 22,
            span: 7730..7731,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 23,
            span: 7731..7732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 242,
            column: 25,
            span: 7733..7734,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 26,
            span: 7734..7735,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 242,
            column: 28,
            span: 7736..7737,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 29,
            span: 7737..7738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 242,
            column: 31,
            span: 7739..7740,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 242,
            column: 33,
            span: 7741..7742,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 242,
            column: 40,
            span: 7743..7749,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 242,
            column: 41,
            span: 7749..7750,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<b h b f d f n i\"",
        ),
        position: Position {
            line: 242,
            column: 59,
            span: 7750..7768,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 60,
            span: 7768..7769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 242,
            column: 62,
            span: 7770..7771,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 242,
            column: 63,
            span: 7771..7772,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 243,
            column: 9,
            span: 7775..7781,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 243,
            column: 10,
            span: 7781..7782,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 243,
            column: 11,
            span: 7782..7783,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 243,
            column: 14,
            span: 7784..7786,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 243,
            column: 16,
            span: 7786..7788,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 243,
            column: 20,
            span: 7789..7792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 243,
            column: 22,
            span: 7793..7794,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 243,
            column: 25,
            span: 7795..7797,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 243,
            column: 27,
            span: 7797..7799,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 243,
            column: 31,
            span: 7800..7803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 243,
            column: 33,
            span: 7804..7805,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 243,
            column: 36,
            span: 7806..7808,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 243,
            column: 38,
            span: 7808..7810,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 243,
            column: 42,
            span: 7811..7814,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 243,
            column: 44,
            span: 7815..7816,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 243,
            column: 47,
            span: 7817..7819,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 243,
            column: 49,
            span: 7819..7821,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 243,
            column: 53,
            span: 7822..7825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 243,
            column: 55,
            span: 7826..7827,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 243,
            column: 58,
            span: 7828..7830,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 243,
            column: 60,
            span: 7830..7832,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 243,
            column: 64,
            span: 7833..7836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 243,
            column: 66,
            span: 7837..7838,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 243,
            column: 69,
            span: 7839..7841,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 243,
            column: 71,
            span: 7841..7843,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 243,
            column: 0,
            span: 7844..7847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 244,
            column: 11,
            span: 7857..7858,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 244,
            column: 14,
            span: 7859..7861,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 244,
            column: 16,
            span: 7861..7863,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 244,
            column: 20,
            span: 7864..7867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 244,
            column: 22,
            span: 7868..7869,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 244,
            column: 25,
            span: 7870..7872,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 244,
            column: 27,
            span: 7872..7874,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 244,
            column: 28,
            span: 7874..7875,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 245,
            column: 0,
            span: 7877..7880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 247,
            column: 6,
            span: 7882..7887,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing alignment\"",
        ),
        position: Position {
            line: 247,
            column: 26,
            span: 7888..7907,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 248,
            column: 0,
            span: 7908..7910,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 249,
            column: 9,
            span: 7913..7919,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 249,
            column: 10,
            span: 7919..7920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 249,
            column: 14,
            span: 7920..7924,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 249,
            column: 15,
            span: 7924..7925,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" < i1 i2 \"",
        ),
        position: Position {
            line: 249,
            column: 26,
            span: 7925..7936,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 249,
            column: 27,
            span: 7936..7937,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 249,
            column: 29,
            span: 7937..7939,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 249,
            column: 30,
            span: 7939..7940,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 249,
            column: 32,
            span: 7940..7942,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 249,
            column: 33,
            span: 7942..7943,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 249,
            column: 36,
            span: 7944..7946,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\2\\3\\0\"",
        ),
        position: Position {
            line: 249,
            column: 45,
            span: 7947..7955,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 249,
            column: 46,
            span: 7955..7956,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 250,
            column: 8,
            span: 7988..7993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 250,
            column: 10,
            span: 7994..7995,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 250,
            column: 12,
            span: 7996..7997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 250,
            column: 17,
            span: 7998..8002,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 250,
            column: 18,
            span: 8002..8003,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">!8 b Xh i4 i8 c1 Xi8\"",
        ),
        position: Position {
            line: 250,
            column: 41,
            span: 8003..8026,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 250,
            column: 42,
            span: 8026..8027,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 250,
            column: 44,
            span: 8028..8029,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 250,
            column: 46,
            span: 8028..8031,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 250,
            column: 47,
            span: 8031..8032,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 250,
            column: 51,
            span: 8032..8036,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 250,
            column: 52,
            span: 8036..8037,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 250,
            column: 56,
            span: 8037..8041,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 250,
            column: 57,
            span: 8041..8042,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xEC\"",
        ),
        position: Position {
            line: 250,
            column: 64,
            span: 8043..8049,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 250,
            column: 65,
            span: 8049..8050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 251,
            column: 9,
            span: 8053..8059,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 251,
            column: 10,
            span: 8059..8060,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 251,
            column: 11,
            span: 8060..8061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 251,
            column: 12,
            span: 8061..8062,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 251,
            column: 15,
            span: 8063..8065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 251,
            column: 24,
            span: 8066..8074,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 251,
            column: 25,
            span: 8074..8075,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">!8 b Xh i4 i8 c1 Xi8\"",
        ),
        position: Position {
            line: 251,
            column: 48,
            span: 8075..8098,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 251,
            column: 49,
            span: 8098..8099,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 251,
            column: 50,
            span: 8099..8100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 252,
            column: 9,
            span: 8103..8109,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 252,
            column: 10,
            span: 8109..8110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 252,
            column: 11,
            span: 8110..8111,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 252,
            column: 14,
            span: 8112..8114,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xf4\"",
        ),
        position: Position {
            line: 252,
            column: 21,
            span: 8115..8121,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 252,
            column: 24,
            span: 8122..8124,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\"",
        ),
        position: Position {
            line: 252,
            column: 33,
            span: 8125..8133,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 252,
            column: 36,
            span: 8134..8136,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\\100\"",
        ),
        position: Position {
            line: 253,
            column: 27,
            span: 8151..8163,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 253,
            column: 30,
            span: 8164..8166,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\\0\\0\\0\\0\\xC8\"",
        ),
        position: Position {
            line: 254,
            column: 35,
            span: 8181..8201,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 254,
            column: 38,
            span: 8202..8204,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xEC\"",
        ),
        position: Position {
            line: 255,
            column: 21,
            span: 8220..8226,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 255,
            column: 24,
            span: 8227..8229,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\\0\\0\\0\\0\"",
        ),
        position: Position {
            line: 255,
            column: 41,
            span: 8230..8246,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 255,
            column: 42,
            span: 8246..8247,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 256,
            column: 8,
            span: 8250..8255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 256,
            column: 10,
            span: 8256..8257,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 256,
            column: 11,
            span: 8257..8258,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 256,
            column: 13,
            span: 8259..8260,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 256,
            column: 14,
            span: 8260..8261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 256,
            column: 16,
            span: 8262..8263,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 256,
            column: 17,
            span: 8263..8264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 256,
            column: 19,
            span: 8265..8266,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 256,
            column: 20,
            span: 8266..8267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 256,
            column: 24,
            span: 8268..8271,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 256,
            column: 26,
            span: 8272..8273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 256,
            column: 33,
            span: 8274..8280,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 256,
            column: 34,
            span: 8280..8281,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">!8 c1 Xh i4 i8 b Xi8 XI XH\"",
        ),
        position: Position {
            line: 256,
            column: 63,
            span: 8281..8310,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 256,
            column: 64,
            span: 8310..8311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 256,
            column: 66,
            span: 8312..8313,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 256,
            column: 67,
            span: 8313..8314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 257,
            column: 9,
            span: 8317..8323,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 10,
            span: 8323..8324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 257,
            column: 11,
            span: 8324..8325,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 257,
            column: 14,
            span: 8326..8328,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xF4\"",
        ),
        position: Position {
            line: 257,
            column: 21,
            span: 8329..8335,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 257,
            column: 25,
            span: 8336..8339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 257,
            column: 27,
            span: 8340..8341,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 257,
            column: 30,
            span: 8342..8344,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 257,
            column: 34,
            span: 8344..8348,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 257,
            column: 38,
            span: 8349..8352,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 257,
            column: 40,
            span: 8353..8354,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 257,
            column: 43,
            span: 8355..8357,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 257,
            column: 47,
            span: 8357..8361,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 257,
            column: 51,
            span: 8362..8365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 257,
            column: 53,
            span: 8366..8367,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 257,
            column: 56,
            span: 8368..8370,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 257,
            column: 58,
            span: 8371..8372,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 257,
            column: 60,
            span: 8371..8374,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 257,
            column: 64,
            span: 8375..8378,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 66,
            span: 8379..8380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 257,
            column: 69,
            span: 8380..8383,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 257,
            column: 71,
            span: 8384..8385,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 257,
            column: 73,
            span: 8385..8387,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 74,
            span: 8387..8388,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 257,
            column: 77,
            span: 8389..8391,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 257,
            column: 79,
            span: 8392..8393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 257,
            column: 80,
            span: 8393..8394,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 81,
            span: 8394..8395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 259,
            column: 4,
            span: 8399..8400,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 259,
            column: 6,
            span: 8401..8402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 259,
            column: 11,
            span: 8403..8407,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 259,
            column: 12,
            span: 8407..8408,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">!4 c3 c4 c2 z i4 c5 c2 Xi4\"",
        ),
        position: Position {
            line: 259,
            column: 41,
            span: 8408..8437,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 259,
            column: 42,
            span: 8437..8438,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        position: Position {
            line: 260,
            column: 24,
            span: 8457..8462,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 260,
            column: 25,
            span: 8462..8463,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcd\"",
        ),
        position: Position {
            line: 260,
            column: 32,
            span: 8464..8470,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 260,
            column: 33,
            span: 8470..8471,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xz\"",
        ),
        position: Position {
            line: 260,
            column: 38,
            span: 8472..8476,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 260,
            column: 39,
            span: 8476..8477,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hello\"",
        ),
        position: Position {
            line: 260,
            column: 47,
            span: 8478..8485,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 260,
            column: 48,
            span: 8485..8486,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 260,
            column: 50,
            span: 8486..8488,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 260,
            column: 51,
            span: 8488..8489,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"world\"",
        ),
        position: Position {
            line: 260,
            column: 59,
            span: 8490..8497,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 260,
            column: 60,
            span: 8497..8498,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xy\"",
        ),
        position: Position {
            line: 260,
            column: 65,
            span: 8499..8503,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 260,
            column: 66,
            span: 8503..8504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 261,
            column: 9,
            span: 8507..8513,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 261,
            column: 10,
            span: 8513..8514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 261,
            column: 11,
            span: 8514..8515,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 261,
            column: 14,
            span: 8516..8518,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcabcdxzhello\\0\\0\\0\\0\\0\\5worldxy\\0\"",
        ),
        position: Position {
            line: 261,
            column: 52,
            span: 8519..8556,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 261,
            column: 53,
            span: 8556..8557,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 262,
            column: 8,
            span: 8560..8565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 262,
            column: 10,
            span: 8566..8567,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 262,
            column: 11,
            span: 8567..8568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 262,
            column: 13,
            span: 8569..8570,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 262,
            column: 14,
            span: 8570..8571,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 262,
            column: 16,
            span: 8572..8573,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 262,
            column: 17,
            span: 8573..8574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 262,
            column: 19,
            span: 8575..8576,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 262,
            column: 20,
            span: 8576..8577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 262,
            column: 22,
            span: 8578..8579,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 262,
            column: 23,
            span: 8579..8580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 262,
            column: 25,
            span: 8581..8582,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 262,
            column: 26,
            span: 8582..8583,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 262,
            column: 28,
            span: 8584..8585,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 262,
            column: 29,
            span: 8585..8586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 262,
            column: 33,
            span: 8587..8590,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 262,
            column: 35,
            span: 8591..8592,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 262,
            column: 42,
            span: 8593..8599,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 262,
            column: 43,
            span: 8599..8600,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">!4 c3 c4 c2 z i4 c5 c2 Xh Xi4\"",
        ),
        position: Position {
            line: 262,
            column: 75,
            span: 8600..8632,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 262,
            column: 76,
            span: 8632..8633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 262,
            column: 78,
            span: 8634..8635,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 262,
            column: 79,
            span: 8635..8636,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 263,
            column: 9,
            span: 8639..8645,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 263,
            column: 10,
            span: 8645..8646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 263,
            column: 11,
            span: 8646..8647,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 263,
            column: 14,
            span: 8648..8650,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        position: Position {
            line: 263,
            column: 20,
            span: 8651..8656,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 263,
            column: 24,
            span: 8657..8660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 263,
            column: 26,
            span: 8661..8662,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 263,
            column: 29,
            span: 8663..8665,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcd\"",
        ),
        position: Position {
            line: 263,
            column: 36,
            span: 8666..8672,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 263,
            column: 40,
            span: 8673..8676,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 263,
            column: 42,
            span: 8677..8678,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 263,
            column: 45,
            span: 8679..8681,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xz\"",
        ),
        position: Position {
            line: 263,
            column: 50,
            span: 8682..8686,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 263,
            column: 54,
            span: 8687..8690,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 263,
            column: 56,
            span: 8691..8692,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 263,
            column: 59,
            span: 8693..8695,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hello\"",
        ),
        position: Position {
            line: 263,
            column: 67,
            span: 8696..8703,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 263,
            column: 0,
            span: 8704..8707,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 264,
            column: 11,
            span: 8717..8718,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 264,
            column: 14,
            span: 8719..8721,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 264,
            column: 16,
            span: 8721..8723,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 264,
            column: 20,
            span: 8724..8727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 264,
            column: 22,
            span: 8728..8729,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 264,
            column: 25,
            span: 8730..8732,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"world\"",
        ),
        position: Position {
            line: 264,
            column: 33,
            span: 8733..8740,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 264,
            column: 37,
            span: 8741..8744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 264,
            column: 39,
            span: 8745..8746,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 264,
            column: 42,
            span: 8747..8749,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xy\"",
        ),
        position: Position {
            line: 264,
            column: 47,
            span: 8750..8754,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 264,
            column: 51,
            span: 8755..8758,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 264,
            column: 53,
            span: 8759..8760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 264,
            column: 56,
            span: 8760..8763,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 264,
            column: 58,
            span: 8764..8765,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 264,
            column: 60,
            span: 8765..8767,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 264,
            column: 61,
            span: 8767..8768,
        },
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        position: Position {
            line: 264,
            column: 63,
            span: 8769..8770,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 264,
            column: 65,
            span: 8770..8772,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 264,
            column: 68,
            span: 8773..8775,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 264,
            column: 70,
            span: 8775..8777,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 264,
            column: 71,
            span: 8777..8778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 266,
            column: 4,
            span: 8782..8783,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 266,
            column: 6,
            span: 8784..8785,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 266,
            column: 11,
            span: 8786..8790,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 266,
            column: 12,
            span: 8790..8791,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" b b Xd b Xb x\"",
        ),
        position: Position {
            line: 266,
            column: 28,
            span: 8791..8807,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 266,
            column: 29,
            span: 8807..8808,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 266,
            column: 31,
            span: 8808..8810,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 266,
            column: 32,
            span: 8810..8811,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 266,
            column: 34,
            span: 8811..8813,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 266,
            column: 35,
            span: 8813..8814,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 266,
            column: 37,
            span: 8814..8816,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 266,
            column: 38,
            span: 8816..8817,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 267,
            column: 9,
            span: 8820..8826,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 267,
            column: 10,
            span: 8826..8827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 267,
            column: 18,
            span: 8827..8835,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 267,
            column: 19,
            span: 8835..8836,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" b b Xd b Xb x\"",
        ),
        position: Position {
            line: 267,
            column: 35,
            span: 8836..8852,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 267,
            column: 36,
            span: 8852..8853,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 267,
            column: 39,
            span: 8854..8856,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 267,
            column: 41,
            span: 8856..8858,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 267,
            column: 42,
            span: 8858..8859,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 268,
            column: 9,
            span: 8862..8868,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 268,
            column: 10,
            span: 8868..8869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 268,
            column: 11,
            span: 8869..8870,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 268,
            column: 14,
            span: 8871..8873,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\1\\2\\3\\0\"",
        ),
        position: Position {
            line: 268,
            column: 25,
            span: 8874..8884,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 268,
            column: 26,
            span: 8884..8885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 269,
            column: 4,
            span: 8888..8889,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 269,
            column: 5,
            span: 8889..8890,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 269,
            column: 7,
            span: 8891..8892,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 269,
            column: 8,
            span: 8892..8893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 269,
            column: 10,
            span: 8894..8895,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 269,
            column: 11,
            span: 8895..8896,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 269,
            column: 15,
            span: 8897..8900,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 269,
            column: 17,
            span: 8901..8902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 269,
            column: 24,
            span: 8903..8909,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 269,
            column: 25,
            span: 8909..8910,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bbXdb\"",
        ),
        position: Position {
            line: 269,
            column: 32,
            span: 8910..8917,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 269,
            column: 33,
            span: 8917..8918,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 269,
            column: 35,
            span: 8919..8920,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 269,
            column: 36,
            span: 8920..8921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 270,
            column: 9,
            span: 8924..8930,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 10,
            span: 8930..8931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 270,
            column: 11,
            span: 8931..8932,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 270,
            column: 14,
            span: 8933..8935,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 270,
            column: 16,
            span: 8935..8937,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 270,
            column: 20,
            span: 8938..8941,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 270,
            column: 22,
            span: 8942..8943,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 270,
            column: 25,
            span: 8944..8946,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 270,
            column: 27,
            span: 8946..8948,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 270,
            column: 31,
            span: 8949..8952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 270,
            column: 33,
            span: 8953..8954,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 270,
            column: 36,
            span: 8955..8957,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 270,
            column: 38,
            span: 8957..8959,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 270,
            column: 42,
            span: 8960..8963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 270,
            column: 46,
            span: 8964..8967,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 270,
            column: 49,
            span: 8968..8970,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 270,
            column: 51,
            span: 8971..8972,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 270,
            column: 52,
            span: 8972..8973,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 53,
            span: 8973..8974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 273,
            column: 9,
            span: 8998..9004,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 273,
            column: 10,
            span: 9004..9005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 273,
            column: 18,
            span: 9005..9013,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 273,
            column: 19,
            span: 9013..9014,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!8 xXi8\"",
        ),
        position: Position {
            line: 273,
            column: 28,
            span: 9014..9023,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 273,
            column: 29,
            span: 9023..9024,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 273,
            column: 32,
            span: 9025..9027,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 273,
            column: 34,
            span: 9027..9029,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 273,
            column: 35,
            span: 9029..9030,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 274,
            column: 8,
            span: 9033..9038,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 274,
            column: 12,
            span: 9039..9042,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 274,
            column: 14,
            span: 9043..9044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 274,
            column: 21,
            span: 9045..9051,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 274,
            column: 22,
            span: 9051..9052,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!8 xXi8\"",
        ),
        position: Position {
            line: 274,
            column: 31,
            span: 9052..9061,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 274,
            column: 32,
            span: 9061..9062,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0123456701234567\"",
        ),
        position: Position {
            line: 274,
            column: 51,
            span: 9063..9081,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 274,
            column: 52,
            span: 9081..9082,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 274,
            column: 53,
            span: 9082..9083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 274,
            column: 60,
            span: 9084..9090,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 274,
            column: 61,
            span: 9090..9091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 274,
            column: 64,
            span: 9091..9094,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 274,
            column: 67,
            span: 9095..9097,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 274,
            column: 69,
            span: 9097..9099,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 274,
            column: 70,
            span: 9099..9100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 275,
            column: 9,
            span: 9103..9109,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 275,
            column: 10,
            span: 9109..9110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 275,
            column: 18,
            span: 9110..9118,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 275,
            column: 19,
            span: 9118..9119,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!8 xXi2\"",
        ),
        position: Position {
            line: 275,
            column: 28,
            span: 9119..9128,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 275,
            column: 29,
            span: 9128..9129,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 275,
            column: 32,
            span: 9130..9132,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 275,
            column: 34,
            span: 9132..9134,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 275,
            column: 35,
            span: 9134..9135,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 276,
            column: 8,
            span: 9138..9143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 276,
            column: 12,
            span: 9144..9147,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 276,
            column: 14,
            span: 9148..9149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 276,
            column: 21,
            span: 9150..9156,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 276,
            column: 22,
            span: 9156..9157,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!8 xXi2\"",
        ),
        position: Position {
            line: 276,
            column: 31,
            span: 9157..9166,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 276,
            column: 32,
            span: 9166..9167,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0123456701234567\"",
        ),
        position: Position {
            line: 276,
            column: 51,
            span: 9168..9186,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 276,
            column: 52,
            span: 9186..9187,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 276,
            column: 53,
            span: 9187..9188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 276,
            column: 60,
            span: 9189..9195,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 276,
            column: 61,
            span: 9195..9196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 276,
            column: 64,
            span: 9196..9199,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 276,
            column: 67,
            span: 9200..9202,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 276,
            column: 69,
            span: 9202..9204,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 276,
            column: 70,
            span: 9204..9205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 277,
            column: 9,
            span: 9208..9214,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 277,
            column: 10,
            span: 9214..9215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 277,
            column: 18,
            span: 9215..9223,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 277,
            column: 19,
            span: 9223..9224,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!2 xXi2\"",
        ),
        position: Position {
            line: 277,
            column: 28,
            span: 9224..9233,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 277,
            column: 29,
            span: 9233..9234,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 277,
            column: 32,
            span: 9235..9237,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 277,
            column: 34,
            span: 9237..9239,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 277,
            column: 35,
            span: 9239..9240,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 278,
            column: 8,
            span: 9243..9248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 278,
            column: 12,
            span: 9249..9252,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 278,
            column: 14,
            span: 9253..9254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 278,
            column: 21,
            span: 9255..9261,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 278,
            column: 22,
            span: 9261..9262,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!2 xXi2\"",
        ),
        position: Position {
            line: 278,
            column: 31,
            span: 9262..9271,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 278,
            column: 32,
            span: 9271..9272,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0123456701234567\"",
        ),
        position: Position {
            line: 278,
            column: 51,
            span: 9273..9291,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 278,
            column: 52,
            span: 9291..9292,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 278,
            column: 53,
            span: 9292..9293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 278,
            column: 60,
            span: 9294..9300,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 278,
            column: 61,
            span: 9300..9301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 278,
            column: 64,
            span: 9301..9304,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 278,
            column: 67,
            span: 9305..9307,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 278,
            column: 69,
            span: 9307..9309,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 278,
            column: 70,
            span: 9309..9310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 279,
            column: 9,
            span: 9313..9319,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 279,
            column: 10,
            span: 9319..9320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 279,
            column: 18,
            span: 9320..9328,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 279,
            column: 19,
            span: 9328..9329,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!2 xXi8\"",
        ),
        position: Position {
            line: 279,
            column: 28,
            span: 9329..9338,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 279,
            column: 29,
            span: 9338..9339,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 279,
            column: 32,
            span: 9340..9342,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 279,
            column: 34,
            span: 9342..9344,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 279,
            column: 35,
            span: 9344..9345,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 280,
            column: 8,
            span: 9348..9353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 280,
            column: 12,
            span: 9354..9357,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 280,
            column: 14,
            span: 9358..9359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 280,
            column: 21,
            span: 9360..9366,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 280,
            column: 22,
            span: 9366..9367,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!2 xXi8\"",
        ),
        position: Position {
            line: 280,
            column: 31,
            span: 9367..9376,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 280,
            column: 32,
            span: 9376..9377,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0123456701234567\"",
        ),
        position: Position {
            line: 280,
            column: 51,
            span: 9378..9396,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 280,
            column: 52,
            span: 9396..9397,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 280,
            column: 53,
            span: 9397..9398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 280,
            column: 60,
            span: 9399..9405,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 280,
            column: 61,
            span: 9405..9406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 280,
            column: 64,
            span: 9406..9409,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 280,
            column: 67,
            span: 9410..9412,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 280,
            column: 69,
            span: 9412..9414,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 280,
            column: 70,
            span: 9414..9415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 281,
            column: 9,
            span: 9418..9424,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 10,
            span: 9424..9425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 281,
            column: 18,
            span: 9425..9433,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 19,
            span: 9433..9434,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!16 xXi16\"",
        ),
        position: Position {
            line: 281,
            column: 30,
            span: 9434..9445,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 281,
            column: 31,
            span: 9445..9446,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 281,
            column: 34,
            span: 9447..9449,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 281,
            column: 37,
            span: 9449..9452,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 281,
            column: 38,
            span: 9452..9453,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 282,
            column: 8,
            span: 9456..9461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 282,
            column: 12,
            span: 9462..9465,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 282,
            column: 14,
            span: 9466..9467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 282,
            column: 21,
            span: 9468..9474,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 282,
            column: 22,
            span: 9474..9475,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!16 xXi16\"",
        ),
        position: Position {
            line: 282,
            column: 33,
            span: 9475..9486,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 282,
            column: 34,
            span: 9486..9487,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0123456701234567\"",
        ),
        position: Position {
            line: 282,
            column: 53,
            span: 9488..9506,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 282,
            column: 54,
            span: 9506..9507,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 282,
            column: 55,
            span: 9507..9508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 282,
            column: 62,
            span: 9509..9515,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 282,
            column: 63,
            span: 9515..9516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 282,
            column: 66,
            span: 9516..9519,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 282,
            column: 69,
            span: 9520..9522,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "17",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 282,
            column: 72,
            span: 9522..9525,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 282,
            column: 73,
            span: 9525..9526,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 284,
            column: 13,
            span: 9530..9540,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 284,
            column: 14,
            span: 9540..9541,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid next option\"",
        ),
        position: Position {
            line: 284,
            column: 35,
            span: 9541..9562,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 284,
            column: 36,
            span: 9562..9563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 284,
            column: 41,
            span: 9564..9568,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 284,
            column: 42,
            span: 9568..9569,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        position: Position {
            line: 284,
            column: 46,
            span: 9570..9573,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 284,
            column: 47,
            span: 9573..9574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 285,
            column: 13,
            span: 9577..9587,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 285,
            column: 14,
            span: 9587..9588,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid next option\"",
        ),
        position: Position {
            line: 285,
            column: 35,
            span: 9588..9609,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 285,
            column: 36,
            span: 9609..9610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 285,
            column: 43,
            span: 9611..9617,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 285,
            column: 44,
            span: 9617..9618,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXi\"",
        ),
        position: Position {
            line: 285,
            column: 50,
            span: 9619..9624,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 285,
            column: 51,
            span: 9624..9625,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 285,
            column: 54,
            span: 9626..9628,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 285,
            column: 55,
            span: 9628..9629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 286,
            column: 13,
            span: 9632..9642,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 286,
            column: 14,
            span: 9642..9643,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid next option\"",
        ),
        position: Position {
            line: 286,
            column: 35,
            span: 9643..9664,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 286,
            column: 36,
            span: 9664..9665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 286,
            column: 43,
            span: 9666..9672,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 286,
            column: 44,
            span: 9672..9673,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X i\"",
        ),
        position: Position {
            line: 286,
            column: 50,
            span: 9674..9679,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 286,
            column: 51,
            span: 9679..9680,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 286,
            column: 54,
            span: 9681..9683,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 286,
            column: 55,
            span: 9683..9684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 287,
            column: 13,
            span: 9687..9697,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 287,
            column: 14,
            span: 9697..9698,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid next option\"",
        ),
        position: Position {
            line: 287,
            column: 35,
            span: 9698..9719,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 287,
            column: 36,
            span: 9719..9720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 287,
            column: 41,
            span: 9721..9725,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 287,
            column: 42,
            span: 9725..9726,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Xc1\"",
        ),
        position: Position {
            line: 287,
            column: 48,
            span: 9727..9732,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 287,
            column: 49,
            span: 9732..9733,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 288,
            column: 0,
            span: 9734..9737,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 290,
            column: 3,
            span: 9739..9741,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 291,
            column: 8,
            span: 9775..9780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 291,
            column: 10,
            span: 9781..9782,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 291,
            column: 12,
            span: 9783..9784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 291,
            column: 17,
            span: 9785..9789,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 291,
            column: 18,
            span: 9789..9790,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i4i4i4i4\"",
        ),
        position: Position {
            line: 291,
            column: 28,
            span: 9790..9800,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 291,
            column: 29,
            span: 9800..9801,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 291,
            column: 31,
            span: 9801..9803,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 291,
            column: 32,
            span: 9803..9804,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 291,
            column: 34,
            span: 9804..9806,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 291,
            column: 35,
            span: 9806..9807,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 291,
            column: 37,
            span: 9807..9809,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 291,
            column: 38,
            span: 9809..9810,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 291,
            column: 40,
            span: 9810..9812,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 291,
            column: 41,
            span: 9812..9813,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 292,
            column: 6,
            span: 9816..9819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 292,
            column: 10,
            span: 9820..9823,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 292,
            column: 12,
            span: 9824..9825,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 292,
            column: 14,
            span: 9825..9827,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 292,
            column: 15,
            span: 9827..9828,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 292,
            column: 18,
            span: 9828..9831,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 292,
            column: 19,
            span: 9831..9832,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 292,
            column: 21,
            span: 9832..9834,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 292,
            column: 0,
            span: 9835..9837,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 293,
            column: 10,
            span: 9842..9847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 293,
            column: 12,
            span: 9848..9849,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 293,
            column: 13,
            span: 9849..9850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 293,
            column: 15,
            span: 9851..9852,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 293,
            column: 17,
            span: 9853..9854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 293,
            column: 24,
            span: 9855..9861,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 293,
            column: 25,
            span: 9861..9862,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i4\"",
        ),
        position: Position {
            line: 293,
            column: 29,
            span: 9862..9866,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 293,
            column: 30,
            span: 9866..9867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 293,
            column: 32,
            span: 9868..9869,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 293,
            column: 33,
            span: 9869..9870,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 293,
            column: 37,
            span: 9871..9874,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 293,
            column: 38,
            span: 9874..9875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 294,
            column: 11,
            span: 9880..9886,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 294,
            column: 12,
            span: 9886..9887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 294,
            column: 13,
            span: 9887..9888,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 294,
            column: 16,
            span: 9889..9891,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 294,
            column: 20,
            span: 9892..9895,
        },
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        position: Position {
            line: 294,
            column: 22,
            span: 9895..9897,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 294,
            column: 23,
            span: 9896..9898,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 294,
            column: 25,
            span: 9899..9900,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 294,
            column: 27,
            span: 9900..9902,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 294,
            column: 31,
            span: 9903..9906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 294,
            column: 33,
            span: 9907..9908,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 294,
            column: 36,
            span: 9909..9911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 294,
            column: 40,
            span: 9912..9915,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 294,
            column: 42,
            span: 9916..9917,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 294,
            column: 44,
            span: 9917..9919,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 294,
            column: 45,
            span: 9919..9920,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 295,
            column: 0,
            span: 9923..9926,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 298,
            column: 6,
            span: 9950..9953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 298,
            column: 10,
            span: 9954..9957,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 298,
            column: 12,
            span: 9958..9959,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 298,
            column: 14,
            span: 9959..9961,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 298,
            column: 15,
            span: 9961..9962,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 298,
            column: 18,
            span: 9962..9965,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 298,
            column: 21,
            span: 9966..9968,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 299,
            column: 10,
            span: 10020..10025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 299,
            column: 12,
            span: 10026..10027,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 299,
            column: 13,
            span: 10027..10028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 299,
            column: 15,
            span: 10029..10030,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 299,
            column: 17,
            span: 10031..10032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 299,
            column: 24,
            span: 10033..10039,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 299,
            column: 25,
            span: 10039..10040,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!4 i4\"",
        ),
        position: Position {
            line: 299,
            column: 32,
            span: 10040..10047,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 299,
            column: 33,
            span: 10047..10048,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 299,
            column: 35,
            span: 10049..10050,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 299,
            column: 36,
            span: 10050..10051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 299,
            column: 40,
            span: 10052..10055,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 299,
            column: 42,
            span: 10056..10057,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 299,
            column: 44,
            span: 10057..10059,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 299,
            column: 45,
            span: 10059..10060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 300,
            column: 11,
            span: 10065..10071,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 300,
            column: 12,
            span: 10071..10072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 300,
            column: 13,
            span: 10072..10073,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 300,
            column: 16,
            span: 10074..10076,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 300,
            column: 18,
            span: 10077..10078,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 300,
            column: 21,
            span: 10078..10081,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 300,
            column: 23,
            span: 10082..10083,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 300,
            column: 25,
            span: 10083..10085,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 300,
            column: 26,
            span: 10085..10086,
        },
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        position: Position {
            line: 300,
            column: 28,
            span: 10086..10088,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 300,
            column: 29,
            span: 10087..10089,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 300,
            column: 31,
            span: 10090..10091,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 300,
            column: 33,
            span: 10091..10093,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 300,
            column: 37,
            span: 10094..10097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 300,
            column: 39,
            span: 10098..10099,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 300,
            column: 42,
            span: 10100..10102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 300,
            column: 44,
            span: 10103..10104,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 300,
            column: 45,
            span: 10104..10105,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 300,
            column: 46,
            span: 10104..10106,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 300,
            column: 48,
            span: 10107..10108,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 300,
            column: 50,
            span: 10108..10110,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 300,
            column: 51,
            span: 10110..10111,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 301,
            column: 0,
            span: 10114..10117,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 304,
            column: 8,
            span: 10143..10148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 304,
            column: 10,
            span: 10149..10150,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 304,
            column: 11,
            span: 10150..10151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 304,
            column: 13,
            span: 10152..10153,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 304,
            column: 15,
            span: 10154..10155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 304,
            column: 22,
            span: 10156..10162,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 304,
            column: 23,
            span: 10162..10163,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!4 i4\"",
        ),
        position: Position {
            line: 304,
            column: 30,
            span: 10163..10170,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 304,
            column: 31,
            span: 10170..10171,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 304,
            column: 33,
            span: 10172..10173,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 304,
            column: 34,
            span: 10173..10174,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 304,
            column: 36,
            span: 10175..10176,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 304,
            column: 37,
            span: 10175..10177,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 304,
            column: 38,
            span: 10177..10178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 305,
            column: 9,
            span: 10181..10187,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 305,
            column: 10,
            span: 10187..10188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 305,
            column: 11,
            span: 10188..10189,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 305,
            column: 14,
            span: 10190..10192,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 305,
            column: 16,
            span: 10192..10194,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 305,
            column: 20,
            span: 10195..10198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 305,
            column: 22,
            span: 10199..10200,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 305,
            column: 25,
            span: 10201..10203,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "17",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 305,
            column: 28,
            span: 10203..10206,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 305,
            column: 29,
            span: 10206..10207,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 306,
            column: 8,
            span: 10210..10215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 306,
            column: 10,
            span: 10216..10217,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 306,
            column: 11,
            span: 10217..10218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 306,
            column: 13,
            span: 10219..10220,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 306,
            column: 15,
            span: 10221..10222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 306,
            column: 22,
            span: 10223..10229,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 306,
            column: 23,
            span: 10229..10230,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!4 i4\"",
        ),
        position: Position {
            line: 306,
            column: 30,
            span: 10230..10237,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 306,
            column: 31,
            span: 10237..10238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 306,
            column: 33,
            span: 10239..10240,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 306,
            column: 34,
            span: 10240..10241,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 306,
            column: 36,
            span: 10242..10243,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 306,
            column: 37,
            span: 10242..10244,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 306,
            column: 38,
            span: 10244..10245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 307,
            column: 9,
            span: 10248..10254,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 307,
            column: 10,
            span: 10254..10255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 307,
            column: 11,
            span: 10255..10256,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 307,
            column: 14,
            span: 10257..10259,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 307,
            column: 16,
            span: 10259..10261,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 307,
            column: 20,
            span: 10262..10265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 307,
            column: 22,
            span: 10266..10267,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 307,
            column: 25,
            span: 10268..10270,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "17",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 307,
            column: 28,
            span: 10270..10273,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 307,
            column: 29,
            span: 10273..10274,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 308,
            column: 8,
            span: 10277..10282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 308,
            column: 10,
            span: 10283..10284,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 308,
            column: 11,
            span: 10284..10285,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 308,
            column: 13,
            span: 10286..10287,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 308,
            column: 15,
            span: 10288..10289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 308,
            column: 22,
            span: 10290..10296,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 308,
            column: 23,
            span: 10296..10297,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!4 i4\"",
        ),
        position: Position {
            line: 308,
            column: 30,
            span: 10297..10304,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 308,
            column: 31,
            span: 10304..10305,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 308,
            column: 33,
            span: 10306..10307,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 308,
            column: 34,
            span: 10307..10308,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 308,
            column: 36,
            span: 10309..10310,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 308,
            column: 37,
            span: 10310..10311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 308,
            column: 38,
            span: 10311..10312,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 308,
            column: 39,
            span: 10312..10313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 309,
            column: 9,
            span: 10316..10322,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 309,
            column: 10,
            span: 10322..10323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 309,
            column: 11,
            span: 10323..10324,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 309,
            column: 14,
            span: 10325..10327,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 309,
            column: 16,
            span: 10327..10329,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 309,
            column: 20,
            span: 10330..10333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 309,
            column: 22,
            span: 10334..10335,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 309,
            column: 25,
            span: 10336..10338,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 309,
            column: 27,
            span: 10338..10340,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 309,
            column: 28,
            span: 10340..10341,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 312,
            column: 6,
            span: 10357..10360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 312,
            column: 8,
            span: 10361..10362,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 312,
            column: 10,
            span: 10363..10364,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 312,
            column: 12,
            span: 10364..10366,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 312,
            column: 13,
            span: 10366..10367,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 312,
            column: 15,
            span: 10368..10369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 312,
            column: 16,
            span: 10369..10370,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 312,
            column: 18,
            span: 10371..10372,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 312,
            column: 20,
            span: 10372..10374,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 312,
            column: 0,
            span: 10375..10377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 313,
            column: 11,
            span: 10382..10388,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 313,
            column: 12,
            span: 10388..10389,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 313,
            column: 18,
            span: 10389..10395,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 313,
            column: 19,
            span: 10395..10396,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c0\"",
        ),
        position: Position {
            line: 313,
            column: 23,
            span: 10396..10400,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 313,
            column: 24,
            span: 10400..10401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 313,
            column: 26,
            span: 10402..10403,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 313,
            column: 27,
            span: 10403..10404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 313,
            column: 29,
            span: 10405..10406,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 313,
            column: 30,
            span: 10406..10407,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 313,
            column: 33,
            span: 10408..10410,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 313,
            column: 36,
            span: 10411..10413,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 313,
            column: 37,
            span: 10413..10414,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 314,
            column: 0,
            span: 10417..10420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 315,
            column: 13,
            span: 10423..10433,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 14,
            span: 10433..10434,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of string\"",
        ),
        position: Position {
            line: 315,
            column: 29,
            span: 10434..10449,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 315,
            column: 30,
            span: 10449..10450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 315,
            column: 37,
            span: 10451..10457,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 315,
            column: 38,
            span: 10457..10458,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c0\"",
        ),
        position: Position {
            line: 315,
            column: 43,
            span: 10459..10463,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 315,
            column: 44,
            span: 10463..10464,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 315,
            column: 46,
            span: 10465..10466,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 315,
            column: 47,
            span: 10466..10467,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 315,
            column: 49,
            span: 10467..10469,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 315,
            column: 50,
            span: 10469..10470,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 316,
            column: 13,
            span: 10473..10483,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 316,
            column: 14,
            span: 10483..10484,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of string\"",
        ),
        position: Position {
            line: 316,
            column: 29,
            span: 10484..10499,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 30,
            span: 10499..10500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 316,
            column: 37,
            span: 10501..10507,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 38,
            span: 10507..10508,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c0\"",
        ),
        position: Position {
            line: 316,
            column: 43,
            span: 10509..10513,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 44,
            span: 10513..10514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 316,
            column: 46,
            span: 10515..10516,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 47,
            span: 10516..10517,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 316,
            column: 49,
            span: 10518..10519,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 316,
            column: 50,
            span: 10519..10520,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 316,
            column: 52,
            span: 10521..10522,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 316,
            column: 54,
            span: 10522..10524,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 316,
            column: 55,
            span: 10524..10525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 317,
            column: 13,
            span: 10528..10538,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 317,
            column: 14,
            span: 10538..10539,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of string\"",
        ),
        position: Position {
            line: 317,
            column: 29,
            span: 10539..10554,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 317,
            column: 30,
            span: 10554..10555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 317,
            column: 37,
            span: 10556..10562,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 317,
            column: 38,
            span: 10562..10563,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c0\"",
        ),
        position: Position {
            line: 317,
            column: 43,
            span: 10564..10568,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 317,
            column: 44,
            span: 10568..10569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 317,
            column: 46,
            span: 10570..10571,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 317,
            column: 47,
            span: 10571..10572,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 317,
            column: 49,
            span: 10573..10574,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 317,
            column: 50,
            span: 10574..10575,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 317,
            column: 51,
            span: 10575..10576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 317,
            column: 52,
            span: 10576..10577,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 317,
            column: 54,
            span: 10578..10579,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 317,
            column: 56,
            span: 10579..10581,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 317,
            column: 57,
            span: 10581..10582,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 317,
            column: 58,
            span: 10582..10583,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 319,
            column: 0,
            span: 10586..10589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 321,
            column: 6,
            span: 10591..10596,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        position: Position {
            line: 321,
            column: 11,
            span: 10597..10601,
        },
    },
]
