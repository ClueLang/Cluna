---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/pm.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
        column: 6,
        span: 97..102,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
        column: 7,
        span: 102..103,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing pattern matching'",
        ),
        line: 4,
        column: 33,
        span: 103..129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
        column: 34,
        span: 129..130,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 6,
        span: 132..137,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 6,
        column: 15,
        span: 138..146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 6,
        column: 26,
        span: 147..157,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 28,
        span: 158..159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 6,
        column: 31,
        span: 159..162,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 6,
        column: 32,
        span: 162..163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 6,
        column: 34,
        span: 164..165,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 6,
        column: 35,
        span: 165..166,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 6,
        column: 39,
        span: 167..170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 40,
        span: 170..171,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 7,
        column: 8,
        span: 174..179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 7,
        column: 10,
        span: 180..181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 7,
        column: 11,
        span: 181..182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 7,
        column: 15,
        span: 183..186,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 7,
        column: 17,
        span: 187..188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 7,
        column: 23,
        span: 189..194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 7,
        column: 24,
        span: 194..195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 7,
        column: 25,
        span: 195..196,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 7,
        column: 26,
        span: 196..197,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 7,
        column: 30,
        span: 198..201,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 7,
        column: 31,
        span: 201..202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 8,
        column: 9,
        span: 205..211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 10,
        span: 211..212,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 8,
        column: 13,
        span: 212..215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 8,
        column: 15,
        span: 216..217,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 8,
        column: 19,
        span: 218..221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 8,
        column: 26,
        span: 222..228,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 8,
        column: 27,
        span: 228..229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 8,
        column: 31,
        span: 229..233,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 32,
        span: 233..234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 8,
        column: 35,
        span: 234..237,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 8,
        column: 36,
        span: 237..238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 8,
        column: 40,
        span: 239..242,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 41,
        span: 242..243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 42,
        span: 243..244,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 9,
        column: 0,
        span: 245..248,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 12,
        column: 9,
        span: 251..259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 12,
        column: 11,
        span: 260..261,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 12,
        span: 261..262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 12,
        column: 13,
        span: 262..263,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 12,
        column: 14,
        span: 263..264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 12,
        column: 16,
        span: 265..266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 17,
        span: 266..267,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 13,
        column: 8,
        span: 270..275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 13,
        column: 10,
        span: 276..277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 13,
        column: 11,
        span: 277..278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 13,
        column: 12,
        span: 278..279,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 13,
        column: 14,
        span: 280..281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 13,
        column: 21,
        span: 282..288,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 13,
        column: 22,
        span: 288..289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 13,
        column: 26,
        span: 289..293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 27,
        span: 293..294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 13,
        column: 28,
        span: 294..295,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 13,
        column: 29,
        span: 295..296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 13,
        column: 31,
        span: 297..298,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 32,
        span: 298..299,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 14,
        column: 5,
        span: 302..304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 14,
        column: 7,
        span: 305..306,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 14,
        column: 12,
        span: 307..311,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 14,
        column: 19,
        span: 312..318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 14,
        column: 26,
        span: 319..325,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 14,
        column: 27,
        span: 325..326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 14,
        column: 30,
        span: 326..329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
        column: 31,
        span: 329..330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 14,
        column: 32,
        span: 330..331,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 14,
        column: 33,
        span: 331..332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 14,
        column: 35,
        span: 333..334,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 14,
        column: 36,
        span: 334..335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 14,
        column: 38,
        span: 336..337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 39,
        span: 337..338,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 14,
        column: 0,
        span: 339..342,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 15,
        column: 0,
        span: 343..346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 17,
        column: 2,
        span: 348..349,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 17,
        column: 3,
        span: 349..350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 17,
        column: 4,
        span: 350..351,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 17,
        column: 6,
        span: 352..353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 17,
        column: 13,
        span: 354..360,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 17,
        column: 14,
        span: 360..361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 17,
        column: 18,
        span: 361..365,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 19,
        span: 365..366,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 17,
        column: 21,
        span: 366..368,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 17,
        column: 22,
        span: 368..369,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 17,
        column: 25,
        span: 370..372,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 26,
        span: 372..373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 18,
        column: 7,
        span: 406..412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 8,
        span: 412..413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 18,
        column: 9,
        span: 413..414,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 18,
        column: 12,
        span: 415..417,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 18,
        column: 14,
        span: 417..419,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 18,
        column: 18,
        span: 420..423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 18,
        column: 20,
        span: 424..425,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 18,
        column: 23,
        span: 426..428,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 18,
        column: 25,
        span: 428..430,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 26,
        span: 430..431,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 18,
        column: 27,
        span: 431..432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 19,
        column: 2,
        span: 433..434,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
        column: 3,
        span: 434..435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 19,
        column: 4,
        span: 435..436,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 19,
        column: 6,
        span: 437..438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 19,
        column: 13,
        span: 439..445,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 19,
        column: 14,
        span: 445..446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 19,
        column: 18,
        span: 446..450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 19,
        span: 450..451,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 19,
        column: 24,
        span: 451..456,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
        column: 25,
        span: 456..457,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 19,
        column: 28,
        span: 458..460,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 29,
        span: 460..461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 20,
        column: 7,
        span: 462..468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 8,
        span: 468..469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 20,
        column: 9,
        span: 469..470,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 20,
        column: 12,
        span: 471..473,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 14,
        span: 473..475,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 20,
        column: 18,
        span: 476..479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 20,
        column: 20,
        span: 480..481,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 20,
        column: 23,
        span: 482..484,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 25,
        span: 484..486,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 26,
        span: 486..487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 21,
        column: 2,
        span: 488..489,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 3,
        span: 489..490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 21,
        column: 4,
        span: 490..491,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
        column: 6,
        span: 492..493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 21,
        column: 13,
        span: 494..500,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 21,
        column: 14,
        span: 500..501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 21,
        column: 18,
        span: 501..505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 19,
        span: 505..506,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0o a\\0o a\\0o'",
        ),
        line: 21,
        column: 35,
        span: 506..522,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 36,
        span: 522..523,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 21,
        column: 40,
        span: 524..527,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 41,
        span: 527..528,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 21,
        column: 43,
        span: 528..530,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 44,
        span: 530..531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 22,
        column: 7,
        span: 552..558,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 8,
        span: 558..559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 22,
        column: 9,
        span: 559..560,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 22,
        column: 12,
        span: 561..563,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 22,
        column: 14,
        span: 563..565,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 22,
        column: 18,
        span: 566..569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 22,
        column: 20,
        span: 570..571,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 22,
        column: 23,
        span: 572..574,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 22,
        column: 25,
        span: 574..576,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 26,
        span: 576..577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 23,
        column: 2,
        span: 578..579,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 23,
        column: 3,
        span: 579..580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 23,
        column: 4,
        span: 580..581,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 23,
        column: 6,
        span: 582..583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 23,
        column: 13,
        span: 584..590,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 23,
        column: 14,
        span: 590..591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 23,
        column: 18,
        span: 591..595,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 19,
        span: 595..596,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0o a\\0o a\\0o'",
        ),
        line: 23,
        column: 35,
        span: 596..612,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 23,
        column: 36,
        span: 612..613,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0o'",
        ),
        line: 23,
        column: 43,
        span: 614..620,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 23,
        column: 44,
        span: 620..621,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 23,
        column: 46,
        span: 621..623,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 47,
        span: 623..624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 24,
        column: 7,
        span: 650..656,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 8,
        span: 656..657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 24,
        column: 9,
        span: 657..658,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 24,
        column: 12,
        span: 659..661,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 24,
        column: 14,
        span: 661..663,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 24,
        column: 18,
        span: 664..667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 24,
        column: 20,
        span: 668..669,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 24,
        column: 23,
        span: 670..672,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 24,
        column: 25,
        span: 672..674,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 26,
        span: 674..675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 25,
        column: 2,
        span: 676..677,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 3,
        span: 677..678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 25,
        column: 4,
        span: 678..679,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 25,
        column: 6,
        span: 680..681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 25,
        column: 13,
        span: 682..688,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 25,
        column: 14,
        span: 688..689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 25,
        column: 18,
        span: 689..693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 19,
        span: 693..694,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0o a\\0o a\\0o'",
        ),
        line: 25,
        column: 35,
        span: 694..710,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 36,
        span: 710..711,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0o'",
        ),
        line: 25,
        column: 43,
        span: 712..718,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 44,
        span: 718..719,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 46,
        span: 719..721,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 47,
        span: 721..722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 26,
        column: 7,
        span: 748..754,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 8,
        span: 754..755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 26,
        column: 9,
        span: 755..756,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 26,
        column: 12,
        span: 757..759,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 14,
        span: 759..761,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 26,
        column: 18,
        span: 762..765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 26,
        column: 20,
        span: 766..767,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 26,
        column: 23,
        span: 768..770,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 26,
        span: 770..773,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 27,
        span: 773..774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 27,
        column: 2,
        span: 775..776,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
        column: 3,
        span: 776..777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 27,
        column: 4,
        span: 777..778,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 27,
        column: 6,
        span: 779..780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 27,
        column: 13,
        span: 781..787,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 27,
        column: 14,
        span: 787..788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 27,
        column: 18,
        span: 788..792,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 19,
        span: 792..793,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0a\\0a\\0a\\0\\0ab'",
        ),
        line: 27,
        column: 37,
        span: 793..811,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
        column: 38,
        span: 811..812,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0ab'",
        ),
        line: 27,
        column: 45,
        span: 813..819,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
        column: 46,
        span: 819..820,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 27,
        column: 48,
        span: 820..822,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 49,
        span: 822..823,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 27,
        column: 50,
        span: 823..824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 28,
        column: 7,
        span: 846..852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 8,
        span: 852..853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 28,
        column: 9,
        span: 853..854,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 28,
        column: 12,
        span: 855..857,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 14,
        span: 857..859,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 28,
        column: 18,
        span: 860..863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 28,
        column: 20,
        span: 864..865,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 28,
        column: 23,
        span: 866..868,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 26,
        span: 868..871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 27,
        span: 871..872,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 28,
        column: 28,
        span: 872..873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 29,
        column: 2,
        span: 874..875,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 3,
        span: 875..876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 29,
        column: 4,
        span: 876..877,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 29,
        column: 6,
        span: 878..879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 29,
        column: 13,
        span: 880..886,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 29,
        column: 14,
        span: 886..887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 29,
        column: 18,
        span: 887..891,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 19,
        span: 891..892,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0a\\0a\\0a\\0\\0ab'",
        ),
        line: 29,
        column: 37,
        span: 892..910,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 38,
        span: 910..911,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 29,
        column: 42,
        span: 912..915,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 43,
        span: 915..916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 30,
        column: 7,
        span: 937..943,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 8,
        span: 943..944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 30,
        column: 9,
        span: 944..945,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 30,
        column: 12,
        span: 946..948,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
        column: 15,
        span: 948..951,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 30,
        column: 19,
        span: 952..955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 30,
        column: 21,
        span: 956..957,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 30,
        column: 24,
        span: 958..960,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
        column: 27,
        span: 960..963,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 28,
        span: 963..964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 31,
        column: 7,
        span: 965..971,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 8,
        span: 971..972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 31,
        column: 14,
        span: 972..978,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 31,
        column: 15,
        span: 978..979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 31,
        column: 19,
        span: 979..983,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 20,
        span: 983..984,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0a\\0a\\0a\\0\\0ab'",
        ),
        line: 31,
        column: 38,
        span: 984..1002,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
        column: 39,
        span: 1002..1003,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b\\0'",
        ),
        line: 31,
        column: 45,
        span: 1004..1009,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 46,
        span: 1009..1010,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 31,
        column: 49,
        span: 1011..1013,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 31,
        column: 53,
        span: 1014..1017,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 54,
        span: 1017..1018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 32,
        column: 7,
        span: 1037..1043,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 8,
        span: 1043..1044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 32,
        column: 14,
        span: 1044..1050,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 32,
        column: 15,
        span: 1050..1051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 32,
        column: 19,
        span: 1051..1055,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 20,
        span: 1055..1056,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 32,
        column: 22,
        span: 1056..1058,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 23,
        span: 1058..1059,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0'",
        ),
        line: 32,
        column: 28,
        span: 1060..1064,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 29,
        span: 1064..1065,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 32,
        column: 32,
        span: 1066..1068,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 32,
        column: 36,
        span: 1069..1072,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 37,
        span: 1072..1073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 33,
        column: 7,
        span: 1074..1080,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 8,
        span: 1080..1081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 33,
        column: 14,
        span: 1081..1087,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 33,
        column: 15,
        span: 1087..1088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 33,
        column: 19,
        span: 1088..1092,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 20,
        span: 1092..1093,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo123alo'",
        ),
        line: 33,
        column: 31,
        span: 1093..1104,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 32,
        span: 1104..1105,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'12'",
        ),
        line: 33,
        column: 37,
        span: 1106..1110,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 38,
        span: 1110..1111,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 33,
        column: 41,
        span: 1112..1114,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 43,
        span: 1114..1116,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 44,
        span: 1116..1117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 34,
        column: 7,
        span: 1118..1124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 8,
        span: 1124..1125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 34,
        column: 14,
        span: 1125..1131,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 34,
        column: 15,
        span: 1131..1132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 34,
        column: 19,
        span: 1132..1136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 20,
        span: 1136..1137,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo123alo'",
        ),
        line: 34,
        column: 31,
        span: 1137..1148,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 34,
        column: 32,
        span: 1148..1149,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^12'",
        ),
        line: 34,
        column: 38,
        span: 1150..1155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 39,
        span: 1155..1156,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 34,
        column: 42,
        span: 1157..1159,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 34,
        column: 46,
        span: 1160..1163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 47,
        span: 1163..1164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 36,
        column: 7,
        span: 1166..1172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 8,
        span: 1172..1173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 36,
        column: 14,
        span: 1173..1179,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 36,
        column: 15,
        span: 1179..1180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 36,
        column: 20,
        span: 1180..1185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 21,
        span: 1185..1186,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaab\"",
        ),
        line: 36,
        column: 27,
        span: 1186..1192,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 28,
        span: 1192..1193,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".*b\"",
        ),
        line: 36,
        column: 34,
        span: 1194..1199,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 35,
        span: 1199..1200,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 36,
        column: 38,
        span: 1201..1203,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaab\"",
        ),
        line: 36,
        column: 45,
        span: 1204..1210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 46,
        span: 1210..1211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 37,
        column: 7,
        span: 1212..1218,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 8,
        span: 1218..1219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 37,
        column: 14,
        span: 1219..1225,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 37,
        column: 15,
        span: 1225..1226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 37,
        column: 20,
        span: 1226..1231,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 21,
        span: 1231..1232,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa\"",
        ),
        line: 37,
        column: 26,
        span: 1232..1237,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 37,
        column: 27,
        span: 1237..1238,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".*a\"",
        ),
        line: 37,
        column: 33,
        span: 1239..1244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 34,
        span: 1244..1245,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 37,
        column: 37,
        span: 1246..1248,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa\"",
        ),
        line: 37,
        column: 43,
        span: 1249..1254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 44,
        span: 1254..1255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 38,
        column: 7,
        span: 1256..1262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 8,
        span: 1262..1263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 38,
        column: 14,
        span: 1263..1269,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 15,
        span: 1269..1270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 38,
        column: 20,
        span: 1270..1275,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 21,
        span: 1275..1276,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 38,
        column: 24,
        span: 1276..1279,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 25,
        span: 1279..1280,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".*b\"",
        ),
        line: 38,
        column: 31,
        span: 1281..1286,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 32,
        span: 1286..1287,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 38,
        column: 35,
        span: 1288..1290,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 38,
        column: 39,
        span: 1291..1294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 40,
        span: 1294..1295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 40,
        column: 7,
        span: 1297..1303,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 8,
        span: 1303..1304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 40,
        column: 14,
        span: 1304..1310,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 40,
        column: 15,
        span: 1310..1311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 40,
        column: 20,
        span: 1311..1316,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 21,
        span: 1316..1317,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaab\"",
        ),
        line: 40,
        column: 27,
        span: 1317..1323,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 28,
        span: 1323..1324,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".+b\"",
        ),
        line: 40,
        column: 34,
        span: 1325..1330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 35,
        span: 1330..1331,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 40,
        column: 38,
        span: 1332..1334,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaab\"",
        ),
        line: 40,
        column: 45,
        span: 1335..1341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 46,
        span: 1341..1342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 41,
        column: 7,
        span: 1343..1349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 8,
        span: 1349..1350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 41,
        column: 14,
        span: 1350..1356,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
        column: 15,
        span: 1356..1357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 41,
        column: 20,
        span: 1357..1362,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 21,
        span: 1362..1363,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa\"",
        ),
        line: 41,
        column: 26,
        span: 1363..1368,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
        column: 27,
        span: 1368..1369,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".+a\"",
        ),
        line: 41,
        column: 33,
        span: 1370..1375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 34,
        span: 1375..1376,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 37,
        span: 1377..1379,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa\"",
        ),
        line: 41,
        column: 43,
        span: 1380..1385,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 44,
        span: 1385..1386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 42,
        column: 7,
        span: 1387..1393,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 8,
        span: 1393..1394,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 42,
        column: 11,
        span: 1394..1397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 42,
        column: 18,
        span: 1398..1404,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 42,
        column: 19,
        span: 1404..1405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 42,
        column: 24,
        span: 1405..1410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 25,
        span: 1410..1411,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 42,
        column: 28,
        span: 1411..1414,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 42,
        column: 29,
        span: 1414..1415,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".+b\"",
        ),
        line: 42,
        column: 35,
        span: 1416..1421,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 36,
        span: 1421..1422,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 37,
        span: 1422..1423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 44,
        column: 7,
        span: 1425..1431,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 8,
        span: 1431..1432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 44,
        column: 14,
        span: 1432..1438,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
        column: 15,
        span: 1438..1439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 44,
        column: 20,
        span: 1439..1444,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 21,
        span: 1444..1445,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaab\"",
        ),
        line: 44,
        column: 27,
        span: 1445..1451,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 28,
        span: 1451..1452,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".?b\"",
        ),
        line: 44,
        column: 34,
        span: 1453..1458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 35,
        span: 1458..1459,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 44,
        column: 38,
        span: 1460..1462,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab\"",
        ),
        line: 44,
        column: 43,
        span: 1463..1467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 44,
        span: 1467..1468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 45,
        column: 7,
        span: 1469..1475,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 8,
        span: 1475..1476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 45,
        column: 14,
        span: 1476..1482,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
        column: 15,
        span: 1482..1483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 45,
        column: 20,
        span: 1483..1488,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 21,
        span: 1488..1489,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa\"",
        ),
        line: 45,
        column: 26,
        span: 1489..1494,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 27,
        span: 1494..1495,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".?a\"",
        ),
        line: 45,
        column: 33,
        span: 1496..1501,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 34,
        span: 1501..1502,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 45,
        column: 37,
        span: 1503..1505,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aa\"",
        ),
        line: 45,
        column: 42,
        span: 1506..1510,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 43,
        span: 1510..1511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 46,
        column: 7,
        span: 1512..1518,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 8,
        span: 1518..1519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 46,
        column: 14,
        span: 1519..1525,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 46,
        column: 15,
        span: 1525..1526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 46,
        column: 20,
        span: 1526..1531,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 21,
        span: 1531..1532,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 46,
        column: 24,
        span: 1532..1535,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 25,
        span: 1535..1536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".?b\"",
        ),
        line: 46,
        column: 31,
        span: 1537..1542,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 32,
        span: 1542..1543,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 46,
        column: 35,
        span: 1544..1546,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 46,
        column: 39,
        span: 1547..1550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 40,
        span: 1550..1551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 48,
        column: 7,
        span: 1553..1559,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 8,
        span: 1559..1560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 48,
        column: 9,
        span: 1560..1561,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 10,
        span: 1561..1562,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aloALO'",
        ),
        line: 48,
        column: 18,
        span: 1562..1570,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 19,
        span: 1570..1571,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%l*'",
        ),
        line: 48,
        column: 25,
        span: 1572..1577,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 26,
        span: 1577..1578,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 48,
        column: 29,
        span: 1579..1581,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 48,
        column: 35,
        span: 1582..1587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 36,
        span: 1587..1588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 49,
        column: 7,
        span: 1589..1595,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 8,
        span: 1595..1596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 49,
        column: 9,
        span: 1596..1597,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 10,
        span: 1597..1598,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aLo_ALO'",
        ),
        line: 49,
        column: 19,
        span: 1598..1607,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
        column: 20,
        span: 1607..1608,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%a*'",
        ),
        line: 49,
        column: 26,
        span: 1609..1614,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 27,
        span: 1614..1615,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 49,
        column: 30,
        span: 1616..1618,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aLo'",
        ),
        line: 49,
        column: 36,
        span: 1619..1624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 37,
        span: 1624..1625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 51,
        column: 7,
        span: 1627..1633,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 8,
        span: 1633..1634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 51,
        column: 9,
        span: 1634..1635,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 10,
        span: 1635..1636,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  \\n\\r*&\\n\\r   xuxu  \\n\\n\"",
        ),
        line: 51,
        column: 37,
        span: 1636..1663,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 38,
        span: 1663..1664,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%g%g%g+\"",
        ),
        line: 51,
        column: 48,
        span: 1665..1674,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 49,
        span: 1674..1675,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 51,
        column: 52,
        span: 1676..1678,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 51,
        column: 59,
        span: 1679..1685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 60,
        span: 1685..1686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 53,
        column: 7,
        span: 1688..1694,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 8,
        span: 1694..1695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 53,
        column: 9,
        span: 1695..1696,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 10,
        span: 1696..1697,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaab'",
        ),
        line: 53,
        column: 16,
        span: 1697..1703,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 17,
        span: 1703..1704,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a*'",
        ),
        line: 53,
        column: 22,
        span: 1705..1709,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 23,
        span: 1709..1710,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 53,
        column: 26,
        span: 1711..1713,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 53,
        column: 32,
        span: 1714..1719,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 33,
        span: 1719..1720,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 53,
        column: 34,
        span: 1720..1721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 54,
        column: 7,
        span: 1722..1728,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 8,
        span: 1728..1729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 54,
        column: 9,
        span: 1729..1730,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 10,
        span: 1730..1731,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 54,
        column: 15,
        span: 1731..1736,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 16,
        span: 1736..1737,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^.*$'",
        ),
        line: 54,
        column: 23,
        span: 1738..1744,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 24,
        span: 1744..1745,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 54,
        column: 27,
        span: 1746..1748,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 54,
        column: 33,
        span: 1749..1754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 34,
        span: 1754..1755,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 54,
        column: 35,
        span: 1755..1756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 55,
        column: 7,
        span: 1757..1763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 8,
        span: 1763..1764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 55,
        column: 9,
        span: 1764..1765,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 10,
        span: 1765..1766,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 55,
        column: 15,
        span: 1766..1771,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 55,
        column: 16,
        span: 1771..1772,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b*'",
        ),
        line: 55,
        column: 21,
        span: 1773..1777,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 22,
        span: 1777..1778,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 55,
        column: 25,
        span: 1779..1781,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 55,
        column: 28,
        span: 1782..1784,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 29,
        span: 1784..1785,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 55,
        column: 30,
        span: 1785..1786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 56,
        column: 7,
        span: 1787..1793,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 8,
        span: 1793..1794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 56,
        column: 9,
        span: 1794..1795,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 10,
        span: 1795..1796,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 56,
        column: 15,
        span: 1796..1801,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 16,
        span: 1801..1802,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ab*a'",
        ),
        line: 56,
        column: 23,
        span: 1803..1809,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 24,
        span: 1809..1810,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 56,
        column: 27,
        span: 1811..1813,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aa'",
        ),
        line: 56,
        column: 32,
        span: 1814..1818,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 33,
        span: 1818..1819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 57,
        column: 7,
        span: 1820..1826,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 8,
        span: 1826..1827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 57,
        column: 9,
        span: 1827..1828,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 10,
        span: 1828..1829,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aba'",
        ),
        line: 57,
        column: 15,
        span: 1829..1834,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 57,
        column: 16,
        span: 1834..1835,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ab*a'",
        ),
        line: 57,
        column: 23,
        span: 1836..1842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 24,
        span: 1842..1843,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 57,
        column: 27,
        span: 1844..1846,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aba'",
        ),
        line: 57,
        column: 33,
        span: 1847..1852,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 34,
        span: 1852..1853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 58,
        column: 7,
        span: 1854..1860,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 8,
        span: 1860..1861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 58,
        column: 9,
        span: 1861..1862,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 10,
        span: 1862..1863,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaab'",
        ),
        line: 58,
        column: 16,
        span: 1863..1869,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 17,
        span: 1869..1870,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a+'",
        ),
        line: 58,
        column: 22,
        span: 1871..1875,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 23,
        span: 1875..1876,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 58,
        column: 26,
        span: 1877..1879,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 58,
        column: 32,
        span: 1880..1885,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 33,
        span: 1885..1886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 59,
        column: 7,
        span: 1887..1893,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 8,
        span: 1893..1894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 59,
        column: 9,
        span: 1894..1895,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 10,
        span: 1895..1896,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 59,
        column: 15,
        span: 1896..1901,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 16,
        span: 1901..1902,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^.+$'",
        ),
        line: 59,
        column: 23,
        span: 1903..1909,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 24,
        span: 1909..1910,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 59,
        column: 27,
        span: 1911..1913,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 59,
        column: 33,
        span: 1914..1919,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 34,
        span: 1919..1920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 60,
        column: 7,
        span: 1921..1927,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 8,
        span: 1927..1928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 60,
        column: 9,
        span: 1928..1929,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 10,
        span: 1929..1930,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 60,
        column: 15,
        span: 1930..1935,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 60,
        column: 16,
        span: 1935..1936,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b+'",
        ),
        line: 60,
        column: 21,
        span: 1937..1941,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 22,
        span: 1941..1942,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 60,
        column: 25,
        span: 1943..1945,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 60,
        column: 29,
        span: 1946..1949,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 30,
        span: 1949..1950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 61,
        column: 7,
        span: 1951..1957,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 8,
        span: 1957..1958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 61,
        column: 9,
        span: 1958..1959,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 10,
        span: 1959..1960,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 61,
        column: 15,
        span: 1960..1965,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 16,
        span: 1965..1966,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ab+a'",
        ),
        line: 61,
        column: 23,
        span: 1967..1973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 24,
        span: 1973..1974,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 61,
        column: 27,
        span: 1975..1977,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 61,
        column: 31,
        span: 1978..1981,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 32,
        span: 1981..1982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 62,
        column: 7,
        span: 1983..1989,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 8,
        span: 1989..1990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 62,
        column: 9,
        span: 1990..1991,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 10,
        span: 1991..1992,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aba'",
        ),
        line: 62,
        column: 15,
        span: 1992..1997,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 62,
        column: 16,
        span: 1997..1998,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ab+a'",
        ),
        line: 62,
        column: 23,
        span: 1999..2005,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 24,
        span: 2005..2006,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 62,
        column: 27,
        span: 2007..2009,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aba'",
        ),
        line: 62,
        column: 33,
        span: 2010..2015,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 34,
        span: 2015..2016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 63,
        column: 7,
        span: 2017..2023,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 8,
        span: 2023..2024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 63,
        column: 9,
        span: 2024..2025,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 10,
        span: 2025..2026,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        line: 63,
        column: 15,
        span: 2026..2031,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 16,
        span: 2031..2032,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.$'",
        ),
        line: 63,
        column: 21,
        span: 2033..2037,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 22,
        span: 2037..2038,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 63,
        column: 25,
        span: 2039..2041,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 63,
        column: 29,
        span: 2042..2045,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 30,
        span: 2045..2046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 64,
        column: 7,
        span: 2047..2053,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 8,
        span: 2053..2054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 64,
        column: 9,
        span: 2054..2055,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 10,
        span: 2055..2056,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        line: 64,
        column: 15,
        span: 2056..2061,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 16,
        span: 2061..2062,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.%$'",
        ),
        line: 64,
        column: 22,
        span: 2063..2068,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 23,
        span: 2068..2069,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 64,
        column: 26,
        span: 2070..2072,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$'",
        ),
        line: 64,
        column: 31,
        span: 2073..2077,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 32,
        span: 2077..2078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 65,
        column: 7,
        span: 2079..2085,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 8,
        span: 2085..2086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 65,
        column: 9,
        span: 2086..2087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 10,
        span: 2087..2088,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        line: 65,
        column: 15,
        span: 2088..2093,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 16,
        span: 2093..2094,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.$.'",
        ),
        line: 65,
        column: 22,
        span: 2095..2100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 23,
        span: 2100..2101,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 65,
        column: 26,
        span: 2102..2104,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        line: 65,
        column: 32,
        span: 2105..2110,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 33,
        span: 2110..2111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 66,
        column: 7,
        span: 2112..2118,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 8,
        span: 2118..2119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 66,
        column: 9,
        span: 2119..2120,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 10,
        span: 2120..2121,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        line: 66,
        column: 15,
        span: 2121..2126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 16,
        span: 2126..2127,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$$'",
        ),
        line: 66,
        column: 21,
        span: 2128..2132,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 22,
        span: 2132..2133,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 66,
        column: 25,
        span: 2134..2136,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 66,
        column: 29,
        span: 2137..2140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 30,
        span: 2140..2141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 67,
        column: 7,
        span: 2142..2148,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 8,
        span: 2148..2149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 67,
        column: 9,
        span: 2149..2150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 10,
        span: 2150..2151,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$b'",
        ),
        line: 67,
        column: 15,
        span: 2151..2156,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 16,
        span: 2156..2157,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$'",
        ),
        line: 67,
        column: 21,
        span: 2158..2162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 22,
        span: 2162..2163,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 67,
        column: 25,
        span: 2164..2166,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 67,
        column: 29,
        span: 2167..2170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 30,
        span: 2170..2171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 68,
        column: 7,
        span: 2172..2178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 8,
        span: 2178..2179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 68,
        column: 9,
        span: 2179..2180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 10,
        span: 2180..2181,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        line: 68,
        column: 15,
        span: 2181..2186,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 16,
        span: 2186..2187,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$'",
        ),
        line: 68,
        column: 20,
        span: 2188..2191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 21,
        span: 2191..2192,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 68,
        column: 24,
        span: 2193..2195,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 68,
        column: 27,
        span: 2196..2198,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 28,
        span: 2198..2199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 69,
        column: 7,
        span: 2200..2206,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 8,
        span: 2206..2207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 69,
        column: 9,
        span: 2207..2208,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 10,
        span: 2208..2209,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 69,
        column: 12,
        span: 2209..2211,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 13,
        span: 2211..2212,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b*'",
        ),
        line: 69,
        column: 18,
        span: 2213..2217,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 19,
        span: 2217..2218,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 69,
        column: 22,
        span: 2219..2221,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 69,
        column: 25,
        span: 2222..2224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 26,
        span: 2224..2225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 70,
        column: 7,
        span: 2226..2232,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 8,
        span: 2232..2233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 70,
        column: 9,
        span: 2233..2234,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 10,
        span: 2234..2235,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 70,
        column: 15,
        span: 2235..2240,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
        column: 16,
        span: 2240..2241,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'bb*'",
        ),
        line: 70,
        column: 22,
        span: 2242..2247,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 23,
        span: 2247..2248,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 70,
        column: 26,
        span: 2249..2251,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 70,
        column: 30,
        span: 2252..2255,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 31,
        span: 2255..2256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 71,
        column: 7,
        span: 2257..2263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 8,
        span: 2263..2264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 71,
        column: 9,
        span: 2264..2265,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 10,
        span: 2265..2266,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaab'",
        ),
        line: 71,
        column: 16,
        span: 2266..2272,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 17,
        span: 2272..2273,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a-'",
        ),
        line: 71,
        column: 22,
        span: 2274..2278,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 23,
        span: 2278..2279,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 26,
        span: 2280..2282,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 71,
        column: 29,
        span: 2283..2285,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 30,
        span: 2285..2286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 72,
        column: 7,
        span: 2287..2293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 8,
        span: 2293..2294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 72,
        column: 9,
        span: 2294..2295,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 10,
        span: 2295..2296,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 72,
        column: 15,
        span: 2296..2301,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 16,
        span: 2301..2302,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^.-$'",
        ),
        line: 72,
        column: 23,
        span: 2303..2309,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 24,
        span: 2309..2310,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 72,
        column: 27,
        span: 2311..2313,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 72,
        column: 33,
        span: 2314..2319,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 34,
        span: 2319..2320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 73,
        column: 7,
        span: 2321..2327,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 8,
        span: 2327..2328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 73,
        column: 9,
        span: 2328..2329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 10,
        span: 2329..2330,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aabaaabaaabaaaba'",
        ),
        line: 73,
        column: 28,
        span: 2330..2348,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 29,
        span: 2348..2349,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b.*b'",
        ),
        line: 73,
        column: 36,
        span: 2350..2356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 37,
        span: 2356..2357,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 73,
        column: 40,
        span: 2358..2360,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'baaabaaabaaab'",
        ),
        line: 73,
        column: 56,
        span: 2361..2376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 57,
        span: 2376..2377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 74,
        column: 7,
        span: 2378..2384,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 8,
        span: 2384..2385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 74,
        column: 9,
        span: 2385..2386,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 10,
        span: 2386..2387,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aabaaabaaabaaaba'",
        ),
        line: 74,
        column: 28,
        span: 2387..2405,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 29,
        span: 2405..2406,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b.-b'",
        ),
        line: 74,
        column: 36,
        span: 2407..2413,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 37,
        span: 2413..2414,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 74,
        column: 40,
        span: 2415..2417,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'baaab'",
        ),
        line: 74,
        column: 48,
        span: 2418..2425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 49,
        span: 2425..2426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 75,
        column: 7,
        span: 2427..2433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 8,
        span: 2433..2434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 75,
        column: 9,
        span: 2434..2435,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 10,
        span: 2435..2436,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo xo'",
        ),
        line: 75,
        column: 18,
        span: 2436..2444,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 75,
        column: 19,
        span: 2444..2445,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.o$'",
        ),
        line: 75,
        column: 25,
        span: 2446..2451,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 26,
        span: 2451..2452,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 75,
        column: 29,
        span: 2453..2455,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xo'",
        ),
        line: 75,
        column: 34,
        span: 2456..2460,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 35,
        span: 2460..2461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 76,
        column: 7,
        span: 2462..2468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 8,
        span: 2468..2469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 76,
        column: 9,
        span: 2469..2470,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 10,
        span: 2470..2471,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' \\n isto é assim'",
        ),
        line: 76,
        column: 28,
        span: 2471..2489,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
        column: 29,
        span: 2489..2490,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%S%S*'",
        ),
        line: 76,
        column: 37,
        span: 2491..2498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 38,
        span: 2498..2499,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 76,
        column: 41,
        span: 2500..2502,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'isto'",
        ),
        line: 76,
        column: 48,
        span: 2503..2509,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 49,
        span: 2509..2510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 77,
        column: 7,
        span: 2511..2517,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 8,
        span: 2517..2518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 77,
        column: 9,
        span: 2518..2519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 10,
        span: 2519..2520,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' \\n isto é assim'",
        ),
        line: 77,
        column: 28,
        span: 2520..2538,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
        column: 29,
        span: 2538..2539,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%S*$'",
        ),
        line: 77,
        column: 36,
        span: 2540..2546,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 37,
        span: 2546..2547,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 77,
        column: 40,
        span: 2548..2550,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'assim'",
        ),
        line: 77,
        column: 48,
        span: 2551..2558,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 49,
        span: 2558..2559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 78,
        column: 7,
        span: 2560..2566,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 8,
        span: 2566..2567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 78,
        column: 9,
        span: 2567..2568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 10,
        span: 2568..2569,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' \\n isto é assim'",
        ),
        line: 78,
        column: 28,
        span: 2569..2587,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 29,
        span: 2587..2588,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[a-z]*$'",
        ),
        line: 78,
        column: 39,
        span: 2589..2598,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 40,
        span: 2598..2599,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 78,
        column: 43,
        span: 2600..2602,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'assim'",
        ),
        line: 78,
        column: 51,
        span: 2603..2610,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 52,
        span: 2610..2611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 79,
        column: 7,
        span: 2612..2618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 8,
        span: 2618..2619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 79,
        column: 9,
        span: 2619..2620,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 10,
        span: 2620..2621,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'um caracter ? extra'",
        ),
        line: 79,
        column: 31,
        span: 2621..2642,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 79,
        column: 32,
        span: 2642..2643,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[^%sa-z]'",
        ),
        line: 79,
        column: 43,
        span: 2644..2654,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 44,
        span: 2654..2655,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 79,
        column: 47,
        span: 2656..2658,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'?'",
        ),
        line: 79,
        column: 51,
        span: 2659..2662,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 52,
        span: 2662..2663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 80,
        column: 7,
        span: 2664..2670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 8,
        span: 2670..2671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 80,
        column: 9,
        span: 2671..2672,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 10,
        span: 2672..2673,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 80,
        column: 12,
        span: 2673..2675,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 13,
        span: 2675..2676,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a?'",
        ),
        line: 80,
        column: 18,
        span: 2677..2681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 19,
        span: 2681..2682,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 80,
        column: 22,
        span: 2683..2685,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 80,
        column: 25,
        span: 2686..2688,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 26,
        span: 2688..2689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 81,
        column: 7,
        span: 2690..2696,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 8,
        span: 2696..2697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 81,
        column: 9,
        span: 2697..2698,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 10,
        span: 2698..2699,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'á'",
        ),
        line: 81,
        column: 13,
        span: 2699..2702,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 14,
        span: 2702..2703,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'á?'",
        ),
        line: 81,
        column: 19,
        span: 2704..2708,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 20,
        span: 2708..2709,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 81,
        column: 23,
        span: 2710..2712,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'á'",
        ),
        line: 81,
        column: 27,
        span: 2713..2716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 28,
        span: 2716..2717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 82,
        column: 7,
        span: 2718..2724,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 8,
        span: 2724..2725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 82,
        column: 9,
        span: 2725..2726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 10,
        span: 2726..2727,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ábl'",
        ),
        line: 82,
        column: 15,
        span: 2727..2732,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 82,
        column: 16,
        span: 2732..2733,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'á?b?l?'",
        ),
        line: 82,
        column: 25,
        span: 2734..2742,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 26,
        span: 2742..2743,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 82,
        column: 29,
        span: 2744..2746,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ábl'",
        ),
        line: 82,
        column: 35,
        span: 2747..2752,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 36,
        span: 2752..2753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 83,
        column: 7,
        span: 2754..2760,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 8,
        span: 2760..2761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 83,
        column: 9,
        span: 2761..2762,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 10,
        span: 2762..2763,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  ábl'",
        ),
        line: 83,
        column: 17,
        span: 2763..2770,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 18,
        span: 2770..2771,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'á?b?l?'",
        ),
        line: 83,
        column: 27,
        span: 2772..2780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 28,
        span: 2780..2781,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 83,
        column: 31,
        span: 2782..2784,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 83,
        column: 34,
        span: 2785..2787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 35,
        span: 2787..2788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 84,
        column: 7,
        span: 2789..2795,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 8,
        span: 2795..2796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 84,
        column: 9,
        span: 2796..2797,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 10,
        span: 2797..2798,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aa'",
        ),
        line: 84,
        column: 14,
        span: 2798..2802,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 15,
        span: 2802..2803,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^aa?a?a'",
        ),
        line: 84,
        column: 25,
        span: 2804..2813,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 26,
        span: 2813..2814,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 84,
        column: 29,
        span: 2815..2817,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aa'",
        ),
        line: 84,
        column: 34,
        span: 2818..2822,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 35,
        span: 2822..2823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 85,
        column: 7,
        span: 2824..2830,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 8,
        span: 2830..2831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 85,
        column: 9,
        span: 2831..2832,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 10,
        span: 2832..2833,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "']]]áb'",
        ),
        line: 85,
        column: 17,
        span: 2833..2840,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 18,
        span: 2840..2841,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[^]]'",
        ),
        line: 85,
        column: 25,
        span: 2842..2848,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 26,
        span: 2848..2849,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 85,
        column: 29,
        span: 2850..2852,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'á'",
        ),
        line: 85,
        column: 33,
        span: 2853..2856,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 34,
        span: 2856..2857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 86,
        column: 7,
        span: 2858..2864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 8,
        span: 2864..2865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 86,
        column: 9,
        span: 2865..2866,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 10,
        span: 2866..2867,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0alo alo\"",
        ),
        line: 86,
        column: 20,
        span: 2867..2877,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
        column: 21,
        span: 2877..2878,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%x*\"",
        ),
        line: 86,
        column: 27,
        span: 2879..2884,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 28,
        span: 2884..2885,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 86,
        column: 31,
        span: 2886..2888,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0a\"",
        ),
        line: 86,
        column: 36,
        span: 2889..2893,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 37,
        span: 2893..2894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 87,
        column: 7,
        span: 2895..2901,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 8,
        span: 2901..2902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 87,
        column: 9,
        span: 2902..2903,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 10,
        span: 2903..2904,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 87,
        column: 19,
        span: 2904..2913,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 87,
        column: 20,
        span: 2913..2914,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%C+\"",
        ),
        line: 87,
        column: 26,
        span: 2915..2920,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 27,
        span: 2920..2921,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 87,
        column: 30,
        span: 2922..2924,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 87,
        column: 40,
        span: 2925..2934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 41,
        span: 2934..2935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 88,
        column: 6,
        span: 2936..2941,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 7,
        span: 2941..2942,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 88,
        column: 10,
        span: 2942..2945,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 11,
        span: 2945..2946,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 91,
        column: 9,
        span: 2949..2957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        line: 91,
        column: 12,
        span: 2958..2960,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 13,
        span: 2960..2961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 91,
        column: 14,
        span: 2961..2962,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 15,
        span: 2962..2963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 91,
        column: 17,
        span: 2964..2965,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 18,
        span: 2965..2966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 92,
        column: 4,
        span: 2969..2970,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 92,
        column: 6,
        span: 2971..2972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 92,
        column: 13,
        span: 2973..2979,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 92,
        column: 14,
        span: 2979..2980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 92,
        column: 18,
        span: 2980..2984,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 19,
        span: 2984..2985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 92,
        column: 20,
        span: 2985..2986,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 92,
        column: 21,
        span: 2986..2987,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%%([0-9])\"",
        ),
        line: 92,
        column: 33,
        span: 2988..2999,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 92,
        column: 34,
        span: 2999..3000,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 92,
        column: 43,
        span: 3001..3009,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 45,
        span: 3010..3011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 92,
        column: 46,
        span: 3011..3012,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 47,
        span: 3012..3013,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 93,
        column: 15,
        span: 3022..3028,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        line: 93,
        column: 19,
        span: 3029..3032,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 93,
        column: 22,
        span: 3033..3035,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 24,
        span: 3036..3037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 93,
        column: 32,
        span: 3037..3045,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 33,
        span: 3045..3046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 93,
        column: 34,
        span: 3046..3047,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 35,
        span: 3047..3048,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 93,
        column: 36,
        span: 3048..3049,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 93,
        column: 37,
        span: 3048..3050,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 38,
        span: 3050..3051,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 94,
        column: 11,
        span: 3059..3062,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 12,
        span: 3062..3063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 95,
        column: 4,
        span: 3066..3067,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 95,
        column: 6,
        span: 3068..3069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 95,
        column: 13,
        span: 3070..3076,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 95,
        column: 14,
        span: 3076..3077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 95,
        column: 18,
        span: 3077..3081,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 19,
        span: 3081..3082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 95,
        column: 20,
        span: 3082..3083,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 21,
        span: 3083..3084,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^(^?)\"",
        ),
        line: 95,
        column: 29,
        span: 3085..3092,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 30,
        span: 3092..3093,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%1()\"",
        ),
        line: 95,
        column: 37,
        span: 3094..3100,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 38,
        span: 3100..3101,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
        column: 40,
        span: 3101..3103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 41,
        span: 3103..3104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 96,
        column: 4,
        span: 3107..3108,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 96,
        column: 6,
        span: 3109..3110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 96,
        column: 13,
        span: 3111..3117,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 96,
        column: 14,
        span: 3117..3118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 96,
        column: 18,
        span: 3118..3122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 19,
        span: 3122..3123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 96,
        column: 20,
        span: 3123..3124,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
        column: 21,
        span: 3124..3125,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"($?)$\"",
        ),
        line: 96,
        column: 29,
        span: 3126..3133,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
        column: 30,
        span: 3133..3134,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"()%1\"",
        ),
        line: 96,
        column: 37,
        span: 3135..3141,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
        column: 38,
        span: 3141..3142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 96,
        column: 40,
        span: 3142..3144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 41,
        span: 3144..3145,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 97,
        column: 8,
        span: 3148..3153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 97,
        column: 10,
        span: 3154..3155,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 97,
        column: 12,
        span: 3156..3157,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 97,
        column: 14,
        span: 3158..3159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 97,
        column: 20,
        span: 3159..3165,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 97,
        column: 21,
        span: 3165..3166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 97,
        column: 26,
        span: 3166..3171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 27,
        span: 3171..3172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 97,
        column: 28,
        span: 3172..3173,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 29,
        span: 3173..3174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 97,
        column: 31,
        span: 3175..3176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 32,
        span: 3176..3177,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 97,
        column: 33,
        span: 3177..3178,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 98,
        column: 9,
        span: 3181..3187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 98,
        column: 16,
        span: 3188..3194,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 98,
        column: 17,
        span: 3194..3195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 98,
        column: 20,
        span: 3195..3198,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 21,
        span: 3198..3199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 98,
        column: 22,
        span: 3199..3200,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 23,
        span: 3200..3201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 98,
        column: 25,
        span: 3202..3203,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 98,
        column: 26,
        span: 3203..3204,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 98,
        column: 27,
        span: 3203..3205,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 98,
        column: 28,
        span: 3205..3206,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 29,
        span: 3206..3207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 98,
        column: 31,
        span: 3208..3209,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 98,
        column: 32,
        span: 3209..3210,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 98,
        column: 33,
        span: 3210..3211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 98,
        column: 34,
        span: 3211..3212,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 98,
        column: 35,
        span: 3212..3213,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 98,
        column: 37,
        span: 3214..3215,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 98,
        column: 39,
        span: 3215..3217,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 40,
        span: 3217..3218,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 99,
        column: 0,
        span: 3219..3222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 101,
        column: 7,
        span: 3224..3230,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 8,
        span: 3230..3231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        line: 101,
        column: 10,
        span: 3231..3233,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 11,
        span: 3233..3234,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo alx 123 b\\0o b\\0o'",
        ),
        line: 101,
        column: 34,
        span: 3234..3257,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 35,
        span: 3257..3258,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(..*) %1'",
        ),
        line: 101,
        column: 46,
        span: 3259..3269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 47,
        span: 3269..3270,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 101,
        column: 50,
        span: 3271..3273,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\\0o b\\0o\"",
        ),
        line: 101,
        column: 62,
        span: 3274..3285,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 63,
        span: 3285..3286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 102,
        column: 7,
        span: 3287..3293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 8,
        span: 3293..3294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        line: 102,
        column: 10,
        span: 3294..3296,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 11,
        span: 3296..3297,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'axz123= 4= 4 34'",
        ),
        line: 102,
        column: 28,
        span: 3297..3314,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
        column: 29,
        span: 3314..3315,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(.+)=(.*)=%2 %1'",
        ),
        line: 102,
        column: 47,
        span: 3316..3333,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 48,
        span: 3333..3334,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 102,
        column: 51,
        span: 3335..3337,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'3= 4= 4 3'",
        ),
        line: 102,
        column: 63,
        span: 3338..3349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 64,
        span: 3349..3350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 103,
        column: 7,
        span: 3351..3357,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 8,
        span: 3357..3358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        line: 103,
        column: 10,
        span: 3358..3360,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 11,
        span: 3360..3361,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'======='",
        ),
        line: 103,
        column: 20,
        span: 3361..3370,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 103,
        column: 21,
        span: 3370..3371,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^(=*)=%1$'",
        ),
        line: 103,
        column: 33,
        span: 3372..3383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 34,
        span: 3383..3384,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 103,
        column: 37,
        span: 3385..3387,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'======='",
        ),
        line: 103,
        column: 47,
        span: 3388..3397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 48,
        span: 3397..3398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 104,
        column: 7,
        span: 3399..3405,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 8,
        span: 3405..3406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 104,
        column: 14,
        span: 3406..3412,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 104,
        column: 15,
        span: 3412..3413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 104,
        column: 20,
        span: 3413..3418,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 21,
        span: 3418..3419,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'=========='",
        ),
        line: 104,
        column: 33,
        span: 3419..3431,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 104,
        column: 34,
        span: 3431..3432,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^([=]*)=%1$'",
        ),
        line: 104,
        column: 48,
        span: 3433..3446,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 49,
        span: 3446..3447,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 104,
        column: 52,
        span: 3448..3450,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 104,
        column: 56,
        span: 3451..3454,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 57,
        span: 3454..3455,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 106,
        column: 6,
        span: 3457..3462,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 106,
        column: 15,
        span: 3463..3471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "range",
        ),
        line: 106,
        column: 21,
        span: 3472..3477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 23,
        span: 3478..3479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 106,
        column: 24,
        span: 3479..3480,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 25,
        span: 3480..3481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 106,
        column: 27,
        span: 3482..3483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 28,
        span: 3483..3484,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 107,
        column: 5,
        span: 3487..3489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 107,
        column: 7,
        span: 3490..3491,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 107,
        column: 10,
        span: 3492..3494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 107,
        column: 12,
        span: 3495..3496,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 107,
        column: 0,
        span: 3497..3501,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 108,
        column: 11,
        span: 3506..3512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 108,
        column: 13,
        span: 3513..3514,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 108,
        column: 14,
        span: 3514..3515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "range",
        ),
        line: 108,
        column: 20,
        span: 3516..3521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 21,
        span: 3521..3522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 108,
        column: 22,
        span: 3522..3523,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 108,
        column: 23,
        span: 3523..3524,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
        column: 24,
        span: 3523..3525,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 108,
        column: 25,
        span: 3525..3526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 108,
        column: 27,
        span: 3527..3528,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 28,
        span: 3528..3529,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 109,
        column: 0,
        span: 3532..3535,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 110,
        column: 0,
        span: 3536..3539,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 112,
        column: 6,
        span: 3541..3546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abc",
        ),
        line: 112,
        column: 10,
        span: 3547..3550,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 112,
        column: 12,
        span: 3551..3552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 112,
        column: 19,
        span: 3553..3559,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 112,
        column: 20,
        span: 3559..3560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 112,
        column: 24,
        span: 3560..3564,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 25,
        span: 3564..3565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "range",
        ),
        line: 112,
        column: 30,
        span: 3565..3570,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 31,
        span: 3570..3571,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 112,
        column: 32,
        span: 3570..3572,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 112,
        column: 33,
        span: 3572..3573,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 112,
        column: 37,
        span: 3573..3577,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 38,
        span: 3577..3578,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 39,
        span: 3578..3579,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 112,
        column: 40,
        span: 3579..3580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 114,
        column: 7,
        span: 3582..3588,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 8,
        span: 3588..3589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 114,
        column: 14,
        span: 3589..3595,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 114,
        column: 15,
        span: 3595..3596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 114,
        column: 18,
        span: 3596..3599,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 19,
        span: 3599..3600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abc",
        ),
        line: 114,
        column: 22,
        span: 3600..3603,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 23,
        span: 3603..3604,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 114,
        column: 26,
        span: 3605..3607,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "256",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 30,
        span: 3607..3611,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 31,
        span: 3611..3612,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 116,
        column: 9,
        span: 3614..3622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 116,
        column: 16,
        span: 3623..3629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 18,
        span: 3630..3631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 116,
        column: 19,
        span: 3631..3632,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 20,
        span: 3632..3633,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 117,
        column: 8,
        span: 3636..3641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 117,
        column: 12,
        span: 3642..3645,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 117,
        column: 14,
        span: 3646..3647,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 117,
        column: 16,
        span: 3648..3649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 117,
        column: 17,
        span: 3649..3650,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 117,
        column: 18,
        span: 3650..3651,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 117,
        column: 20,
        span: 3651..3653,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 117,
        column: 21,
        span: 3653..3654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 118,
        column: 9,
        span: 3657..3663,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 118,
        column: 10,
        span: 3663..3664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 118,
        column: 14,
        span: 3664..3668,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 15,
        span: 3668..3669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abc",
        ),
        line: 118,
        column: 18,
        span: 3669..3672,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 19,
        span: 3672..3673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 118,
        column: 21,
        span: 3674..3675,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 22,
        span: 3675..3676,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 118,
        column: 31,
        span: 3677..3685,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 33,
        span: 3686..3687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 118,
        column: 34,
        span: 3687..3688,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 35,
        span: 3688..3689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 118,
        column: 39,
        span: 3690..3693,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 118,
        column: 40,
        span: 3693..3694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 118,
        column: 41,
        span: 3694..3695,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 118,
        column: 43,
        span: 3696..3697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 118,
        column: 47,
        span: 3698..3701,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 118,
        column: 48,
        span: 3701..3702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 118,
        column: 49,
        span: 3702..3703,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 118,
        column: 52,
        span: 3704..3706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 118,
        column: 54,
        span: 3707..3708,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 118,
        column: 58,
        span: 3709..3712,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 59,
        span: 3712..3713,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 119,
        column: 9,
        span: 3716..3722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 119,
        column: 13,
        span: 3723..3726,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 119,
        column: 14,
        span: 3726..3727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 119,
        column: 0,
        span: 3727..3728,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 120,
        column: 4,
        span: 3729..3732,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 120,
        column: 5,
        span: 3732..3733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 122,
        column: 7,
        span: 3735..3741,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 8,
        span: 3741..3742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 122,
        column: 14,
        span: 3742..3748,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 122,
        column: 15,
        span: 3748..3749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 122,
        column: 18,
        span: 3749..3752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 19,
        span: 3752..3753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 122,
        column: 25,
        span: 3753..3759,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 26,
        span: 3759..3760,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[\\200-\\210]'",
        ),
        line: 122,
        column: 39,
        span: 3760..3773,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 40,
        span: 3773..3774,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 41,
        span: 3774..3775,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 122,
        column: 44,
        span: 3776..3778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 47,
        span: 3778..3781,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 48,
        span: 3781..3782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 124,
        column: 7,
        span: 3784..3790,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 8,
        span: 3790..3791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 124,
        column: 14,
        span: 3791..3797,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 15,
        span: 3797..3798,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[a-z]'",
        ),
        line: 124,
        column: 22,
        span: 3798..3805,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 23,
        span: 3805..3806,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 124,
        column: 26,
        span: 3807..3809,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcdefghijklmnopqrstuvwxyz\"",
        ),
        line: 124,
        column: 55,
        span: 3810..3838,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 56,
        span: 3838..3839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 125,
        column: 7,
        span: 3840..3846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 8,
        span: 3846..3847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 125,
        column: 14,
        span: 3847..3853,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 15,
        span: 3853..3854,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[a-z%d]'",
        ),
        line: 125,
        column: 24,
        span: 3854..3863,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 25,
        span: 3863..3864,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 125,
        column: 28,
        span: 3865..3867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 125,
        column: 35,
        span: 3868..3874,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 36,
        span: 3874..3875,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[%da-uu-z]'",
        ),
        line: 125,
        column: 48,
        span: 3875..3887,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 49,
        span: 3887..3888,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 50,
        span: 3888..3889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 126,
        column: 7,
        span: 3890..3896,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 8,
        span: 3896..3897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 126,
        column: 14,
        span: 3897..3903,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 15,
        span: 3903..3904,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[a-]'",
        ),
        line: 126,
        column: 21,
        span: 3904..3910,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 22,
        span: 3910..3911,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 126,
        column: 25,
        span: 3912..3914,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-a\"",
        ),
        line: 126,
        column: 30,
        span: 3915..3919,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 31,
        span: 3919..3920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 127,
        column: 7,
        span: 3921..3927,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 8,
        span: 3927..3928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 127,
        column: 14,
        span: 3928..3934,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 15,
        span: 3934..3935,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[^%W]'",
        ),
        line: 127,
        column: 22,
        span: 3935..3942,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 23,
        span: 3942..3943,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 127,
        column: 26,
        span: 3944..3946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 127,
        column: 33,
        span: 3947..3953,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 34,
        span: 3953..3954,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[%w]'",
        ),
        line: 127,
        column: 40,
        span: 3954..3960,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 41,
        span: 3960..3961,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 42,
        span: 3961..3962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 128,
        column: 7,
        span: 3963..3969,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 8,
        span: 3969..3970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 128,
        column: 14,
        span: 3970..3976,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 15,
        span: 3976..3977,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[]%%]'",
        ),
        line: 128,
        column: 22,
        span: 3977..3984,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 23,
        span: 3984..3985,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 128,
        column: 26,
        span: 3986..3988,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%]'",
        ),
        line: 128,
        column: 31,
        span: 3989..3993,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 32,
        span: 3993..3994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 129,
        column: 7,
        span: 3995..4001,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 8,
        span: 4001..4002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 129,
        column: 14,
        span: 4002..4008,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 15,
        span: 4008..4009,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[a%-z]'",
        ),
        line: 129,
        column: 23,
        span: 4009..4017,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 24,
        span: 4017..4018,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 129,
        column: 27,
        span: 4019..4021,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-az'",
        ),
        line: 129,
        column: 33,
        span: 4022..4027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 34,
        span: 4027..4028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 130,
        column: 7,
        span: 4029..4035,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 8,
        span: 4035..4036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 130,
        column: 14,
        span: 4036..4042,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 15,
        span: 4042..4043,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[%^%[%-a%]%-b]'",
        ),
        line: 130,
        column: 31,
        span: 4043..4059,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 32,
        span: 4059..4060,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 130,
        column: 35,
        span: 4061..4063,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-[]^ab'",
        ),
        line: 130,
        column: 44,
        span: 4064..4072,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 45,
        span: 4072..4073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 131,
        column: 7,
        span: 4074..4080,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 8,
        span: 4080..4081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 131,
        column: 14,
        span: 4081..4087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 15,
        span: 4087..4088,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%Z'",
        ),
        line: 131,
        column: 19,
        span: 4088..4092,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 20,
        span: 4092..4093,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 131,
        column: 23,
        span: 4094..4096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 131,
        column: 30,
        span: 4097..4103,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 31,
        span: 4103..4104,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[\\1-\\255]'",
        ),
        line: 131,
        column: 42,
        span: 4104..4115,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 43,
        span: 4115..4116,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 44,
        span: 4116..4117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 132,
        column: 7,
        span: 4118..4124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 8,
        span: 4124..4125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 132,
        column: 14,
        span: 4125..4131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 15,
        span: 4131..4132,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        line: 132,
        column: 18,
        span: 4132..4135,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 19,
        span: 4135..4136,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 132,
        column: 22,
        span: 4137..4139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 132,
        column: 29,
        span: 4140..4146,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 30,
        span: 4146..4147,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[\\1-\\255%z]'",
        ),
        line: 132,
        column: 43,
        span: 4147..4160,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 44,
        span: 4160..4161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 45,
        span: 4161..4162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 133,
        column: 6,
        span: 4163..4168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 7,
        span: 4168..4169,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 133,
        column: 10,
        span: 4169..4172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 11,
        span: 4172..4173,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 133,
        column: 12,
        span: 4173..4174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 135,
        column: 7,
        span: 4176..4182,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 8,
        span: 4182..4183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 135,
        column: 14,
        span: 4183..4189,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 135,
        column: 15,
        span: 4189..4190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 135,
        column: 20,
        span: 4190..4195,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 21,
        span: 4195..4196,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo xyzK\"",
        ),
        line: 135,
        column: 31,
        span: 4196..4206,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 32,
        span: 4206..4207,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%w+)K\"",
        ),
        line: 135,
        column: 41,
        span: 4208..4216,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 42,
        span: 4216..4217,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 135,
        column: 45,
        span: 4218..4220,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xyz\"",
        ),
        line: 135,
        column: 51,
        span: 4221..4226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 52,
        span: 4226..4227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 136,
        column: 7,
        span: 4228..4234,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 8,
        span: 4234..4235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 136,
        column: 14,
        span: 4235..4241,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 136,
        column: 15,
        span: 4241..4242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 136,
        column: 20,
        span: 4242..4247,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 21,
        span: 4247..4248,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"254 K\"",
        ),
        line: 136,
        column: 28,
        span: 4248..4255,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 29,
        span: 4255..4256,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%d*)K\"",
        ),
        line: 136,
        column: 38,
        span: 4257..4265,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 39,
        span: 4265..4266,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 136,
        column: 42,
        span: 4267..4269,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 136,
        column: 45,
        span: 4270..4272,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 46,
        span: 4272..4273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 137,
        column: 7,
        span: 4274..4280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 8,
        span: 4280..4281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 137,
        column: 14,
        span: 4281..4287,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 137,
        column: 15,
        span: 4287..4288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 137,
        column: 20,
        span: 4288..4293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 21,
        span: 4293..4294,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo \"",
        ),
        line: 137,
        column: 27,
        span: 4294..4300,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 28,
        span: 4300..4301,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%w*)$\"",
        ),
        line: 137,
        column: 37,
        span: 4302..4310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 38,
        span: 4310..4311,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 137,
        column: 41,
        span: 4312..4314,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 137,
        column: 44,
        span: 4315..4317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 45,
        span: 4317..4318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 138,
        column: 7,
        span: 4319..4325,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 8,
        span: 4325..4326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 138,
        column: 14,
        span: 4326..4332,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 138,
        column: 15,
        span: 4332..4333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 138,
        column: 20,
        span: 4333..4338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 21,
        span: 4338..4339,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo \"",
        ),
        line: 138,
        column: 27,
        span: 4339..4345,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 28,
        span: 4345..4346,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%w+)$\"",
        ),
        line: 138,
        column: 37,
        span: 4347..4355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 38,
        span: 4355..4356,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 138,
        column: 41,
        span: 4357..4359,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 138,
        column: 45,
        span: 4360..4363,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 46,
        span: 4363..4364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 139,
        column: 7,
        span: 4365..4371,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 8,
        span: 4371..4372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 139,
        column: 14,
        span: 4372..4378,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 139,
        column: 15,
        span: 4378..4379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 139,
        column: 19,
        span: 4379..4383,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 20,
        span: 4383..4384,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(álo)\"",
        ),
        line: 139,
        column: 27,
        span: 4384..4391,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 28,
        span: 4391..4392,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%(á\"",
        ),
        line: 139,
        column: 34,
        span: 4393..4398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 35,
        span: 4398..4399,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 139,
        column: 38,
        span: 4400..4402,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
        column: 40,
        span: 4402..4404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 41,
        span: 4404..4405,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 140,
        column: 6,
        span: 4406..4411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 140,
        column: 8,
        span: 4412..4413,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 9,
        span: 4413..4414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 140,
        column: 11,
        span: 4415..4416,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 12,
        span: 4416..4417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 140,
        column: 14,
        span: 4418..4419,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 15,
        span: 4419..4420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 140,
        column: 17,
        span: 4421..4422,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 18,
        span: 4422..4423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 140,
        column: 20,
        span: 4424..4425,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 140,
        column: 22,
        span: 4426..4427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 140,
        column: 29,
        span: 4428..4434,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 140,
        column: 30,
        span: 4434..4435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 140,
        column: 35,
        span: 4435..4440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 36,
        span: 4440..4441,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"âlo alo\"",
        ),
        line: 140,
        column: 45,
        span: 4441..4450,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 46,
        span: 4450..4451,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^(((.).).* (%w*))$\"",
        ),
        line: 140,
        column: 67,
        span: 4452..4472,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 68,
        span: 4472..4473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 141,
        column: 7,
        span: 4474..4480,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 8,
        span: 4480..4481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 141,
        column: 9,
        span: 4481..4482,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
        column: 12,
        span: 4483..4485,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'âlo alo'",
        ),
        line: 141,
        column: 22,
        span: 4486..4495,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 141,
        column: 26,
        span: 4496..4499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 141,
        column: 28,
        span: 4500..4501,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
        column: 31,
        span: 4502..4504,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'âl'",
        ),
        line: 141,
        column: 36,
        span: 4505..4509,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 141,
        column: 40,
        span: 4510..4513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 141,
        column: 42,
        span: 4514..4515,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
        column: 45,
        span: 4516..4518,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'â'",
        ),
        line: 141,
        column: 49,
        span: 4519..4522,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 141,
        column: 53,
        span: 4523..4526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 141,
        column: 55,
        span: 4527..4528,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
        column: 58,
        span: 4529..4531,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 141,
        column: 64,
        span: 4532..4537,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 141,
        column: 68,
        span: 4538..4541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 141,
        column: 70,
        span: 4542..4543,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
        column: 73,
        span: 4544..4546,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 141,
        column: 77,
        span: 4547..4550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 78,
        span: 4550..4551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 142,
        column: 2,
        span: 4552..4553,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
        column: 3,
        span: 4553..4554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 142,
        column: 5,
        span: 4555..4556,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
        column: 6,
        span: 4556..4557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 142,
        column: 8,
        span: 4558..4559,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
        column: 9,
        span: 4559..4560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 142,
        column: 11,
        span: 4561..4562,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 142,
        column: 14,
        span: 4564..4565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 142,
        column: 21,
        span: 4566..4572,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 142,
        column: 22,
        span: 4572..4573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 142,
        column: 27,
        span: 4573..4578,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 28,
        span: 4578..4579,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0123456789'",
        ),
        line: 142,
        column: 40,
        span: 4579..4591,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
        column: 41,
        span: 4591..4592,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(.+(.?)())'",
        ),
        line: 142,
        column: 54,
        span: 4593..4605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 55,
        span: 4605..4606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 143,
        column: 7,
        span: 4607..4613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 8,
        span: 4613..4614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 143,
        column: 9,
        span: 4614..4615,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 143,
        column: 12,
        span: 4616..4618,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0123456789'",
        ),
        line: 143,
        column: 25,
        span: 4619..4631,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 143,
        column: 29,
        span: 4632..4635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 143,
        column: 31,
        span: 4636..4637,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 143,
        column: 34,
        span: 4638..4640,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 143,
        column: 37,
        span: 4641..4643,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 143,
        column: 41,
        span: 4644..4647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 143,
        column: 43,
        span: 4648..4649,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 143,
        column: 46,
        span: 4650..4652,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
        column: 49,
        span: 4652..4655,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 143,
        column: 53,
        span: 4656..4659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 143,
        column: 55,
        span: 4660..4661,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 143,
        column: 58,
        span: 4662..4664,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 143,
        column: 62,
        span: 4665..4668,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 63,
        span: 4668..4669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 144,
        column: 6,
        span: 4670..4675,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 7,
        span: 4675..4676,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 144,
        column: 10,
        span: 4676..4679,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 11,
        span: 4679..4680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 146,
        column: 7,
        span: 4682..4688,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 8,
        span: 4688..4689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 146,
        column: 14,
        span: 4689..4695,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 146,
        column: 15,
        span: 4695..4696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 146,
        column: 19,
        span: 4696..4700,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 20,
        span: 4700..4701,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ülo ülo'",
        ),
        line: 146,
        column: 29,
        span: 4701..4710,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 30,
        span: 4710..4711,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ü'",
        ),
        line: 146,
        column: 34,
        span: 4712..4715,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 35,
        span: 4715..4716,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 146,
        column: 39,
        span: 4717..4720,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 40,
        span: 4720..4721,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 146,
        column: 43,
        span: 4722..4724,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xlo xlo'",
        ),
        line: 146,
        column: 53,
        span: 4725..4734,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 54,
        span: 4734..4735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 147,
        column: 7,
        span: 4736..4742,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 8,
        span: 4742..4743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 147,
        column: 14,
        span: 4743..4749,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 147,
        column: 15,
        span: 4749..4750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 147,
        column: 19,
        span: 4750..4754,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 20,
        span: 4754..4755,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo úlo  '",
        ),
        line: 147,
        column: 31,
        span: 4755..4766,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 147,
        column: 32,
        span: 4766..4767,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' +$'",
        ),
        line: 147,
        column: 38,
        span: 4768..4773,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 147,
        column: 39,
        span: 4773..4774,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 147,
        column: 42,
        span: 4775..4777,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 43,
        span: 4777..4778,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 147,
        column: 46,
        span: 4779..4781,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo úlo'",
        ),
        line: 147,
        column: 56,
        span: 4782..4791,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 57,
        span: 4791..4792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 148,
        column: 7,
        span: 4802..4808,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 8,
        span: 4808..4809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 148,
        column: 14,
        span: 4809..4815,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 148,
        column: 15,
        span: 4815..4816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 148,
        column: 19,
        span: 4816..4820,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 20,
        span: 4820..4821,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  alo alo  '",
        ),
        line: 148,
        column: 33,
        span: 4821..4834,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 34,
        span: 4834..4835,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^%s*(.-)%s*$'",
        ),
        line: 148,
        column: 49,
        span: 4836..4850,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 50,
        span: 4850..4851,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%1'",
        ),
        line: 148,
        column: 55,
        span: 4852..4856,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 56,
        span: 4856..4857,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 148,
        column: 59,
        span: 4858..4860,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo alo'",
        ),
        line: 148,
        column: 69,
        span: 4861..4870,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 70,
        span: 4870..4871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 149,
        column: 7,
        span: 4888..4894,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 8,
        span: 4894..4895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 149,
        column: 14,
        span: 4895..4901,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 149,
        column: 15,
        span: 4901..4902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 149,
        column: 19,
        span: 4902..4906,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 20,
        span: 4906..4907,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo  alo  \\n 123\\n '",
        ),
        line: 149,
        column: 41,
        span: 4907..4928,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
        column: 42,
        span: 4928..4929,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%s+'",
        ),
        line: 149,
        column: 48,
        span: 4930..4935,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
        column: 49,
        span: 4935..4936,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        line: 149,
        column: 53,
        span: 4937..4940,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 54,
        span: 4940..4941,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 149,
        column: 57,
        span: 4942..4944,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo alo 123 '",
        ),
        line: 149,
        column: 72,
        span: 4945..4959,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 73,
        span: 4959..4960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 150,
        column: 2,
        span: 4961..4962,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 150,
        column: 4,
        span: 4963..4964,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abç d\"",
        ),
        line: 150,
        column: 12,
        span: 4965..4972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 151,
        column: 2,
        span: 4973..4974,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
        column: 3,
        span: 4974..4975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 151,
        column: 5,
        span: 4976..4977,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 151,
        column: 7,
        span: 4978..4979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 151,
        column: 14,
        span: 4980..4986,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 151,
        column: 15,
        span: 4986..4987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 151,
        column: 19,
        span: 4987..4991,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 20,
        span: 4991..4992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 151,
        column: 21,
        span: 4992..4993,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
        column: 22,
        span: 4993..4994,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(.)'",
        ),
        line: 151,
        column: 28,
        span: 4995..5000,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
        column: 29,
        span: 5000..5001,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%1@'",
        ),
        line: 151,
        column: 35,
        span: 5002..5007,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 36,
        span: 5007..5008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 152,
        column: 7,
        span: 5009..5015,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 8,
        span: 5015..5016,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'@'",
        ),
        line: 152,
        column: 11,
        span: 5016..5019,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 152,
        column: 13,
        span: 5019..5021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 152,
        column: 14,
        span: 5021..5022,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 152,
        column: 17,
        span: 5023..5025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 152,
        column: 24,
        span: 5026..5032,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 152,
        column: 25,
        span: 5032..5033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 152,
        column: 29,
        span: 5033..5037,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 30,
        span: 5037..5038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 152,
        column: 31,
        span: 5038..5039,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 32,
        span: 5039..5040,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 152,
        column: 35,
        span: 5041..5043,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 36,
        span: 5043..5044,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'@'",
        ),
        line: 152,
        column: 40,
        span: 5045..5048,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 41,
        span: 5048..5049,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 152,
        column: 45,
        span: 5050..5053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 152,
        column: 47,
        span: 5054..5055,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 152,
        column: 50,
        span: 5056..5058,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 152,
        column: 52,
        span: 5058..5060,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 53,
        span: 5060..5061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 153,
        column: 2,
        span: 5062..5063,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 3,
        span: 5063..5064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 153,
        column: 5,
        span: 5065..5066,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 153,
        column: 7,
        span: 5067..5068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 153,
        column: 14,
        span: 5069..5075,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 153,
        column: 15,
        span: 5075..5076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 153,
        column: 19,
        span: 5076..5080,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 20,
        span: 5080..5081,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'abçd'",
        ),
        line: 153,
        column: 26,
        span: 5081..5087,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 27,
        span: 5087..5088,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(.)'",
        ),
        line: 153,
        column: 33,
        span: 5089..5094,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 34,
        span: 5094..5095,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%0@'",
        ),
        line: 153,
        column: 40,
        span: 5096..5101,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 41,
        span: 5101..5102,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 43,
        span: 5102..5104,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 44,
        span: 5104..5105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 154,
        column: 7,
        span: 5106..5112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 8,
        span: 5112..5113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 154,
        column: 9,
        span: 5113..5114,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 154,
        column: 12,
        span: 5115..5117,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a@b@çd'",
        ),
        line: 154,
        column: 21,
        span: 5118..5126,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 154,
        column: 25,
        span: 5127..5130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 154,
        column: 27,
        span: 5131..5132,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 154,
        column: 30,
        span: 5133..5135,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 32,
        span: 5135..5137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 33,
        span: 5137..5138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 155,
        column: 7,
        span: 5139..5145,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 8,
        span: 5145..5146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 155,
        column: 14,
        span: 5146..5152,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 155,
        column: 15,
        span: 5152..5153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 155,
        column: 19,
        span: 5153..5157,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 20,
        span: 5157..5158,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo alo'",
        ),
        line: 155,
        column: 29,
        span: 5158..5167,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 30,
        span: 5167..5168,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'()[al]'",
        ),
        line: 155,
        column: 39,
        span: 5169..5177,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 40,
        span: 5177..5178,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%1'",
        ),
        line: 155,
        column: 45,
        span: 5179..5183,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 46,
        span: 5183..5184,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 155,
        column: 49,
        span: 5185..5187,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'12o 56o'",
        ),
        line: 155,
        column: 59,
        span: 5188..5197,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 60,
        span: 5197..5198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 156,
        column: 7,
        span: 5199..5205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 8,
        span: 5205..5206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 156,
        column: 14,
        span: 5206..5212,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 156,
        column: 15,
        span: 5212..5213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 156,
        column: 19,
        span: 5213..5217,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 20,
        span: 5217..5218,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc=xyz\"",
        ),
        line: 156,
        column: 29,
        span: 5218..5227,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
        column: 30,
        span: 5227..5228,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%w*)(%p)(%w+)\"",
        ),
        line: 156,
        column: 47,
        span: 5229..5245,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
        column: 48,
        span: 5245..5246,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%3%2%1-%0\"",
        ),
        line: 156,
        column: 60,
        span: 5247..5258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 61,
        span: 5258..5259,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 156,
        column: 64,
        span: 5260..5262,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xyz=abc-abc=xyz\"",
        ),
        line: 157,
        column: 32,
        span: 5277..5294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
        column: 33,
        span: 5294..5295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 158,
        column: 7,
        span: 5296..5302,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 8,
        span: 5302..5303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 158,
        column: 14,
        span: 5303..5309,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 158,
        column: 15,
        span: 5309..5310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 158,
        column: 19,
        span: 5310..5314,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 20,
        span: 5314..5315,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        line: 158,
        column: 25,
        span: 5315..5320,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 26,
        span: 5320..5321,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w\"",
        ),
        line: 158,
        column: 31,
        span: 5322..5326,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 32,
        span: 5326..5327,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%1%0\"",
        ),
        line: 158,
        column: 39,
        span: 5328..5334,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 40,
        span: 5334..5335,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 158,
        column: 43,
        span: 5336..5338,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aabbcc\"",
        ),
        line: 158,
        column: 52,
        span: 5339..5347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 53,
        span: 5347..5348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 159,
        column: 7,
        span: 5349..5355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 8,
        span: 5355..5356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 159,
        column: 14,
        span: 5356..5362,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 159,
        column: 15,
        span: 5362..5363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 159,
        column: 19,
        span: 5363..5367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 20,
        span: 5367..5368,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        line: 159,
        column: 25,
        span: 5368..5373,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 159,
        column: 26,
        span: 5373..5374,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w+\"",
        ),
        line: 159,
        column: 32,
        span: 5375..5380,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 159,
        column: 33,
        span: 5380..5381,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%0%1\"",
        ),
        line: 159,
        column: 40,
        span: 5382..5388,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 41,
        span: 5388..5389,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 159,
        column: 44,
        span: 5390..5392,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcabc\"",
        ),
        line: 159,
        column: 53,
        span: 5393..5401,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 54,
        span: 5401..5402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 160,
        column: 7,
        span: 5403..5409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 8,
        span: 5409..5410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 160,
        column: 14,
        span: 5410..5416,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 160,
        column: 15,
        span: 5416..5417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 160,
        column: 19,
        span: 5417..5421,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 20,
        span: 5421..5422,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'áéí'",
        ),
        line: 160,
        column: 25,
        span: 5422..5427,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 160,
        column: 26,
        span: 5427..5428,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$'",
        ),
        line: 160,
        column: 30,
        span: 5429..5432,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 160,
        column: 31,
        span: 5432..5433,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0óú'",
        ),
        line: 160,
        column: 38,
        span: 5434..5440,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 39,
        span: 5440..5441,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 160,
        column: 42,
        span: 5442..5444,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'áéí\\0óú'",
        ),
        line: 160,
        column: 52,
        span: 5445..5454,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 53,
        span: 5454..5455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 161,
        column: 7,
        span: 5456..5462,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 8,
        span: 5462..5463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 161,
        column: 14,
        span: 5463..5469,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 161,
        column: 15,
        span: 5469..5470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 161,
        column: 19,
        span: 5470..5474,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 20,
        span: 5474..5475,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 161,
        column: 22,
        span: 5475..5477,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 161,
        column: 23,
        span: 5477..5478,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^'",
        ),
        line: 161,
        column: 27,
        span: 5479..5482,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 161,
        column: 28,
        span: 5482..5483,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r'",
        ),
        line: 161,
        column: 32,
        span: 5484..5487,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 33,
        span: 5487..5488,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 161,
        column: 36,
        span: 5489..5491,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r'",
        ),
        line: 161,
        column: 40,
        span: 5492..5495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 41,
        span: 5495..5496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 162,
        column: 7,
        span: 5497..5503,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 8,
        span: 5503..5504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 162,
        column: 14,
        span: 5504..5510,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 162,
        column: 15,
        span: 5510..5511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 162,
        column: 19,
        span: 5511..5515,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 20,
        span: 5515..5516,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 162,
        column: 22,
        span: 5516..5518,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 162,
        column: 23,
        span: 5518..5519,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$'",
        ),
        line: 162,
        column: 27,
        span: 5520..5523,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 162,
        column: 28,
        span: 5523..5524,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r'",
        ),
        line: 162,
        column: 32,
        span: 5525..5528,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 33,
        span: 5528..5529,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 162,
        column: 36,
        span: 5530..5532,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r'",
        ),
        line: 162,
        column: 40,
        span: 5533..5536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 41,
        span: 5536..5537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 163,
        column: 6,
        span: 5538..5543,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 7,
        span: 5543..5544,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 163,
        column: 10,
        span: 5544..5547,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 11,
        span: 5547..5548,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 166,
        column: 3,
        span: 5551..5553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 167,
        column: 9,
        span: 5601..5607,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 10,
        span: 5607..5608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 167,
        column: 16,
        span: 5608..5614,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 167,
        column: 17,
        span: 5614..5615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 167,
        column: 21,
        span: 5615..5619,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 22,
        span: 5619..5620,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a b cd\"",
        ),
        line: 167,
        column: 30,
        span: 5620..5628,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 167,
        column: 31,
        span: 5628..5629,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" *\"",
        ),
        line: 167,
        column: 36,
        span: 5630..5634,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 167,
        column: 37,
        span: 5634..5635,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-\"",
        ),
        line: 167,
        column: 41,
        span: 5636..5639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 42,
        span: 5639..5640,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 167,
        column: 45,
        span: 5641..5643,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-a-b-c-d-\"",
        ),
        line: 167,
        column: 57,
        span: 5644..5655,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 58,
        span: 5655..5656,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 169,
        column: 8,
        span: 5660..5665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 169,
        column: 12,
        span: 5666..5669,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 169,
        column: 14,
        span: 5670..5671,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 169,
        column: 17,
        span: 5672..5674,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 170,
        column: 8,
        span: 5677..5682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 170,
        column: 12,
        span: 5683..5686,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 170,
        column: 14,
        span: 5687..5688,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a  \\nbc\\t\\td\"",
        ),
        line: 170,
        column: 29,
        span: 5689..5703,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 171,
        column: 8,
        span: 5706..5711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 171,
        column: 10,
        span: 5712..5713,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 171,
        column: 12,
        span: 5714..5715,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 0,
        span: 5715..5717,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 172,
        column: 6,
        span: 5720..5723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 172,
        column: 8,
        span: 5724..5725,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 172,
        column: 9,
        span: 5725..5726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 172,
        column: 11,
        span: 5727..5728,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 172,
        column: 14,
        span: 5729..5731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 172,
        column: 21,
        span: 5732..5738,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 172,
        column: 22,
        span: 5738..5739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 172,
        column: 28,
        span: 5739..5745,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 29,
        span: 5745..5746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 172,
        column: 32,
        span: 5746..5749,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 172,
        column: 33,
        span: 5749..5750,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"()%s*()\"",
        ),
        line: 172,
        column: 43,
        span: 5751..5760,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 44,
        span: 5760..5761,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 172,
        column: 0,
        span: 5762..5764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 173,
        column: 8,
        span: 5769..5772,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 173,
        column: 10,
        span: 5773..5774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 173,
        column: 14,
        span: 5775..5778,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 173,
        column: 17,
        span: 5779..5781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 173,
        column: 24,
        span: 5782..5788,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 173,
        column: 25,
        span: 5788..5789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 173,
        column: 28,
        span: 5789..5792,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 29,
        span: 5792..5793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 173,
        column: 32,
        span: 5793..5796,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
        column: 33,
        span: 5796..5797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 173,
        column: 35,
        span: 5798..5799,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
        column: 36,
        span: 5799..5800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 173,
        column: 38,
        span: 5801..5802,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 173,
        column: 40,
        span: 5803..5804,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 42,
        span: 5804..5806,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 43,
        span: 5806..5807,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 173,
        column: 46,
        span: 5808..5810,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-\"",
        ),
        line: 173,
        column: 50,
        span: 5811..5814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 174,
        column: 6,
        span: 5819..5820,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 174,
        column: 8,
        span: 5821..5822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 174,
        column: 0,
        span: 5823..5824,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 175,
        column: 0,
        span: 5827..5830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 176,
        column: 9,
        span: 5833..5839,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 10,
        span: 5839..5840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 176,
        column: 13,
        span: 5840..5843,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 176,
        column: 16,
        span: 5844..5846,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-a-b-c-d-\"",
        ),
        line: 176,
        column: 28,
        span: 5847..5858,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 29,
        span: 5858..5859,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 177,
        column: 0,
        span: 5860..5863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 180,
        column: 7,
        span: 5866..5872,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 8,
        span: 5872..5873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 180,
        column: 14,
        span: 5873..5879,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 180,
        column: 15,
        span: 5879..5880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 180,
        column: 19,
        span: 5880..5884,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 20,
        span: 5884..5885,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"um (dois) tres (quatro)\"",
        ),
        line: 180,
        column: 45,
        span: 5885..5910,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 46,
        span: 5910..5911,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%(%w+%))\"",
        ),
        line: 180,
        column: 58,
        span: 5912..5923,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 59,
        span: 5923..5924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 180,
        column: 66,
        span: 5925..5931,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 180,
        column: 67,
        span: 5931..5932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upper",
        ),
        line: 180,
        column: 72,
        span: 5932..5937,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 73,
        span: 5937..5938,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 180,
        column: 76,
        span: 5939..5941,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"um (DOIS) tres (QUATRO)\"",
        ),
        line: 181,
        column: 38,
        span: 5954..5979,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
        column: 39,
        span: 5979..5980,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 183,
        column: 0,
        span: 5982..5984,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 184,
        column: 8,
        span: 5987..5992,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 184,
        column: 17,
        span: 5993..6001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setglobal",
        ),
        line: 184,
        column: 27,
        span: 6002..6011,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 29,
        span: 6012..6013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 184,
        column: 30,
        span: 6013..6014,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 31,
        span: 6014..6015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 184,
        column: 32,
        span: 6015..6016,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 33,
        span: 6016..6017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawset",
        ),
        line: 184,
        column: 40,
        span: 6018..6024,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 41,
        span: 6024..6025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 184,
        column: 43,
        span: 6025..6027,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 44,
        span: 6027..6028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 184,
        column: 46,
        span: 6029..6030,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 47,
        span: 6030..6031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 184,
        column: 49,
        span: 6032..6033,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 50,
        span: 6033..6034,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 184,
        column: 0,
        span: 6035..6038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 185,
        column: 9,
        span: 6041..6047,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 185,
        column: 10,
        span: 6047..6048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 185,
        column: 14,
        span: 6048..6052,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 15,
        span: 6052..6053,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=roberto,roberto=a\"",
        ),
        line: 185,
        column: 36,
        span: 6053..6074,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 37,
        span: 6074..6075,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%w+)=(%w%w*)\"",
        ),
        line: 185,
        column: 53,
        span: 6076..6091,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 54,
        span: 6091..6092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setglobal",
        ),
        line: 185,
        column: 64,
        span: 6093..6102,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 65,
        span: 6102..6103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 186,
        column: 9,
        span: 6106..6112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 10,
        span: 6112..6113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 186,
        column: 12,
        span: 6113..6115,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 13,
        span: 6115..6116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 186,
        column: 14,
        span: 6116..6117,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 186,
        column: 16,
        span: 6117..6119,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"roberto\"",
        ),
        line: 186,
        column: 25,
        span: 6119..6128,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 186,
        column: 29,
        span: 6129..6132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 186,
        column: 32,
        span: 6133..6135,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 33,
        span: 6135..6136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "roberto",
        ),
        line: 186,
        column: 40,
        span: 6136..6143,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 186,
        column: 42,
        span: 6143..6145,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 186,
        column: 45,
        span: 6145..6148,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 46,
        span: 6148..6149,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 187,
        column: 0,
        span: 6150..6153,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 189,
        column: 9,
        span: 6155..6163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 189,
        column: 11,
        span: 6164..6165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 12,
        span: 6165..6166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 189,
        column: 13,
        span: 6166..6167,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 189,
        column: 14,
        span: 6167..6168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 189,
        column: 15,
        span: 6168..6169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 16,
        span: 6169..6170,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 189,
        column: 23,
        span: 6171..6177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 189,
        column: 30,
        span: 6178..6184,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 189,
        column: 31,
        span: 6184..6185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 189,
        column: 35,
        span: 6185..6189,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 36,
        span: 6189..6190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 189,
        column: 37,
        span: 6190..6191,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 189,
        column: 38,
        span: 6191..6192,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        line: 189,
        column: 41,
        span: 6192..6195,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 189,
        column: 42,
        span: 6195..6196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 189,
        column: 43,
        span: 6196..6197,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 44,
        span: 6197..6198,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 189,
        column: 0,
        span: 6199..6202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 190,
        column: 7,
        span: 6203..6209,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 8,
        span: 6209..6210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 190,
        column: 14,
        span: 6210..6216,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 190,
        column: 15,
        span: 6216..6217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 190,
        column: 19,
        span: 6217..6221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 20,
        span: 6221..6222,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"trocar tudo em |teste|b| é |beleza|al|\"",
        ),
        line: 190,
        column: 60,
        span: 6222..6262,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 61,
        span: 6262..6263,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"|([^|]*)|([^|]*)|\"",
        ),
        line: 190,
        column: 81,
        span: 6264..6283,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 82,
        span: 6283..6284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 190,
        column: 84,
        span: 6285..6286,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 85,
        span: 6286..6287,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 190,
        column: 88,
        span: 6288..6290,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"trocar tudo em bbbbb é alalalalalal\"",
        ),
        line: 191,
        column: 50,
        span: 6303..6340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 51,
        span: 6340..6341,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 193,
        column: 6,
        span: 6343..6348,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 193,
        column: 15,
        span: 6349..6357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 193,
        column: 24,
        span: 6358..6366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 26,
        span: 6367..6368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 193,
        column: 27,
        span: 6368..6369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 28,
        span: 6369..6370,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 193,
        column: 35,
        span: 6371..6377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 193,
        column: 40,
        span: 6378..6382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 41,
        span: 6382..6383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 193,
        column: 42,
        span: 6383..6384,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
        column: 43,
        span: 6384..6385,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 193,
        column: 46,
        span: 6386..6388,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 47,
        span: 6388..6389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 48,
        span: 6389..6390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 49,
        span: 6390..6391,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 193,
        column: 52,
        span: 6392..6394,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 193,
        column: 55,
        span: 6395..6397,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 193,
        column: 0,
        span: 6398..6401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 194,
        column: 7,
        span: 6402..6408,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 8,
        span: 6408..6409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 194,
        column: 14,
        span: 6409..6415,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 194,
        column: 15,
        span: 6415..6416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 194,
        column: 19,
        span: 6416..6420,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 20,
        span: 6420..6421,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo $a='x'$ novamente $return a$\"",
        ),
        line: 194,
        column: 54,
        span: 6421..6455,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 194,
        column: 55,
        span: 6455..6456,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"$([^$]*)%$\"",
        ),
        line: 195,
        column: 32,
        span: 6476..6488,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 33,
        span: 6488..6489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 196,
        column: 28,
        span: 6509..6517,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 29,
        span: 6517..6518,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 196,
        column: 32,
        span: 6519..6521,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo  novamente x\"",
        ),
        line: 196,
        column: 51,
        span: 6522..6540,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 52,
        span: 6540..6541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 198,
        column: 2,
        span: 6543..6544,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 198,
        column: 4,
        span: 6545..6546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 198,
        column: 11,
        span: 6547..6553,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 198,
        column: 12,
        span: 6553..6554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 198,
        column: 16,
        span: 6554..6558,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 17,
        span: 6558..6559,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"$x=string.gsub('alo', '.', string.upper)$ assim vai para $return x$\"",
        ),
        line: 198,
        column: 86,
        span: 6559..6628,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 198,
        column: 87,
        span: 6628..6629,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"$([^$]*)%$\"",
        ),
        line: 199,
        column: 22,
        span: 6639..6651,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
        column: 23,
        span: 6651..6652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 199,
        column: 32,
        span: 6653..6661,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 33,
        span: 6661..6662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 200,
        column: 7,
        span: 6663..6669,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 8,
        span: 6669..6670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 200,
        column: 9,
        span: 6670..6671,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 200,
        column: 12,
        span: 6672..6674,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' assim vai para ALO'",
        ),
        line: 200,
        column: 34,
        span: 6675..6696,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 35,
        span: 6696..6697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 202,
        column: 2,
        span: 6699..6700,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 202,
        column: 4,
        span: 6701..6702,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 202,
        column: 6,
        span: 6703..6704,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 202,
        column: 7,
        span: 6704..6705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 203,
        column: 2,
        span: 6706..6707,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 203,
        column: 4,
        span: 6708..6709,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a alo jose  joao'",
        ),
        line: 203,
        column: 23,
        span: 6710..6728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 204,
        column: 2,
        span: 6729..6730,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 204,
        column: 4,
        span: 6731..6732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 204,
        column: 11,
        span: 6733..6739,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 204,
        column: 12,
        span: 6739..6740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 204,
        column: 16,
        span: 6740..6744,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 17,
        span: 6744..6745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 204,
        column: 18,
        span: 6745..6746,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 19,
        span: 6746..6747,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'()(%w+)()'",
        ),
        line: 204,
        column: 31,
        span: 6748..6759,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 32,
        span: 6759..6760,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 204,
        column: 41,
        span: 6761..6769,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 43,
        span: 6770..6771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 204,
        column: 44,
        span: 6771..6772,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 45,
        span: 6772..6773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 204,
        column: 46,
        span: 6773..6774,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 47,
        span: 6774..6775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 204,
        column: 48,
        span: 6775..6776,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 49,
        span: 6776..6777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 205,
        column: 13,
        span: 6784..6790,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 14,
        span: 6790..6791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 205,
        column: 20,
        span: 6791..6797,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 205,
        column: 21,
        span: 6797..6798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 205,
        column: 24,
        span: 6798..6801,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 25,
        span: 6801..6802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 205,
        column: 26,
        span: 6802..6803,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 27,
        span: 6803..6804,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 205,
        column: 30,
        span: 6805..6807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 205,
        column: 32,
        span: 6808..6809,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 205,
        column: 33,
        span: 6809..6810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 205,
        column: 34,
        span: 6810..6811,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 35,
        span: 6811..6812,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 205,
        column: 36,
        span: 6812..6813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 206,
        column: 8,
        span: 6820..6821,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 206,
        column: 9,
        span: 6821..6822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 206,
        column: 10,
        span: 6822..6823,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 206,
        column: 11,
        span: 6823..6824,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 206,
        column: 13,
        span: 6825..6826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 206,
        column: 15,
        span: 6827..6828,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 206,
        column: 16,
        span: 6828..6829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 206,
        column: 17,
        span: 6829..6830,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 206,
        column: 18,
        span: 6830..6831,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 207,
        column: 8,
        span: 6836..6839,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 9,
        span: 6839..6840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 208,
        column: 7,
        span: 6841..6847,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 8,
        span: 6847..6848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 208,
        column: 9,
        span: 6848..6849,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 208,
        column: 12,
        span: 6850..6852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 208,
        column: 14,
        span: 6853..6854,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 208,
        column: 18,
        span: 6855..6858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 208,
        column: 20,
        span: 6859..6860,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 208,
        column: 21,
        span: 6860..6861,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 22,
        span: 6860..6862,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 208,
        column: 23,
        span: 6862..6863,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 208,
        column: 26,
        span: 6864..6866,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 28,
        span: 6866..6868,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 208,
        column: 32,
        span: 6869..6872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 208,
        column: 34,
        span: 6873..6874,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 208,
        column: 35,
        span: 6874..6875,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 36,
        span: 6874..6876,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 208,
        column: 37,
        span: 6876..6877,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 208,
        column: 40,
        span: 6878..6880,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 42,
        span: 6880..6882,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 208,
        column: 46,
        span: 6883..6886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 208,
        column: 48,
        span: 6887..6888,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 208,
        column: 49,
        span: 6888..6889,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 50,
        span: 6888..6890,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 208,
        column: 51,
        span: 6890..6891,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 208,
        column: 54,
        span: 6892..6894,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 56,
        span: 6894..6896,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 208,
        column: 60,
        span: 6897..6900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 208,
        column: 62,
        span: 6901..6902,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 208,
        column: 63,
        span: 6902..6903,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 65,
        span: 6902..6905,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 208,
        column: 66,
        span: 6905..6906,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 208,
        column: 69,
        span: 6907..6909,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 71,
        span: 6909..6911,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 72,
        span: 6911..6912,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 211,
        column: 9,
        span: 6915..6923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isbalanced",
        ),
        line: 211,
        column: 20,
        span: 6924..6934,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 22,
        span: 6935..6936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 211,
        column: 23,
        span: 6936..6937,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 24,
        span: 6937..6938,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 212,
        column: 9,
        span: 6941..6947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 212,
        column: 16,
        span: 6948..6954,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 212,
        column: 17,
        span: 6954..6955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 212,
        column: 21,
        span: 6955..6959,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 22,
        span: 6959..6960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 212,
        column: 28,
        span: 6960..6966,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 212,
        column: 29,
        span: 6966..6967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 212,
        column: 33,
        span: 6967..6971,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 34,
        span: 6971..6972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 212,
        column: 35,
        span: 6972..6973,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 212,
        column: 36,
        span: 6973..6974,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%b()\"",
        ),
        line: 212,
        column: 43,
        span: 6975..6981,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 212,
        column: 44,
        span: 6981..6982,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 212,
        column: 47,
        span: 6983..6985,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 48,
        span: 6985..6986,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 212,
        column: 49,
        span: 6986..6987,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[()]\"",
        ),
        line: 212,
        column: 56,
        span: 6988..6994,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 57,
        span: 6994..6995,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 212,
        column: 60,
        span: 6996..6998,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 212,
        column: 0,
        span: 6999..7002,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 213,
        column: 0,
        span: 7003..7006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 215,
        column: 7,
        span: 7008..7014,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 8,
        span: 7014..7015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isbalanced",
        ),
        line: 215,
        column: 18,
        span: 7015..7025,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 19,
        span: 7025..7026,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(9 ((8))(\\0) 7) \\0\\0 a b ()(c)() a\"",
        ),
        line: 215,
        column: 55,
        span: 7026..7062,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 56,
        span: 7062..7063,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 57,
        span: 7063..7064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 216,
        column: 7,
        span: 7065..7071,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 8,
        span: 7071..7072,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 216,
        column: 11,
        span: 7072..7075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isbalanced",
        ),
        line: 216,
        column: 22,
        span: 7076..7086,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 23,
        span: 7086..7087,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(9 ((8) 7) a b (\\0 c) a\"",
        ),
        line: 216,
        column: 48,
        span: 7087..7112,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 49,
        span: 7112..7113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 50,
        span: 7113..7114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 217,
        column: 7,
        span: 7115..7121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 8,
        span: 7121..7122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 217,
        column: 14,
        span: 7122..7128,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 217,
        column: 15,
        span: 7128..7129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 217,
        column: 19,
        span: 7129..7133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 20,
        span: 7133..7134,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo 'oi' alo\"",
        ),
        line: 217,
        column: 34,
        span: 7134..7148,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 217,
        column: 35,
        span: 7148..7149,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%b''\"",
        ),
        line: 217,
        column: 42,
        span: 7150..7156,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 217,
        column: 43,
        span: 7156..7157,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        line: 217,
        column: 47,
        span: 7158..7161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 48,
        span: 7161..7162,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 217,
        column: 51,
        span: 7163..7165,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo \" alo'",
        ),
        line: 217,
        column: 63,
        span: 7166..7177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 64,
        span: 7177..7178,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 220,
        column: 6,
        span: 7181..7186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 220,
        column: 8,
        span: 7187..7188,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 220,
        column: 10,
        span: 7189..7190,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 220,
        column: 12,
        span: 7191..7192,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"apple\"",
        ),
        line: 220,
        column: 19,
        span: 7192..7199,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 220,
        column: 20,
        span: 7199..7200,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"orange\"",
        ),
        line: 220,
        column: 29,
        span: 7201..7209,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 220,
        column: 30,
        span: 7209..7210,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lime\"",
        ),
        line: 220,
        column: 37,
        span: 7211..7217,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 220,
        column: 38,
        span: 7217..7218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 220,
        column: 40,
        span: 7219..7220,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 220,
        column: 41,
        span: 7220..7221,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 220,
        column: 42,
        span: 7220..7222,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 220,
        column: 43,
        span: 7222..7223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 221,
        column: 7,
        span: 7224..7230,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 8,
        span: 7230..7231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 221,
        column: 14,
        span: 7231..7237,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 221,
        column: 15,
        span: 7237..7238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 221,
        column: 19,
        span: 7238..7242,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 20,
        span: 7242..7243,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x and x and x\"",
        ),
        line: 221,
        column: 35,
        span: 7243..7258,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 221,
        column: 36,
        span: 7258..7259,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 221,
        column: 40,
        span: 7260..7263,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 221,
        column: 41,
        span: 7263..7264,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 221,
        column: 50,
        span: 7265..7273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 52,
        span: 7274..7275,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 53,
        span: 7275..7276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 221,
        column: 55,
        span: 7277..7278,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 221,
        column: 56,
        span: 7278..7279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 221,
        column: 57,
        span: 7279..7280,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 221,
        column: 58,
        span: 7280..7281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 221,
        column: 59,
        span: 7281..7282,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 221,
        column: 60,
        span: 7282..7283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 221,
        column: 61,
        span: 7283..7284,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 221,
        column: 62,
        span: 7284..7285,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
        column: 63,
        span: 7284..7286,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 221,
        column: 64,
        span: 7286..7287,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 221,
        column: 71,
        span: 7288..7294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 221,
        column: 73,
        span: 7295..7296,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 221,
        column: 74,
        span: 7296..7297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 221,
        column: 75,
        span: 7297..7298,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 221,
        column: 76,
        span: 7298..7299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 221,
        column: 77,
        span: 7299..7300,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 221,
        column: 78,
        span: 7300..7301,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 221,
        column: 82,
        span: 7302..7305,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 83,
        span: 7305..7306,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 222,
        column: 11,
        span: 7315..7317,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"apple and orange and lime\"",
        ),
        line: 222,
        column: 39,
        span: 7318..7345,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 40,
        span: 7345..7346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 224,
        column: 2,
        span: 7348..7349,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 224,
        column: 4,
        span: 7350..7351,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 224,
        column: 6,
        span: 7352..7353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 224,
        column: 7,
        span: 7353..7354,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 224,
        column: 8,
        span: 7354..7355,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 224,
        column: 9,
        span: 7354..7356,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 224,
        column: 10,
        span: 7356..7357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 225,
        column: 7,
        span: 7358..7364,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 225,
        column: 8,
        span: 7364..7365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 225,
        column: 12,
        span: 7365..7369,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 13,
        span: 7369..7370,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first second word\"",
        ),
        line: 225,
        column: 32,
        span: 7370..7389,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 225,
        column: 33,
        span: 7389..7390,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w%w*\"",
        ),
        line: 225,
        column: 41,
        span: 7391..7398,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 225,
        column: 42,
        span: 7398..7399,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 225,
        column: 51,
        span: 7400..7408,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 53,
        span: 7409..7410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 225,
        column: 54,
        span: 7410..7411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 55,
        span: 7411..7412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 225,
        column: 57,
        span: 7413..7414,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 225,
        column: 58,
        span: 7414..7415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 225,
        column: 59,
        span: 7415..7416,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 225,
        column: 60,
        span: 7416..7417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 225,
        column: 61,
        span: 7417..7418,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 225,
        column: 62,
        span: 7418..7419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 225,
        column: 63,
        span: 7419..7420,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 225,
        column: 64,
        span: 7420..7421,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 225,
        column: 65,
        span: 7420..7422,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 225,
        column: 66,
        span: 7422..7423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 225,
        column: 68,
        span: 7424..7425,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 225,
        column: 69,
        span: 7425..7426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 225,
        column: 70,
        span: 7426..7427,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 225,
        column: 71,
        span: 7427..7428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 225,
        column: 72,
        span: 7428..7429,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 225,
        column: 73,
        span: 7429..7430,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 225,
        column: 75,
        span: 7431..7432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 225,
        column: 77,
        span: 7433..7434,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 225,
        column: 81,
        span: 7435..7438,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 82,
        span: 7438..7439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 226,
        column: 7,
        span: 7440..7446,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 8,
        span: 7446..7447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 226,
        column: 9,
        span: 7447..7448,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 226,
        column: 10,
        span: 7448..7449,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
        column: 11,
        span: 7448..7450,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 226,
        column: 12,
        span: 7450..7451,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 226,
        column: 15,
        span: 7452..7454,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first\"",
        ),
        line: 226,
        column: 23,
        span: 7455..7462,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 226,
        column: 27,
        span: 7463..7466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 226,
        column: 29,
        span: 7467..7468,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 226,
        column: 30,
        span: 7468..7469,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
        column: 31,
        span: 7468..7470,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 226,
        column: 32,
        span: 7470..7471,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 226,
        column: 35,
        span: 7472..7474,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"second\"",
        ),
        line: 226,
        column: 44,
        span: 7475..7483,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 226,
        column: 48,
        span: 7484..7487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 226,
        column: 50,
        span: 7488..7489,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 226,
        column: 51,
        span: 7489..7490,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
        column: 52,
        span: 7489..7491,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 226,
        column: 53,
        span: 7491..7492,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 226,
        column: 56,
        span: 7493..7495,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"word\"",
        ),
        line: 226,
        column: 63,
        span: 7496..7502,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 226,
        column: 67,
        span: 7503..7506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 226,
        column: 69,
        span: 7507..7508,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 226,
        column: 70,
        span: 7508..7509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 226,
        column: 71,
        span: 7509..7510,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 226,
        column: 74,
        span: 7511..7513,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
        column: 76,
        span: 7513..7515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 77,
        span: 7515..7516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 228,
        column: 2,
        span: 7518..7519,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 228,
        column: 4,
        span: 7520..7521,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 228,
        column: 6,
        span: 7522..7523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 228,
        column: 7,
        span: 7523..7524,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 228,
        column: 8,
        span: 7524..7525,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 228,
        column: 9,
        span: 7524..7526,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 228,
        column: 10,
        span: 7526..7527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 229,
        column: 7,
        span: 7528..7534,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
        column: 8,
        span: 7534..7535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 229,
        column: 14,
        span: 7535..7541,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 229,
        column: 15,
        span: 7541..7542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 229,
        column: 19,
        span: 7542..7546,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
        column: 20,
        span: 7546..7547,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first second word\"",
        ),
        line: 229,
        column: 39,
        span: 7547..7566,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 229,
        column: 40,
        span: 7566..7567,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w+\"",
        ),
        line: 229,
        column: 46,
        span: 7568..7573,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 229,
        column: 47,
        span: 7573..7574,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 230,
        column: 18,
        span: 7584..7592,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 20,
        span: 7593..7594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 230,
        column: 21,
        span: 7594..7595,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 22,
        span: 7595..7596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 230,
        column: 24,
        span: 7597..7598,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 230,
        column: 25,
        span: 7598..7599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 230,
        column: 26,
        span: 7599..7600,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 230,
        column: 27,
        span: 7600..7601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 230,
        column: 28,
        span: 7601..7602,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 230,
        column: 29,
        span: 7602..7603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 230,
        column: 30,
        span: 7603..7604,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 230,
        column: 31,
        span: 7604..7605,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 230,
        column: 32,
        span: 7604..7606,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 230,
        column: 33,
        span: 7606..7607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 230,
        column: 35,
        span: 7608..7609,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 230,
        column: 36,
        span: 7609..7610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 230,
        column: 37,
        span: 7610..7611,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 230,
        column: 38,
        span: 7611..7612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 230,
        column: 39,
        span: 7612..7613,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 230,
        column: 40,
        span: 7613..7614,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 230,
        column: 42,
        span: 7615..7616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 230,
        column: 44,
        span: 7617..7618,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 230,
        column: 48,
        span: 7619..7622,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
        column: 49,
        span: 7622..7623,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 230,
        column: 51,
        span: 7623..7625,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 52,
        span: 7625..7626,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 230,
        column: 55,
        span: 7627..7629,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first second word\"",
        ),
        line: 230,
        column: 75,
        span: 7630..7649,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 76,
        span: 7649..7650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 231,
        column: 7,
        span: 7651..7657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 8,
        span: 7657..7658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 231,
        column: 9,
        span: 7658..7659,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 231,
        column: 10,
        span: 7659..7660,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 11,
        span: 7659..7661,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 231,
        column: 12,
        span: 7661..7662,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 231,
        column: 15,
        span: 7663..7665,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first\"",
        ),
        line: 231,
        column: 23,
        span: 7666..7673,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 231,
        column: 27,
        span: 7674..7677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 231,
        column: 29,
        span: 7678..7679,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 231,
        column: 30,
        span: 7679..7680,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 31,
        span: 7679..7681,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 231,
        column: 32,
        span: 7681..7682,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 231,
        column: 35,
        span: 7683..7685,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"second\"",
        ),
        line: 231,
        column: 44,
        span: 7686..7694,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 231,
        column: 48,
        span: 7695..7698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 231,
        column: 50,
        span: 7699..7700,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 231,
        column: 51,
        span: 7700..7701,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 52,
        span: 7700..7702,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 231,
        column: 53,
        span: 7702..7703,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 231,
        column: 56,
        span: 7704..7706,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 231,
        column: 60,
        span: 7707..7710,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 61,
        span: 7710..7711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 233,
        column: 11,
        span: 7713..7723,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 233,
        column: 12,
        span: 7723..7724,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid replacement value %(a table%)\"",
        ),
        line: 233,
        column: 51,
        span: 7724..7763,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 52,
        span: 7763..7764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 234,
        column: 19,
        span: 7777..7783,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 234,
        column: 20,
        span: 7783..7784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 234,
        column: 24,
        span: 7784..7788,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 234,
        column: 25,
        span: 7788..7789,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 234,
        column: 31,
        span: 7790..7795,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 234,
        column: 32,
        span: 7795..7796,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 234,
        column: 36,
        span: 7797..7800,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 234,
        column: 37,
        span: 7800..7801,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 234,
        column: 39,
        span: 7802..7803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 234,
        column: 40,
        span: 7803..7804,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 234,
        column: 42,
        span: 7805..7806,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 234,
        column: 44,
        span: 7807..7808,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 234,
        column: 45,
        span: 7808..7809,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 234,
        column: 46,
        span: 7809..7810,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 47,
        span: 7810..7811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 235,
        column: 11,
        span: 7812..7822,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 12,
        span: 7822..7823,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid capture index %%2\"",
        ),
        line: 235,
        column: 39,
        span: 7823..7850,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 235,
        column: 40,
        span: 7850..7851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 235,
        column: 47,
        span: 7852..7858,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 235,
        column: 48,
        span: 7858..7859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 235,
        column: 52,
        span: 7859..7863,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 235,
        column: 53,
        span: 7863..7864,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 235,
        column: 59,
        span: 7865..7870,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 235,
        column: 60,
        span: 7870..7871,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 235,
        column: 64,
        span: 7872..7875,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 235,
        column: 65,
        span: 7875..7876,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%2\"",
        ),
        line: 235,
        column: 70,
        span: 7877..7881,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 71,
        span: 7881..7882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 236,
        column: 11,
        span: 7883..7893,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 12,
        span: 7893..7894,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid capture index %%0\"",
        ),
        line: 236,
        column: 39,
        span: 7894..7921,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 236,
        column: 40,
        span: 7921..7922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 236,
        column: 47,
        span: 7923..7929,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 236,
        column: 48,
        span: 7929..7930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 236,
        column: 52,
        span: 7930..7934,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 236,
        column: 53,
        span: 7934..7935,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 236,
        column: 59,
        span: 7936..7941,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 236,
        column: 60,
        span: 7941..7942,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%0)\"",
        ),
        line: 236,
        column: 67,
        span: 7943..7949,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 236,
        column: 68,
        span: 7949..7950,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 236,
        column: 72,
        span: 7951..7954,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 73,
        span: 7954..7955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 237,
        column: 11,
        span: 7956..7966,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 12,
        span: 7966..7967,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid capture index %%1\"",
        ),
        line: 237,
        column: 39,
        span: 7967..7994,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 40,
        span: 7994..7995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 237,
        column: 47,
        span: 7996..8002,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 237,
        column: 48,
        span: 8002..8003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 237,
        column: 52,
        span: 8003..8007,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 53,
        span: 8007..8008,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 237,
        column: 59,
        span: 8009..8014,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 60,
        span: 8014..8015,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%1)\"",
        ),
        line: 237,
        column: 67,
        span: 8016..8022,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 68,
        span: 8022..8023,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 237,
        column: 72,
        span: 8024..8027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 73,
        span: 8027..8028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 238,
        column: 11,
        span: 8029..8039,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 12,
        span: 8039..8040,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid use of '%%'\"",
        ),
        line: 238,
        column: 33,
        span: 8040..8061,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 238,
        column: 34,
        span: 8061..8062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 238,
        column: 41,
        span: 8063..8069,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 238,
        column: 42,
        span: 8069..8070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 238,
        column: 46,
        span: 8070..8074,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 238,
        column: 47,
        span: 8074..8075,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 238,
        column: 53,
        span: 8076..8081,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 238,
        column: 54,
        span: 8081..8082,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 238,
        column: 58,
        span: 8083..8086,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 238,
        column: 59,
        span: 8086..8087,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%x\"",
        ),
        line: 238,
        column: 64,
        span: 8088..8092,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 65,
        span: 8092..8093,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 241,
        column: 0,
        span: 8131..8133,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 242,
        column: 8,
        span: 8136..8141,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 242,
        column: 17,
        span: 8142..8150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 242,
        column: 19,
        span: 8151..8152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 21,
        span: 8153..8154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "size",
        ),
        line: 242,
        column: 25,
        span: 8154..8158,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 26,
        span: 8158..8159,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 243,
        column: 10,
        span: 8164..8169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 243,
        column: 12,
        span: 8170..8171,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 243,
        column: 14,
        span: 8172..8173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 243,
        column: 21,
        span: 8174..8180,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 243,
        column: 22,
        span: 8180..8181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 243,
        column: 25,
        span: 8181..8184,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 26,
        span: 8184..8185,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 243,
        column: 29,
        span: 8185..8188,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
        column: 30,
        span: 8188..8189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "size",
        ),
        line: 243,
        column: 35,
        span: 8190..8194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 36,
        span: 8194..8195,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 244,
        column: 10,
        span: 8200..8205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 244,
        column: 12,
        span: 8206..8207,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 244,
        column: 14,
        span: 8208..8209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 244,
        column: 21,
        span: 8210..8216,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 244,
        column: 22,
        span: 8216..8217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 244,
        column: 25,
        span: 8217..8220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
        column: 26,
        span: 8220..8221,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".?\"",
        ),
        line: 244,
        column: 30,
        span: 8221..8225,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 244,
        column: 31,
        span: 8225..8226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "size",
        ),
        line: 244,
        column: 36,
        span: 8227..8231,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 37,
        span: 8231..8232,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 245,
        column: 11,
        span: 8237..8243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 245,
        column: 17,
        span: 8244..8249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 18,
        span: 8249..8250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 245,
        column: 24,
        span: 8250..8256,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 245,
        column: 25,
        span: 8256..8257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 245,
        column: 30,
        span: 8257..8262,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 31,
        span: 8262..8263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 245,
        column: 33,
        span: 8264..8265,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 34,
        span: 8265..8266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 245,
        column: 36,
        span: 8267..8268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 37,
        span: 8268..8269,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 246,
        column: 0,
        span: 8272..8275,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 247,
        column: 8,
        span: 8278..8283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 247,
        column: 10,
        span: 8284..8285,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
        column: 11,
        span: 8285..8286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 247,
        column: 13,
        span: 8287..8288,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 247,
        column: 15,
        span: 8289..8290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 247,
        column: 17,
        span: 8291..8292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 18,
        span: 8292..8293,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "80",
                    after_decimal: "",
                },
            ),
        ),
        line: 247,
        column: 20,
        span: 8292..8295,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 21,
        span: 8295..8296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 248,
        column: 9,
        span: 8299..8305,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
        column: 10,
        span: 8305..8306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 248,
        column: 11,
        span: 8306..8307,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 248,
        column: 15,
        span: 8308..8311,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 248,
        column: 17,
        span: 8312..8313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 248,
        column: 18,
        span: 8313..8314,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 248,
        column: 21,
        span: 8315..8317,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "80",
                    after_decimal: "",
                },
            ),
        ),
        line: 248,
        column: 24,
        span: 8317..8320,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
        column: 25,
        span: 8320..8321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 249,
        column: 4,
        span: 8324..8325,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 5,
        span: 8325..8326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 249,
        column: 7,
        span: 8327..8328,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 249,
        column: 9,
        span: 8329..8330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 249,
        column: 11,
        span: 8331..8332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 12,
        span: 8332..8333,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200000",
                    after_decimal: "",
                },
            ),
        ),
        line: 249,
        column: 18,
        span: 8332..8339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 19,
        span: 8339..8340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 250,
        column: 9,
        span: 8343..8349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 10,
        span: 8349..8350,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 250,
        column: 13,
        span: 8350..8353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 250,
        column: 15,
        span: 8354..8355,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 250,
        column: 19,
        span: 8356..8359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 250,
        column: 26,
        span: 8360..8366,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 250,
        column: 27,
        span: 8366..8367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 250,
        column: 31,
        span: 8367..8371,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 32,
        span: 8371..8372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 250,
        column: 33,
        span: 8372..8373,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 250,
        column: 34,
        span: 8373..8374,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too complex\"",
        ),
        line: 250,
        column: 48,
        span: 8375..8388,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 49,
        span: 8388..8389,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 50,
        span: 8389..8390,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 251,
        column: 0,
        span: 8391..8394,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 253,
        column: 3,
        span: 8396..8398,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 253,
        column: 7,
        span: 8399..8402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 253,
        column: 13,
        span: 8403..8408,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 253,
        column: 0,
        span: 8409..8413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 254,
        column: 8,
        span: 8416..8421,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 9,
        span: 8421..8422,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"big strings\"",
        ),
        line: 254,
        column: 22,
        span: 8422..8435,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 23,
        span: 8435..8436,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 255,
        column: 8,
        span: 8439..8444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 255,
        column: 10,
        span: 8445..8446,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 255,
        column: 12,
        span: 8447..8448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 255,
        column: 19,
        span: 8449..8455,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 255,
        column: 20,
        span: 8455..8456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 255,
        column: 23,
        span: 8456..8459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 24,
        span: 8459..8460,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 255,
        column: 27,
        span: 8460..8463,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 28,
        span: 8463..8464,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300000",
                    after_decimal: "",
                },
            ),
        ),
        line: 255,
        column: 35,
        span: 8464..8471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 36,
        span: 8471..8472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 256,
        column: 9,
        span: 8475..8481,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 10,
        span: 8481..8482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 256,
        column: 16,
        span: 8482..8488,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 256,
        column: 17,
        span: 8488..8489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 256,
        column: 21,
        span: 8489..8493,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 22,
        span: 8493..8494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 256,
        column: 23,
        span: 8494..8495,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 24,
        span: 8495..8496,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^a*.?$'",
        ),
        line: 256,
        column: 33,
        span: 8497..8505,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 34,
        span: 8505..8506,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 35,
        span: 8506..8507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 257,
        column: 9,
        span: 8510..8516,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 10,
        span: 8516..8517,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 257,
        column: 13,
        span: 8517..8520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 257,
        column: 20,
        span: 8521..8527,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 257,
        column: 21,
        span: 8527..8528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 257,
        column: 25,
        span: 8528..8532,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 26,
        span: 8532..8533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 257,
        column: 27,
        span: 8533..8534,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 28,
        span: 8534..8535,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^a*.?b$'",
        ),
        line: 257,
        column: 38,
        span: 8536..8545,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 39,
        span: 8545..8546,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 40,
        span: 8546..8547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 258,
        column: 9,
        span: 8550..8556,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 10,
        span: 8556..8557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 258,
        column: 16,
        span: 8557..8563,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 258,
        column: 17,
        span: 8563..8564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 258,
        column: 21,
        span: 8564..8568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 22,
        span: 8568..8569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 258,
        column: 23,
        span: 8569..8570,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 24,
        span: 8570..8571,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^a-.?$'",
        ),
        line: 258,
        column: 33,
        span: 8572..8580,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 34,
        span: 8580..8581,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 35,
        span: 8581..8582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 261,
        column: 4,
        span: 8604..8605,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 261,
        column: 6,
        span: 8606..8607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 261,
        column: 13,
        span: 8608..8614,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 261,
        column: 14,
        span: 8614..8615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 261,
        column: 17,
        span: 8615..8618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 261,
        column: 18,
        span: 8618..8619,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 261,
        column: 21,
        span: 8619..8622,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 22,
        span: 8622..8623,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 261,
        column: 28,
        span: 8623..8629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 261,
        column: 29,
        span: 8629..8630,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 261,
        column: 32,
        span: 8631..8633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 261,
        column: 39,
        span: 8634..8640,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 261,
        column: 40,
        span: 8640..8641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 261,
        column: 43,
        span: 8641..8644,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 261,
        column: 44,
        span: 8644..8645,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 261,
        column: 47,
        span: 8645..8648,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 48,
        span: 8648..8649,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 261,
        column: 54,
        span: 8649..8655,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 261,
        column: 55,
        span: 8655..8656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 262,
        column: 9,
        span: 8659..8665,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 10,
        span: 8665..8666,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 262,
        column: 13,
        span: 8666..8669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 262,
        column: 19,
        span: 8670..8675,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 20,
        span: 8675..8676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 262,
        column: 26,
        span: 8676..8682,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 262,
        column: 27,
        span: 8682..8683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 262,
        column: 31,
        span: 8683..8687,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
        column: 32,
        span: 8687..8688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 262,
        column: 34,
        span: 8689..8690,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
        column: 35,
        span: 8690..8691,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 262,
        column: 39,
        span: 8692..8695,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 40,
        span: 8695..8696,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 41,
        span: 8696..8697,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 263,
        column: 0,
        span: 8698..8701,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 266,
        column: 9,
        span: 8730..8738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rev",
        ),
        line: 266,
        column: 13,
        span: 8739..8742,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 15,
        span: 8743..8744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 266,
        column: 16,
        span: 8744..8745,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 17,
        span: 8745..8746,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 267,
        column: 9,
        span: 8749..8755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 267,
        column: 16,
        span: 8756..8762,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 267,
        column: 17,
        span: 8762..8763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 267,
        column: 21,
        span: 8763..8767,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 22,
        span: 8767..8768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 267,
        column: 23,
        span: 8768..8769,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 267,
        column: 24,
        span: 8769..8770,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(.)(.+)\"",
        ),
        line: 267,
        column: 34,
        span: 8771..8780,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 267,
        column: 35,
        span: 8780..8781,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 267,
        column: 44,
        span: 8782..8790,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 46,
        span: 8791..8792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 267,
        column: 47,
        span: 8792..8793,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 267,
        column: 48,
        span: 8793..8794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        line: 267,
        column: 50,
        span: 8794..8796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 51,
        span: 8796..8797,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 267,
        column: 58,
        span: 8798..8804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rev",
        ),
        line: 267,
        column: 62,
        span: 8805..8808,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 63,
        span: 8808..8809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        line: 267,
        column: 65,
        span: 8809..8811,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 66,
        span: 8811..8812,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 267,
        column: 68,
        span: 8812..8814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 267,
        column: 69,
        span: 8814..8815,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 267,
        column: 73,
        span: 8816..8819,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 74,
        span: 8819..8820,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 268,
        column: 0,
        span: 8821..8824,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 270,
        column: 6,
        span: 8826..8831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 270,
        column: 8,
        span: 8832..8833,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 270,
        column: 10,
        span: 8834..8835,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcdef\"",
        ),
        line: 270,
        column: 19,
        span: 8836..8844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 271,
        column: 7,
        span: 8845..8851,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 8,
        span: 8851..8852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rev",
        ),
        line: 271,
        column: 11,
        span: 8852..8855,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 12,
        span: 8855..8856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rev",
        ),
        line: 271,
        column: 15,
        span: 8856..8859,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 16,
        span: 8859..8860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 271,
        column: 17,
        span: 8860..8861,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 18,
        span: 8861..8862,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 19,
        span: 8862..8863,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 271,
        column: 22,
        span: 8864..8866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 271,
        column: 24,
        span: 8867..8868,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 25,
        span: 8868..8869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 275,
        column: 7,
        span: 8892..8898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 8,
        span: 8898..8899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 275,
        column: 14,
        span: 8899..8905,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 275,
        column: 15,
        span: 8905..8906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 275,
        column: 19,
        span: 8906..8910,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 20,
        span: 8910..8911,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 275,
        column: 29,
        span: 8911..8920,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
        column: 30,
        span: 8920..8921,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 275,
        column: 34,
        span: 8922..8925,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
        column: 35,
        span: 8925..8926,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 275,
        column: 37,
        span: 8927..8928,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 275,
        column: 38,
        span: 8928..8929,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 39,
        span: 8929..8930,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 275,
        column: 42,
        span: 8931..8933,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 275,
        column: 52,
        span: 8934..8943,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 53,
        span: 8943..8944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 276,
        column: 7,
        span: 8945..8951,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 8,
        span: 8951..8952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 276,
        column: 14,
        span: 8952..8958,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 276,
        column: 15,
        span: 8958..8959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 276,
        column: 19,
        span: 8959..8963,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 20,
        span: 8963..8964,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 276,
        column: 29,
        span: 8964..8973,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 276,
        column: 30,
        span: 8973..8974,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(.)\"",
        ),
        line: 276,
        column: 36,
        span: 8975..8980,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 276,
        column: 37,
        span: 8980..8981,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 276,
        column: 39,
        span: 8982..8983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 276,
        column: 40,
        span: 8983..8984,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 276,
        column: 41,
        span: 8984..8985,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        line: 276,
        column: 45,
        span: 8985..8989,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 276,
        column: 46,
        span: 8989..8990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 276,
        column: 48,
        span: 8991..8992,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 276,
        column: 49,
        span: 8992..8993,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 276,
        column: 51,
        span: 8993..8995,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 276,
        column: 52,
        span: 8995..8996,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 53,
        span: 8996..8997,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 276,
        column: 56,
        span: 8998..9000,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AAo AAo\"",
        ),
        line: 276,
        column: 66,
        span: 9001..9010,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 67,
        span: 9010..9011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 277,
        column: 7,
        span: 9012..9018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 8,
        span: 9018..9019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 277,
        column: 14,
        span: 9019..9025,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 277,
        column: 15,
        span: 9025..9026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 277,
        column: 19,
        span: 9026..9030,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 20,
        span: 9030..9031,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 277,
        column: 29,
        span: 9031..9040,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 30,
        span: 9040..9041,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(.).\"",
        ),
        line: 277,
        column: 37,
        span: 9042..9048,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 38,
        span: 9048..9049,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 277,
        column: 40,
        span: 9050..9051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 277,
        column: 41,
        span: 9051..9052,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 277,
        column: 42,
        span: 9052..9053,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        line: 277,
        column: 46,
        span: 9053..9057,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 47,
        span: 9057..9058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 277,
        column: 49,
        span: 9059..9060,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 277,
        column: 50,
        span: 9060..9061,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"K\"",
        ),
        line: 277,
        column: 53,
        span: 9061..9064,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 277,
        column: 54,
        span: 9064..9065,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 55,
        span: 9065..9066,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 277,
        column: 58,
        span: 9067..9069,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AAo AAo\"",
        ),
        line: 277,
        column: 68,
        span: 9070..9079,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 69,
        span: 9079..9080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 278,
        column: 7,
        span: 9081..9087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 8,
        span: 9087..9088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 278,
        column: 14,
        span: 9088..9094,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 278,
        column: 15,
        span: 9094..9095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 278,
        column: 19,
        span: 9095..9099,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 20,
        span: 9099..9100,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 278,
        column: 29,
        span: 9100..9109,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 278,
        column: 30,
        span: 9109..9110,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"((.)(.?))\"",
        ),
        line: 278,
        column: 42,
        span: 9111..9122,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 278,
        column: 43,
        span: 9122..9123,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 278,
        column: 45,
        span: 9124..9125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "al",
        ),
        line: 278,
        column: 47,
        span: 9125..9127,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 278,
        column: 48,
        span: 9127..9128,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        line: 278,
        column: 52,
        span: 9128..9132,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 278,
        column: 53,
        span: 9132..9133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 278,
        column: 55,
        span: 9134..9135,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 278,
        column: 56,
        span: 9135..9136,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 278,
        column: 61,
        span: 9136..9141,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 278,
        column: 62,
        span: 9141..9142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 63,
        span: 9142..9143,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 278,
        column: 66,
        span: 9144..9146,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AAo AAo\"",
        ),
        line: 278,
        column: 76,
        span: 9147..9156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 77,
        span: 9156..9157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 280,
        column: 7,
        span: 9159..9165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 8,
        span: 9165..9166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 280,
        column: 14,
        span: 9166..9172,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 280,
        column: 15,
        span: 9172..9173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 280,
        column: 19,
        span: 9173..9177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 20,
        span: 9177..9178,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 280,
        column: 29,
        span: 9178..9187,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 280,
        column: 30,
        span: 9187..9188,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"().\"",
        ),
        line: 280,
        column: 36,
        span: 9189..9194,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 280,
        column: 37,
        span: 9194..9195,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 280,
        column: 39,
        span: 9196..9197,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 280,
        column: 42,
        span: 9197..9200,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 280,
        column: 43,
        span: 9200..9201,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'yy'",
        ),
        line: 280,
        column: 47,
        span: 9201..9205,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 280,
        column: 48,
        span: 9205..9206,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'zzz'",
        ),
        line: 280,
        column: 53,
        span: 9206..9211,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 280,
        column: 54,
        span: 9211..9212,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
        column: 55,
        span: 9212..9213,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 280,
        column: 58,
        span: 9214..9216,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xyyzzz alo\"",
        ),
        line: 280,
        column: 71,
        span: 9217..9229,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
        column: 72,
        span: 9229..9230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 282,
        column: 2,
        span: 9232..9233,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 282,
        column: 4,
        span: 9234..9235,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 282,
        column: 6,
        span: 9236..9237,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 282,
        column: 7,
        span: 9237..9238,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 282,
        column: 8,
        span: 9238..9239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 282,
        column: 21,
        span: 9240..9252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 22,
        span: 9252..9253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 282,
        column: 23,
        span: 9253..9254,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 282,
        column: 24,
        span: 9254..9255,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 282,
        column: 26,
        span: 9256..9257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 282,
        column: 33,
        span: 9257..9264,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 282,
        column: 35,
        span: 9265..9266,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 282,
        column: 44,
        span: 9267..9275,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 46,
        span: 9276..9277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 282,
        column: 47,
        span: 9277..9278,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 282,
        column: 48,
        span: 9278..9279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 282,
        column: 49,
        span: 9279..9280,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 50,
        span: 9280..9281,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 282,
        column: 57,
        span: 9282..9288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 282,
        column: 64,
        span: 9289..9295,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 282,
        column: 65,
        span: 9295..9296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upper",
        ),
        line: 282,
        column: 70,
        span: 9296..9301,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 71,
        span: 9301..9302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 282,
        column: 72,
        span: 9302..9303,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 73,
        span: 9303..9304,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 282,
        column: 77,
        span: 9305..9308,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 282,
        column: 78,
        span: 9308..9309,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 79,
        span: 9309..9310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 283,
        column: 7,
        span: 9311..9317,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
        column: 8,
        span: 9317..9318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 283,
        column: 14,
        span: 9318..9324,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 283,
        column: 15,
        span: 9324..9325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 283,
        column: 19,
        span: 9325..9329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
        column: 20,
        span: 9329..9330,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a alo b hi\"",
        ),
        line: 283,
        column: 32,
        span: 9330..9342,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 283,
        column: 33,
        span: 9342..9343,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w%w+\"",
        ),
        line: 283,
        column: 41,
        span: 9344..9351,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 283,
        column: 42,
        span: 9351..9352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 283,
        column: 44,
        span: 9353..9354,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
        column: 45,
        span: 9354..9355,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 283,
        column: 48,
        span: 9356..9358,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a ALO b HI\"",
        ),
        line: 283,
        column: 61,
        span: 9359..9371,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
        column: 62,
        span: 9371..9372,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 287,
        column: 6,
        span: 9395..9400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 287,
        column: 8,
        span: 9401..9402,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 287,
        column: 10,
        span: 9403..9404,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 287,
        column: 0,
        span: 9404..9406,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 288,
        column: 4,
        span: 9407..9410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 288,
        column: 6,
        span: 9411..9412,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 288,
        column: 9,
        span: 9413..9415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 288,
        column: 16,
        span: 9416..9422,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 288,
        column: 17,
        span: 9422..9423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 288,
        column: 23,
        span: 9423..9429,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
        column: 24,
        span: 9429..9430,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'abcde'",
        ),
        line: 288,
        column: 31,
        span: 9430..9437,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 288,
        column: 32,
        span: 9437..9438,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'()'",
        ),
        line: 288,
        column: 37,
        span: 9439..9443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
        column: 38,
        span: 9443..9444,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 288,
        column: 41,
        span: 9445..9447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 288,
        column: 48,
        span: 9448..9454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
        column: 49,
        span: 9454..9455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 288,
        column: 50,
        span: 9455..9456,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 288,
        column: 53,
        span: 9457..9459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 288,
        column: 55,
        span: 9460..9461,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 288,
        column: 56,
        span: 9461..9462,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 288,
        column: 57,
        span: 9461..9463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
        column: 58,
        span: 9463..9464,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 288,
        column: 59,
        span: 9464..9465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 288,
        column: 61,
        span: 9466..9467,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 288,
        column: 62,
        span: 9467..9468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 288,
        column: 63,
        span: 9468..9469,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 288,
        column: 0,
        span: 9470..9473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 289,
        column: 7,
        span: 9474..9480,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 8,
        span: 9480..9481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 289,
        column: 9,
        span: 9481..9482,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 289,
        column: 11,
        span: 9482..9484,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 289,
        column: 12,
        span: 9483..9485,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 13,
        span: 9485..9486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 291,
        column: 2,
        span: 9488..9489,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 291,
        column: 4,
        span: 9490..9491,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 291,
        column: 6,
        span: 9492..9493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 291,
        column: 7,
        span: 9493..9494,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 291,
        column: 8,
        span: 9494..9495,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 291,
        column: 9,
        span: 9494..9496,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 291,
        column: 10,
        span: 9496..9497,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 292,
        column: 4,
        span: 9498..9501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 292,
        column: 6,
        span: 9502..9503,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 292,
        column: 9,
        span: 9504..9506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 292,
        column: 16,
        span: 9507..9513,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 292,
        column: 17,
        span: 9513..9514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 292,
        column: 23,
        span: 9514..9520,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
        column: 24,
        span: 9520..9521,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first second word\"",
        ),
        line: 292,
        column: 43,
        span: 9521..9540,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 292,
        column: 44,
        span: 9540..9541,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w+\"",
        ),
        line: 292,
        column: 50,
        span: 9542..9547,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
        column: 51,
        span: 9547..9548,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 292,
        column: 0,
        span: 9549..9551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 293,
        column: 8,
        span: 9558..9559,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 293,
        column: 9,
        span: 9559..9560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 293,
        column: 10,
        span: 9560..9561,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 293,
        column: 11,
        span: 9561..9562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 293,
        column: 12,
        span: 9562..9563,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 293,
        column: 13,
        span: 9563..9564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 293,
        column: 14,
        span: 9564..9565,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 293,
        column: 15,
        span: 9565..9566,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
        column: 16,
        span: 9565..9567,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 293,
        column: 17,
        span: 9567..9568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 293,
        column: 19,
        span: 9569..9570,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 293,
        column: 20,
        span: 9570..9571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 293,
        column: 21,
        span: 9571..9572,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 293,
        column: 22,
        span: 9572..9573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 293,
        column: 23,
        span: 9573..9574,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 293,
        column: 24,
        span: 9574..9575,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 293,
        column: 26,
        span: 9576..9577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 293,
        column: 0,
        span: 9578..9579,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 294,
        column: 0,
        span: 9580..9583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 295,
        column: 7,
        span: 9584..9590,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
        column: 8,
        span: 9590..9591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 295,
        column: 9,
        span: 9591..9592,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 295,
        column: 10,
        span: 9592..9593,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 295,
        column: 11,
        span: 9592..9594,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 295,
        column: 12,
        span: 9594..9595,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 295,
        column: 15,
        span: 9596..9598,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first\"",
        ),
        line: 295,
        column: 23,
        span: 9599..9606,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 295,
        column: 27,
        span: 9607..9610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 295,
        column: 29,
        span: 9611..9612,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 295,
        column: 30,
        span: 9612..9613,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 295,
        column: 31,
        span: 9612..9614,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 295,
        column: 32,
        span: 9614..9615,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 295,
        column: 35,
        span: 9616..9618,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"second\"",
        ),
        line: 295,
        column: 44,
        span: 9619..9627,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 295,
        column: 48,
        span: 9628..9631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 295,
        column: 50,
        span: 9632..9633,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 295,
        column: 51,
        span: 9633..9634,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 295,
        column: 52,
        span: 9633..9635,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 295,
        column: 53,
        span: 9635..9636,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 295,
        column: 56,
        span: 9637..9639,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"word\"",
        ),
        line: 295,
        column: 63,
        span: 9640..9646,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
        column: 64,
        span: 9646..9647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 297,
        column: 2,
        span: 9649..9650,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 297,
        column: 4,
        span: 9651..9652,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 297,
        column: 6,
        span: 9653..9654,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 297,
        column: 7,
        span: 9653..9655,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 297,
        column: 8,
        span: 9655..9656,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 297,
        column: 10,
        span: 9656..9658,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 297,
        column: 11,
        span: 9658..9659,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 297,
        column: 13,
        span: 9659..9661,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 297,
        column: 14,
        span: 9661..9662,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 298,
        column: 4,
        span: 9663..9666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 298,
        column: 6,
        span: 9667..9668,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 298,
        column: 9,
        span: 9669..9671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 298,
        column: 16,
        span: 9672..9678,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 298,
        column: 17,
        span: 9678..9679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 298,
        column: 23,
        span: 9679..9685,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 25,
        span: 9686..9687,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxx uu ppar r\"",
        ),
        line: 298,
        column: 41,
        span: 9687..9703,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 298,
        column: 42,
        span: 9703..9704,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"()(.)%2\"",
        ),
        line: 298,
        column: 52,
        span: 9705..9714,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 53,
        span: 9714..9715,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 298,
        column: 0,
        span: 9716..9718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 299,
        column: 9,
        span: 9721..9727,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 10,
        span: 9727..9728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 299,
        column: 11,
        span: 9728..9729,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 299,
        column: 14,
        span: 9730..9732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 299,
        column: 20,
        span: 9733..9738,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 299,
        column: 21,
        span: 9738..9739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 299,
        column: 27,
        span: 9739..9745,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 28,
        span: 9745..9746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 299,
        column: 29,
        span: 9746..9747,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 299,
        column: 30,
        span: 9747..9748,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 299,
        column: 32,
        span: 9748..9750,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 33,
        span: 9750..9751,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 34,
        span: 9751..9752,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 300,
        column: 0,
        span: 9753..9756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 301,
        column: 7,
        span: 9757..9763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 8,
        span: 9763..9764,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 301,
        column: 9,
        span: 9764..9765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 301,
        column: 10,
        span: 9765..9766,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 301,
        column: 13,
        span: 9767..9769,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 301,
        column: 15,
        span: 9769..9771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 16,
        span: 9771..9772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 303,
        column: 2,
        span: 9774..9775,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 303,
        column: 4,
        span: 9776..9777,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 303,
        column: 6,
        span: 9778..9779,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 303,
        column: 7,
        span: 9779..9780,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 304,
        column: 4,
        span: 9781..9784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 304,
        column: 6,
        span: 9785..9786,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 304,
        column: 7,
        span: 9786..9787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 304,
        column: 8,
        span: 9787..9788,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 304,
        column: 11,
        span: 9789..9791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 304,
        column: 18,
        span: 9792..9798,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 304,
        column: 19,
        span: 9798..9799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 304,
        column: 25,
        span: 9799..9805,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 26,
        span: 9805..9806,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"13 14 10 = 11, 15= 16, 22=23\"",
        ),
        line: 304,
        column: 56,
        span: 9806..9836,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 304,
        column: 57,
        span: 9836..9837,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%d+)%s*=%s*(%d+)\"",
        ),
        line: 304,
        column: 77,
        span: 9838..9857,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
        column: 78,
        span: 9857..9858,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 304,
        column: 0,
        span: 9859..9861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 305,
        column: 4,
        span: 9864..9865,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 305,
        column: 5,
        span: 9865..9866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 305,
        column: 13,
        span: 9866..9874,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 305,
        column: 14,
        span: 9874..9875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 305,
        column: 15,
        span: 9875..9876,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 305,
        column: 16,
        span: 9876..9877,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 305,
        column: 17,
        span: 9877..9878,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 305,
        column: 19,
        span: 9879..9880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 305,
        column: 28,
        span: 9881..9889,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 305,
        column: 29,
        span: 9889..9890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 305,
        column: 30,
        span: 9890..9891,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 305,
        column: 31,
        span: 9891..9892,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 306,
        column: 0,
        span: 9893..9896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 307,
        column: 2,
        span: 9897..9898,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 307,
        column: 4,
        span: 9899..9900,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 307,
        column: 0,
        span: 9900..9902,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 308,
        column: 4,
        span: 9903..9906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 308,
        column: 6,
        span: 9907..9908,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 308,
        column: 7,
        span: 9908..9909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 308,
        column: 8,
        span: 9909..9910,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 308,
        column: 11,
        span: 9911..9913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 308,
        column: 17,
        span: 9914..9919,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 18,
        span: 9919..9920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 308,
        column: 19,
        span: 9920..9921,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 20,
        span: 9921..9922,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 308,
        column: 23,
        span: 9923..9925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 308,
        column: 30,
        span: 9926..9932,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 31,
        span: 9932..9933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 308,
        column: 32,
        span: 9933..9934,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 308,
        column: 33,
        span: 9934..9935,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 308,
        column: 34,
        span: 9934..9936,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 308,
        column: 37,
        span: 9937..9939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 308,
        column: 39,
        span: 9940..9941,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 308,
        column: 40,
        span: 9941..9942,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 308,
        column: 41,
        span: 9941..9943,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 42,
        span: 9943..9944,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 308,
        column: 43,
        span: 9944..9945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 308,
        column: 45,
        span: 9946..9947,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 308,
        column: 46,
        span: 9947..9948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 308,
        column: 47,
        span: 9948..9949,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 308,
        column: 48,
        span: 9949..9950,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 308,
        column: 49,
        span: 9949..9951,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 308,
        column: 0,
        span: 9952..9955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 309,
        column: 7,
        span: 9956..9962,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 8,
        span: 9962..9963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 309,
        column: 9,
        span: 9963..9964,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 309,
        column: 12,
        span: 9965..9967,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
        column: 14,
        span: 9967..9969,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 15,
        span: 9969..9970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 314,
        column: 7,
        span: 10006..10012,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
        column: 8,
        span: 10012..10013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 314,
        column: 14,
        span: 10013..10019,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 314,
        column: 15,
        span: 10019..10020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 314,
        column: 19,
        span: 10020..10024,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
        column: 20,
        span: 10024..10025,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa aa a aaa a\"",
        ),
        line: 314,
        column: 36,
        span: 10025..10041,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 314,
        column: 37,
        span: 10041..10042,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%w]a\"",
        ),
        line: 314,
        column: 47,
        span: 10043..10052,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 314,
        column: 48,
        span: 10052..10053,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 314,
        column: 52,
        span: 10054..10057,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 314,
        column: 53,
        span: 10057..10058,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 314,
        column: 56,
        span: 10059..10061,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xaa xa x xaa x\"",
        ),
        line: 314,
        column: 73,
        span: 10062..10078,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 314,
        column: 74,
        span: 10078..10079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 315,
        column: 7,
        span: 10080..10086,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 315,
        column: 8,
        span: 10086..10087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 315,
        column: 14,
        span: 10087..10093,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 315,
        column: 15,
        span: 10093..10094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 315,
        column: 19,
        span: 10094..10098,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 315,
        column: 20,
        span: 10098..10099,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[]] [][] [[[[\"",
        ),
        line: 315,
        column: 36,
        span: 10099..10115,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 315,
        column: 37,
        span: 10115..10116,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[[].\"",
        ),
        line: 315,
        column: 46,
        span: 10117..10125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 315,
        column: 47,
        span: 10125..10126,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 315,
        column: 51,
        span: 10127..10130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 315,
        column: 52,
        span: 10130..10131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 315,
        column: 55,
        span: 10132..10134,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x[]] x]x] x[[[\"",
        ),
        line: 315,
        column: 72,
        span: 10135..10151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 315,
        column: 73,
        span: 10151..10152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 316,
        column: 7,
        span: 10153..10159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 8,
        span: 10159..10160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 316,
        column: 14,
        span: 10160..10166,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 316,
        column: 15,
        span: 10166..10167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 316,
        column: 19,
        span: 10167..10171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 20,
        span: 10171..10172,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"01abc45de3\"",
        ),
        line: 316,
        column: 32,
        span: 10172..10184,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 316,
        column: 33,
        span: 10184..10185,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%d]\"",
        ),
        line: 316,
        column: 42,
        span: 10186..10194,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 316,
        column: 43,
        span: 10194..10195,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 316,
        column: 47,
        span: 10196..10199,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 48,
        span: 10199..10200,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 316,
        column: 51,
        span: 10201..10203,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".01abc.45de.3\"",
        ),
        line: 316,
        column: 67,
        span: 10204..10219,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 68,
        span: 10219..10220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 317,
        column: 7,
        span: 10221..10227,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 8,
        span: 10227..10228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 317,
        column: 14,
        span: 10228..10234,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 317,
        column: 15,
        span: 10234..10235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 317,
        column: 19,
        span: 10235..10239,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 20,
        span: 10239..10240,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"01abc45 de3x\"",
        ),
        line: 317,
        column: 34,
        span: 10240..10254,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 35,
        span: 10254..10255,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%D]%w\"",
        ),
        line: 317,
        column: 46,
        span: 10256..10266,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 47,
        span: 10266..10267,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 317,
        column: 51,
        span: 10268..10271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 52,
        span: 10271..10272,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 317,
        column: 55,
        span: 10273..10275,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"01.bc45 de3.\"",
        ),
        line: 317,
        column: 70,
        span: 10276..10290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 71,
        span: 10290..10291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 318,
        column: 7,
        span: 10292..10298,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
        column: 8,
        span: 10298..10299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 318,
        column: 14,
        span: 10299..10305,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 318,
        column: 15,
        span: 10305..10306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 318,
        column: 19,
        span: 10306..10310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
        column: 20,
        span: 10310..10311,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        line: 318,
        column: 30,
        span: 10311..10321,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 318,
        column: 31,
        span: 10321..10322,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[\\1-\\255]%w\"",
        ),
        line: 318,
        column: 47,
        span: 10323..10338,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 318,
        column: 48,
        span: 10338..10339,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 318,
        column: 52,
        span: 10340..10343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
        column: 53,
        span: 10343..10344,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 318,
        column: 56,
        span: 10345..10347,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".unction\"",
        ),
        line: 318,
        column: 67,
        span: 10348..10358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
        column: 68,
        span: 10358..10359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 319,
        column: 7,
        span: 10360..10366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 8,
        span: 10366..10367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 319,
        column: 14,
        span: 10367..10373,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 319,
        column: 15,
        span: 10373..10374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 319,
        column: 19,
        span: 10374..10378,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 20,
        span: 10378..10379,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        line: 319,
        column: 30,
        span: 10379..10389,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 319,
        column: 31,
        span: 10389..10390,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[^\\1-\\255]\"",
        ),
        line: 319,
        column: 46,
        span: 10391..10405,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 319,
        column: 47,
        span: 10405..10406,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 319,
        column: 51,
        span: 10407..10410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 52,
        span: 10410..10411,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 319,
        column: 55,
        span: 10412..10414,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function.\"",
        ),
        line: 319,
        column: 67,
        span: 10415..10426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 68,
        span: 10426..10427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 321,
        column: 7,
        span: 10429..10435,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 8,
        span: 10435..10436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 321,
        column: 14,
        span: 10436..10442,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 321,
        column: 15,
        span: 10442..10443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 321,
        column: 19,
        span: 10443..10447,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 20,
        span: 10447..10448,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 321,
        column: 23,
        span: 10448..10451,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 321,
        column: 24,
        span: 10451..10452,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[a]\"",
        ),
        line: 321,
        column: 32,
        span: 10453..10460,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 33,
        span: 10460..10461,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 321,
        column: 36,
        span: 10462..10464,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 321,
        column: 38,
        span: 10464..10466,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 39,
        span: 10466..10467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 322,
        column: 7,
        span: 10468..10474,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 8,
        span: 10474..10475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 322,
        column: 14,
        span: 10475..10481,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 322,
        column: 15,
        span: 10481..10482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 322,
        column: 19,
        span: 10482..10486,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 20,
        span: 10486..10487,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 322,
        column: 23,
        span: 10487..10490,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 322,
        column: 24,
        span: 10490..10491,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[^%z]\"",
        ),
        line: 322,
        column: 34,
        span: 10492..10501,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 35,
        span: 10501..10502,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 322,
        column: 38,
        span: 10503..10505,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 322,
        column: 40,
        span: 10505..10507,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 41,
        span: 10507..10508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 323,
        column: 7,
        span: 10509..10515,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 323,
        column: 8,
        span: 10515..10516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 323,
        column: 14,
        span: 10516..10522,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 323,
        column: 15,
        span: 10522..10523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 323,
        column: 19,
        span: 10523..10527,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 323,
        column: 20,
        span: 10527..10528,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 323,
        column: 23,
        span: 10528..10531,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 323,
        column: 24,
        span: 10531..10532,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[^%l]\"",
        ),
        line: 323,
        column: 34,
        span: 10533..10542,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 323,
        column: 35,
        span: 10542..10543,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 323,
        column: 38,
        span: 10544..10546,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 323,
        column: 40,
        span: 10546..10548,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 323,
        column: 41,
        span: 10548..10549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 324,
        column: 7,
        span: 10550..10556,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 324,
        column: 8,
        span: 10556..10557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 324,
        column: 14,
        span: 10557..10563,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 324,
        column: 15,
        span: 10563..10564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 324,
        column: 19,
        span: 10564..10568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 324,
        column: 20,
        span: 10568..10569,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aba\"",
        ),
        line: 324,
        column: 25,
        span: 10569..10574,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 324,
        column: 26,
        span: 10574..10575,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[a%z]\"",
        ),
        line: 324,
        column: 36,
        span: 10576..10585,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 324,
        column: 37,
        span: 10585..10586,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 324,
        column: 40,
        span: 10587..10589,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 324,
        column: 42,
        span: 10589..10591,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 324,
        column: 43,
        span: 10591..10592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 325,
        column: 7,
        span: 10593..10599,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 325,
        column: 8,
        span: 10599..10600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 325,
        column: 14,
        span: 10600..10606,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 325,
        column: 15,
        span: 10606..10607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 325,
        column: 19,
        span: 10607..10611,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 325,
        column: 20,
        span: 10611..10612,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aba\"",
        ),
        line: 325,
        column: 25,
        span: 10612..10617,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 325,
        column: 26,
        span: 10617..10618,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%z]\"",
        ),
        line: 325,
        column: 35,
        span: 10619..10627,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 325,
        column: 36,
        span: 10627..10628,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 325,
        column: 39,
        span: 10629..10631,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 325,
        column: 41,
        span: 10631..10633,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 325,
        column: 42,
        span: 10633..10634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 326,
        column: 7,
        span: 10635..10641,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
        column: 8,
        span: 10641..10642,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 326,
        column: 11,
        span: 10642..10645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 326,
        column: 18,
        span: 10646..10652,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 326,
        column: 19,
        span: 10652..10653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 326,
        column: 23,
        span: 10653..10657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
        column: 24,
        span: 10657..10658,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aba\"",
        ),
        line: 326,
        column: 29,
        span: 10658..10663,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 326,
        column: 30,
        span: 10663..10664,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%l%z]\"",
        ),
        line: 326,
        column: 41,
        span: 10665..10675,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
        column: 42,
        span: 10675..10676,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
        column: 43,
        span: 10676..10677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 327,
        column: 7,
        span: 10678..10684,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 8,
        span: 10684..10685,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 327,
        column: 11,
        span: 10685..10688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 327,
        column: 18,
        span: 10689..10695,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 327,
        column: 19,
        span: 10695..10696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 327,
        column: 23,
        span: 10696..10700,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 24,
        span: 10700..10701,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aba\"",
        ),
        line: 327,
        column: 29,
        span: 10701..10706,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 327,
        column: 30,
        span: 10706..10707,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[^%l%z]\"",
        ),
        line: 327,
        column: 42,
        span: 10708..10719,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 43,
        span: 10719..10720,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 44,
        span: 10720..10721,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 329,
        column: 6,
        span: 10723..10728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 329,
        column: 8,
        span: 10729..10730,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 329,
        column: 9,
        span: 10730..10731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 329,
        column: 11,
        span: 10732..10733,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 329,
        column: 13,
        span: 10734..10735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 329,
        column: 20,
        span: 10736..10742,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 329,
        column: 21,
        span: 10742..10743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 329,
        column: 25,
        span: 10743..10747,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 26,
        span: 10747..10748,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" alo aalo allo\"",
        ),
        line: 329,
        column: 42,
        span: 10748..10764,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 329,
        column: 43,
        span: 10764..10765,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%S].-%f[%s].-%f[%S]\"",
        ),
        line: 329,
        column: 68,
        span: 10766..10790,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 69,
        span: 10790..10791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 330,
        column: 7,
        span: 10792..10798,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
        column: 8,
        span: 10798..10799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 330,
        column: 9,
        span: 10799..10800,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 330,
        column: 12,
        span: 10801..10803,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 330,
        column: 14,
        span: 10803..10805,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 330,
        column: 18,
        span: 10806..10809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 330,
        column: 20,
        span: 10810..10811,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 330,
        column: 23,
        span: 10812..10814,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 330,
        column: 25,
        span: 10814..10816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
        column: 26,
        span: 10816..10817,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 331,
        column: 6,
        span: 10818..10823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 331,
        column: 8,
        span: 10824..10825,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 331,
        column: 10,
        span: 10826..10827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 331,
        column: 17,
        span: 10828..10834,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 331,
        column: 18,
        span: 10834..10835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 331,
        column: 23,
        span: 10835..10840,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
        column: 24,
        span: 10840..10841,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" alo aalo allo\"",
        ),
        line: 331,
        column: 40,
        span: 10841..10857,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 331,
        column: 41,
        span: 10857..10858,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%S](.-%f[%s].-%f[%S])\"",
        ),
        line: 331,
        column: 68,
        span: 10859..10885,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
        column: 69,
        span: 10885..10886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 332,
        column: 7,
        span: 10887..10893,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
        column: 8,
        span: 10893..10894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 332,
        column: 9,
        span: 10894..10895,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 332,
        column: 12,
        span: 10896..10898,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo '",
        ),
        line: 332,
        column: 19,
        span: 10899..10905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
        column: 20,
        span: 10905..10906,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 334,
        column: 6,
        span: 10908..10913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 334,
        column: 8,
        span: 10914..10915,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 334,
        column: 10,
        span: 10916..10917,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 334,
        column: 12,
        span: 10918..10919,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 334,
        column: 13,
        span: 10918..10920,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 334,
        column: 14,
        span: 10920..10921,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 334,
        column: 16,
        span: 10921..10923,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 334,
        column: 17,
        span: 10923..10924,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 334,
        column: 19,
        span: 10924..10926,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 334,
        column: 20,
        span: 10926..10927,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 334,
        column: 23,
        span: 10927..10930,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 334,
        column: 24,
        span: 10930..10931,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "17",
                    after_decimal: "",
                },
            ),
        ),
        line: 334,
        column: 27,
        span: 10931..10934,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 334,
        column: 28,
        span: 10934..10935,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 334,
        column: 29,
        span: 10935..10936,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 335,
        column: 4,
        span: 10937..10940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 335,
        column: 6,
        span: 10941..10942,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 335,
        column: 9,
        span: 10943..10945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 335,
        column: 16,
        span: 10946..10952,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 335,
        column: 17,
        span: 10952..10953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 335,
        column: 23,
        span: 10953..10959,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 335,
        column: 24,
        span: 10959..10960,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo th02 is 1hat\"",
        ),
        line: 335,
        column: 46,
        span: 10960..10982,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 335,
        column: 47,
        span: 10982..10983,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"()%f[%w%d]\"",
        ),
        line: 335,
        column: 60,
        span: 10984..10996,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 335,
        column: 61,
        span: 10996..10997,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 335,
        column: 0,
        span: 10998..11000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 336,
        column: 9,
        span: 11003..11009,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
        column: 10,
        span: 11009..11010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 336,
        column: 15,
        span: 11010..11015,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 336,
        column: 16,
        span: 11015..11016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 336,
        column: 22,
        span: 11016..11022,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
        column: 23,
        span: 11022..11023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 336,
        column: 24,
        span: 11023..11024,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 336,
        column: 25,
        span: 11024..11025,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 336,
        column: 27,
        span: 11025..11027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
        column: 28,
        span: 11027..11028,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 336,
        column: 31,
        span: 11029..11031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 336,
        column: 33,
        span: 11032..11033,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
        column: 34,
        span: 11033..11034,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 337,
        column: 0,
        span: 11035..11038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 338,
        column: 7,
        span: 11039..11045,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 338,
        column: 8,
        span: 11045..11046,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 338,
        column: 9,
        span: 11046..11047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 338,
        column: 10,
        span: 11047..11048,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 338,
        column: 13,
        span: 11049..11051,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 338,
        column: 15,
        span: 11051..11053,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 338,
        column: 16,
        span: 11053..11054,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 342,
        column: 6,
        span: 11079..11084,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 342,
        column: 15,
        span: 11085..11093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        line: 342,
        column: 23,
        span: 11094..11101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 25,
        span: 11102..11103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 342,
        column: 26,
        span: 11103..11104,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 27,
        span: 11104..11105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 342,
        column: 29,
        span: 11106..11107,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 30,
        span: 11107..11108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 343,
        column: 4,
        span: 11111..11112,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 343,
        column: 6,
        span: 11113..11114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 343,
        column: 8,
        span: 11115..11116,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 343,
        column: 11,
        span: 11117..11119,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"malformed\"",
        ),
        line: 343,
        column: 23,
        span: 11120..11131,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 344,
        column: 8,
        span: 11134..11139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 344,
        column: 10,
        span: 11140..11141,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 344,
        column: 11,
        span: 11141..11142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 344,
        column: 15,
        span: 11143..11146,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 344,
        column: 17,
        span: 11147..11148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 344,
        column: 23,
        span: 11149..11154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 344,
        column: 24,
        span: 11154..11155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 344,
        column: 30,
        span: 11155..11161,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 344,
        column: 31,
        span: 11161..11162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 344,
        column: 35,
        span: 11162..11166,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 344,
        column: 36,
        span: 11166..11167,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 344,
        column: 40,
        span: 11168..11171,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 344,
        column: 41,
        span: 11171..11172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 344,
        column: 43,
        span: 11173..11174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 344,
        column: 44,
        span: 11174..11175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 345,
        column: 9,
        span: 11178..11184,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 345,
        column: 10,
        span: 11184..11185,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 345,
        column: 13,
        span: 11185..11188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 345,
        column: 15,
        span: 11189..11190,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 345,
        column: 19,
        span: 11191..11194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 345,
        column: 26,
        span: 11195..11201,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 345,
        column: 27,
        span: 11201..11202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 345,
        column: 31,
        span: 11202..11206,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 345,
        column: 32,
        span: 11206..11207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 345,
        column: 35,
        span: 11207..11210,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 345,
        column: 36,
        span: 11210..11211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 345,
        column: 38,
        span: 11212..11213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 345,
        column: 39,
        span: 11213..11214,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 345,
        column: 40,
        span: 11214..11215,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 346,
        column: 0,
        span: 11216..11219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        line: 348,
        column: 8,
        span: 11221..11228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 9,
        span: 11228..11229,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(.\"",
        ),
        line: 348,
        column: 13,
        span: 11229..11233,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 348,
        column: 14,
        span: 11233..11234,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unfinished capture\"",
        ),
        line: 348,
        column: 35,
        span: 11235..11255,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 36,
        span: 11255..11256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        line: 349,
        column: 8,
        span: 11257..11264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
        column: 9,
        span: 11264..11265,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".)\"",
        ),
        line: 349,
        column: 13,
        span: 11265..11269,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 349,
        column: 14,
        span: 11269..11270,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid pattern capture\"",
        ),
        line: 349,
        column: 40,
        span: 11271..11296,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
        column: 41,
        span: 11296..11297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        line: 350,
        column: 8,
        span: 11298..11305,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
        column: 9,
        span: 11305..11306,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[a\"",
        ),
        line: 350,
        column: 13,
        span: 11306..11310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
        column: 14,
        span: 11310..11311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        line: 351,
        column: 8,
        span: 11312..11319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
        column: 9,
        span: 11319..11320,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[]\"",
        ),
        line: 351,
        column: 13,
        span: 11320..11324,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
        column: 14,
        span: 11324..11325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        line: 352,
        column: 8,
        span: 11326..11333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 9,
        span: 11333..11334,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[^]\"",
        ),
        line: 352,
        column: 14,
        span: 11334..11339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 15,
        span: 11339..11340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        line: 353,
        column: 8,
        span: 11341..11348,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 353,
        column: 9,
        span: 11348..11349,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[a%]\"",
        ),
        line: 353,
        column: 15,
        span: 11349..11355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
        column: 16,
        span: 11355..11356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        line: 354,
        column: 8,
        span: 11357..11364,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 9,
        span: 11364..11365,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[a%\"",
        ),
        line: 354,
        column: 14,
        span: 11365..11370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 15,
        span: 11370..11371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        line: 355,
        column: 8,
        span: 11372..11379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
        column: 9,
        span: 11379..11380,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%b\"",
        ),
        line: 355,
        column: 13,
        span: 11380..11384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
        column: 14,
        span: 11384..11385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        line: 356,
        column: 8,
        span: 11386..11393,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 9,
        span: 11393..11394,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%ba\"",
        ),
        line: 356,
        column: 14,
        span: 11394..11399,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 15,
        span: 11399..11400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        line: 357,
        column: 8,
        span: 11401..11408,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 357,
        column: 9,
        span: 11408..11409,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        line: 357,
        column: 12,
        span: 11409..11412,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 357,
        column: 13,
        span: 11412..11413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        line: 358,
        column: 8,
        span: 11414..11421,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 9,
        span: 11421..11422,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f\"",
        ),
        line: 358,
        column: 13,
        span: 11422..11426,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 358,
        column: 14,
        span: 11426..11427,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"missing\"",
        ),
        line: 358,
        column: 24,
        span: 11428..11437,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 25,
        span: 11437..11438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 361,
        column: 7,
        span: 11458..11464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
        column: 8,
        span: 11464..11465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 361,
        column: 14,
        span: 11465..11471,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 361,
        column: 15,
        span: 11471..11472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 361,
        column: 20,
        span: 11472..11477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
        column: 21,
        span: 11477..11478,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab\\0\\1\\2c\"",
        ),
        line: 361,
        column: 32,
        span: 11478..11489,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 361,
        column: 33,
        span: 11489..11490,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[\\0-\\2]+\"",
        ),
        line: 361,
        column: 44,
        span: 11491..11501,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 361,
        column: 45,
        span: 11501..11502,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 361,
        column: 48,
        span: 11503..11505,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\1\\2\"",
        ),
        line: 361,
        column: 57,
        span: 11506..11514,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 361,
        column: 58,
        span: 11514..11515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 362,
        column: 7,
        span: 11516..11522,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 362,
        column: 8,
        span: 11522..11523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 362,
        column: 14,
        span: 11523..11529,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 362,
        column: 15,
        span: 11529..11530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 362,
        column: 20,
        span: 11530..11535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 362,
        column: 21,
        span: 11535..11536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab\\0\\1\\2c\"",
        ),
        line: 362,
        column: 32,
        span: 11536..11547,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 362,
        column: 33,
        span: 11547..11548,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[\\0-\\0]+\"",
        ),
        line: 362,
        column: 44,
        span: 11549..11559,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 362,
        column: 45,
        span: 11559..11560,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 362,
        column: 48,
        span: 11561..11563,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        line: 362,
        column: 53,
        span: 11564..11568,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 362,
        column: 54,
        span: 11568..11569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 363,
        column: 7,
        span: 11570..11576,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
        column: 8,
        span: 11576..11577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 363,
        column: 14,
        span: 11577..11583,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 363,
        column: 15,
        span: 11583..11584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 363,
        column: 19,
        span: 11584..11588,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
        column: 20,
        span: 11588..11589,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b$a\"",
        ),
        line: 363,
        column: 25,
        span: 11589..11594,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 363,
        column: 26,
        span: 11594..11595,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"$\\0?\"",
        ),
        line: 363,
        column: 33,
        span: 11596..11602,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
        column: 34,
        span: 11602..11603,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 363,
        column: 37,
        span: 11604..11606,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 363,
        column: 39,
        span: 11606..11608,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
        column: 40,
        span: 11608..11609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 364,
        column: 7,
        span: 11610..11616,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 364,
        column: 8,
        span: 11616..11617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 364,
        column: 14,
        span: 11617..11623,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 364,
        column: 15,
        span: 11623..11624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 364,
        column: 19,
        span: 11624..11628,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 364,
        column: 20,
        span: 11628..11629,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\\0efg\"",
        ),
        line: 364,
        column: 30,
        span: 11629..11639,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 364,
        column: 31,
        span: 11639..11640,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\\0\"",
        ),
        line: 364,
        column: 37,
        span: 11641..11646,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 364,
        column: 38,
        span: 11646..11647,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 364,
        column: 41,
        span: 11648..11650,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 364,
        column: 43,
        span: 11650..11652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 364,
        column: 44,
        span: 11652..11653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 365,
        column: 7,
        span: 11654..11660,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 365,
        column: 8,
        span: 11660..11661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 365,
        column: 14,
        span: 11661..11667,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 365,
        column: 15,
        span: 11667..11668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 365,
        column: 20,
        span: 11668..11673,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 365,
        column: 21,
        span: 11673..11674,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\\0efg\\0\\1e\\1g\"",
        ),
        line: 365,
        column: 39,
        span: 11674..11692,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 365,
        column: 40,
        span: 11692..11693,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%b\\0\\1\"",
        ),
        line: 365,
        column: 49,
        span: 11694..11702,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
        column: 50,
        span: 11702..11703,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 365,
        column: 53,
        span: 11704..11706,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0efg\\0\\1e\\1\"",
        ),
        line: 365,
        column: 68,
        span: 11707..11721,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
        column: 69,
        span: 11721..11722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 366,
        column: 7,
        span: 11723..11729,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
        column: 8,
        span: 11729..11730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 366,
        column: 14,
        span: 11730..11736,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 366,
        column: 15,
        span: 11736..11737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 366,
        column: 20,
        span: 11737..11742,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
        column: 21,
        span: 11742..11743,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\\0\\0\\0\"",
        ),
        line: 366,
        column: 32,
        span: 11743..11754,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 366,
        column: 33,
        span: 11754..11755,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\\0+\"",
        ),
        line: 366,
        column: 40,
        span: 11756..11762,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 41,
        span: 11762..11763,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 366,
        column: 44,
        span: 11764..11766,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\"",
        ),
        line: 366,
        column: 53,
        span: 11767..11775,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 54,
        span: 11775..11776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 367,
        column: 7,
        span: 11777..11783,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
        column: 8,
        span: 11783..11784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 367,
        column: 14,
        span: 11784..11790,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 367,
        column: 15,
        span: 11790..11791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 367,
        column: 20,
        span: 11791..11796,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
        column: 21,
        span: 11796..11797,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\\0\\0\\0\"",
        ),
        line: 367,
        column: 32,
        span: 11797..11808,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 367,
        column: 33,
        span: 11808..11809,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\\0%\\0?\"",
        ),
        line: 367,
        column: 43,
        span: 11810..11819,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
        column: 44,
        span: 11819..11820,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 367,
        column: 47,
        span: 11821..11823,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\"",
        ),
        line: 367,
        column: 54,
        span: 11824..11830,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
        column: 55,
        span: 11830..11831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 370,
        column: 7,
        span: 11856..11862,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 370,
        column: 8,
        span: 11862..11863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 370,
        column: 14,
        span: 11863..11869,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 370,
        column: 15,
        span: 11869..11870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 370,
        column: 19,
        span: 11870..11874,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 370,
        column: 20,
        span: 11874..11875,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\\0\\0\"",
        ),
        line: 370,
        column: 29,
        span: 11875..11884,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 370,
        column: 30,
        span: 11884..11885,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0.\"",
        ),
        line: 370,
        column: 35,
        span: 11885..11890,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 370,
        column: 36,
        span: 11890..11891,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 370,
        column: 39,
        span: 11892..11894,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 370,
        column: 41,
        span: 11894..11896,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 370,
        column: 42,
        span: 11896..11897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 371,
        column: 7,
        span: 11898..11904,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
        column: 8,
        span: 11904..11905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 371,
        column: 14,
        span: 11905..11911,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 371,
        column: 15,
        span: 11911..11912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 371,
        column: 19,
        span: 11912..11916,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
        column: 20,
        span: 11916..11917,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcx\\0\\0abc\\0abc\"",
        ),
        line: 371,
        column: 38,
        span: 11917..11935,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 371,
        column: 39,
        span: 11935..11936,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\\0\\0abc\\0a.\"",
        ),
        line: 371,
        column: 53,
        span: 11936..11950,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
        column: 54,
        span: 11950..11951,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 371,
        column: 57,
        span: 11952..11954,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 371,
        column: 59,
        span: 11954..11956,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
        column: 60,
        span: 11956..11957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 373,
        column: 6,
        span: 11959..11964,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 373,
        column: 7,
        span: 11964..11965,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 373,
        column: 11,
        span: 11965..11969,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 373,
        column: 12,
        span: 11969..11970,
    },
]
