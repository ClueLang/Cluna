---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/math.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
        column: 6,
        span: 99..104,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
        column: 7,
        span: 104..105,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing numbers and math lib\"",
        ),
        line: 4,
        column: 37,
        span: 105..135,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
        column: 38,
        span: 135..136,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 6,
        span: 138..143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 6,
        column: 13,
        span: 144..150,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 15,
        span: 151..152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 6,
        column: 20,
        span: 153..157,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 6,
        column: 21,
        span: 157..158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mininteger",
        ),
        line: 6,
        column: 0,
        span: 158..168,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 7,
        column: 6,
        span: 169..174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 7,
        column: 13,
        span: 175..181,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 7,
        column: 15,
        span: 182..183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 7,
        column: 20,
        span: 184..188,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 7,
        column: 21,
        span: 188..189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxinteger",
        ),
        line: 7,
        column: 0,
        span: 189..199,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 9,
        column: 6,
        span: 201..206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 9,
        column: 14,
        span: 207..214,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 9,
        column: 16,
        span: 215..216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 9,
        column: 21,
        span: 217..221,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 9,
        column: 22,
        span: 221..222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 9,
        column: 27,
        span: 222..227,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 28,
        span: 227..228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 9,
        column: 32,
        span: 228..232,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 9,
        column: 33,
        span: 232..233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 9,
        column: 36,
        span: 233..236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 37,
        span: 236..237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 9,
        column: 43,
        span: 237..243,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 9,
        column: 44,
        span: 243..244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 9,
        column: 46,
        span: 244..246,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 47,
        span: 246..247,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 9,
        column: 49,
        span: 248..249,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 9,
        column: 53,
        span: 249..253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 54,
        span: 253..254,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 9,
        column: 56,
        span: 255..256,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 9,
        column: 0,
        span: 256..258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 10,
        column: 7,
        span: 259..265,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 8,
        span: 265..266,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 9,
        span: 266..267,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 10,
        column: 10,
        span: 266..268,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 10,
        column: 13,
        span: 269..271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 10,
        column: 21,
        span: 272..279,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 22,
        span: 279..280,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 10,
        column: 25,
        span: 281..283,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 10,
        column: 27,
        span: 283..285,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 28,
        span: 285..286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 12,
        column: 7,
        span: 288..294,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 8,
        span: 294..295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 12,
        column: 14,
        span: 295..301,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 12,
        column: 17,
        span: 302..304,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 12,
        column: 19,
        span: 304..306,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 12,
        column: 22,
        span: 307..309,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 24,
        span: 310..311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 12,
        column: 31,
        span: 311..318,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 12,
        column: 33,
        span: 319..320,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 12,
        column: 35,
        span: 320..322,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 36,
        span: 322..323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 37,
        span: 323..324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 13,
        column: 7,
        span: 325..331,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 8,
        span: 331..332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 13,
        column: 14,
        span: 332..338,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 13,
        column: 17,
        span: 339..341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 13,
        column: 24,
        span: 342..348,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 13,
        column: 26,
        span: 349..350,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 13,
        column: 28,
        span: 350..352,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 29,
        span: 352..353,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 16,
        column: 6,
        span: 416..421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 16,
        column: 16,
        span: 422..431,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 16,
        column: 18,
        span: 432..433,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        line: 16,
        column: 0,
        span: 433..436,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 17,
        column: 0,
        span: 437..439,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 18,
        column: 8,
        span: 442..447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 18,
        column: 10,
        span: 448..449,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 18,
        column: 12,
        span: 450..451,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 18,
        column: 16,
        span: 451..455,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 18,
        column: 18,
        span: 456..457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 18,
        column: 0,
        span: 458..467,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 19,
        column: 8,
        span: 470..475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 19,
        column: 10,
        span: 476..477,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 19,
        column: 12,
        span: 478..479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 19,
        column: 14,
        span: 480..481,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 19,
        column: 16,
        span: 482..483,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 19,
        column: 20,
        span: 483..487,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 19,
        column: 0,
        span: 488..490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 20,
        column: 6,
        span: 495..496,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 20,
        column: 8,
        span: 497..498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 20,
        column: 10,
        span: 499..500,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 20,
        column: 12,
        span: 501..502,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 20,
        column: 0,
        span: 502..506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 21,
        column: 14,
        span: 511..520,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
        column: 16,
        span: 521..522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 21,
        column: 26,
        span: 523..532,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 21,
        column: 28,
        span: 533..534,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 21,
        column: 0,
        span: 534..536,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 22,
        column: 0,
        span: 539..542,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 23,
        column: 0,
        span: 543..546,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 25,
        column: 6,
        span: 548..553,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 25,
        column: 15,
        span: 554..562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isNaN",
        ),
        line: 25,
        column: 21,
        span: 563..568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 22,
        span: 568..569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 25,
        column: 23,
        span: 569..570,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 24,
        span: 570..571,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 26,
        column: 9,
        span: 574..580,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 11,
        span: 581..582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 26,
        column: 12,
        span: 582..583,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 26,
        column: 15,
        span: 584..586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 26,
        column: 17,
        span: 587..588,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 18,
        span: 588..589,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 27,
        column: 0,
        span: 590..593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
        column: 7,
        span: 595..601,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 8,
        span: 601..602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isNaN",
        ),
        line: 29,
        column: 13,
        span: 602..607,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 14,
        span: 607..608,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
        column: 15,
        span: 607..609,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 29,
        column: 17,
        span: 610..611,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
        column: 19,
        span: 611..613,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 20,
        span: 613..614,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 21,
        span: 614..615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 30,
        column: 7,
        span: 616..622,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 8,
        span: 622..623,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 30,
        column: 11,
        span: 623..626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isNaN",
        ),
        line: 30,
        column: 17,
        span: 627..632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 18,
        span: 632..633,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
        column: 19,
        span: 632..634,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 30,
        column: 21,
        span: 635..636,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
        column: 23,
        span: 636..638,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 24,
        span: 638..639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 25,
        span: 639..640,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 33,
        column: 0,
        span: 643..645,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 34,
        column: 8,
        span: 648..653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 34,
        column: 10,
        span: 654..655,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 34,
        column: 12,
        span: 656..657,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 34,
        column: 16,
        span: 657..661,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 34,
        column: 18,
        span: 662..663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 34,
        column: 0,
        span: 664..673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
        column: 9,
        span: 676..682,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 10,
        span: 682..683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 35,
        column: 11,
        span: 683..684,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 35,
        column: 13,
        span: 685..686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 35,
        column: 15,
        span: 687..688,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 35,
        column: 17,
        span: 689..690,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 35,
        column: 21,
        span: 690..694,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 35,
        column: 25,
        span: 695..698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 35,
        column: 27,
        span: 699..700,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 35,
        column: 30,
        span: 701..703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 35,
        column: 32,
        span: 704..705,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 35,
        column: 34,
        span: 706..707,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 35,
        column: 38,
        span: 707..711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 39,
        span: 711..712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 37,
        column: 8,
        span: 716..721,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 9,
        span: 721..722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 37,
        column: 15,
        span: 722..728,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 37,
        column: 16,
        span: 728..729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 37,
        column: 22,
        span: 729..735,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 23,
        span: 735..736,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d-bit integers, %d-bit (mantissa) floats\"",
        ),
        line: 37,
        column: 66,
        span: 736..779,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 37,
        column: 67,
        span: 779..780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 38,
        column: 12,
        span: 785..792,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 13,
        span: 792..793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 38,
        column: 23,
        span: 794..803,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 24,
        span: 803..804,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 25,
        span: 804..805,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 39,
        column: 0,
        span: 806..809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 41,
        column: 7,
        span: 811..817,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 8,
        span: 817..818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 41,
        column: 12,
        span: 818..822,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
        column: 13,
        span: 822..823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 41,
        column: 17,
        span: 823..827,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 18,
        span: 827..828,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
        column: 19,
        span: 827..829,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 20,
        span: 829..830,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 23,
        span: 831..833,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"integer\"",
        ),
        line: 41,
        column: 33,
        span: 834..843,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 41,
        column: 37,
        span: 844..847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 41,
        column: 42,
        span: 848..852,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
        column: 43,
        span: 852..853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 41,
        column: 47,
        span: 853..857,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 48,
        span: 857..858,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 41,
        column: 51,
        span: 857..861,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 52,
        span: 861..862,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 55,
        span: 863..865,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"float\"",
        ),
        line: 41,
        column: 63,
        span: 866..873,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 42,
        column: 6,
        span: 876..879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 42,
        column: 11,
        span: 880..884,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 42,
        column: 12,
        span: 884..885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 42,
        column: 16,
        span: 885..889,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 17,
        span: 889..890,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\"",
        ),
        line: 42,
        column: 21,
        span: 890..894,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 22,
        span: 894..895,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 42,
        column: 25,
        span: 896..898,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 42,
        column: 29,
        span: 899..902,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 30,
        span: 902..903,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 45,
        column: 6,
        span: 906..911,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 45,
        column: 15,
        span: 912..920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 45,
        column: 26,
        span: 921..931,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 27,
        span: 931..932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 45,
        column: 30,
        span: 932..935,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 31,
        span: 935..936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 45,
        column: 33,
        span: 937..938,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 34,
        span: 938..939,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 45,
        column: 38,
        span: 940..943,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 39,
        span: 943..944,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 46,
        column: 8,
        span: 947..952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 46,
        column: 10,
        span: 953..954,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 11,
        span: 954..955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 46,
        column: 15,
        span: 956..959,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 46,
        column: 17,
        span: 960..961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 46,
        column: 23,
        span: 962..967,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 24,
        span: 967..968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 46,
        column: 25,
        span: 968..969,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 26,
        span: 969..970,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 46,
        column: 30,
        span: 971..974,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 31,
        span: 974..975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 47,
        column: 9,
        span: 978..984,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 10,
        span: 984..985,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 47,
        column: 13,
        span: 985..988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 47,
        column: 15,
        span: 989..990,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 47,
        column: 19,
        span: 991..994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 47,
        column: 26,
        span: 995..1001,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 47,
        column: 27,
        span: 1001..1002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 47,
        column: 31,
        span: 1002..1006,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 32,
        span: 1006..1007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 47,
        column: 35,
        span: 1007..1010,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 47,
        column: 36,
        span: 1010..1011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 47,
        column: 40,
        span: 1012..1015,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 41,
        span: 1015..1016,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 42,
        span: 1016..1017,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 48,
        column: 0,
        span: 1018..1021,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 50,
        column: 6,
        span: 1023..1028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 50,
        column: 13,
        span: 1029..1035,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 50,
        column: 15,
        span: 1036..1037,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number.* has no integer representation\"",
        ),
        line: 50,
        column: 56,
        span: 1038..1078,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 53,
        column: 9,
        span: 1098..1106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 53,
        column: 12,
        span: 1107..1109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 13,
        span: 1109..1110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
        column: 14,
        span: 1110..1111,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 15,
        span: 1111..1112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 53,
        column: 17,
        span: 1113..1114,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 18,
        span: 1114..1115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 53,
        column: 24,
        span: 1116..1121,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 25,
        span: 1121..1122,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 54,
        column: 5,
        span: 1125..1127,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 54,
        column: 9,
        span: 1128..1131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 54,
        column: 15,
        span: 1132..1137,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 54,
        column: 0,
        span: 1138..1142,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 55,
        column: 7,
        span: 1147..1149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 55,
        column: 17,
        span: 1150..1159,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 55,
        column: 20,
        span: 1160..1162,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 55,
        column: 23,
        span: 1162..1165,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 55,
        column: 0,
        span: 1166..1170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 56,
        column: 12,
        span: 1177..1182,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 56,
        column: 14,
        span: 1183..1184,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "-11",
            },
        ),
        line: 56,
        column: 0,
        span: 1184..1190,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 57,
        column: 0,
        span: 1195..1199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 58,
        column: 12,
        span: 1206..1211,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
        column: 14,
        span: 1212..1213,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "-5",
            },
        ),
        line: 58,
        column: 0,
        span: 1213..1218,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 59,
        column: 0,
        span: 1223..1226,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 60,
        column: 0,
        span: 1229..1232,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 62,
        column: 9,
        span: 1268..1274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 62,
        column: 11,
        span: 1275..1276,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 62,
        column: 14,
        span: 1277..1279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 62,
        column: 16,
        span: 1280..1281,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 62,
        column: 19,
        span: 1282..1284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 62,
        column: 24,
        span: 1285..1289,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 62,
        column: 25,
        span: 1289..1290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 62,
        column: 28,
        span: 1290..1293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 29,
        span: 1293..1294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 62,
        column: 30,
        span: 1294..1295,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 62,
        column: 32,
        span: 1296..1297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 62,
        column: 34,
        span: 1298..1299,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 35,
        span: 1299..1300,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 62,
        column: 38,
        span: 1301..1303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 62,
        column: 0,
        span: 1304..1309,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 63,
        column: 0,
        span: 1310..1313,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 66,
        column: 9,
        span: 1338..1346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 66,
        column: 13,
        span: 1347..1350,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 14,
        span: 1350..1351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 66,
        column: 15,
        span: 1351..1352,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 16,
        span: 1352..1353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 66,
        column: 18,
        span: 1354..1355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 19,
        span: 1355..1356,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 67,
        column: 9,
        span: 1359..1365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 67,
        column: 11,
        span: 1366..1367,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 67,
        column: 14,
        span: 1368..1370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 67,
        column: 16,
        span: 1371..1372,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 67,
        column: 20,
        span: 1373..1376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 67,
        column: 25,
        span: 1377..1381,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
        column: 26,
        span: 1381..1382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 67,
        column: 30,
        span: 1382..1386,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 31,
        span: 1386..1387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 67,
        column: 32,
        span: 1387..1388,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 33,
        span: 1388..1389,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 67,
        column: 36,
        span: 1390..1392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 67,
        column: 41,
        span: 1393..1397,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
        column: 42,
        span: 1397..1398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 67,
        column: 46,
        span: 1398..1402,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 47,
        span: 1402..1403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 67,
        column: 48,
        span: 1403..1404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 49,
        span: 1404..1405,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 68,
        column: 0,
        span: 1406..1409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 71,
        column: 7,
        span: 1435..1441,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 8,
        span: 1441..1442,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
                exponent: "12",
            },
        ),
        line: 71,
        column: 12,
        span: 1441..1446,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 15,
        span: 1447..1449,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 17,
        span: 1449..1451,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 71,
        column: 21,
        span: 1452..1455,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 71,
        column: 25,
        span: 1455..1458,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 28,
        span: 1459..1461,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 30,
        span: 1461..1463,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 71,
        column: 34,
        span: 1464..1467,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 71,
        column: 37,
        span: 1467..1470,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 40,
        span: 1471..1473,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 42,
        span: 1473..1475,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 71,
        column: 46,
        span: 1476..1479,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".2",
                },
                exponent: "2",
            },
        ),
        line: 71,
        column: 52,
        span: 1479..1484,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 55,
        span: 1485..1487,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 58,
        span: 1487..1490,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 71,
        column: 62,
        span: 1491..1494,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
                exponent: "-1",
            },
        ),
        line: 71,
        column: 68,
        span: 1494..1500,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 71,
        span: 1501..1503,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".2",
                },
            ),
        ),
        line: 71,
        column: 75,
        span: 1503..1507,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 76,
        span: 1507..1508,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 73,
        column: 0,
        span: 1510..1512,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 74,
        column: 8,
        span: 1515..1520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 74,
        column: 10,
        span: 1521..1522,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 11,
        span: 1522..1523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 74,
        column: 13,
        span: 1524..1525,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 14,
        span: 1525..1526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 74,
        column: 16,
        span: 1527..1528,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 74,
        column: 18,
        span: 1529..1530,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 74,
        column: 22,
        span: 1531..1534,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 23,
        span: 1534..1535,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 3e0 \"",
        ),
        line: 74,
        column: 31,
        span: 1536..1543,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 32,
        span: 1543..1544,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 10  \"",
        ),
        line: 74,
        column: 40,
        span: 1545..1552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 75,
        column: 9,
        span: 1555..1561,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 10,
        span: 1561..1562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 75,
        column: 11,
        span: 1562..1563,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 75,
        column: 13,
        span: 1564..1565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 75,
        column: 15,
        span: 1566..1567,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 75,
        column: 18,
        span: 1568..1570,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
        column: 20,
        span: 1570..1572,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 75,
        column: 24,
        span: 1573..1576,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 75,
        column: 26,
        span: 1577..1578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 75,
        column: 27,
        span: 1578..1579,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 75,
        column: 30,
        span: 1580..1582,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 75,
        column: 32,
        span: 1583..1584,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
        column: 33,
        span: 1583..1585,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 75,
        column: 37,
        span: 1586..1589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 75,
        column: 39,
        span: 1590..1591,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 75,
        column: 41,
        span: 1592..1593,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 75,
        column: 45,
        span: 1594..1597,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 75,
        column: 48,
        span: 1598..1600,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
        column: 50,
        span: 1600..1602,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 75,
        column: 54,
        span: 1603..1606,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\"",
        ),
        line: 75,
        column: 59,
        span: 1607..1611,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 75,
        column: 61,
        span: 1612..1613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 75,
        column: 63,
        span: 1614..1615,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 75,
        column: 66,
        span: 1616..1618,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
        column: 68,
        span: 1618..1620,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 69,
        span: 1620..1621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 76,
        column: 9,
        span: 1624..1630,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 10,
        span: 1630..1631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 76,
        column: 14,
        span: 1631..1635,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 15,
        span: 1635..1636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 76,
        column: 16,
        span: 1636..1637,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 17,
        span: 1637..1638,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 76,
        column: 20,
        span: 1639..1641,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 76,
        column: 29,
        span: 1642..1650,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 76,
        column: 33,
        span: 1651..1654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 76,
        column: 38,
        span: 1655..1659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 39,
        span: 1659..1660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 76,
        column: 40,
        span: 1660..1661,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 41,
        span: 1661..1662,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 76,
        column: 44,
        span: 1663..1665,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 76,
        column: 53,
        span: 1666..1674,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 76,
        column: 57,
        span: 1675..1678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 76,
        column: 62,
        span: 1679..1683,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 63,
        span: 1683..1684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 76,
        column: 64,
        span: 1684..1685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 65,
        span: 1685..1686,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 76,
        column: 68,
        span: 1687..1689,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 76,
        column: 77,
        span: 1690..1698,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 78,
        span: 1698..1699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 77,
        column: 9,
        span: 1702..1708,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 10,
        span: 1708..1709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 77,
        column: 11,
        span: 1709..1710,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 77,
        column: 14,
        span: 1711..1713,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 77,
        column: 18,
        span: 1714..1717,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 77,
        column: 22,
        span: 1718..1721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 77,
        column: 24,
        span: 1722..1723,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 77,
        column: 27,
        span: 1724..1726,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 3e0 \"",
        ),
        line: 77,
        column: 35,
        span: 1727..1734,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 77,
        column: 39,
        span: 1735..1738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 77,
        column: 41,
        span: 1739..1740,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 77,
        column: 44,
        span: 1741..1743,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 10  \"",
        ),
        line: 77,
        column: 52,
        span: 1744..1751,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 77,
        column: 56,
        span: 1752..1755,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 77,
        column: 58,
        span: 1756..1757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 77,
        column: 59,
        span: 1757..1758,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 77,
        column: 62,
        span: 1759..1761,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 77,
        column: 64,
        span: 1762..1763,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  10 \"",
        ),
        line: 77,
        column: 71,
        span: 1763..1770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 72,
        span: 1770..1771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 78,
        column: 9,
        span: 1774..1780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 10,
        span: 1780..1781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 78,
        column: 11,
        span: 1781..1782,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 78,
        column: 13,
        span: 1783..1784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 78,
        column: 15,
        span: 1785..1786,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 78,
        column: 18,
        span: 1787..1789,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
        column: 20,
        span: 1789..1791,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 78,
        column: 24,
        span: 1792..1795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 78,
        column: 26,
        span: 1796..1797,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 78,
        column: 28,
        span: 1798..1799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 78,
        column: 30,
        span: 1800..1801,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 78,
        column: 33,
        span: 1802..1804,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "08",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
        column: 36,
        span: 1804..1807,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 37,
        span: 1807..1808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 79,
        column: 4,
        span: 1811..1812,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
        column: 6,
        span: 1813..1814,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 79,
        column: 0,
        span: 1814..1816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 80,
        column: 9,
        span: 1819..1825,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 10,
        span: 1825..1826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 80,
        column: 11,
        span: 1826..1827,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 80,
        column: 14,
        span: 1828..1830,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 80,
        column: 16,
        span: 1831..1832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 80,
        column: 17,
        span: 1832..1833,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 80,
        column: 21,
        span: 1834..1837,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
        column: 23,
        span: 1837..1839,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 80,
        column: 26,
        span: 1840..1842,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 80,
        column: 28,
        span: 1843..1844,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
        column: 29,
        span: 1843..1845,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 30,
        span: 1845..1846,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 81,
        column: 0,
        span: 1847..1850,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 83,
        column: 0,
        span: 1852..1854,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 84,
        column: 8,
        span: 1857..1862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 84,
        column: 10,
        span: 1863..1864,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 84,
        column: 12,
        span: 1865..1866,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 84,
        column: 14,
        span: 1867..1868,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 0,
        span: 1867..1869,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 85,
        column: 8,
        span: 1872..1877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 85,
        column: 11,
        span: 1878..1880,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 85,
        column: 13,
        span: 1881..1882,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 15,
        span: 1882..1884,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 85,
        column: 17,
        span: 1885..1886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 85,
        column: 19,
        span: 1887..1888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 86,
        column: 4,
        span: 1905..1906,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 86,
        column: 6,
        span: 1907..1908,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 86,
        column: 8,
        span: 1909..1910,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 86,
        column: 10,
        span: 1911..1912,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 11,
        span: 1911..1913,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 86,
        column: 12,
        span: 1913..1914,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 86,
        column: 14,
        span: 1915..1916,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 17,
        span: 1916..1919,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
        column: 18,
        span: 1919..1920,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 21,
        span: 1920..1923,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
        column: 22,
        span: 1923..1924,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 25,
        span: 1924..1927,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
        column: 26,
        span: 1927..1928,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 29,
        span: 1928..1931,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
        column: 30,
        span: 1931..1932,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 33,
        span: 1932..1935,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 86,
        column: 35,
        span: 1936..1937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 87,
        column: 9,
        span: 1940..1946,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 10,
        span: 1946..1947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 87,
        column: 11,
        span: 1947..1948,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 87,
        column: 12,
        span: 1948..1949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 87,
        column: 14,
        span: 1949..1951,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 87,
        column: 15,
        span: 1951..1952,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 87,
        column: 18,
        span: 1953..1955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 87,
        column: 20,
        span: 1956..1957,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 87,
        column: 21,
        span: 1957..1958,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 87,
        column: 22,
        span: 1957..1959,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 87,
        column: 23,
        span: 1959..1960,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 87,
        column: 27,
        span: 1961..1964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 87,
        column: 29,
        span: 1965..1966,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 87,
        column: 30,
        span: 1966..1967,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 87,
        column: 31,
        span: 1967..1968,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 87,
        column: 32,
        span: 1967..1969,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 87,
        column: 33,
        span: 1969..1970,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 87,
        column: 36,
        span: 1971..1973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 87,
        column: 38,
        span: 1974..1975,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 87,
        column: 39,
        span: 1975..1976,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 87,
        column: 40,
        span: 1975..1977,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 87,
        column: 41,
        span: 1977..1978,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 42,
        span: 1978..1979,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 88,
        column: 0,
        span: 1980..1983,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 90,
        column: 3,
        span: 1985..1987,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 91,
        column: 8,
        span: 2010..2015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 91,
        column: 10,
        span: 2016..2017,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 11,
        span: 2017..2018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 91,
        column: 13,
        span: 2019..2020,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 91,
        column: 15,
        span: 2021..2022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 91,
        column: 20,
        span: 2023..2027,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 91,
        column: 21,
        span: 2027..2028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 91,
        column: 25,
        span: 2028..2032,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 26,
        span: 2032..2033,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 91,
        column: 29,
        span: 2032..2036,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 30,
        span: 2036..2037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 92,
        column: 9,
        span: 2040..2046,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 10,
        span: 2046..2047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 92,
        column: 11,
        span: 2047..2048,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 92,
        column: 14,
        span: 2049..2051,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 92,
        column: 18,
        span: 2051..2055,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 92,
        column: 22,
        span: 2056..2059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 92,
        column: 24,
        span: 2060..2061,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 92,
        column: 27,
        span: 2062..2064,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 92,
        column: 31,
        span: 2064..2068,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 32,
        span: 2068..2069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 93,
        column: 4,
        span: 2072..2073,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 93,
        column: 5,
        span: 2073..2074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 93,
        column: 7,
        span: 2075..2076,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 93,
        column: 9,
        span: 2077..2078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 93,
        column: 14,
        span: 2079..2083,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 93,
        column: 15,
        span: 2083..2084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 93,
        column: 19,
        span: 2084..2088,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 20,
        span: 2088..2089,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 93,
        column: 21,
        span: 2089..2090,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 93,
        column: 24,
        span: 2089..2093,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 25,
        span: 2093..2094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 94,
        column: 9,
        span: 2097..2103,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 10,
        span: 2103..2104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 94,
        column: 11,
        span: 2104..2105,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 94,
        column: 14,
        span: 2106..2108,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 94,
        column: 16,
        span: 2109..2110,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 94,
        column: 19,
        span: 2109..2113,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 94,
        column: 23,
        span: 2114..2117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 94,
        column: 25,
        span: 2118..2119,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 94,
        column: 28,
        span: 2120..2122,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 94,
        column: 30,
        span: 2123..2124,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 94,
        column: 33,
        span: 2123..2127,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 34,
        span: 2127..2128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 95,
        column: 4,
        span: 2131..2132,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 5,
        span: 2132..2133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 95,
        column: 7,
        span: 2134..2135,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 95,
        column: 9,
        span: 2136..2137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 95,
        column: 14,
        span: 2138..2142,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 95,
        column: 15,
        span: 2142..2143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 95,
        column: 19,
        span: 2143..2147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 20,
        span: 2147..2148,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 95,
        column: 21,
        span: 2148..2149,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
                exponent: "23",
            },
        ),
        line: 95,
        column: 25,
        span: 2148..2153,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 26,
        span: 2153..2154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 96,
        column: 9,
        span: 2157..2163,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 10,
        span: 2163..2164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 96,
        column: 11,
        span: 2164..2165,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 96,
        column: 14,
        span: 2166..2168,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 96,
        column: 16,
        span: 2169..2170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
                exponent: "23",
            },
        ),
        line: 96,
        column: 20,
        span: 2169..2174,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 96,
        column: 24,
        span: 2175..2178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 96,
        column: 26,
        span: 2179..2180,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 96,
        column: 29,
        span: 2181..2183,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 96,
        column: 33,
        span: 2183..2187,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 34,
        span: 2187..2188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 97,
        column: 4,
        span: 2191..2192,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 5,
        span: 2192..2193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 97,
        column: 7,
        span: 2194..2195,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 97,
        column: 9,
        span: 2196..2197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 97,
        column: 14,
        span: 2198..2202,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 97,
        column: 15,
        span: 2202..2203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 97,
        column: 19,
        span: 2203..2207,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 20,
        span: 2207..2208,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
                exponent: "35",
            },
        ),
        line: 97,
        column: 24,
        span: 2207..2212,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 25,
        span: 2212..2213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 98,
        column: 9,
        span: 2216..2222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 10,
        span: 2222..2223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 98,
        column: 11,
        span: 2223..2224,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 98,
        column: 14,
        span: 2225..2227,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
                exponent: "35",
            },
        ),
        line: 98,
        column: 19,
        span: 2227..2232,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 98,
        column: 23,
        span: 2233..2236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 98,
        column: 25,
        span: 2237..2238,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 98,
        column: 28,
        span: 2239..2241,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 98,
        column: 32,
        span: 2241..2245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 33,
        span: 2245..2246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 99,
        column: 4,
        span: 2249..2250,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
        column: 5,
        span: 2250..2251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 99,
        column: 7,
        span: 2252..2253,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 99,
        column: 9,
        span: 2254..2255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 99,
        column: 14,
        span: 2256..2260,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 99,
        column: 15,
        span: 2260..2261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 99,
        column: 19,
        span: 2261..2265,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 20,
        span: 2265..2266,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 99,
        column: 21,
        span: 2266..2267,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
        column: 22,
        span: 2266..2268,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 99,
        column: 24,
        span: 2269..2270,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
        column: 26,
        span: 2270..2272,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 27,
        span: 2272..2273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 100,
        column: 9,
        span: 2284..2290,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 10,
        span: 2290..2291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 100,
        column: 11,
        span: 2291..2292,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 100,
        column: 14,
        span: 2293..2295,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 100,
        column: 16,
        span: 2296..2297,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 17,
        span: 2296..2298,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 100,
        column: 19,
        span: 2299..2300,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 21,
        span: 2300..2302,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 100,
        column: 25,
        span: 2303..2306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 100,
        column: 27,
        span: 2307..2308,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 100,
        column: 30,
        span: 2309..2311,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 100,
        column: 34,
        span: 2311..2315,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 35,
        span: 2315..2316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 101,
        column: 4,
        span: 2319..2320,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 5,
        span: 2320..2321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 101,
        column: 7,
        span: 2322..2323,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 101,
        column: 9,
        span: 2324..2325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 101,
        column: 14,
        span: 2326..2330,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 101,
        column: 15,
        span: 2330..2331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 101,
        column: 19,
        span: 2331..2335,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 20,
        span: 2335..2336,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 21,
        span: 2335..2337,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 101,
        column: 23,
        span: 2338..2339,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 25,
        span: 2339..2341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 26,
        span: 2341..2342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 102,
        column: 9,
        span: 2353..2359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 10,
        span: 2359..2360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 102,
        column: 11,
        span: 2360..2361,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 102,
        column: 14,
        span: 2362..2364,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 16,
        span: 2364..2366,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 102,
        column: 18,
        span: 2367..2368,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 20,
        span: 2368..2370,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 102,
        column: 24,
        span: 2371..2374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 102,
        column: 26,
        span: 2375..2376,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 102,
        column: 29,
        span: 2377..2379,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 102,
        column: 33,
        span: 2379..2383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 34,
        span: 2383..2384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 103,
        column: 4,
        span: 2387..2388,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 103,
        column: 5,
        span: 2388..2389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 103,
        column: 7,
        span: 2390..2391,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 103,
        column: 9,
        span: 2392..2393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 103,
        column: 14,
        span: 2394..2398,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 103,
        column: 15,
        span: 2398..2399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 103,
        column: 19,
        span: 2399..2403,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 20,
        span: 2403..2404,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 21,
        span: 2403..2405,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 103,
        column: 23,
        span: 2406..2407,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 25,
        span: 2407..2409,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 26,
        span: 2409..2410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 104,
        column: 9,
        span: 2421..2427,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 10,
        span: 2427..2428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isNaN",
        ),
        line: 104,
        column: 15,
        span: 2428..2433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 16,
        span: 2433..2434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 104,
        column: 17,
        span: 2434..2435,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 18,
        span: 2435..2436,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 104,
        column: 22,
        span: 2437..2440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isNaN",
        ),
        line: 104,
        column: 28,
        span: 2441..2446,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 29,
        span: 2446..2447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 104,
        column: 30,
        span: 2447..2448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 31,
        span: 2448..2449,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 32,
        span: 2449..2450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 105,
        column: 4,
        span: 2453..2454,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 5,
        span: 2454..2455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 105,
        column: 7,
        span: 2456..2457,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 105,
        column: 9,
        span: 2458..2459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 105,
        column: 14,
        span: 2460..2464,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 105,
        column: 15,
        span: 2464..2465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 105,
        column: 19,
        span: 2465..2469,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 20,
        span: 2469..2470,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 21,
        span: 2469..2471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 22,
        span: 2471..2472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 106,
        column: 9,
        span: 2500..2506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 10,
        span: 2506..2507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 106,
        column: 13,
        span: 2507..2510,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 14,
        span: 2510..2511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 106,
        column: 15,
        span: 2511..2512,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 16,
        span: 2512..2513,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 18,
        span: 2513..2515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 19,
        span: 2515..2516,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 106,
        column: 23,
        span: 2517..2520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 106,
        column: 27,
        span: 2521..2524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 28,
        span: 2524..2525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 106,
        column: 29,
        span: 2525..2526,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 30,
        span: 2526..2527,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 106,
        column: 34,
        span: 2527..2531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 35,
        span: 2531..2532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 36,
        span: 2532..2533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 107,
        column: 4,
        span: 2536..2537,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 107,
        column: 5,
        span: 2537..2538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 107,
        column: 7,
        span: 2539..2540,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 107,
        column: 9,
        span: 2541..2542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 107,
        column: 14,
        span: 2543..2547,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 107,
        column: 15,
        span: 2547..2548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 107,
        column: 19,
        span: 2548..2552,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 20,
        span: 2552..2553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 107,
        column: 26,
        span: 2553..2559,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 27,
        span: 2559..2560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 108,
        column: 9,
        span: 2563..2569,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 10,
        span: 2569..2570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 108,
        column: 13,
        span: 2570..2573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 14,
        span: 2573..2574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 108,
        column: 15,
        span: 2574..2575,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 108,
        column: 16,
        span: 2575..2576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 108,
        column: 23,
        span: 2577..2583,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 24,
        span: 2583..2584,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 108,
        column: 28,
        span: 2585..2588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 108,
        column: 32,
        span: 2589..2592,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 33,
        span: 2592..2593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 108,
        column: 34,
        span: 2593..2594,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 108,
        column: 35,
        span: 2594..2595,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 108,
        column: 39,
        span: 2595..2599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 40,
        span: 2599..2600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 41,
        span: 2600..2601,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 109,
        column: 0,
        span: 2602..2605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 111,
        column: 7,
        span: 2607..2613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 8,
        span: 2613..2614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 111,
        column: 12,
        span: 2614..2618,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 111,
        column: 13,
        span: 2618..2619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 111,
        column: 17,
        span: 2619..2623,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 111,
        column: 19,
        span: 2624..2625,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 111,
        column: 25,
        span: 2625..2631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 26,
        span: 2631..2632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 112,
        column: 7,
        span: 2633..2639,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 8,
        span: 2639..2640,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 112,
        column: 9,
        span: 2640..2641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 112,
        column: 13,
        span: 2641..2645,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 112,
        column: 14,
        span: 2645..2646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 112,
        column: 18,
        span: 2646..2650,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 112,
        column: 20,
        span: 2651..2652,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 112,
        column: 22,
        span: 2653..2654,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 112,
        column: 27,
        span: 2653..2659,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 28,
        span: 2659..2660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 116,
        column: 7,
        span: 2685..2691,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 8,
        span: 2691..2692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 116,
        column: 14,
        span: 2692..2698,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 116,
        column: 16,
        span: 2699..2700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 116,
        column: 23,
        span: 2701..2707,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 116,
        column: 25,
        span: 2708..2709,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 116,
        column: 27,
        span: 2709..2711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 28,
        span: 2711..2712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 117,
        column: 7,
        span: 2713..2719,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 8,
        span: 2719..2720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 117,
        column: 14,
        span: 2720..2726,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 117,
        column: 16,
        span: 2727..2728,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 18,
        span: 2728..2730,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 117,
        column: 20,
        span: 2731..2732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 117,
        column: 27,
        span: 2733..2739,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 28,
        span: 2739..2740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 118,
        column: 7,
        span: 2741..2747,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 8,
        span: 2747..2748,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 9,
        span: 2747..2749,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 118,
        column: 11,
        span: 2750..2751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 118,
        column: 18,
        span: 2752..2758,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 118,
        column: 21,
        span: 2759..2761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 118,
        column: 28,
        span: 2762..2768,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 29,
        span: 2768..2769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 119,
        column: 7,
        span: 2770..2776,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 8,
        span: 2776..2777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 119,
        column: 14,
        span: 2777..2783,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 119,
        column: 16,
        span: 2784..2785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 119,
        column: 23,
        span: 2786..2792,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 119,
        column: 26,
        span: 2793..2795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 28,
        span: 2795..2797,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 29,
        span: 2797..2798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 120,
        column: 7,
        span: 2799..2805,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 8,
        span: 2805..2806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 120,
        column: 14,
        span: 2806..2812,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 120,
        column: 16,
        span: 2813..2814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 120,
        column: 23,
        span: 2815..2821,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 120,
        column: 25,
        span: 2822..2823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 120,
        column: 32,
        span: 2824..2830,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 120,
        column: 35,
        span: 2831..2833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 120,
        column: 42,
        span: 2834..2840,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 43,
        span: 2840..2841,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 125,
        column: 4,
        span: 2887..2890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 125,
        column: 6,
        span: 2891..2892,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 7,
        span: 2892..2893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 125,
        column: 9,
        span: 2894..2895,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 125,
        column: 12,
        span: 2896..2898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 125,
        column: 18,
        span: 2899..2904,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 125,
        column: 20,
        span: 2905..2906,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
        column: 22,
        span: 2907..2908,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 24,
        span: 2907..2910,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 25,
        span: 2910..2911,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
        column: 27,
        span: 2912..2913,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 29,
        span: 2912..2915,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 30,
        span: 2915..2916,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
        column: 32,
        span: 2917..2918,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 33,
        span: 2917..2919,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 34,
        span: 2919..2920,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
        column: 36,
        span: 2921..2922,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 37,
        span: 2921..2923,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 38,
        span: 2923..2924,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
        column: 40,
        span: 2925..2926,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 41,
        span: 2925..2927,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 42,
        span: 2927..2928,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 44,
        span: 2928..2930,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 45,
        span: 2930..2931,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 47,
        span: 2931..2933,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 48,
        span: 2933..2934,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 50,
        span: 2934..2936,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 51,
        span: 2936..2937,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 53,
        span: 2937..2939,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 54,
        span: 2939..2940,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 57,
        span: 2940..2943,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 125,
        column: 59,
        span: 2944..2945,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 125,
        column: 0,
        span: 2946..2948,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 126,
        column: 6,
        span: 2951..2954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 126,
        column: 8,
        span: 2955..2956,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 9,
        span: 2956..2957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 126,
        column: 11,
        span: 2958..2959,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 126,
        column: 14,
        span: 2960..2962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 126,
        column: 20,
        span: 2963..2968,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 126,
        column: 22,
        span: 2969..2970,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 126,
        column: 24,
        span: 2971..2972,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 26,
        span: 2971..2974,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 27,
        span: 2974..2975,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 126,
        column: 29,
        span: 2976..2977,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 31,
        span: 2976..2979,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 32,
        span: 2979..2980,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 126,
        column: 34,
        span: 2981..2982,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 35,
        span: 2981..2983,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 36,
        span: 2983..2984,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 126,
        column: 38,
        span: 2985..2986,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 39,
        span: 2985..2987,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 40,
        span: 2987..2988,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 126,
        column: 42,
        span: 2989..2990,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 43,
        span: 2989..2991,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 44,
        span: 2991..2992,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 46,
        span: 2992..2994,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 47,
        span: 2994..2995,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 49,
        span: 2995..2997,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 50,
        span: 2997..2998,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 52,
        span: 2998..3000,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 53,
        span: 3000..3001,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 56,
        span: 3001..3004,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 126,
        column: 58,
        span: 3005..3006,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 126,
        column: 0,
        span: 3007..3009,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 127,
        column: 8,
        span: 3014..3017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 127,
        column: 10,
        span: 3018..3019,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
        column: 11,
        span: 3019..3020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ti",
        ),
        line: 127,
        column: 14,
        span: 3021..3023,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 127,
        column: 17,
        span: 3024..3026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 127,
        column: 23,
        span: 3027..3032,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 127,
        column: 25,
        span: 3033..3034,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 127,
        column: 27,
        span: 3034..3036,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
        column: 28,
        span: 3036..3037,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 127,
        column: 32,
        span: 3037..3041,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 127,
        column: 34,
        span: 3042..3043,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 127,
        column: 37,
        span: 3044..3046,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 128,
        column: 10,
        span: 3090..3093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 128,
        column: 12,
        span: 3094..3095,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 13,
        span: 3095..3096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tj",
        ),
        line: 128,
        column: 16,
        span: 3097..3099,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 128,
        column: 19,
        span: 3100..3102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 128,
        column: 25,
        span: 3103..3108,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 128,
        column: 27,
        span: 3109..3110,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 29,
        span: 3110..3112,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 30,
        span: 3112..3113,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 128,
        column: 34,
        span: 3113..3117,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 128,
        column: 36,
        span: 3118..3119,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 128,
        column: 39,
        span: 3120..3122,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 129,
        column: 14,
        span: 3166..3171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 129,
        column: 16,
        span: 3172..3173,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 129,
        column: 18,
        span: 3174..3175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 129,
        column: 20,
        span: 3176..3177,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 129,
        column: 22,
        span: 3178..3179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ti",
        ),
        line: 129,
        column: 0,
        span: 3180..3182,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 130,
        column: 14,
        span: 3191..3196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 130,
        column: 16,
        span: 3197..3198,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 130,
        column: 18,
        span: 3199..3200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 130,
        column: 20,
        span: 3201..3202,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 130,
        column: 22,
        span: 3203..3204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tj",
        ),
        line: 130,
        column: 0,
        span: 3205..3207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 131,
        column: 15,
        span: 3216..3222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 16,
        span: 3222..3223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 131,
        column: 17,
        span: 3223..3224,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 131,
        column: 20,
        span: 3225..3227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 131,
        column: 22,
        span: 3228..3229,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 131,
        column: 25,
        span: 3230..3232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 131,
        column: 30,
        span: 3233..3237,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 131,
        column: 31,
        span: 3237..3238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 131,
        column: 36,
        span: 3238..3243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 37,
        span: 3243..3244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 131,
        column: 38,
        span: 3244..3245,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 131,
        column: 40,
        span: 3246..3247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 131,
        column: 42,
        span: 3248..3249,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 43,
        span: 3249..3250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 44,
        span: 3250..3251,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 132,
        column: 0,
        span: 3258..3261,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 133,
        column: 0,
        span: 3266..3269,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 134,
        column: 0,
        span: 3272..3275,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 135,
        column: 0,
        span: 3276..3279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 137,
        column: 7,
        span: 3281..3287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 8,
        span: 3287..3288,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 9,
        span: 3287..3289,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 137,
        column: 12,
        span: 3290..3292,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 137,
        column: 16,
        span: 3292..3296,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 137,
        column: 19,
        span: 3297..3299,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 21,
        span: 3299..3301,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 137,
        column: 23,
        span: 3302..3303,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 25,
        span: 3303..3305,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 26,
        span: 3305..3306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 138,
        column: 7,
        span: 3307..3313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 8,
        span: 3313..3314,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 138,
        column: 9,
        span: 3314..3315,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 10,
        span: 3314..3316,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 138,
        column: 13,
        span: 3317..3319,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 138,
        column: 17,
        span: 3319..3323,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 138,
        column: 20,
        span: 3324..3326,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 138,
        column: 22,
        span: 3327..3328,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 23,
        span: 3327..3329,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 138,
        column: 25,
        span: 3330..3331,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 27,
        span: 3331..3333,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 28,
        span: 3333..3334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 139,
        column: 7,
        span: 3335..3341,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 8,
        span: 3341..3342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 139,
        column: 11,
        span: 3342..3345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 12,
        span: 3345..3346,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 139,
        column: 15,
        span: 3345..3349,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 139,
        column: 18,
        span: 3350..3352,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 139,
        column: 22,
        span: 3352..3356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 23,
        span: 3356..3357,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 139,
        column: 27,
        span: 3357..3361,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 28,
        span: 3361..3362,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 29,
        span: 3362..3363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 140,
        column: 7,
        span: 3364..3370,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 8,
        span: 3370..3371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 140,
        column: 11,
        span: 3371..3374,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 12,
        span: 3374..3375,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 140,
        column: 15,
        span: 3374..3378,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 140,
        column: 18,
        span: 3379..3381,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 140,
        column: 20,
        span: 3382..3383,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 140,
        column: 23,
        span: 3382..3386,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 24,
        span: 3386..3387,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 140,
        column: 26,
        span: 3388..3389,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 140,
        column: 29,
        span: 3388..3392,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 30,
        span: 3392..3393,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 31,
        span: 3393..3394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 142,
        column: 7,
        span: 3396..3402,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 8,
        span: 3402..3403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 142,
        column: 14,
        span: 3403..3409,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 142,
        column: 17,
        span: 3410..3412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 142,
        column: 24,
        span: 3413..3419,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 142,
        column: 27,
        span: 3420..3422,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
        column: 29,
        span: 3422..3424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 30,
        span: 3424..3425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 143,
        column: 7,
        span: 3426..3432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 8,
        span: 3432..3433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 143,
        column: 14,
        span: 3433..3439,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 143,
        column: 17,
        span: 3440..3442,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
        column: 19,
        span: 3442..3444,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 143,
        column: 22,
        span: 3445..3447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 143,
        column: 29,
        span: 3448..3454,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 30,
        span: 3454..3455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 144,
        column: 7,
        span: 3456..3462,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 8,
        span: 3462..3463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 9,
        span: 3463..3464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 144,
        column: 15,
        span: 3464..3470,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 144,
        column: 17,
        span: 3471..3472,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
        column: 19,
        span: 3472..3474,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 20,
        span: 3474..3475,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 144,
        column: 23,
        span: 3476..3478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 144,
        column: 30,
        span: 3479..3485,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 144,
        column: 33,
        span: 3486..3488,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
        column: 35,
        span: 3488..3490,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 36,
        span: 3490..3491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 145,
        column: 7,
        span: 3492..3498,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 8,
        span: 3498..3499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 145,
        column: 14,
        span: 3499..3505,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 145,
        column: 17,
        span: 3506..3508,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 19,
        span: 3509..3510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 145,
        column: 25,
        span: 3510..3516,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 145,
        column: 27,
        span: 3517..3518,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
        column: 29,
        span: 3518..3520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 30,
        span: 3520..3521,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 145,
        column: 33,
        span: 3522..3524,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
        column: 35,
        span: 3524..3526,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 36,
        span: 3526..3527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 146,
        column: 7,
        span: 3528..3534,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 8,
        span: 3534..3535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 146,
        column: 14,
        span: 3535..3541,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 146,
        column: 17,
        span: 3542..3544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 146,
        column: 24,
        span: 3545..3551,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 146,
        column: 27,
        span: 3552..3554,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 29,
        span: 3554..3556,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 30,
        span: 3556..3557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 147,
        column: 7,
        span: 3558..3564,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 8,
        span: 3564..3565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 147,
        column: 14,
        span: 3565..3571,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 147,
        column: 17,
        span: 3572..3574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 147,
        column: 24,
        span: 3575..3581,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 147,
        column: 27,
        span: 3582..3584,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
        column: 29,
        span: 3584..3586,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 30,
        span: 3586..3587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 148,
        column: 7,
        span: 3588..3594,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 8,
        span: 3594..3595,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 9,
        span: 3595..3596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 148,
        column: 15,
        span: 3596..3602,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 148,
        column: 17,
        span: 3603..3604,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 148,
        column: 19,
        span: 3604..3606,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 20,
        span: 3606..3607,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 148,
        column: 23,
        span: 3608..3610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 148,
        column: 30,
        span: 3611..3617,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 148,
        column: 33,
        span: 3618..3620,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 148,
        column: 35,
        span: 3620..3622,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 36,
        span: 3622..3623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 149,
        column: 7,
        span: 3624..3630,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 8,
        span: 3630..3631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 149,
        column: 14,
        span: 3631..3637,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 149,
        column: 17,
        span: 3638..3640,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 19,
        span: 3641..3642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 149,
        column: 25,
        span: 3642..3648,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 149,
        column: 27,
        span: 3649..3650,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 149,
        column: 29,
        span: 3650..3652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 30,
        span: 3652..3653,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 149,
        column: 33,
        span: 3654..3656,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 149,
        column: 35,
        span: 3656..3658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 36,
        span: 3658..3659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 150,
        column: 7,
        span: 3660..3666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 8,
        span: 3666..3667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 150,
        column: 14,
        span: 3667..3673,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 150,
        column: 17,
        span: 3674..3676,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 19,
        span: 3676..3678,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 150,
        column: 22,
        span: 3679..3681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 150,
        column: 29,
        span: 3682..3688,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 30,
        span: 3688..3689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 152,
        column: 7,
        span: 3691..3697,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 8,
        span: 3697..3698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 152,
        column: 14,
        span: 3698..3704,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 152,
        column: 17,
        span: 3705..3707,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 152,
        column: 19,
        span: 3708..3709,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 152,
        column: 20,
        span: 3708..3710,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 152,
        column: 23,
        span: 3711..3713,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 152,
        column: 25,
        span: 3714..3715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 152,
        column: 31,
        span: 3715..3721,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 32,
        span: 3721..3722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 153,
        column: 7,
        span: 3723..3729,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 8,
        span: 3729..3730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 153,
        column: 14,
        span: 3730..3736,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 153,
        column: 17,
        span: 3737..3739,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 153,
        column: 19,
        span: 3740..3741,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 20,
        span: 3740..3742,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 153,
        column: 23,
        span: 3743..3745,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 25,
        span: 3745..3747,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 153,
        column: 27,
        span: 3748..3749,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 29,
        span: 3750..3751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 153,
        column: 36,
        span: 3751..3758,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 153,
        column: 38,
        span: 3759..3760,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 40,
        span: 3760..3762,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 41,
        span: 3762..3763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 42,
        span: 3763..3764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 154,
        column: 7,
        span: 3765..3771,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 8,
        span: 3771..3772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 154,
        column: 14,
        span: 3772..3778,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 154,
        column: 17,
        span: 3779..3781,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 154,
        column: 19,
        span: 3782..3783,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 20,
        span: 3782..3784,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 154,
        column: 23,
        span: 3785..3787,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 154,
        column: 25,
        span: 3788..3789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 154,
        column: 31,
        span: 3789..3795,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 32,
        span: 3795..3796,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 158,
        column: 0,
        span: 3821..3823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 159,
        column: 9,
        span: 3826..3832,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 10,
        span: 3832..3833,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
        column: 11,
        span: 3832..3834,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 159,
        column: 13,
        span: 3835..3836,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 159,
        column: 15,
        span: 3837..3838,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
        column: 16,
        span: 3837..3839,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 159,
        column: 19,
        span: 3840..3842,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
        column: 21,
        span: 3842..3844,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 159,
        column: 23,
        span: 3845..3846,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
        column: 25,
        span: 3846..3848,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 159,
        column: 27,
        span: 3849..3850,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
        column: 29,
        span: 3850..3852,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 30,
        span: 3852..3853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 160,
        column: 9,
        span: 3856..3862,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 10,
        span: 3862..3863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 160,
        column: 12,
        span: 3863..3865,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 13,
        span: 3865..3866,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 14,
        span: 3866..3867,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 160,
        column: 15,
        span: 3867..3868,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 160,
        column: 16,
        span: 3867..3869,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 17,
        span: 3869..3870,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 160,
        column: 19,
        span: 3871..3872,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 160,
        column: 21,
        span: 3873..3874,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 160,
        column: 22,
        span: 3873..3875,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 160,
        column: 23,
        span: 3875..3876,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 160,
        column: 25,
        span: 3876..3878,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 160,
        column: 27,
        span: 3879..3880,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 29,
        span: 3881..3882,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 160,
        column: 30,
        span: 3882..3883,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 160,
        column: 31,
        span: 3882..3884,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 32,
        span: 3884..3885,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 160,
        column: 34,
        span: 3886..3887,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 160,
        column: 36,
        span: 3887..3889,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 37,
        span: 3889..3890,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 38,
        span: 3890..3891,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 161,
        column: 6,
        span: 3894..3897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 161,
        column: 8,
        span: 3898..3899,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 161,
        column: 10,
        span: 3900..3901,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 161,
        column: 12,
        span: 3902..3903,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
        column: 13,
        span: 3902..3904,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 161,
        column: 14,
        span: 3904..3905,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
        column: 16,
        span: 3905..3907,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 161,
        column: 19,
        span: 3908..3910,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 162,
        column: 8,
        span: 3951..3954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 162,
        column: 10,
        span: 3955..3956,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 162,
        column: 12,
        span: 3957..3958,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 162,
        column: 14,
        span: 3959..3960,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 162,
        column: 15,
        span: 3959..3961,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 162,
        column: 16,
        span: 3961..3962,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 162,
        column: 18,
        span: 3962..3964,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 162,
        column: 0,
        span: 3965..3967,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 164,
        column: 9,
        span: 4023..4025,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 164,
        column: 13,
        span: 4026..4029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 164,
        column: 19,
        span: 4030..4035,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 164,
        column: 22,
        span: 4036..4038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 164,
        column: 24,
        span: 4039..4040,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 164,
        column: 27,
        span: 4041..4043,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 29,
        span: 4043..4045,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 164,
        column: 32,
        span: 4046..4048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 164,
        column: 34,
        span: 4049..4050,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 164,
        column: 36,
        span: 4051..4052,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 38,
        span: 4052..4054,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 164,
        column: 0,
        span: 4055..4059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 165,
        column: 15,
        span: 4068..4074,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 16,
        span: 4074..4075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 165,
        column: 18,
        span: 4075..4077,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 19,
        span: 4077..4078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 165,
        column: 20,
        span: 4078..4079,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 165,
        column: 22,
        span: 4080..4081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 165,
        column: 24,
        span: 4082..4083,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 25,
        span: 4083..4084,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 27,
        span: 4084..4086,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 165,
        column: 29,
        span: 4087..4088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 165,
        column: 31,
        span: 4089..4090,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 165,
        column: 33,
        span: 4091..4092,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 35,
        span: 4093..4094,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 165,
        column: 36,
        span: 4094..4095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 165,
        column: 37,
        span: 4095..4096,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 38,
        span: 4096..4097,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 39,
        span: 4097..4098,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 40,
        span: 4098..4099,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 166,
        column: 0,
        span: 4106..4109,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 167,
        column: 0,
        span: 4114..4117,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 168,
        column: 0,
        span: 4120..4123,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 169,
        column: 0,
        span: 4124..4127,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 172,
        column: 3,
        span: 4186..4188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 172,
        column: 13,
        span: 4189..4198,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 172,
        column: 15,
        span: 4199..4200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 172,
        column: 23,
        span: 4201..4208,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 172,
        column: 0,
        span: 4209..4213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 173,
        column: 9,
        span: 4216..4222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 10,
        span: 4222..4223,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 173,
        column: 13,
        span: 4222..4226,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 173,
        column: 15,
        span: 4227..4228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 173,
        column: 25,
        span: 4229..4238,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 173,
        column: 28,
        span: 4239..4241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 30,
        span: 4242..4243,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 31,
        span: 4242..4244,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 173,
        column: 34,
        span: 4245..4247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 173,
        column: 44,
        span: 4248..4257,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 45,
        span: 4257..4258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 46,
        span: 4258..4259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 174,
        column: 9,
        span: 4262..4268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 10,
        span: 4268..4269,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 174,
        column: 13,
        span: 4268..4272,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 174,
        column: 15,
        span: 4273..4274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 174,
        column: 25,
        span: 4275..4284,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 174,
        column: 27,
        span: 4285..4286,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 174,
        column: 31,
        span: 4286..4290,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 174,
        column: 34,
        span: 4291..4293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 36,
        span: 4294..4295,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 37,
        span: 4294..4296,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 174,
        column: 40,
        span: 4297..4299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 174,
        column: 50,
        span: 4300..4309,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 51,
        span: 4309..4310,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 174,
        column: 53,
        span: 4311..4312,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 174,
        column: 57,
        span: 4312..4316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 58,
        span: 4316..4317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 175,
        column: 9,
        span: 4320..4326,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 10,
        span: 4326..4327,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 175,
        column: 13,
        span: 4326..4330,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 175,
        column: 15,
        span: 4331..4332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 175,
        column: 25,
        span: 4333..4342,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 175,
        column: 27,
        span: 4343..4344,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 175,
        column: 31,
        span: 4344..4348,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 175,
        column: 34,
        span: 4349..4351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 36,
        span: 4352..4353,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 37,
        span: 4352..4354,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 175,
        column: 40,
        span: 4355..4357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 175,
        column: 50,
        span: 4358..4367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 51,
        span: 4367..4368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 52,
        span: 4368..4369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 177,
        column: 9,
        span: 4406..4412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 10,
        span: 4412..4413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 177,
        column: 13,
        span: 4412..4416,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 177,
        column: 15,
        span: 4417..4418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 177,
        column: 25,
        span: 4419..4428,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 177,
        column: 27,
        span: 4429..4430,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 177,
        column: 31,
        span: 4430..4434,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 177,
        column: 34,
        span: 4435..4437,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 36,
        span: 4438..4439,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 177,
        column: 37,
        span: 4438..4440,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 177,
        column: 40,
        span: 4441..4443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 177,
        column: 50,
        span: 4444..4453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 51,
        span: 4453..4454,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 177,
        column: 53,
        span: 4455..4456,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 177,
        column: 55,
        span: 4456..4458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 56,
        span: 4458..4459,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 178,
        column: 5,
        span: 4460..4464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 179,
        column: 9,
        span: 4521..4527,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
        column: 10,
        span: 4527..4528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 179,
        column: 16,
        span: 4528..4534,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 179,
        column: 19,
        span: 4535..4537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 179,
        column: 26,
        span: 4538..4544,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 179,
        column: 28,
        span: 4545..4546,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 179,
        column: 32,
        span: 4546..4550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
        column: 33,
        span: 4550..4551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 180,
        column: 9,
        span: 4554..4560,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 10,
        span: 4560..4561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 180,
        column: 16,
        span: 4561..4567,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 180,
        column: 18,
        span: 4568..4569,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 180,
        column: 20,
        span: 4569..4571,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 180,
        column: 23,
        span: 4572..4574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 180,
        column: 30,
        span: 4575..4581,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 180,
        column: 32,
        span: 4582..4583,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 180,
        column: 36,
        span: 4583..4587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 37,
        span: 4587..4588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 181,
        column: 9,
        span: 4591..4597,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
        column: 10,
        span: 4597..4598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 181,
        column: 16,
        span: 4598..4604,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 181,
        column: 18,
        span: 4605..4606,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
        column: 20,
        span: 4606..4608,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 181,
        column: 23,
        span: 4609..4611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 181,
        column: 30,
        span: 4612..4618,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 181,
        column: 32,
        span: 4619..4620,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 181,
        column: 36,
        span: 4620..4624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
        column: 37,
        span: 4624..4625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 182,
        column: 9,
        span: 4628..4634,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 10,
        span: 4634..4635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 182,
        column: 16,
        span: 4635..4641,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 182,
        column: 19,
        span: 4642..4644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 182,
        column: 26,
        span: 4645..4651,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 182,
        column: 28,
        span: 4652..4653,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 182,
        column: 32,
        span: 4653..4657,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 33,
        span: 4657..4658,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 183,
        column: 0,
        span: 4659..4662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 184,
        column: 7,
        span: 4663..4669,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 8,
        span: 4669..4670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 184,
        column: 14,
        span: 4670..4676,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 184,
        column: 16,
        span: 4677..4678,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 184,
        column: 20,
        span: 4678..4682,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 184,
        column: 23,
        span: 4683..4685,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 184,
        column: 27,
        span: 4685..4689,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 184,
        column: 29,
        span: 4690..4691,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 31,
        span: 4692..4693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 184,
        column: 38,
        span: 4693..4700,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 184,
        column: 40,
        span: 4701..4702,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 184,
        column: 42,
        span: 4702..4704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 43,
        span: 4704..4705,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 184,
        column: 45,
        span: 4706..4707,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 184,
        column: 49,
        span: 4707..4711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 50,
        span: 4711..4712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 185,
        column: 7,
        span: 4713..4719,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 8,
        span: 4719..4720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 185,
        column: 14,
        span: 4720..4726,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 185,
        column: 16,
        span: 4727..4728,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 185,
        column: 20,
        span: 4728..4732,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 185,
        column: 23,
        span: 4733..4735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 185,
        column: 30,
        span: 4736..4742,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 31,
        span: 4742..4743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 186,
        column: 7,
        span: 4744..4750,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 8,
        span: 4750..4751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 186,
        column: 14,
        span: 4751..4757,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 186,
        column: 16,
        span: 4758..4759,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 186,
        column: 20,
        span: 4759..4763,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 186,
        column: 23,
        span: 4764..4766,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 186,
        column: 25,
        span: 4767..4768,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 186,
        column: 28,
        span: 4767..4771,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 186,
        column: 30,
        span: 4772..4773,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 32,
        span: 4774..4775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 186,
        column: 39,
        span: 4775..4782,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 186,
        column: 41,
        span: 4783..4784,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 43,
        span: 4784..4786,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 44,
        span: 4786..4787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 45,
        span: 4787..4788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 190,
        column: 7,
        span: 4828..4834,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 8,
        span: 4834..4835,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
        column: 9,
        span: 4834..4836,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 190,
        column: 11,
        span: 4837..4838,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 190,
        column: 15,
        span: 4838..4842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 16,
        span: 4842..4843,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 190,
        column: 17,
        span: 4843..4844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 190,
        column: 24,
        span: 4845..4851,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 25,
        span: 4851..4852,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 190,
        column: 28,
        span: 4852..4855,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 30,
        span: 4856..4857,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
        column: 31,
        span: 4856..4858,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 190,
        column: 33,
        span: 4859..4860,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
            ),
        ),
        line: 190,
        column: 37,
        span: 4860..4864,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 38,
        span: 4864..4865,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 39,
        span: 4865..4866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 191,
        column: 7,
        span: 4867..4873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 8,
        span: 4873..4874,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 9,
        span: 4873..4875,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 191,
        column: 12,
        span: 4876..4878,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 191,
        column: 16,
        span: 4878..4882,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 17,
        span: 4882..4883,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 191,
        column: 18,
        span: 4883..4884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 191,
        column: 25,
        span: 4885..4891,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 26,
        span: 4891..4892,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 191,
        column: 29,
        span: 4892..4895,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 31,
        span: 4896..4897,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 32,
        span: 4896..4898,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 191,
        column: 35,
        span: 4899..4901,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
            ),
        ),
        line: 191,
        column: 39,
        span: 4901..4905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 40,
        span: 4905..4906,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 41,
        span: 4906..4907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 192,
        column: 7,
        span: 4908..4914,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 8,
        span: 4914..4915,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 192,
        column: 9,
        span: 4915..4916,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 192,
        column: 10,
        span: 4915..4917,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 192,
        column: 12,
        span: 4918..4919,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 192,
        column: 14,
        span: 4920..4921,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
            ),
        ),
        line: 192,
        column: 17,
        span: 4920..4924,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 18,
        span: 4924..4925,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 192,
        column: 19,
        span: 4925..4926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 192,
        column: 26,
        span: 4927..4933,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 27,
        span: 4933..4934,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 192,
        column: 30,
        span: 4934..4937,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 32,
        span: 4938..4939,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 192,
        column: 33,
        span: 4939..4940,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 192,
        column: 34,
        span: 4939..4941,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 192,
        column: 36,
        span: 4942..4943,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 192,
        column: 38,
        span: 4944..4945,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 192,
        column: 41,
        span: 4944..4948,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 42,
        span: 4948..4949,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 43,
        span: 4949..4950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 193,
        column: 7,
        span: 4951..4957,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 8,
        span: 4957..4958,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 9,
        span: 4957..4959,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 193,
        column: 12,
        span: 4960..4962,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 193,
        column: 16,
        span: 4962..4966,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 17,
        span: 4966..4967,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 193,
        column: 18,
        span: 4967..4968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 193,
        column: 25,
        span: 4969..4975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 26,
        span: 4975..4976,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 193,
        column: 29,
        span: 4976..4979,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 31,
        span: 4980..4981,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 193,
        column: 32,
        span: 4981..4982,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 33,
        span: 4981..4983,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 193,
        column: 36,
        span: 4984..4986,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 193,
        column: 38,
        span: 4987..4988,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 193,
        column: 41,
        span: 4987..4991,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 42,
        span: 4991..4992,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 43,
        span: 4992..4993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 194,
        column: 7,
        span: 4994..5000,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 8,
        span: 5000..5001,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 194,
        column: 9,
        span: 5001..5002,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 194,
        column: 10,
        span: 5001..5003,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 194,
        column: 12,
        span: 5004..5005,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 194,
        column: 14,
        span: 5006..5007,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
            ),
        ),
        line: 194,
        column: 17,
        span: 5006..5010,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 18,
        span: 5010..5011,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 194,
        column: 19,
        span: 5011..5012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 194,
        column: 26,
        span: 5013..5019,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 27,
        span: 5019..5020,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 194,
        column: 30,
        span: 5020..5023,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 32,
        span: 5024..5025,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 194,
        column: 33,
        span: 5025..5026,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 194,
        column: 34,
        span: 5025..5027,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 194,
        column: 36,
        span: 5028..5029,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 194,
        column: 38,
        span: 5030..5031,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 194,
        column: 41,
        span: 5030..5034,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 42,
        span: 5034..5035,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 43,
        span: 5035..5036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 195,
        column: 7,
        span: 5037..5043,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 8,
        span: 5043..5044,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 195,
        column: 9,
        span: 5044..5045,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
        column: 10,
        span: 5044..5046,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 195,
        column: 13,
        span: 5047..5049,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 195,
        column: 15,
        span: 5050..5051,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
            ),
        ),
        line: 195,
        column: 18,
        span: 5050..5054,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 19,
        span: 5054..5055,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 195,
        column: 20,
        span: 5055..5056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 195,
        column: 27,
        span: 5057..5063,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 28,
        span: 5063..5064,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 195,
        column: 31,
        span: 5064..5067,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 33,
        span: 5068..5069,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 195,
        column: 34,
        span: 5069..5070,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
        column: 35,
        span: 5069..5071,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 195,
        column: 38,
        span: 5072..5074,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 195,
        column: 40,
        span: 5075..5076,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 195,
        column: 43,
        span: 5075..5079,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 44,
        span: 5079..5080,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 45,
        span: 5080..5081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 196,
        column: 7,
        span: 5082..5088,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 8,
        span: 5088..5089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 196,
        column: 14,
        span: 5089..5095,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 196,
        column: 17,
        span: 5096..5098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 196,
        column: 24,
        span: 5099..5105,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 196,
        column: 26,
        span: 5106..5107,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 196,
        column: 30,
        span: 5107..5111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 31,
        span: 5111..5112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 197,
        column: 7,
        span: 5113..5119,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 8,
        span: 5119..5120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 197,
        column: 14,
        span: 5120..5126,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 197,
        column: 16,
        span: 5127..5128,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 197,
        column: 20,
        span: 5128..5132,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 197,
        column: 23,
        span: 5133..5135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 197,
        column: 30,
        span: 5136..5142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 31,
        span: 5142..5143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 198,
        column: 7,
        span: 5144..5150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 8,
        span: 5150..5151,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 198,
        column: 11,
        span: 5151..5154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 13,
        span: 5155..5156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 198,
        column: 19,
        span: 5156..5162,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 198,
        column: 21,
        span: 5163..5164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 198,
        column: 28,
        span: 5165..5171,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 198,
        column: 30,
        span: 5172..5173,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 198,
        column: 34,
        span: 5173..5177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 35,
        span: 5177..5178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 36,
        span: 5178..5179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 199,
        column: 7,
        span: 5180..5186,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 8,
        span: 5186..5187,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 199,
        column: 11,
        span: 5187..5190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 13,
        span: 5191..5192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 199,
        column: 19,
        span: 5192..5198,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 199,
        column: 21,
        span: 5199..5200,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 199,
        column: 25,
        span: 5200..5204,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 199,
        column: 27,
        span: 5205..5206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 199,
        column: 34,
        span: 5207..5213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 35,
        span: 5213..5214,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 36,
        span: 5214..5215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 200,
        column: 7,
        span: 5216..5222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 8,
        span: 5222..5223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 200,
        column: 14,
        span: 5223..5229,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 200,
        column: 16,
        span: 5230..5231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 200,
        column: 23,
        span: 5232..5238,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 200,
        column: 25,
        span: 5239..5240,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 200,
        column: 27,
        span: 5241..5242,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 200,
        column: 30,
        span: 5241..5245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 31,
        span: 5245..5246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 201,
        column: 7,
        span: 5247..5253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 8,
        span: 5253..5254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 201,
        column: 14,
        span: 5254..5260,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 201,
        column: 17,
        span: 5261..5263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 201,
        column: 24,
        span: 5264..5270,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 201,
        column: 26,
        span: 5271..5272,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 201,
        column: 28,
        span: 5273..5274,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 201,
        column: 31,
        span: 5273..5277,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 32,
        span: 5277..5278,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 203,
        column: 0,
        span: 5280..5282,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 204,
        column: 8,
        span: 5285..5290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmaxi1",
        ),
        line: 204,
        column: 15,
        span: 5291..5297,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 204,
        column: 17,
        span: 5298..5299,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 19,
        span: 5299..5301,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 204,
        column: 21,
        span: 5302..5303,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 23,
        span: 5304..5305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 204,
        column: 30,
        span: 5305..5312,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 204,
        column: 32,
        span: 5313..5314,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 34,
        span: 5314..5316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 35,
        span: 5316..5317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 205,
        column: 9,
        span: 5320..5326,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 10,
        span: 5326..5327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 205,
        column: 16,
        span: 5327..5333,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 205,
        column: 18,
        span: 5334..5335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmaxi1",
        ),
        line: 205,
        column: 25,
        span: 5336..5342,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 26,
        span: 5342..5343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 206,
        column: 9,
        span: 5346..5352,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 10,
        span: 5352..5353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 206,
        column: 16,
        span: 5353..5359,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 206,
        column: 19,
        span: 5360..5362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmaxi1",
        ),
        line: 206,
        column: 26,
        span: 5363..5369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 27,
        span: 5369..5370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 207,
        column: 9,
        span: 5373..5379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 10,
        span: 5379..5380,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 207,
        column: 13,
        span: 5380..5383,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 15,
        span: 5384..5385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmaxi1",
        ),
        line: 207,
        column: 21,
        span: 5385..5391,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 207,
        column: 24,
        span: 5392..5394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 207,
        column: 31,
        span: 5395..5401,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 32,
        span: 5401..5402,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 33,
        span: 5402..5403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 208,
        column: 9,
        span: 5406..5412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 10,
        span: 5412..5413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 208,
        column: 16,
        span: 5413..5419,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 208,
        column: 19,
        span: 5420..5422,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 208,
        column: 21,
        span: 5423..5424,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 22,
        span: 5423..5425,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 208,
        column: 24,
        span: 5426..5427,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 26,
        span: 5428..5429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 208,
        column: 33,
        span: 5429..5436,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 208,
        column: 35,
        span: 5437..5438,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 37,
        span: 5438..5440,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 38,
        span: 5440..5441,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 39,
        span: 5441..5442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 209,
        column: 9,
        span: 5445..5451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 10,
        span: 5451..5452,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 209,
        column: 11,
        span: 5452..5453,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 12,
        span: 5452..5454,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 209,
        column: 14,
        span: 5455..5456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 16,
        span: 5457..5458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 209,
        column: 23,
        span: 5458..5465,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 209,
        column: 25,
        span: 5466..5467,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 27,
        span: 5467..5469,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 28,
        span: 5469..5470,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 209,
        column: 31,
        span: 5471..5473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 209,
        column: 38,
        span: 5474..5480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 39,
        span: 5480..5481,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 210,
        column: 0,
        span: 5482..5485,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 212,
        column: 3,
        span: 5487..5489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 212,
        column: 13,
        span: 5490..5499,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 212,
        column: 15,
        span: 5500..5501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 212,
        column: 23,
        span: 5502..5509,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 212,
        column: 0,
        span: 5510..5514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 213,
        column: 8,
        span: 5517..5522,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 9,
        span: 5522..5523,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing order (floats cannot represent all integers)\"",
        ),
        line: 213,
        column: 63,
        span: 5523..5577,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 64,
        span: 5577..5578,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 214,
        column: 8,
        span: 5581..5586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 214,
        column: 13,
        span: 5587..5591,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 214,
        column: 15,
        span: 5592..5593,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 17,
        span: 5593..5595,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 214,
        column: 19,
        span: 5596..5597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 214,
        column: 0,
        span: 5598..5607,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 215,
        column: 8,
        span: 5610..5615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 215,
        column: 14,
        span: 5616..5621,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 215,
        column: 16,
        span: 5622..5623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 215,
        column: 21,
        span: 5624..5628,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 215,
        column: 23,
        span: 5629..5630,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
        column: 0,
        span: 5630..5632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 216,
        column: 9,
        span: 5635..5641,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 10,
        span: 5641..5642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 216,
        column: 14,
        span: 5642..5646,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 216,
        column: 16,
        span: 5647..5648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 216,
        column: 22,
        span: 5649..5654,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 216,
        column: 24,
        span: 5655..5656,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 26,
        span: 5656..5658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 27,
        span: 5658..5659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 217,
        column: 9,
        span: 5662..5668,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 10,
        span: 5668..5669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 217,
        column: 14,
        span: 5669..5673,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 217,
        column: 16,
        span: 5674..5675,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
        column: 18,
        span: 5675..5677,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 217,
        column: 20,
        span: 5678..5679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 217,
        column: 26,
        span: 5680..5685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 27,
        span: 5685..5686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 218,
        column: 9,
        span: 5689..5695,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 10,
        span: 5695..5696,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 218,
        column: 11,
        span: 5696..5697,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 12,
        span: 5697..5698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 218,
        column: 16,
        span: 5698..5702,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 218,
        column: 18,
        span: 5703..5704,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 218,
        column: 20,
        span: 5704..5706,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 21,
        span: 5706..5707,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 218,
        column: 23,
        span: 5708..5709,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 218,
        column: 25,
        span: 5710..5711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 218,
        column: 30,
        span: 5711..5716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 31,
        span: 5716..5717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 219,
        column: 9,
        span: 5720..5726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 10,
        span: 5726..5727,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 219,
        column: 13,
        span: 5727..5730,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 15,
        span: 5731..5732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 219,
        column: 19,
        span: 5732..5736,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 219,
        column: 22,
        span: 5737..5739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 219,
        column: 28,
        span: 5740..5745,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 219,
        column: 30,
        span: 5746..5747,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 219,
        column: 32,
        span: 5747..5749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 33,
        span: 5749..5750,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 34,
        span: 5750..5751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 220,
        column: 9,
        span: 5754..5760,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 10,
        span: 5760..5761,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 220,
        column: 11,
        span: 5761..5762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 220,
        column: 15,
        span: 5762..5766,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 220,
        column: 17,
        span: 5767..5768,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 220,
        column: 19,
        span: 5769..5770,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 20,
        span: 5770..5771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 220,
        column: 25,
        span: 5771..5776,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 220,
        column: 27,
        span: 5777..5778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 220,
        column: 29,
        span: 5778..5780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 30,
        span: 5780..5781,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 31,
        span: 5781..5782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 221,
        column: 9,
        span: 5785..5791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 10,
        span: 5791..5792,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 221,
        column: 13,
        span: 5792..5795,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 15,
        span: 5796..5797,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 221,
        column: 16,
        span: 5797..5798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 221,
        column: 20,
        span: 5798..5802,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 221,
        column: 23,
        span: 5803..5805,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 221,
        column: 25,
        span: 5806..5807,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 26,
        span: 5807..5808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 221,
        column: 31,
        span: 5808..5813,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 221,
        column: 33,
        span: 5814..5815,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
        column: 35,
        span: 5815..5817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 36,
        span: 5817..5818,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 37,
        span: 5818..5819,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 38,
        span: 5819..5820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 223,
        column: 9,
        span: 5824..5830,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 10,
        span: 5830..5831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 223,
        column: 14,
        span: 5831..5835,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 223,
        column: 16,
        span: 5836..5837,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 18,
        span: 5837..5839,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 223,
        column: 20,
        span: 5840..5841,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 223,
        column: 24,
        span: 5841..5845,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 223,
        column: 26,
        span: 5846..5847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 223,
        column: 32,
        span: 5848..5853,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 223,
        column: 35,
        span: 5854..5856,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 37,
        span: 5856..5858,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 38,
        span: 5858..5859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 224,
        column: 9,
        span: 5862..5868,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 10,
        span: 5868..5869,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 224,
        column: 11,
        span: 5869..5870,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 12,
        span: 5870..5871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmax",
        ),
        line: 224,
        column: 16,
        span: 5871..5875,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 224,
        column: 18,
        span: 5876..5877,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 224,
        column: 20,
        span: 5877..5879,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 224,
        column: 22,
        span: 5880..5881,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 224,
        column: 26,
        span: 5881..5885,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 27,
        span: 5885..5886,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 224,
        column: 29,
        span: 5887..5888,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 224,
        column: 31,
        span: 5889..5890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ifmax",
        ),
        line: 224,
        column: 36,
        span: 5890..5895,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 224,
        column: 39,
        span: 5896..5898,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 224,
        column: 41,
        span: 5898..5900,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 42,
        span: 5900..5901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 226,
        column: 9,
        span: 5905..5911,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 10,
        span: 5911..5912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 226,
        column: 16,
        span: 5912..5918,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 226,
        column: 18,
        span: 5919..5920,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
        column: 20,
        span: 5920..5922,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 226,
        column: 22,
        span: 5923..5924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 226,
        column: 30,
        span: 5925..5932,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 31,
        span: 5932..5933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 227,
        column: 9,
        span: 5936..5942,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 10,
        span: 5942..5943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 227,
        column: 16,
        span: 5943..5949,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 227,
        column: 18,
        span: 5950..5951,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 227,
        column: 20,
        span: 5952..5953,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
        column: 21,
        span: 5952..5954,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 227,
        column: 23,
        span: 5955..5956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 227,
        column: 31,
        span: 5957..5964,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 32,
        span: 5964..5965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 228,
        column: 9,
        span: 5968..5974,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 10,
        span: 5974..5975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 228,
        column: 16,
        span: 5975..5981,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 228,
        column: 19,
        span: 5982..5984,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 228,
        column: 21,
        span: 5984..5986,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 228,
        column: 23,
        span: 5987..5988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 228,
        column: 31,
        span: 5989..5996,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 32,
        span: 5996..5997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 229,
        column: 9,
        span: 6000..6006,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
        column: 10,
        span: 6006..6007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 229,
        column: 16,
        span: 6007..6013,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 229,
        column: 19,
        span: 6014..6016,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 229,
        column: 21,
        span: 6017..6018,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 229,
        column: 22,
        span: 6017..6019,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 229,
        column: 24,
        span: 6020..6021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 229,
        column: 32,
        span: 6022..6029,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
        column: 33,
        span: 6029..6030,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 230,
        column: 0,
        span: 6031..6035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 231,
        column: 8,
        span: 6038..6043,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 9,
        span: 6043..6044,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing order (floats can represent all integers)\"",
        ),
        line: 231,
        column: 60,
        span: 6044..6095,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 61,
        span: 6095..6096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 232,
        column: 9,
        span: 6099..6105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
        column: 10,
        span: 6105..6106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 232,
        column: 16,
        span: 6106..6112,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 232,
        column: 18,
        span: 6113..6114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 232,
        column: 25,
        span: 6115..6121,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 232,
        column: 27,
        span: 6122..6123,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 232,
        column: 31,
        span: 6123..6127,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
        column: 32,
        span: 6127..6128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 233,
        column: 9,
        span: 6131..6137,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 233,
        column: 10,
        span: 6137..6138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 233,
        column: 16,
        span: 6138..6144,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 233,
        column: 18,
        span: 6145..6146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 233,
        column: 25,
        span: 6147..6153,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 233,
        column: 27,
        span: 6154..6155,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 233,
        column: 31,
        span: 6155..6159,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 233,
        column: 32,
        span: 6159..6160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 234,
        column: 9,
        span: 6163..6169,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 10,
        span: 6169..6170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 234,
        column: 16,
        span: 6170..6176,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 234,
        column: 18,
        span: 6177..6178,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 234,
        column: 22,
        span: 6178..6182,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 234,
        column: 24,
        span: 6183..6184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 234,
        column: 31,
        span: 6185..6191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 32,
        span: 6191..6192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 235,
        column: 9,
        span: 6195..6201,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 10,
        span: 6201..6202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 235,
        column: 16,
        span: 6202..6208,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 235,
        column: 18,
        span: 6209..6210,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 235,
        column: 22,
        span: 6210..6214,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 235,
        column: 24,
        span: 6215..6216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 235,
        column: 31,
        span: 6217..6223,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 32,
        span: 6223..6224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 236,
        column: 9,
        span: 6227..6233,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 10,
        span: 6233..6234,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 236,
        column: 13,
        span: 6234..6237,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 15,
        span: 6238..6239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 236,
        column: 21,
        span: 6239..6245,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 236,
        column: 23,
        span: 6246..6247,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 236,
        column: 27,
        span: 6247..6251,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 236,
        column: 29,
        span: 6252..6253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 236,
        column: 36,
        span: 6254..6260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 37,
        span: 6260..6261,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 38,
        span: 6261..6262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 237,
        column: 9,
        span: 6265..6271,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 10,
        span: 6271..6272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 237,
        column: 16,
        span: 6272..6278,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 237,
        column: 18,
        span: 6279..6280,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 237,
        column: 22,
        span: 6280..6284,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 237,
        column: 25,
        span: 6285..6287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 237,
        column: 32,
        span: 6288..6294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 33,
        span: 6294..6295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 238,
        column: 9,
        span: 6298..6304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 10,
        span: 6304..6305,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 238,
        column: 13,
        span: 6305..6308,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 15,
        span: 6309..6310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 238,
        column: 21,
        span: 6310..6316,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 238,
        column: 23,
        span: 6317..6318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 238,
        column: 30,
        span: 6319..6325,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 238,
        column: 32,
        span: 6326..6327,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 238,
        column: 36,
        span: 6327..6331,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 37,
        span: 6331..6332,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 38,
        span: 6332..6333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 239,
        column: 9,
        span: 6336..6342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 10,
        span: 6342..6343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 239,
        column: 16,
        span: 6343..6349,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 239,
        column: 18,
        span: 6350..6351,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 239,
        column: 22,
        span: 6351..6355,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 239,
        column: 25,
        span: 6356..6358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 239,
        column: 32,
        span: 6359..6365,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 33,
        span: 6365..6366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 240,
        column: 9,
        span: 6369..6375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 10,
        span: 6375..6376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 240,
        column: 16,
        span: 6376..6382,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 240,
        column: 19,
        span: 6383..6385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 240,
        column: 26,
        span: 6386..6392,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 240,
        column: 28,
        span: 6393..6394,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 240,
        column: 32,
        span: 6394..6398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 33,
        span: 6398..6399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 241,
        column: 9,
        span: 6402..6408,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 10,
        span: 6408..6409,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 241,
        column: 13,
        span: 6409..6412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 15,
        span: 6413..6414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 241,
        column: 21,
        span: 6414..6420,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 241,
        column: 23,
        span: 6421..6422,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 241,
        column: 27,
        span: 6422..6426,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 241,
        column: 30,
        span: 6427..6429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 241,
        column: 37,
        span: 6430..6436,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 38,
        span: 6436..6437,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 39,
        span: 6437..6438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 242,
        column: 9,
        span: 6441..6447,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 10,
        span: 6447..6448,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 242,
        column: 13,
        span: 6448..6451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 15,
        span: 6452..6453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 242,
        column: 21,
        span: 6453..6459,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 242,
        column: 23,
        span: 6460..6461,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 242,
        column: 27,
        span: 6461..6465,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 242,
        column: 30,
        span: 6466..6468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 242,
        column: 37,
        span: 6469..6475,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 38,
        span: 6475..6476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 39,
        span: 6476..6477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 243,
        column: 9,
        span: 6480..6486,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 10,
        span: 6486..6487,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 243,
        column: 13,
        span: 6487..6490,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 15,
        span: 6491..6492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 243,
        column: 21,
        span: 6492..6498,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 243,
        column: 24,
        span: 6499..6501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 243,
        column: 31,
        span: 6502..6508,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 243,
        column: 33,
        span: 6509..6510,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 243,
        column: 37,
        span: 6510..6514,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 38,
        span: 6514..6515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 39,
        span: 6515..6516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 244,
        column: 9,
        span: 6519..6525,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
        column: 10,
        span: 6525..6526,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 244,
        column: 13,
        span: 6526..6529,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
        column: 15,
        span: 6530..6531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 244,
        column: 21,
        span: 6531..6537,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 244,
        column: 24,
        span: 6538..6540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 244,
        column: 31,
        span: 6541..6547,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 244,
        column: 33,
        span: 6548..6549,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 244,
        column: 37,
        span: 6549..6553,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 38,
        span: 6553..6554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 39,
        span: 6554..6555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 246,
        column: 9,
        span: 6559..6565,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 10,
        span: 6565..6566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 246,
        column: 16,
        span: 6566..6572,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 246,
        column: 18,
        span: 6573..6574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 246,
        column: 25,
        span: 6575..6581,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 246,
        column: 27,
        span: 6582..6583,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 246,
        column: 31,
        span: 6583..6587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 32,
        span: 6587..6588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 247,
        column: 9,
        span: 6591..6597,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 10,
        span: 6597..6598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 247,
        column: 16,
        span: 6598..6604,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 247,
        column: 18,
        span: 6605..6606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 247,
        column: 25,
        span: 6607..6613,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 247,
        column: 27,
        span: 6614..6615,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 247,
        column: 31,
        span: 6615..6619,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 32,
        span: 6619..6620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 248,
        column: 9,
        span: 6623..6629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
        column: 10,
        span: 6629..6630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 248,
        column: 16,
        span: 6630..6636,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 248,
        column: 19,
        span: 6637..6639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 248,
        column: 26,
        span: 6640..6646,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 248,
        column: 28,
        span: 6647..6648,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 248,
        column: 32,
        span: 6648..6652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
        column: 33,
        span: 6652..6653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 249,
        column: 9,
        span: 6656..6662,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 10,
        span: 6662..6663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 249,
        column: 16,
        span: 6663..6669,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 249,
        column: 18,
        span: 6670..6671,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 249,
        column: 22,
        span: 6671..6675,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 249,
        column: 24,
        span: 6676..6677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 249,
        column: 31,
        span: 6678..6684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 32,
        span: 6684..6685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 250,
        column: 9,
        span: 6688..6694,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 10,
        span: 6694..6695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 250,
        column: 16,
        span: 6695..6701,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 250,
        column: 18,
        span: 6702..6703,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 250,
        column: 22,
        span: 6703..6707,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 250,
        column: 25,
        span: 6708..6710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 250,
        column: 32,
        span: 6711..6717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 33,
        span: 6717..6718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 251,
        column: 9,
        span: 6721..6727,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 10,
        span: 6727..6728,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 251,
        column: 13,
        span: 6728..6731,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 15,
        span: 6732..6733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 251,
        column: 21,
        span: 6733..6739,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 251,
        column: 23,
        span: 6740..6741,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 251,
        column: 27,
        span: 6741..6745,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 251,
        column: 29,
        span: 6746..6747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 251,
        column: 36,
        span: 6748..6754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 37,
        span: 6754..6755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 38,
        span: 6755..6756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 252,
        column: 9,
        span: 6759..6765,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 10,
        span: 6765..6766,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 252,
        column: 13,
        span: 6766..6769,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 15,
        span: 6770..6771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 252,
        column: 21,
        span: 6771..6777,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 252,
        column: 23,
        span: 6778..6779,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 252,
        column: 27,
        span: 6779..6783,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 252,
        column: 29,
        span: 6784..6785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 252,
        column: 36,
        span: 6786..6792,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 37,
        span: 6792..6793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 38,
        span: 6793..6794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 253,
        column: 9,
        span: 6797..6803,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 10,
        span: 6803..6804,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 253,
        column: 13,
        span: 6804..6807,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 15,
        span: 6808..6809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 253,
        column: 21,
        span: 6809..6815,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 253,
        column: 23,
        span: 6816..6817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 253,
        column: 30,
        span: 6818..6824,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 253,
        column: 32,
        span: 6825..6826,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 253,
        column: 36,
        span: 6826..6830,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 37,
        span: 6830..6831,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 38,
        span: 6831..6832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 254,
        column: 9,
        span: 6835..6841,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 10,
        span: 6841..6842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 254,
        column: 16,
        span: 6842..6848,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 254,
        column: 18,
        span: 6849..6850,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 254,
        column: 22,
        span: 6850..6854,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 254,
        column: 25,
        span: 6855..6857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 254,
        column: 32,
        span: 6858..6864,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 33,
        span: 6864..6865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 255,
        column: 9,
        span: 6868..6874,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 10,
        span: 6874..6875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 255,
        column: 16,
        span: 6875..6881,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 255,
        column: 19,
        span: 6882..6884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 255,
        column: 26,
        span: 6885..6891,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 255,
        column: 28,
        span: 6892..6893,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 255,
        column: 32,
        span: 6893..6897,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 33,
        span: 6897..6898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 256,
        column: 9,
        span: 6901..6907,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 10,
        span: 6907..6908,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 256,
        column: 13,
        span: 6908..6911,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 15,
        span: 6912..6913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 256,
        column: 21,
        span: 6913..6919,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 256,
        column: 23,
        span: 6920..6921,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 256,
        column: 27,
        span: 6921..6925,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 256,
        column: 30,
        span: 6926..6928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 256,
        column: 37,
        span: 6929..6935,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 38,
        span: 6935..6936,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 39,
        span: 6936..6937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 257,
        column: 9,
        span: 6940..6946,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 10,
        span: 6946..6947,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 257,
        column: 13,
        span: 6947..6950,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 15,
        span: 6951..6952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 257,
        column: 21,
        span: 6952..6958,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 257,
        column: 23,
        span: 6959..6960,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 257,
        column: 27,
        span: 6960..6964,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 257,
        column: 30,
        span: 6965..6967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 257,
        column: 37,
        span: 6968..6974,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 38,
        span: 6974..6975,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 39,
        span: 6975..6976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 258,
        column: 9,
        span: 6979..6985,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 10,
        span: 6985..6986,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 258,
        column: 13,
        span: 6986..6989,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 15,
        span: 6990..6991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 258,
        column: 21,
        span: 6991..6997,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 258,
        column: 24,
        span: 6998..7000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 258,
        column: 31,
        span: 7001..7007,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 258,
        column: 33,
        span: 7008..7009,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 258,
        column: 37,
        span: 7009..7013,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 38,
        span: 7013..7014,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 39,
        span: 7014..7015,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 259,
        column: 0,
        span: 7016..7019,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 261,
        column: 0,
        span: 7021..7023,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 262,
        column: 8,
        span: 7026..7031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 262,
        column: 12,
        span: 7032..7035,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 262,
        column: 14,
        span: 7036..7037,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
        column: 16,
        span: 7037..7039,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 262,
        column: 18,
        span: 7040..7041,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
        column: 0,
        span: 7041..7043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 263,
        column: 9,
        span: 7046..7052,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 10,
        span: 7052..7053,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 263,
        column: 13,
        span: 7053..7056,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 15,
        span: 7057..7058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 263,
        column: 18,
        span: 7058..7061,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 263,
        column: 20,
        span: 7062..7063,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 263,
        column: 22,
        span: 7063..7065,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 23,
        span: 7065..7066,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 24,
        span: 7066..7067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 264,
        column: 9,
        span: 7070..7076,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 10,
        span: 7076..7077,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 264,
        column: 13,
        span: 7077..7080,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 15,
        span: 7081..7082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 264,
        column: 18,
        span: 7082..7085,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 264,
        column: 20,
        span: 7086..7087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 264,
        column: 27,
        span: 7088..7094,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 28,
        span: 7094..7095,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 29,
        span: 7095..7096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 265,
        column: 9,
        span: 7099..7105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 10,
        span: 7105..7106,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 265,
        column: 13,
        span: 7106..7109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 15,
        span: 7110..7111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 265,
        column: 18,
        span: 7111..7114,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 265,
        column: 21,
        span: 7115..7117,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 265,
        column: 23,
        span: 7118..7119,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
        column: 24,
        span: 7118..7120,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 25,
        span: 7120..7121,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 26,
        span: 7121..7122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 266,
        column: 9,
        span: 7125..7131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 10,
        span: 7131..7132,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 266,
        column: 13,
        span: 7132..7135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 15,
        span: 7136..7137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 266,
        column: 18,
        span: 7137..7140,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 266,
        column: 21,
        span: 7141..7143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 266,
        column: 28,
        span: 7144..7150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 29,
        span: 7150..7151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 30,
        span: 7151..7152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 267,
        column: 9,
        span: 7155..7161,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 10,
        span: 7161..7162,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 267,
        column: 13,
        span: 7162..7165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 15,
        span: 7166..7167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 267,
        column: 18,
        span: 7167..7170,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 267,
        column: 20,
        span: 7171..7172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 267,
        column: 27,
        span: 7173..7179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 28,
        span: 7179..7180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 29,
        span: 7180..7181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 268,
        column: 9,
        span: 7184..7190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 10,
        span: 7190..7191,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 268,
        column: 13,
        span: 7191..7194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 15,
        span: 7195..7196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 268,
        column: 21,
        span: 7196..7202,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 268,
        column: 24,
        span: 7203..7205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 268,
        column: 28,
        span: 7206..7209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 29,
        span: 7209..7210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 30,
        span: 7210..7211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 269,
        column: 9,
        span: 7214..7220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 10,
        span: 7220..7221,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 269,
        column: 13,
        span: 7221..7224,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 15,
        span: 7225..7226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 269,
        column: 21,
        span: 7226..7232,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 269,
        column: 23,
        span: 7233..7234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 269,
        column: 27,
        span: 7235..7238,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 28,
        span: 7238..7239,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 29,
        span: 7239..7240,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 270,
        column: 0,
        span: 7241..7244,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 274,
        column: 6,
        span: 7282..7287,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 274,
        column: 15,
        span: 7288..7296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkcompt",
        ),
        line: 274,
        column: 26,
        span: 7297..7307,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 27,
        span: 7307..7308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 274,
        column: 30,
        span: 7308..7311,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
        column: 31,
        span: 7311..7312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        line: 274,
        column: 36,
        span: 7313..7317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 37,
        span: 7317..7318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 275,
        column: 13,
        span: 7321..7331,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 14,
        span: 7331..7332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 275,
        column: 17,
        span: 7332..7335,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
        column: 18,
        span: 7335..7336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 275,
        column: 25,
        span: 7337..7343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 26,
        span: 7343..7344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 275,
        column: 30,
        span: 7344..7348,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 31,
        span: 7348..7349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        line: 275,
        column: 35,
        span: 7349..7353,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 36,
        span: 7353..7354,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 37,
        span: 7354..7355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 38,
        span: 7355..7356,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 276,
        column: 0,
        span: 7357..7360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkcompt",
        ),
        line: 277,
        column: 11,
        span: 7361..7371,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 12,
        span: 7371..7372,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"divide by zero\"",
        ),
        line: 277,
        column: 28,
        span: 7372..7388,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 29,
        span: 7388..7389,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 2 // 0\"",
        ),
        line: 277,
        column: 45,
        span: 7390..7405,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 46,
        span: 7405..7406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkcompt",
        ),
        line: 278,
        column: 11,
        span: 7407..7417,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 12,
        span: 7417..7418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 278,
        column: 18,
        span: 7418..7424,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 278,
        column: 19,
        span: 7424..7425,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 2.3 >> 0\"",
        ),
        line: 278,
        column: 37,
        span: 7426..7443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 38,
        span: 7443..7444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkcompt",
        ),
        line: 279,
        column: 11,
        span: 7445..7455,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 12,
        span: 7455..7456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 279,
        column: 18,
        span: 7456..7462,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 279,
        column: 19,
        span: 7462..7463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 21,
        span: 7464..7465,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 2.0^%d & 1\"",
        ),
        line: 279,
        column: 40,
        span: 7465..7484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 41,
        span: 7484..7485,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 279,
        column: 42,
        span: 7485..7486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 279,
        column: 48,
        span: 7486..7492,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 49,
        span: 7492..7493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 279,
        column: 56,
        span: 7493..7500,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 279,
        column: 58,
        span: 7501..7502,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 279,
        column: 60,
        span: 7502..7504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 61,
        span: 7504..7505,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 62,
        span: 7505..7506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkcompt",
        ),
        line: 280,
        column: 11,
        span: 7507..7517,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 12,
        span: 7517..7518,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'huge'\"",
        ),
        line: 280,
        column: 26,
        span: 7518..7532,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 280,
        column: 27,
        span: 7532..7533,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return math.huge << 1\"",
        ),
        line: 280,
        column: 51,
        span: 7534..7557,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
        column: 52,
        span: 7557..7558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkcompt",
        ),
        line: 281,
        column: 11,
        span: 7559..7569,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 281,
        column: 12,
        span: 7569..7570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 281,
        column: 18,
        span: 7570..7576,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 281,
        column: 19,
        span: 7576..7577,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 281,
        column: 21,
        span: 7578..7579,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 1 | 2.0^%d\"",
        ),
        line: 281,
        column: 40,
        span: 7579..7598,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
        column: 41,
        span: 7598..7599,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 281,
        column: 42,
        span: 7599..7600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 281,
        column: 48,
        span: 7600..7606,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 281,
        column: 49,
        span: 7606..7607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 281,
        column: 56,
        span: 7607..7614,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 281,
        column: 58,
        span: 7615..7616,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 281,
        column: 60,
        span: 7616..7618,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
        column: 61,
        span: 7618..7619,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
        column: 62,
        span: 7619..7620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkcompt",
        ),
        line: 282,
        column: 11,
        span: 7621..7631,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 12,
        span: 7631..7632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 282,
        column: 18,
        span: 7632..7638,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 282,
        column: 19,
        span: 7638..7639,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 2.3 ~ '0.0'\"",
        ),
        line: 282,
        column: 40,
        span: 7640..7660,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 41,
        span: 7660..7661,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 286,
        column: 6,
        span: 7739..7744,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 286,
        column: 15,
        span: 7745..7753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 286,
        column: 19,
        span: 7754..7757,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 20,
        span: 7757..7758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 286,
        column: 21,
        span: 7758..7759,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 22,
        span: 7759..7760,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 286,
        column: 29,
        span: 7761..7767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 286,
        column: 31,
        span: 7768..7769,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 286,
        column: 33,
        span: 7770..7771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 286,
        column: 35,
        span: 7772..7773,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 286,
        column: 0,
        span: 7774..7777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 287,
        column: 11,
        span: 7778..7788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
        column: 12,
        span: 7788..7789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 287,
        column: 18,
        span: 7789..7795,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
        column: 19,
        span: 7795..7796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 287,
        column: 23,
        span: 7797..7800,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
        column: 24,
        span: 7800..7801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 287,
        column: 29,
        span: 7802..7806,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 287,
        column: 30,
        span: 7806..7807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 287,
        column: 34,
        span: 7807..7811,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
        column: 35,
        span: 7811..7812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 288,
        column: 11,
        span: 7822..7832,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
        column: 12,
        span: 7832..7833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 288,
        column: 18,
        span: 7833..7839,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 288,
        column: 19,
        span: 7839..7840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 288,
        column: 23,
        span: 7841..7844,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 288,
        column: 24,
        span: 7844..7845,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 288,
        column: 26,
        span: 7846..7847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 288,
        column: 30,
        span: 7847..7851,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 288,
        column: 31,
        span: 7851..7852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 288,
        column: 35,
        span: 7852..7856,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
        column: 36,
        span: 7856..7857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 289,
        column: 11,
        span: 7866..7876,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 12,
        span: 7876..7877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 289,
        column: 18,
        span: 7877..7883,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 289,
        column: 19,
        span: 7883..7884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 289,
        column: 23,
        span: 7885..7888,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 289,
        column: 24,
        span: 7888..7889,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 289,
        column: 26,
        span: 7889..7891,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 289,
        column: 28,
        span: 7892..7893,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 289,
        column: 30,
        span: 7893..7895,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 31,
        span: 7895..7896,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 291,
        column: 3,
        span: 7910..7912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 291,
        column: 13,
        span: 7913..7922,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 291,
        column: 15,
        span: 7923..7924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 291,
        column: 23,
        span: 7925..7932,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 291,
        column: 0,
        span: 7933..7937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 293,
        column: 9,
        span: 8003..8009,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
        column: 10,
        span: 8009..8010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 293,
        column: 16,
        span: 8010..8016,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 293,
        column: 18,
        span: 8017..8018,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 293,
        column: 22,
        span: 8018..8022,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 293,
        column: 25,
        span: 8023..8025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 293,
        column: 32,
        span: 8026..8032,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 293,
        column: 34,
        span: 8033..8034,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 293,
        column: 38,
        span: 8034..8038,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
        column: 39,
        span: 8038..8039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 294,
        column: 9,
        span: 8042..8048,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 10,
        span: 8048..8049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 294,
        column: 16,
        span: 8049..8055,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 294,
        column: 18,
        span: 8056..8057,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 294,
        column: 22,
        span: 8057..8061,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 294,
        column: 25,
        span: 8062..8064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 294,
        column: 32,
        span: 8065..8071,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 294,
        column: 34,
        span: 8072..8073,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 294,
        column: 38,
        span: 8073..8077,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 39,
        span: 8077..8078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 295,
        column: 13,
        span: 8081..8091,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
        column: 14,
        span: 8091..8092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgf2i",
        ),
        line: 295,
        column: 20,
        span: 8092..8098,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 295,
        column: 21,
        span: 8098..8099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 295,
        column: 25,
        span: 8100..8103,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 295,
        column: 26,
        span: 8103..8104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 295,
        column: 33,
        span: 8105..8111,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 295,
        column: 35,
        span: 8112..8113,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 295,
        column: 39,
        span: 8113..8117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
        column: 40,
        span: 8117..8118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 296,
        column: 9,
        span: 8121..8127,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 296,
        column: 10,
        span: 8127..8128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 296,
        column: 13,
        span: 8128..8131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 296,
        column: 14,
        span: 8131..8132,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 296,
        column: 17,
        span: 8131..8135,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 296,
        column: 19,
        span: 8136..8137,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 296,
        column: 21,
        span: 8138..8139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 296,
        column: 28,
        span: 8139..8146,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 296,
        column: 30,
        span: 8147..8148,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 296,
        column: 32,
        span: 8148..8150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 296,
        column: 33,
        span: 8150..8151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 296,
        column: 34,
        span: 8151..8152,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 296,
        column: 37,
        span: 8153..8155,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 296,
        column: 39,
        span: 8155..8157,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 296,
        column: 42,
        span: 8158..8160,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 296,
        column: 44,
        span: 8161..8162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 296,
        column: 51,
        span: 8162..8169,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 296,
        column: 53,
        span: 8170..8171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 296,
        column: 55,
        span: 8171..8173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 296,
        column: 56,
        span: 8173..8174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 296,
        column: 57,
        span: 8174..8175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 297,
        column: 9,
        span: 8178..8184,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 10,
        span: 8184..8185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 297,
        column: 13,
        span: 8185..8188,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 14,
        span: 8188..8189,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 297,
        column: 15,
        span: 8189..8190,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 297,
        column: 18,
        span: 8189..8193,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 297,
        column: 20,
        span: 8194..8195,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 22,
        span: 8196..8197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 297,
        column: 29,
        span: 8197..8204,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 297,
        column: 31,
        span: 8205..8206,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 297,
        column: 33,
        span: 8206..8208,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 34,
        span: 8208..8209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 35,
        span: 8209..8210,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 297,
        column: 38,
        span: 8211..8213,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 297,
        column: 40,
        span: 8214..8215,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 41,
        span: 8215..8216,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 297,
        column: 42,
        span: 8215..8217,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 297,
        column: 45,
        span: 8218..8220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 47,
        span: 8221..8222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 297,
        column: 54,
        span: 8222..8229,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 297,
        column: 56,
        span: 8230..8231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 297,
        column: 58,
        span: 8231..8233,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 59,
        span: 8233..8234,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 60,
        span: 8234..8235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 61,
        span: 8235..8236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 298,
        column: 9,
        span: 8239..8245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 10,
        span: 8245..8246,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 11,
        span: 8246..8247,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 298,
        column: 14,
        span: 8246..8250,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 298,
        column: 16,
        span: 8251..8252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 18,
        span: 8253..8254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 298,
        column: 27,
        span: 8254..8263,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 298,
        column: 29,
        span: 8264..8265,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 298,
        column: 31,
        span: 8265..8267,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 32,
        span: 8267..8268,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 298,
        column: 34,
        span: 8269..8270,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 298,
        column: 38,
        span: 8270..8274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 39,
        span: 8274..8275,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 298,
        column: 42,
        span: 8276..8278,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 298,
        column: 44,
        span: 8278..8280,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 298,
        column: 47,
        span: 8281..8283,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 49,
        span: 8284..8285,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 298,
        column: 50,
        span: 8284..8286,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 298,
        column: 53,
        span: 8287..8289,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 55,
        span: 8290..8291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 298,
        column: 64,
        span: 8291..8300,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 298,
        column: 66,
        span: 8301..8302,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 298,
        column: 68,
        span: 8302..8304,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 69,
        span: 8304..8305,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 70,
        span: 8305..8306,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 298,
        column: 72,
        span: 8307..8308,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 298,
        column: 74,
        span: 8308..8310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 75,
        span: 8310..8311,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 300,
        column: 8,
        span: 8360..8365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 300,
        column: 11,
        span: 8366..8368,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 300,
        column: 13,
        span: 8369..8370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 300,
        column: 20,
        span: 8371..8377,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 300,
        column: 22,
        span: 8378..8379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 300,
        column: 24,
        span: 8380..8381,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 300,
        column: 25,
        span: 8380..8382,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 300,
        column: 28,
        span: 8383..8385,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 300,
        column: 30,
        span: 8386..8387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floatbits",
        ),
        line: 300,
        column: 39,
        span: 8387..8396,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 300,
        column: 41,
        span: 8397..8398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 300,
        column: 49,
        span: 8399..8406,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 300,
        column: 50,
        span: 8406..8407,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 300,
        column: 51,
        span: 8407..8408,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 300,
        column: 53,
        span: 8409..8410,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 300,
        column: 0,
        span: 8410..8412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 301,
        column: 9,
        span: 8415..8421,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 10,
        span: 8421..8422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 301,
        column: 13,
        span: 8422..8425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 14,
        span: 8425..8426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 301,
        column: 16,
        span: 8426..8428,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 301,
        column: 18,
        span: 8429..8430,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 301,
        column: 22,
        span: 8430..8434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 23,
        span: 8434..8435,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 301,
        column: 26,
        span: 8436..8438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 301,
        column: 29,
        span: 8439..8441,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 30,
        span: 8441..8442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 302,
        column: 5,
        span: 8462..8464,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 302,
        column: 7,
        span: 8465..8466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 302,
        column: 10,
        span: 8467..8469,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 302,
        column: 12,
        span: 8470..8471,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 302,
        column: 0,
        span: 8471..8473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 303,
        column: 9,
        span: 8476..8482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 10,
        span: 8482..8483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 303,
        column: 13,
        span: 8483..8486,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 14,
        span: 8486..8487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 303,
        column: 16,
        span: 8487..8489,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 303,
        column: 18,
        span: 8490..8491,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 303,
        column: 22,
        span: 8491..8495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 23,
        span: 8495..8496,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 303,
        column: 26,
        span: 8497..8499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 303,
        column: 29,
        span: 8500..8502,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 30,
        span: 8502..8503,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 304,
        column: 0,
        span: 8529..8533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 306,
        column: 9,
        span: 8596..8602,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
        column: 10,
        span: 8602..8603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 306,
        column: 16,
        span: 8603..8609,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 306,
        column: 18,
        span: 8610..8611,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 306,
        column: 22,
        span: 8611..8615,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 306,
        column: 24,
        span: 8616..8617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 306,
        column: 31,
        span: 8618..8624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
        column: 32,
        span: 8624..8625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 307,
        column: 9,
        span: 8628..8634,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
        column: 10,
        span: 8634..8635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 307,
        column: 16,
        span: 8635..8641,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 307,
        column: 18,
        span: 8642..8643,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 307,
        column: 22,
        span: 8643..8647,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 307,
        column: 24,
        span: 8648..8649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 307,
        column: 31,
        span: 8650..8656,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
        column: 32,
        span: 8656..8657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 308,
        column: 9,
        span: 8660..8666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 10,
        span: 8666..8667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 308,
        column: 13,
        span: 8667..8670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 14,
        span: 8670..8671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 308,
        column: 20,
        span: 8671..8677,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 308,
        column: 22,
        span: 8678..8679,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 308,
        column: 26,
        span: 8679..8683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 27,
        span: 8683..8684,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 308,
        column: 30,
        span: 8685..8687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 308,
        column: 37,
        span: 8688..8694,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 38,
        span: 8694..8695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 309,
        column: 13,
        span: 8698..8708,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 14,
        span: 8708..8709,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no integer rep\"",
        ),
        line: 309,
        column: 30,
        span: 8709..8725,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 309,
        column: 31,
        span: 8725..8726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 309,
        column: 35,
        span: 8727..8730,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 309,
        column: 36,
        span: 8730..8731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 309,
        column: 43,
        span: 8732..8738,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 309,
        column: 45,
        span: 8739..8740,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 309,
        column: 49,
        span: 8740..8744,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 50,
        span: 8744..8745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 310,
        column: 13,
        span: 8748..8758,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 14,
        span: 8758..8759,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no integer rep\"",
        ),
        line: 310,
        column: 30,
        span: 8759..8775,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 310,
        column: 31,
        span: 8775..8776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 310,
        column: 35,
        span: 8777..8780,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 310,
        column: 36,
        span: 8780..8781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 310,
        column: 43,
        span: 8782..8788,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 310,
        column: 45,
        span: 8789..8790,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 310,
        column: 49,
        span: 8790..8794,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 50,
        span: 8794..8795,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 311,
        column: 0,
        span: 8796..8799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 314,
        column: 7,
        span: 8872..8878,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
        column: 8,
        span: 8878..8879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2i",
        ),
        line: 314,
        column: 11,
        span: 8879..8882,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
        column: 12,
        span: 8882..8883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 314,
        column: 18,
        span: 8883..8889,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 314,
        column: 20,
        span: 8890..8891,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 314,
        column: 24,
        span: 8891..8895,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 314,
        column: 25,
        span: 8895..8896,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 314,
        column: 28,
        span: 8897..8899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 314,
        column: 35,
        span: 8900..8906,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 314,
        column: 36,
        span: 8906..8907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 319,
        column: 7,
        span: 8938..8944,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 8,
        span: 8944..8945,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 319,
        column: 11,
        span: 8945..8948,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 319,
        column: 13,
        span: 8949..8950,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 319,
        column: 15,
        span: 8950..8952,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 319,
        column: 18,
        span: 8953..8955,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 319,
        column: 20,
        span: 8955..8957,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 21,
        span: 8957..8958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 320,
        column: 7,
        span: 8959..8965,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
        column: 8,
        span: 8965..8966,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2 \"",
        ),
        line: 320,
        column: 12,
        span: 8966..8970,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 320,
        column: 14,
        span: 8971..8972,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 320,
        column: 16,
        span: 8972..8974,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 320,
        column: 19,
        span: 8975..8977,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 320,
        column: 21,
        span: 8977..8979,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
        column: 22,
        span: 8979..8980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 321,
        column: 7,
        span: 8981..8987,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 8,
        span: 8987..8988,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" -2 \"",
        ),
        line: 321,
        column: 14,
        span: 8988..8994,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 321,
        column: 16,
        span: 8995..8996,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 321,
        column: 18,
        span: 8996..8998,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 321,
        column: 21,
        span: 8999..9001,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 321,
        column: 23,
        span: 9002..9003,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 321,
        column: 24,
        span: 9002..9004,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 25,
        span: 9004..9005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 322,
        column: 7,
        span: 9006..9012,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 8,
        span: 9012..9013,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" -0xa \"",
        ),
        line: 322,
        column: 16,
        span: 9013..9021,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 322,
        column: 18,
        span: 9022..9023,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 322,
        column: 20,
        span: 9023..9025,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 322,
        column: 23,
        span: 9026..9028,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 322,
        column: 25,
        span: 9029..9030,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 322,
        column: 26,
        span: 9029..9031,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 27,
        span: 9031..9032,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 326,
        column: 0,
        span: 9088..9090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 328,
        column: 9,
        span: 9111..9117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 328,
        column: 10,
        span: 9117..9118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 328,
        column: 13,
        span: 9118..9121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 328,
        column: 14,
        span: 9121..9122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 328,
        column: 22,
        span: 9122..9130,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 328,
        column: 23,
        span: 9130..9131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 328,
        column: 31,
        span: 9131..9139,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 328,
        column: 32,
        span: 9139..9140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 328,
        column: 38,
        span: 9140..9146,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 328,
        column: 39,
        span: 9146..9147,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 328,
        column: 40,
        span: 9147..9148,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 328,
        column: 41,
        span: 9148..9149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 328,
        column: 48,
        span: 9150..9156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 328,
        column: 49,
        span: 9156..9157,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 328,
        column: 50,
        span: 9157..9158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 329,
        column: 9,
        span: 9161..9167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 10,
        span: 9167..9168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 329,
        column: 13,
        span: 9168..9171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 14,
        span: 9171..9172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 329,
        column: 22,
        span: 9172..9180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 23,
        span: 9180..9181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 329,
        column: 31,
        span: 9181..9189,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 32,
        span: 9189..9190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 329,
        column: 38,
        span: 9190..9196,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 39,
        span: 9196..9197,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 40,
        span: 9197..9198,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 329,
        column: 41,
        span: 9198..9199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 329,
        column: 48,
        span: 9200..9206,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 49,
        span: 9206..9207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 50,
        span: 9207..9208,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 332,
        column: 8,
        span: 9269..9274,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 332,
        column: 17,
        span: 9275..9283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "incd",
        ),
        line: 332,
        column: 22,
        span: 9284..9288,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
        column: 23,
        span: 9288..9289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 332,
        column: 24,
        span: 9289..9290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
        column: 25,
        span: 9290..9291,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 333,
        column: 10,
        span: 9296..9301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 333,
        column: 12,
        span: 9302..9303,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 333,
        column: 14,
        span: 9304..9305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 333,
        column: 21,
        span: 9306..9312,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 333,
        column: 22,
        span: 9312..9313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 333,
        column: 28,
        span: 9313..9319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
        column: 29,
        span: 9319..9320,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 333,
        column: 33,
        span: 9320..9324,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 333,
        column: 34,
        span: 9324..9325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 333,
        column: 36,
        span: 9326..9327,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
        column: 37,
        span: 9327..9328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 334,
        column: 6,
        span: 9333..9334,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 334,
        column: 8,
        span: 9335..9336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 334,
        column: 15,
        span: 9337..9343,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 334,
        column: 16,
        span: 9343..9344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 334,
        column: 20,
        span: 9344..9348,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 334,
        column: 21,
        span: 9348..9349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 334,
        column: 22,
        span: 9349..9350,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 334,
        column: 23,
        span: 9350..9351,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d$\"",
        ),
        line: 334,
        column: 29,
        span: 9352..9357,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 334,
        column: 30,
        span: 9357..9358,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 334,
        column: 39,
        span: 9359..9367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 334,
        column: 40,
        span: 9367..9368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 334,
        column: 41,
        span: 9368..9369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 334,
        column: 42,
        span: 9369..9370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 335,
        column: 13,
        span: 9377..9383,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 335,
        column: 14,
        span: 9383..9384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 335,
        column: 15,
        span: 9384..9385,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 335,
        column: 18,
        span: 9386..9388,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'9'",
        ),
        line: 335,
        column: 22,
        span: 9389..9392,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 335,
        column: 23,
        span: 9392..9393,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 336,
        column: 13,
        span: 9400..9406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 336,
        column: 20,
        span: 9407..9413,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 336,
        column: 21,
        span: 9413..9414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 336,
        column: 25,
        span: 9414..9418,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
        column: 26,
        span: 9418..9419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 336,
        column: 32,
        span: 9419..9425,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 336,
        column: 33,
        span: 9425..9426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 336,
        column: 37,
        span: 9426..9430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
        column: 38,
        span: 9430..9431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 336,
        column: 39,
        span: 9431..9432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
        column: 40,
        span: 9432..9433,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 336,
        column: 42,
        span: 9434..9435,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 336,
        column: 44,
        span: 9435..9437,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
        column: 45,
        span: 9437..9438,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 337,
        column: 8,
        span: 9443..9446,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 337,
        column: 9,
        span: 9446..9447,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 338,
        column: 11,
        span: 9452..9458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 338,
        column: 0,
        span: 9459..9460,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 339,
        column: 0,
        span: 9463..9466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 342,
        column: 9,
        span: 9505..9511,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 10,
        span: 9511..9512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 342,
        column: 13,
        span: 9512..9515,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 14,
        span: 9515..9516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 342,
        column: 22,
        span: 9516..9524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 23,
        span: 9524..9525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "incd",
        ),
        line: 342,
        column: 27,
        span: 9525..9529,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 28,
        span: 9529..9530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 342,
        column: 34,
        span: 9530..9536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 35,
        span: 9536..9537,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 36,
        span: 9537..9538,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 37,
        span: 9538..9539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 342,
        column: 44,
        span: 9540..9546,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 342,
        column: 46,
        span: 9547..9548,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 342,
        column: 50,
        span: 9548..9552,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 51,
        span: 9552..9553,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 52,
        span: 9553..9554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 343,
        column: 9,
        span: 9557..9563,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 10,
        span: 9563..9564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 343,
        column: 13,
        span: 9564..9567,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 14,
        span: 9567..9568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 343,
        column: 22,
        span: 9568..9576,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 23,
        span: 9576..9577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "incd",
        ),
        line: 343,
        column: 27,
        span: 9577..9581,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 28,
        span: 9581..9582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 343,
        column: 34,
        span: 9582..9588,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
        column: 35,
        span: 9588..9589,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
        column: 36,
        span: 9589..9590,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 343,
        column: 37,
        span: 9590..9591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 343,
        column: 44,
        span: 9592..9598,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 343,
        column: 46,
        span: 9599..9600,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 343,
        column: 50,
        span: 9600..9604,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
        column: 51,
        span: 9604..9605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
        column: 52,
        span: 9605..9606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 346,
        column: 9,
        span: 9629..9635,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 10,
        span: 9635..9636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 346,
        column: 13,
        span: 9636..9639,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 14,
        span: 9639..9640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 346,
        column: 22,
        span: 9640..9648,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 23,
        span: 9648..9649,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 346,
        column: 26,
        span: 9649..9652,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 346,
        column: 29,
        span: 9653..9655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 346,
        column: 36,
        span: 9656..9662,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 346,
        column: 37,
        span: 9662..9663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 346,
        column: 40,
        span: 9663..9666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 41,
        span: 9666..9667,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        line: 346,
        column: 44,
        span: 9667..9670,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 346,
        column: 45,
        span: 9670..9671,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 346,
        column: 48,
        span: 9671..9674,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 49,
        span: 9674..9675,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 50,
        span: 9675..9676,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 346,
        column: 51,
        span: 9676..9677,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 346,
        column: 56,
        span: 9677..9682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 57,
        span: 9682..9683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 58,
        span: 9683..9684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 347,
        column: 9,
        span: 9687..9693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 10,
        span: 9693..9694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 347,
        column: 13,
        span: 9694..9697,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 14,
        span: 9697..9698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 347,
        column: 22,
        span: 9698..9706,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 23,
        span: 9706..9707,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-1\"",
        ),
        line: 347,
        column: 27,
        span: 9707..9711,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 347,
        column: 30,
        span: 9712..9714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 347,
        column: 37,
        span: 9715..9721,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 347,
        column: 38,
        span: 9721..9722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 347,
        column: 41,
        span: 9722..9725,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 42,
        span: 9725..9726,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        line: 347,
        column: 45,
        span: 9726..9729,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
        column: 46,
        span: 9729..9730,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 347,
        column: 49,
        span: 9730..9733,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 50,
        span: 9733..9734,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 51,
        span: 9734..9735,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
        column: 52,
        span: 9735..9736,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 347,
        column: 54,
        span: 9737..9738,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 347,
        column: 58,
        span: 9737..9742,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 59,
        span: 9742..9743,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 60,
        span: 9743..9744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 350,
        column: 9,
        span: 9784..9790,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
        column: 10,
        span: 9790..9791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 350,
        column: 13,
        span: 9791..9794,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
        column: 14,
        span: 9794..9795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 350,
        column: 22,
        span: 9795..9803,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
        column: 23,
        span: 9803..9804,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x1\"",
        ),
        line: 350,
        column: 28,
        span: 9804..9809,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 350,
        column: 31,
        span: 9810..9812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 350,
        column: 38,
        span: 9813..9819,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 350,
        column: 39,
        span: 9819..9820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 350,
        column: 42,
        span: 9820..9823,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
        column: 43,
        span: 9823..9824,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        line: 350,
        column: 46,
        span: 9824..9827,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 350,
        column: 47,
        span: 9827..9828,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 350,
        column: 50,
        span: 9828..9831,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
        column: 51,
        span: 9831..9832,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
        column: 52,
        span: 9832..9833,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 350,
        column: 53,
        span: 9833..9834,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 350,
        column: 55,
        span: 9834..9836,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
        column: 56,
        span: 9836..9837,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
        column: 57,
        span: 9837..9838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 353,
        column: 9,
        span: 9867..9873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 353,
        column: 10,
        span: 9873..9874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 353,
        column: 16,
        span: 9874..9880,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 353,
        column: 19,
        span: 9881..9883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 353,
        column: 24,
        span: 9884..9888,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 353,
        column: 25,
        span: 9888..9889,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return \"",
        ),
        line: 353,
        column: 34,
        span: 9889..9898,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 353,
        column: 37,
        span: 9899..9901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 353,
        column: 44,
        span: 9902..9908,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
        column: 45,
        span: 9908..9909,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 353,
        column: 46,
        span: 9909..9910,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
        column: 47,
        span: 9910..9911,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
        column: 48,
        span: 9911..9912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 354,
        column: 9,
        span: 9915..9921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 10,
        span: 9921..9922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 354,
        column: 13,
        span: 9922..9925,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 14,
        span: 9925..9926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 354,
        column: 20,
        span: 9926..9932,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 354,
        column: 21,
        span: 9932..9933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 354,
        column: 26,
        span: 9934..9938,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 27,
        span: 9938..9939,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return \"",
        ),
        line: 354,
        column: 36,
        span: 9939..9948,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 354,
        column: 39,
        span: 9949..9951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 354,
        column: 46,
        span: 9952..9958,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 47,
        span: 9958..9959,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 48,
        span: 9959..9960,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 49,
        span: 9960..9961,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 50,
        span: 9961..9962,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 51,
        span: 9962..9963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 356,
        column: 9,
        span: 9967..9973,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 10,
        span: 9973..9974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 356,
        column: 13,
        span: 9974..9977,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 14,
        span: 9977..9978,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000000000000000000000",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 356,
        column: 39,
        span: 9977..10003,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 356,
        column: 40,
        span: 10003..10004,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000000000000000000000",
                    after_decimal: "",
                },
            ),
        ),
        line: 356,
        column: 64,
        span: 10004..10028,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 65,
        span: 10028..10029,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 66,
        span: 10029..10030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 357,
        column: 9,
        span: 10033..10039,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 357,
        column: 10,
        span: 10039..10040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 357,
        column: 13,
        span: 10040..10043,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 357,
        column: 14,
        span: 10043..10044,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 357,
        column: 15,
        span: 10044..10045,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000000000000000000000",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 357,
        column: 40,
        span: 10044..10070,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 357,
        column: 41,
        span: 10070..10071,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 357,
        column: 43,
        span: 10072..10073,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000000000000000000000",
                    after_decimal: "",
                },
            ),
        ),
        line: 357,
        column: 66,
        span: 10072..10096,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 357,
        column: 67,
        span: 10096..10097,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 357,
        column: 68,
        span: 10097..10098,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 358,
        column: 0,
        span: 10099..10102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 364,
        column: 7,
        span: 10155..10161,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 364,
        column: 8,
        span: 10161..10162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 364,
        column: 16,
        span: 10162..10170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 364,
        column: 17,
        span: 10170..10171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 364,
        column: 20,
        span: 10170..10174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 364,
        column: 21,
        span: 10174..10175,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 364,
        column: 24,
        span: 10176..10178,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 364,
        column: 28,
        span: 10178..10182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 364,
        column: 29,
        span: 10182..10183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 365,
        column: 7,
        span: 10184..10190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 365,
        column: 8,
        span: 10190..10191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 365,
        column: 11,
        span: 10191..10194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 365,
        column: 12,
        span: 10194..10195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 365,
        column: 20,
        span: 10195..10203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 365,
        column: 21,
        span: 10203..10204,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
        column: 22,
        span: 10203..10205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
        column: 23,
        span: 10205..10206,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 365,
        column: 24,
        span: 10206..10207,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
        column: 26,
        span: 10207..10209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
        column: 27,
        span: 10209..10210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
        column: 28,
        span: 10210..10211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 366,
        column: 7,
        span: 10212..10218,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
        column: 8,
        span: 10218..10219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 366,
        column: 11,
        span: 10219..10222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
        column: 12,
        span: 10222..10223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 366,
        column: 20,
        span: 10223..10231,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
        column: 21,
        span: 10231..10232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 366,
        column: 27,
        span: 10232..10238,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 28,
        span: 10238..10239,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 366,
        column: 29,
        span: 10239..10240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 366,
        column: 36,
        span: 10241..10247,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 37,
        span: 10247..10248,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 366,
        column: 41,
        span: 10249..10252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 366,
        column: 45,
        span: 10253..10256,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
        column: 46,
        span: 10256..10257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 366,
        column: 54,
        span: 10257..10265,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
        column: 55,
        span: 10265..10266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 366,
        column: 61,
        span: 10266..10272,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 62,
        span: 10272..10273,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 366,
        column: 63,
        span: 10273..10274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 366,
        column: 70,
        span: 10275..10281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 71,
        span: 10281..10282,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 72,
        span: 10282..10283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 367,
        column: 7,
        span: 10284..10290,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
        column: 8,
        span: 10290..10291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 367,
        column: 16,
        span: 10291..10299,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
        column: 17,
        span: 10299..10300,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 367,
        column: 18,
        span: 10299..10301,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 367,
        column: 20,
        span: 10302..10303,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 367,
        column: 22,
        span: 10303..10305,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
        column: 23,
        span: 10305..10306,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 367,
        column: 26,
        span: 10307..10309,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 367,
        column: 28,
        span: 10309..10311,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 367,
        column: 30,
        span: 10312..10313,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 367,
        column: 32,
        span: 10313..10315,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
        column: 33,
        span: 10315..10316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 370,
        column: 7,
        span: 10345..10351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 370,
        column: 8,
        span: 10351..10352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 370,
        column: 16,
        span: 10352..10360,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 370,
        column: 17,
        span: 10360..10361,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        line: 370,
        column: 20,
        span: 10361..10364,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 370,
        column: 21,
        span: 10364..10365,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 370,
        column: 24,
        span: 10366..10368,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 370,
        column: 26,
        span: 10368..10370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 370,
        column: 27,
        span: 10370..10371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 371,
        column: 7,
        span: 10372..10378,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
        column: 8,
        span: 10378..10379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 371,
        column: 16,
        span: 10379..10387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
        column: 17,
        span: 10387..10388,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 371,
        column: 19,
        span: 10388..10390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
        column: 20,
        span: 10390..10391,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 371,
        column: 23,
        span: 10392..10394,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 371,
        column: 27,
        span: 10395..10398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
        column: 28,
        span: 10398..10399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 372,
        column: 7,
        span: 10400..10406,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
        column: 8,
        span: 10406..10407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 372,
        column: 16,
        span: 10407..10415,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
        column: 17,
        span: 10415..10416,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  \"",
        ),
        line: 372,
        column: 21,
        span: 10416..10420,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
        column: 22,
        span: 10420..10421,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 372,
        column: 25,
        span: 10422..10424,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 372,
        column: 29,
        span: 10425..10428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
        column: 30,
        span: 10428..10429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 373,
        column: 7,
        span: 10430..10436,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 373,
        column: 8,
        span: 10436..10437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 373,
        column: 16,
        span: 10437..10445,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 373,
        column: 17,
        span: 10445..10446,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-\"",
        ),
        line: 373,
        column: 20,
        span: 10446..10449,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 373,
        column: 21,
        span: 10449..10450,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 373,
        column: 24,
        span: 10451..10453,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 373,
        column: 28,
        span: 10454..10457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 373,
        column: 29,
        span: 10457..10458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 374,
        column: 7,
        span: 10459..10465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 374,
        column: 8,
        span: 10465..10466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 374,
        column: 16,
        span: 10466..10474,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 374,
        column: 17,
        span: 10474..10475,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  -0x \"",
        ),
        line: 374,
        column: 25,
        span: 10475..10483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 374,
        column: 26,
        span: 10483..10484,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 374,
        column: 29,
        span: 10485..10487,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 374,
        column: 33,
        span: 10488..10491,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 374,
        column: 34,
        span: 10491..10492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 375,
        column: 7,
        span: 10493..10499,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 375,
        column: 8,
        span: 10499..10500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 375,
        column: 16,
        span: 10500..10508,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 375,
        column: 18,
        span: 10509..10510,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 375,
        column: 19,
        span: 10510..10511,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 375,
        column: 22,
        span: 10512..10514,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 375,
        column: 26,
        span: 10515..10518,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 375,
        column: 27,
        span: 10518..10519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 376,
        column: 7,
        span: 10520..10526,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
        column: 8,
        span: 10526..10527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 376,
        column: 16,
        span: 10527..10535,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+0.01'",
        ),
        line: 376,
        column: 24,
        span: 10536..10543,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 376,
        column: 27,
        span: 10544..10546,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 376,
        column: 29,
        span: 10546..10548,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 376,
        column: 31,
        span: 10549..10550,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 376,
        column: 35,
        span: 10550..10554,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 376,
        column: 39,
        span: 10555..10558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 376,
        column: 48,
        span: 10559..10567,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+.01'",
        ),
        line: 376,
        column: 55,
        span: 10568..10574,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 376,
        column: 58,
        span: 10575..10577,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".01",
                },
            ),
        ),
        line: 376,
        column: 63,
        span: 10577..10582,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 376,
        column: 0,
        span: 10583..10586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 377,
        column: 11,
        span: 10589..10597,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.01'",
        ),
        line: 377,
        column: 17,
        span: 10598..10603,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 377,
        column: 20,
        span: 10604..10606,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".01",
                },
            ),
        ),
        line: 377,
        column: 25,
        span: 10606..10611,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 377,
        column: 29,
        span: 10612..10615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 377,
        column: 38,
        span: 10616..10624,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-1.'",
        ),
        line: 377,
        column: 44,
        span: 10625..10630,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 377,
        column: 47,
        span: 10631..10633,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 377,
        column: 49,
        span: 10634..10635,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 377,
        column: 50,
        span: 10634..10636,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 377,
        column: 0,
        span: 10637..10640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 378,
        column: 11,
        span: 10643..10651,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+1.'",
        ),
        line: 378,
        column: 17,
        span: 10652..10657,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 378,
        column: 20,
        span: 10658..10660,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 378,
        column: 22,
        span: 10660..10662,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 378,
        column: 23,
        span: 10662..10663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 379,
        column: 7,
        span: 10664..10670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
        column: 8,
        span: 10670..10671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 379,
        column: 16,
        span: 10671..10679,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+ 0.01'",
        ),
        line: 379,
        column: 25,
        span: 10680..10688,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 379,
        column: 28,
        span: 10689..10691,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 379,
        column: 32,
        span: 10692..10695,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 379,
        column: 36,
        span: 10696..10699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 379,
        column: 45,
        span: 10700..10708,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+.e1'",
        ),
        line: 379,
        column: 52,
        span: 10709..10715,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 379,
        column: 55,
        span: 10716..10718,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 379,
        column: 59,
        span: 10719..10722,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 379,
        column: 0,
        span: 10723..10726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 380,
        column: 11,
        span: 10729..10737,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1e'",
        ),
        line: 380,
        column: 16,
        span: 10738..10742,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 380,
        column: 19,
        span: 10743..10745,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 380,
        column: 23,
        span: 10746..10749,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 380,
        column: 27,
        span: 10750..10753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 380,
        column: 36,
        span: 10754..10762,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1.0e+'",
        ),
        line: 380,
        column: 44,
        span: 10763..10770,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 380,
        column: 47,
        span: 10771..10773,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 380,
        column: 51,
        span: 10774..10777,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 380,
        column: 0,
        span: 10778..10781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 381,
        column: 11,
        span: 10784..10792,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        line: 381,
        column: 15,
        span: 10793..10796,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 381,
        column: 18,
        span: 10797..10799,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 381,
        column: 22,
        span: 10800..10803,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 381,
        column: 23,
        span: 10803..10804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 382,
        column: 7,
        span: 10805..10811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
        column: 8,
        span: 10811..10812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 382,
        column: 16,
        span: 10812..10820,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
        column: 17,
        span: 10820..10821,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-012'",
        ),
        line: 382,
        column: 23,
        span: 10821..10827,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 382,
        column: 24,
        span: 10827..10828,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 382,
        column: 27,
        span: 10829..10831,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 382,
        column: 29,
        span: 10832..10833,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "010",
                    after_decimal: "",
                },
            ),
        ),
        line: 382,
        column: 32,
        span: 10832..10836,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 382,
        column: 34,
        span: 10837..10838,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 382,
        column: 36,
        span: 10838..10840,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 382,
        column: 37,
        span: 10840..10841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 383,
        column: 7,
        span: 10842..10848,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
        column: 8,
        span: 10848..10849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 383,
        column: 16,
        span: 10849..10857,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
        column: 17,
        span: 10857..10858,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-1.2e2'",
        ),
        line: 383,
        column: 25,
        span: 10858..10866,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
        column: 26,
        span: 10866..10867,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 383,
        column: 29,
        span: 10868..10870,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 383,
        column: 31,
        span: 10871..10872,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 383,
        column: 33,
        span: 10873..10874,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 383,
        column: 35,
        span: 10875..10876,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "120",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
        column: 38,
        span: 10875..10879,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
        column: 39,
        span: 10879..10880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 385,
        column: 7,
        span: 10882..10888,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 385,
        column: 8,
        span: 10888..10889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 385,
        column: 16,
        span: 10889..10897,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 385,
        column: 17,
        span: 10897..10898,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0xffffffffffff\"",
        ),
        line: 385,
        column: 33,
        span: 10898..10914,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 385,
        column: 34,
        span: 10914..10915,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 385,
        column: 37,
        span: 10916..10918,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 385,
        column: 39,
        span: 10919..10920,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 385,
        column: 40,
        span: 10919..10921,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 385,
        column: 43,
        span: 10922..10924,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 385,
        column: 45,
        span: 10925..10926,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 385,
        column: 46,
        span: 10925..10927,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 385,
        column: 48,
        span: 10928..10929,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 385,
        column: 51,
        span: 10929..10932,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 385,
        column: 52,
        span: 10932..10933,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 385,
        column: 53,
        span: 10933..10934,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 385,
        column: 55,
        span: 10935..10936,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 385,
        column: 57,
        span: 10936..10938,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 385,
        column: 58,
        span: 10938..10939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 386,
        column: 7,
        span: 10940..10946,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
        column: 8,
        span: 10946..10947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 386,
        column: 16,
        span: 10947..10955,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
        column: 17,
        span: 10955..10956,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x\"",
        ),
        line: 386,
        column: 21,
        span: 10956..10960,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 386,
        column: 24,
        span: 10961..10963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 386,
        column: 31,
        span: 10964..10970,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 386,
        column: 32,
        span: 10970..10971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 386,
        column: 35,
        span: 10971..10974,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
        column: 36,
        span: 10974..10975,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 386,
        column: 39,
        span: 10975..10978,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 386,
        column: 40,
        span: 10978..10979,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
        column: 42,
        span: 10980..10981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 386,
        column: 49,
        span: 10981..10988,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 386,
        column: 52,
        span: 10989..10991,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 386,
        column: 54,
        span: 10991..10993,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
        column: 55,
        span: 10993..10994,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
        column: 56,
        span: 10994..10995,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
        column: 57,
        span: 10995..10996,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 386,
        column: 60,
        span: 10997..10999,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 386,
        column: 62,
        span: 11000..11001,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 386,
        column: 63,
        span: 11000..11002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
        column: 64,
        span: 11002..11003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 387,
        column: 7,
        span: 11004..11010,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
        column: 8,
        span: 11010..11011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 387,
        column: 16,
        span: 11011..11019,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
        column: 17,
        span: 11019..11020,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-0x\"",
        ),
        line: 387,
        column: 22,
        span: 11020..11025,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 387,
        column: 25,
        span: 11026..11028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 387,
        column: 32,
        span: 11029..11035,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 387,
        column: 33,
        span: 11035..11036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 387,
        column: 36,
        span: 11036..11039,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
        column: 37,
        span: 11039..11040,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 387,
        column: 40,
        span: 11040..11043,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 387,
        column: 41,
        span: 11043..11044,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
        column: 43,
        span: 11045..11046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 387,
        column: 50,
        span: 11046..11053,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 387,
        column: 53,
        span: 11054..11056,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 387,
        column: 55,
        span: 11056..11058,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
        column: 56,
        span: 11058..11059,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
        column: 57,
        span: 11059..11060,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
        column: 58,
        span: 11060..11061,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 387,
        column: 61,
        span: 11062..11064,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 387,
        column: 63,
        span: 11064..11066,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
        column: 64,
        span: 11066..11067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 390,
        column: 7,
        span: 11101..11107,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
        column: 8,
        span: 11107..11108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 390,
        column: 16,
        span: 11108..11116,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
        column: 17,
        span: 11116..11117,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  001010  '",
        ),
        line: 390,
        column: 29,
        span: 11117..11129,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
        column: 30,
        span: 11129..11130,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
        column: 32,
        span: 11130..11132,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
        column: 33,
        span: 11132..11133,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 390,
        column: 36,
        span: 11134..11136,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
        column: 39,
        span: 11136..11139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
        column: 40,
        span: 11139..11140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 391,
        column: 7,
        span: 11141..11147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 391,
        column: 8,
        span: 11147..11148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 391,
        column: 16,
        span: 11148..11156,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 391,
        column: 17,
        span: 11156..11157,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  001010  '",
        ),
        line: 391,
        column: 29,
        span: 11157..11169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 391,
        column: 30,
        span: 11169..11170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 391,
        column: 33,
        span: 11170..11173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 391,
        column: 34,
        span: 11173..11174,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 391,
        column: 37,
        span: 11175..11177,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "001010",
                    after_decimal: "",
                },
            ),
        ),
        line: 391,
        column: 44,
        span: 11177..11184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 391,
        column: 45,
        span: 11184..11185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 392,
        column: 7,
        span: 11186..11192,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
        column: 8,
        span: 11192..11193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 392,
        column: 16,
        span: 11193..11201,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
        column: 17,
        span: 11201..11202,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  -1010  '",
        ),
        line: 392,
        column: 28,
        span: 11202..11213,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 392,
        column: 29,
        span: 11213..11214,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 392,
        column: 31,
        span: 11214..11216,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 392,
        column: 32,
        span: 11216..11217,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 392,
        column: 35,
        span: 11218..11220,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 392,
        column: 37,
        span: 11221..11222,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 392,
        column: 39,
        span: 11221..11224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 392,
        column: 40,
        span: 11224..11225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 393,
        column: 7,
        span: 11226..11232,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
        column: 8,
        span: 11232..11233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 393,
        column: 16,
        span: 11233..11241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
        column: 17,
        span: 11241..11242,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'10'",
        ),
        line: 393,
        column: 21,
        span: 11242..11246,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 393,
        column: 22,
        span: 11246..11247,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 393,
        column: 25,
        span: 11247..11250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
        column: 26,
        span: 11250..11251,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 393,
        column: 29,
        span: 11252..11254,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 393,
        column: 32,
        span: 11254..11257,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
        column: 33,
        span: 11257..11258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 394,
        column: 7,
        span: 11259..11265,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 394,
        column: 8,
        span: 11265..11266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 394,
        column: 16,
        span: 11266..11274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 394,
        column: 17,
        span: 11274..11275,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  -10  '",
        ),
        line: 394,
        column: 26,
        span: 11275..11284,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 27,
        span: 11284..11285,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 394,
        column: 30,
        span: 11285..11288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 394,
        column: 31,
        span: 11288..11289,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 394,
        column: 34,
        span: 11290..11292,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 394,
        column: 36,
        span: 11293..11294,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 394,
        column: 38,
        span: 11293..11296,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 394,
        column: 39,
        span: 11296..11297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 395,
        column: 7,
        span: 11298..11304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 8,
        span: 11304..11305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 395,
        column: 16,
        span: 11305..11313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 17,
        span: 11313..11314,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  +1Z  '",
        ),
        line: 395,
        column: 26,
        span: 11314..11323,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 395,
        column: 27,
        span: 11323..11324,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 395,
        column: 30,
        span: 11324..11327,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 31,
        span: 11327..11328,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 395,
        column: 34,
        span: 11329..11331,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 395,
        column: 37,
        span: 11331..11334,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 395,
        column: 39,
        span: 11335..11336,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        line: 395,
        column: 42,
        span: 11336..11339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 43,
        span: 11339..11340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 396,
        column: 7,
        span: 11341..11347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
        column: 8,
        span: 11347..11348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 396,
        column: 16,
        span: 11348..11356,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
        column: 17,
        span: 11356..11357,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  -1z  '",
        ),
        line: 396,
        column: 26,
        span: 11357..11366,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 396,
        column: 27,
        span: 11366..11367,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
        column: 30,
        span: 11367..11370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
        column: 31,
        span: 11370..11371,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 396,
        column: 34,
        span: 11372..11374,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 396,
        column: 36,
        span: 11375..11376,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
        column: 38,
        span: 11375..11378,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 396,
        column: 40,
        span: 11379..11380,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 396,
        column: 42,
        span: 11381..11382,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
        column: 44,
        span: 11381..11384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
        column: 45,
        span: 11384..11385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 397,
        column: 7,
        span: 11386..11392,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 8,
        span: 11392..11393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 397,
        column: 16,
        span: 11393..11401,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 17,
        span: 11401..11402,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-fFfa'",
        ),
        line: 397,
        column: 24,
        span: 11402..11409,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 25,
        span: 11409..11410,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
        column: 28,
        span: 11410..11413,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 29,
        span: 11413..11414,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 397,
        column: 32,
        span: 11415..11417,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 397,
        column: 34,
        span: 11418..11419,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 35,
        span: 11419..11420,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
        column: 37,
        span: 11419..11422,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 397,
        column: 39,
        span: 11423..11424,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 41,
        span: 11425..11426,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
        column: 43,
        span: 11425..11428,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 397,
        column: 45,
        span: 11429..11430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 47,
        span: 11431..11432,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
        column: 49,
        span: 11431..11434,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 397,
        column: 51,
        span: 11435..11436,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 53,
        span: 11437..11438,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
        column: 55,
        span: 11437..11440,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 397,
        column: 57,
        span: 11441..11442,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 59,
        span: 11443..11444,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
        column: 61,
        span: 11443..11446,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 397,
        column: 63,
        span: 11447..11448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 65,
        span: 11449..11450,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
        column: 67,
        span: 11449..11452,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 397,
        column: 69,
        span: 11453..11454,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
        column: 72,
        span: 11454..11457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 73,
        span: 11457..11458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 74,
        span: 11458..11459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 75,
        span: 11459..11460,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 76,
        span: 11460..11461,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 77,
        span: 11461..11462,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 78,
        span: 11462..11463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 79,
        span: 11463..11464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 398,
        column: 7,
        span: 11465..11471,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 8,
        span: 11471..11472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 398,
        column: 16,
        span: 11472..11480,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 17,
        span: 11480..11481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 398,
        column: 23,
        span: 11481..11487,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 398,
        column: 24,
        span: 11487..11488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 398,
        column: 27,
        span: 11488..11491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 28,
        span: 11491..11492,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1'",
        ),
        line: 398,
        column: 31,
        span: 11492..11495,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 398,
        column: 32,
        span: 11495..11496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 34,
        span: 11497..11498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 398,
        column: 41,
        span: 11498..11505,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 398,
        column: 43,
        span: 11506..11507,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 45,
        span: 11507..11509,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
        column: 46,
        span: 11509..11510,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
        column: 47,
        span: 11510..11511,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 398,
        column: 48,
        span: 11511..11512,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 50,
        span: 11512..11514,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
        column: 51,
        span: 11514..11515,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 398,
        column: 53,
        span: 11516..11517,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 55,
        span: 11517..11519,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 398,
        column: 58,
        span: 11520..11522,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 60,
        span: 11522..11524,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 398,
        column: 62,
        span: 11525..11526,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 64,
        span: 11527..11528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "intbits",
        ),
        line: 398,
        column: 71,
        span: 11528..11535,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 398,
        column: 73,
        span: 11536..11537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 75,
        span: 11537..11539,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
        column: 76,
        span: 11539..11540,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
        column: 77,
        span: 11540..11541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 399,
        column: 7,
        span: 11542..11548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
        column: 8,
        span: 11548..11549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 399,
        column: 16,
        span: 11549..11557,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
        column: 17,
        span: 11557..11558,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ffffFFFF'",
        ),
        line: 399,
        column: 27,
        span: 11558..11568,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 399,
        column: 28,
        span: 11568..11569,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 399,
        column: 31,
        span: 11569..11572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 32,
        span: 11572..11573,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 399,
        column: 34,
        span: 11574..11575,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 399,
        column: 36,
        span: 11575..11577,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 399,
        column: 39,
        span: 11578..11580,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
        column: 41,
        span: 11581..11582,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 399,
        column: 42,
        span: 11581..11583,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 399,
        column: 45,
        span: 11584..11586,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 399,
        column: 48,
        span: 11586..11589,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 49,
        span: 11589..11590,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 50,
        span: 11590..11591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 400,
        column: 7,
        span: 11592..11598,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 400,
        column: 8,
        span: 11598..11599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 400,
        column: 16,
        span: 11599..11607,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 400,
        column: 17,
        span: 11607..11608,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0ffffFFFF'",
        ),
        line: 400,
        column: 28,
        span: 11608..11619,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 400,
        column: 29,
        span: 11619..11620,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 400,
        column: 32,
        span: 11620..11623,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 400,
        column: 33,
        span: 11623..11624,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 400,
        column: 35,
        span: 11625..11626,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 400,
        column: 37,
        span: 11626..11628,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 400,
        column: 40,
        span: 11629..11631,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 400,
        column: 42,
        span: 11632..11633,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 400,
        column: 43,
        span: 11632..11634,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 400,
        column: 46,
        span: 11635..11637,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 400,
        column: 49,
        span: 11637..11640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 400,
        column: 50,
        span: 11640..11641,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 400,
        column: 51,
        span: 11641..11642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 401,
        column: 7,
        span: 11643..11649,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 401,
        column: 8,
        span: 11649..11650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 401,
        column: 16,
        span: 11650..11658,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 401,
        column: 17,
        span: 11658..11659,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-0ffffffFFFF'",
        ),
        line: 401,
        column: 31,
        span: 11659..11673,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 401,
        column: 32,
        span: 11673..11674,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
        column: 35,
        span: 11674..11677,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 401,
        column: 36,
        span: 11677..11678,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 401,
        column: 38,
        span: 11679..11680,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
        column: 40,
        span: 11680..11682,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 401,
        column: 43,
        span: 11683..11685,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 401,
        column: 45,
        span: 11686..11687,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 401,
        column: 46,
        span: 11687..11688,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
        column: 47,
        span: 11687..11689,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 401,
        column: 50,
        span: 11690..11692,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
        column: 53,
        span: 11692..11695,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 401,
        column: 54,
        span: 11695..11696,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 401,
        column: 55,
        span: 11696..11697,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 402,
        column: 4,
        span: 11698..11701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 402,
        column: 6,
        span: 11702..11703,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 402,
        column: 8,
        span: 11704..11705,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 402,
        column: 10,
        span: 11705..11707,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 402,
        column: 11,
        span: 11707..11708,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 402,
        column: 14,
        span: 11708..11711,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 402,
        column: 0,
        span: 11712..11714,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 403,
        column: 8,
        span: 11717..11722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i2",
        ),
        line: 403,
        column: 11,
        span: 11723..11725,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 403,
        column: 13,
        span: 11726..11727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 403,
        column: 15,
        span: 11728..11729,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 403,
        column: 17,
        span: 11730..11731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 403,
        column: 0,
        span: 11732..11733,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 404,
        column: 8,
        span: 11736..11741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i10",
        ),
        line: 404,
        column: 12,
        span: 11742..11745,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 404,
        column: 14,
        span: 11746..11747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i2",
        ),
        line: 404,
        column: 17,
        span: 11748..11750,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 404,
        column: 19,
        span: 11751..11752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i2",
        ),
        line: 404,
        column: 22,
        span: 11753..11755,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 404,
        column: 24,
        span: 11756..11757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i2",
        ),
        line: 404,
        column: 27,
        span: 11758..11760,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 404,
        column: 29,
        span: 11761..11762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i2",
        ),
        line: 404,
        column: 32,
        span: 11763..11765,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 404,
        column: 34,
        span: 11766..11767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i2",
        ),
        line: 404,
        column: 37,
        span: 11768..11770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 405,
        column: 9,
        span: 11781..11787,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 405,
        column: 10,
        span: 11787..11788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 405,
        column: 18,
        span: 11788..11796,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 405,
        column: 19,
        span: 11796..11797,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\t10000000000\\t'",
        ),
        line: 405,
        column: 36,
        span: 11797..11814,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 405,
        column: 37,
        span: 11814..11815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 405,
        column: 39,
        span: 11816..11817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 405,
        column: 40,
        span: 11817..11818,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 405,
        column: 43,
        span: 11819..11821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i10",
        ),
        line: 405,
        column: 47,
        span: 11822..11825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 405,
        column: 48,
        span: 11825..11826,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 406,
        column: 0,
        span: 11827..11830,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 408,
        column: 3,
        span: 11832..11834,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 408,
        column: 7,
        span: 11835..11838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 408,
        column: 13,
        span: 11839..11844,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 408,
        column: 0,
        span: 11845..11849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 410,
        column: 9,
        span: 11887..11893,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 10,
        span: 11893..11894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 410,
        column: 18,
        span: 11894..11902,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 19,
        span: 11902..11903,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x\"",
        ),
        line: 410,
        column: 23,
        span: 11903..11907,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 410,
        column: 26,
        span: 11908..11910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 410,
        column: 33,
        span: 11911..11917,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 410,
        column: 34,
        span: 11917..11918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 410,
        column: 37,
        span: 11918..11921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 38,
        span: 11921..11922,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 410,
        column: 41,
        span: 11922..11925,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 410,
        column: 42,
        span: 11925..11926,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
        column: 45,
        span: 11926..11929,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 46,
        span: 11929..11930,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 410,
        column: 49,
        span: 11931..11933,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".0\"",
        ),
        line: 410,
        column: 54,
        span: 11934..11938,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 55,
        span: 11938..11939,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 410,
        column: 58,
        span: 11940..11942,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 410,
        column: 62,
        span: 11942..11946,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 410,
        column: 64,
        span: 11947..11948,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 66,
        span: 11949..11950,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
        column: 67,
        span: 11949..11951,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 410,
        column: 69,
        span: 11952..11953,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
        column: 72,
        span: 11953..11956,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 73,
        span: 11956..11957,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 410,
        column: 75,
        span: 11958..11959,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
        column: 77,
        span: 11959..11961,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 78,
        span: 11961..11962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 411,
        column: 9,
        span: 11965..11971,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 10,
        span: 11971..11972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 411,
        column: 18,
        span: 11972..11980,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 19,
        span: 11980..11981,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x\"",
        ),
        line: 411,
        column: 23,
        span: 11981..11985,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 411,
        column: 26,
        span: 11986..11988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 411,
        column: 33,
        span: 11989..11995,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 411,
        column: 34,
        span: 11995..11996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 411,
        column: 37,
        span: 11996..11999,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 38,
        span: 11999..12000,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 411,
        column: 41,
        span: 12000..12003,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 411,
        column: 42,
        span: 12003..12004,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "150",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
        column: 46,
        span: 12004..12008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 47,
        span: 12008..12009,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 411,
        column: 50,
        span: 12010..12012,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".0\"",
        ),
        line: 411,
        column: 55,
        span: 12013..12017,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 56,
        span: 12017..12018,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 411,
        column: 59,
        span: 12019..12021,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 411,
        column: 63,
        span: 12021..12025,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 411,
        column: 65,
        span: 12026..12027,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 67,
        span: 12028..12029,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
        column: 68,
        span: 12028..12030,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 411,
        column: 70,
        span: 12031..12032,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "150",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
        column: 74,
        span: 12032..12036,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 75,
        span: 12036..12037,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 411,
        column: 77,
        span: 12038..12039,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
        column: 79,
        span: 12039..12041,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 80,
        span: 12041..12042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 412,
        column: 9,
        span: 12045..12051,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 10,
        span: 12051..12052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 412,
        column: 18,
        span: 12052..12060,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 19,
        span: 12060..12061,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x\"",
        ),
        line: 412,
        column: 23,
        span: 12061..12065,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 412,
        column: 26,
        span: 12066..12068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 412,
        column: 33,
        span: 12069..12075,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 412,
        column: 34,
        span: 12075..12076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 412,
        column: 37,
        span: 12076..12079,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 38,
        span: 12079..12080,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 412,
        column: 41,
        span: 12080..12083,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 412,
        column: 42,
        span: 12083..12084,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
        column: 46,
        span: 12084..12088,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 47,
        span: 12088..12089,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 412,
        column: 50,
        span: 12090..12092,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".0\"",
        ),
        line: 412,
        column: 55,
        span: 12093..12097,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 56,
        span: 12097..12098,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 412,
        column: 59,
        span: 12099..12101,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 412,
        column: 63,
        span: 12101..12105,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 412,
        column: 65,
        span: 12106..12107,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 67,
        span: 12108..12109,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
        column: 68,
        span: 12108..12110,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 412,
        column: 70,
        span: 12111..12112,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
        column: 74,
        span: 12112..12116,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 75,
        span: 12116..12117,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 412,
        column: 77,
        span: 12118..12119,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
        column: 79,
        span: 12119..12121,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 80,
        span: 12121..12122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 413,
        column: 9,
        span: 12125..12131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 413,
        column: 10,
        span: 12131..12132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 413,
        column: 18,
        span: 12132..12140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 413,
        column: 19,
        span: 12140..12141,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x\"",
        ),
        line: 413,
        column: 23,
        span: 12141..12145,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 413,
        column: 26,
        span: 12146..12148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 413,
        column: 33,
        span: 12149..12155,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 413,
        column: 34,
        span: 12155..12156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 413,
        column: 37,
        span: 12156..12159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 413,
        column: 38,
        span: 12159..12160,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 413,
        column: 41,
        span: 12160..12163,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 413,
        column: 42,
        span: 12163..12164,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 413,
        column: 46,
        span: 12164..12168,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 413,
        column: 47,
        span: 12168..12169,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 413,
        column: 50,
        span: 12170..12172,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".0\"",
        ),
        line: 413,
        column: 55,
        span: 12173..12177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 413,
        column: 56,
        span: 12177..12178,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 413,
        column: 59,
        span: 12179..12181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 413,
        column: 63,
        span: 12181..12185,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 413,
        column: 65,
        span: 12186..12187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 413,
        column: 67,
        span: 12188..12189,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 413,
        column: 68,
        span: 12188..12190,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 413,
        column: 70,
        span: 12191..12192,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 413,
        column: 74,
        span: 12192..12196,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 413,
        column: 75,
        span: 12196..12197,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 413,
        column: 77,
        span: 12198..12199,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 413,
        column: 79,
        span: 12199..12201,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 413,
        column: 80,
        span: 12201..12202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 414,
        column: 9,
        span: 12205..12211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
        column: 10,
        span: 12211..12212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 414,
        column: 18,
        span: 12212..12220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
        column: 19,
        span: 12220..12221,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x3.'",
        ),
        line: 414,
        column: 25,
        span: 12221..12227,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 414,
        column: 28,
        span: 12228..12230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 414,
        column: 35,
        span: 12231..12237,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 414,
        column: 36,
        span: 12237..12238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 414,
        column: 39,
        span: 12238..12241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
        column: 40,
        span: 12241..12242,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 414,
        column: 43,
        span: 12242..12245,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 414,
        column: 44,
        span: 12245..12246,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 414,
        column: 49,
        span: 12246..12251,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
        column: 50,
        span: 12251..12252,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
        column: 51,
        span: 12252..12253,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 414,
        column: 54,
        span: 12254..12256,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 414,
        column: 56,
        span: 12256..12258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
        column: 57,
        span: 12258..12259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 415,
        column: 9,
        span: 12262..12268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 415,
        column: 10,
        span: 12268..12269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 415,
        column: 18,
        span: 12269..12277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 415,
        column: 19,
        span: 12277..12278,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x'",
        ),
        line: 415,
        column: 23,
        span: 12278..12282,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 415,
        column: 26,
        span: 12283..12285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 415,
        column: 33,
        span: 12286..12292,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 415,
        column: 34,
        span: 12292..12293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 415,
        column: 37,
        span: 12293..12296,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 415,
        column: 38,
        span: 12296..12297,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 415,
        column: 41,
        span: 12297..12300,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 415,
        column: 42,
        span: 12300..12301,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 415,
        column: 47,
        span: 12301..12306,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 415,
        column: 48,
        span: 12306..12307,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 415,
        column: 51,
        span: 12308..12310,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 415,
        column: 55,
        span: 12311..12314,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 415,
        column: 56,
        span: 12314..12315,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 415,
        column: 59,
        span: 12316..12318,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 415,
        column: 62,
        span: 12318..12321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 415,
        column: 63,
        span: 12321..12322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 416,
        column: 9,
        span: 12325..12331,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 416,
        column: 10,
        span: 12331..12332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 416,
        column: 18,
        span: 12332..12340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 416,
        column: 19,
        span: 12340..12341,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x0.'",
        ),
        line: 416,
        column: 25,
        span: 12341..12347,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 416,
        column: 28,
        span: 12348..12350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 416,
        column: 35,
        span: 12351..12357,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 416,
        column: 36,
        span: 12357..12358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 416,
        column: 39,
        span: 12358..12361,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 416,
        column: 40,
        span: 12361..12362,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 416,
        column: 43,
        span: 12362..12365,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 416,
        column: 44,
        span: 12365..12366,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 416,
        column: 47,
        span: 12366..12369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 416,
        column: 48,
        span: 12369..12370,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 416,
        column: 51,
        span: 12371..12373,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 416,
        column: 55,
        span: 12374..12377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 416,
        column: 56,
        span: 12377..12378,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 416,
        column: 59,
        span: 12379..12381,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 416,
        column: 63,
        span: 12381..12385,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 416,
        column: 65,
        span: 12386..12387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 416,
        column: 67,
        span: 12388..12389,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 416,
        column: 68,
        span: 12389..12390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 416,
        column: 69,
        span: 12389..12391,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 416,
        column: 71,
        span: 12392..12393,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 416,
        column: 74,
        span: 12393..12396,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 416,
        column: 75,
        span: 12396..12397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 416,
        column: 76,
        span: 12397..12398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 417,
        column: 9,
        span: 12401..12407,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
        column: 10,
        span: 12407..12408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 417,
        column: 18,
        span: 12408..12416,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
        column: 19,
        span: 12416..12417,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x0.'",
        ),
        line: 417,
        column: 25,
        span: 12417..12423,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 417,
        column: 28,
        span: 12424..12426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 417,
        column: 35,
        span: 12427..12433,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 417,
        column: 36,
        span: 12433..12434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 417,
        column: 39,
        span: 12434..12437,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
        column: 40,
        span: 12437..12438,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 417,
        column: 43,
        span: 12438..12441,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 417,
        column: 44,
        span: 12441..12442,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "150",
                    after_decimal: "",
                },
            ),
        ),
        line: 417,
        column: 48,
        span: 12442..12446,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
        column: 49,
        span: 12446..12447,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 417,
        column: 52,
        span: 12448..12450,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 417,
        column: 56,
        span: 12451..12454,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
        column: 57,
        span: 12454..12455,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 417,
        column: 60,
        span: 12456..12458,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 417,
        column: 64,
        span: 12458..12462,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 417,
        column: 66,
        span: 12463..12464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
        column: 68,
        span: 12465..12466,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 417,
        column: 69,
        span: 12466..12467,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 417,
        column: 70,
        span: 12466..12468,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 417,
        column: 72,
        span: 12469..12470,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "151",
                    after_decimal: "",
                },
            ),
        ),
        line: 417,
        column: 76,
        span: 12470..12474,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
        column: 77,
        span: 12474..12475,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
        column: 78,
        span: 12475..12476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 418,
        column: 9,
        span: 12479..12485,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 10,
        span: 12485..12486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 418,
        column: 18,
        span: 12486..12494,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 19,
        span: 12494..12495,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x0.'",
        ),
        line: 418,
        column: 25,
        span: 12495..12501,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 418,
        column: 28,
        span: 12502..12504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 418,
        column: 35,
        span: 12505..12511,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 418,
        column: 36,
        span: 12511..12512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 418,
        column: 39,
        span: 12512..12515,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 40,
        span: 12515..12516,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 418,
        column: 43,
        span: 12516..12519,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 418,
        column: 44,
        span: 12519..12520,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 418,
        column: 48,
        span: 12520..12524,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 49,
        span: 12524..12525,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 418,
        column: 52,
        span: 12526..12528,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 418,
        column: 56,
        span: 12529..12532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 57,
        span: 12532..12533,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 418,
        column: 60,
        span: 12534..12536,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 418,
        column: 64,
        span: 12536..12540,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 418,
        column: 66,
        span: 12541..12542,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 68,
        span: 12543..12544,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 418,
        column: 69,
        span: 12544..12545,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 418,
        column: 70,
        span: 12544..12546,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 418,
        column: 72,
        span: 12547..12548,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "301",
                    after_decimal: "",
                },
            ),
        ),
        line: 418,
        column: 76,
        span: 12548..12552,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 77,
        span: 12552..12553,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 78,
        span: 12553..12554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 419,
        column: 9,
        span: 12557..12563,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 419,
        column: 10,
        span: 12563..12564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 419,
        column: 18,
        span: 12564..12572,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 419,
        column: 19,
        span: 12572..12573,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x0.'",
        ),
        line: 419,
        column: 25,
        span: 12573..12579,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 419,
        column: 28,
        span: 12580..12582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 419,
        column: 35,
        span: 12583..12589,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 419,
        column: 36,
        span: 12589..12590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 419,
        column: 39,
        span: 12590..12593,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 419,
        column: 40,
        span: 12593..12594,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 419,
        column: 43,
        span: 12594..12597,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 419,
        column: 44,
        span: 12597..12598,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 419,
        column: 48,
        span: 12598..12602,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 419,
        column: 49,
        span: 12602..12603,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 419,
        column: 52,
        span: 12604..12606,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 419,
        column: 56,
        span: 12607..12610,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 419,
        column: 57,
        span: 12610..12611,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 419,
        column: 60,
        span: 12612..12614,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 419,
        column: 64,
        span: 12614..12618,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 419,
        column: 66,
        span: 12619..12620,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 419,
        column: 68,
        span: 12621..12622,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 419,
        column: 69,
        span: 12622..12623,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 419,
        column: 70,
        span: 12622..12624,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 419,
        column: 72,
        span: 12625..12626,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "501",
                    after_decimal: "",
                },
            ),
        ),
        line: 419,
        column: 76,
        span: 12626..12630,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 419,
        column: 77,
        span: 12630..12631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 419,
        column: 78,
        span: 12631..12632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 421,
        column: 9,
        span: 12636..12642,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 421,
        column: 10,
        span: 12642..12643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 421,
        column: 18,
        span: 12643..12651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 421,
        column: 19,
        span: 12651..12652,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0xe03'",
        ),
        line: 421,
        column: 26,
        span: 12652..12659,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 421,
        column: 29,
        span: 12660..12662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 421,
        column: 36,
        span: 12663..12669,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 421,
        column: 37,
        span: 12669..12670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 421,
        column: 40,
        span: 12670..12673,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 421,
        column: 41,
        span: 12673..12674,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 421,
        column: 44,
        span: 12674..12677,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 421,
        column: 45,
        span: 12677..12678,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 421,
        column: 50,
        span: 12678..12683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 421,
        column: 51,
        span: 12683..12684,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 421,
        column: 54,
        span: 12685..12687,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'p-4000'",
        ),
        line: 421,
        column: 63,
        span: 12688..12696,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 421,
        column: 64,
        span: 12696..12697,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 421,
        column: 67,
        span: 12698..12700,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3587",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 421,
        column: 74,
        span: 12700..12707,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 421,
        column: 75,
        span: 12707..12708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 422,
        column: 9,
        span: 12711..12717,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 422,
        column: 10,
        span: 12717..12718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 422,
        column: 18,
        span: 12718..12726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 422,
        column: 19,
        span: 12726..12727,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x.'",
        ),
        line: 422,
        column: 24,
        span: 12727..12732,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 422,
        column: 27,
        span: 12733..12735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 422,
        column: 34,
        span: 12736..12742,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 422,
        column: 35,
        span: 12742..12743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 422,
        column: 38,
        span: 12743..12746,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 422,
        column: 39,
        span: 12746..12747,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 422,
        column: 42,
        span: 12747..12750,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
        column: 43,
        span: 12750..12751,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 422,
        column: 48,
        span: 12751..12756,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 422,
        column: 49,
        span: 12756..12757,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 422,
        column: 52,
        span: 12758..12760,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'74p4004'",
        ),
        line: 422,
        column: 62,
        span: 12761..12770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 422,
        column: 63,
        span: 12770..12771,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 422,
        column: 66,
        span: 12772..12774,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "7",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 422,
        column: 72,
        span: 12774..12780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 422,
        column: 73,
        span: 12780..12781,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 423,
        column: 0,
        span: 12782..12785,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 427,
        column: 6,
        span: 12830..12835,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 427,
        column: 15,
        span: 12836..12844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 427,
        column: 17,
        span: 12845..12846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
        column: 18,
        span: 12846..12847,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 427,
        column: 21,
        span: 12847..12850,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
        column: 22,
        span: 12850..12851,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 428,
        column: 5,
        span: 12854..12856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 428,
        column: 12,
        span: 12857..12863,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
        column: 13,
        span: 12863..12864,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'#'",
        ),
        line: 428,
        column: 16,
        span: 12864..12867,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 428,
        column: 17,
        span: 12867..12868,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 428,
        column: 21,
        span: 12869..12872,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
        column: 22,
        span: 12872..12873,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 428,
        column: 25,
        span: 12874..12876,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 428,
        column: 27,
        span: 12876..12878,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 428,
        column: 0,
        span: 12879..12883,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 429,
        column: 11,
        span: 12888..12894,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 429,
        column: 13,
        span: 12895..12896,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 429,
        column: 16,
        span: 12896..12899,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 429,
        column: 17,
        span: 12899..12900,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 430,
        column: 0,
        span: 12903..12907,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 431,
        column: 11,
        span: 12912..12918,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"***\"",
        ),
        line: 431,
        column: 17,
        span: 12919..12924,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 432,
        column: 0,
        span: 12927..12930,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 433,
        column: 0,
        span: 12931..12934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 435,
        column: 7,
        span: 12936..12942,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 435,
        column: 8,
        span: 12942..12943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 435,
        column: 9,
        span: 12943..12944,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 435,
        column: 10,
        span: 12944..12945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 435,
        column: 18,
        span: 12945..12953,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 435,
        column: 19,
        span: 12953..12954,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'fFfa'",
        ),
        line: 435,
        column: 25,
        span: 12954..12960,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 435,
        column: 26,
        span: 12960..12961,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 435,
        column: 29,
        span: 12961..12964,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 435,
        column: 30,
        span: 12964..12965,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 435,
        column: 31,
        span: 12965..12966,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 435,
        column: 34,
        span: 12967..12969,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 435,
        column: 38,
        span: 12970..12973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 435,
        column: 39,
        span: 12973..12974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 436,
        column: 7,
        span: 12975..12981,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 436,
        column: 8,
        span: 12981..12982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 436,
        column: 9,
        span: 12982..12983,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 436,
        column: 10,
        span: 12983..12984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 436,
        column: 18,
        span: 12984..12992,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 436,
        column: 19,
        span: 12992..12993,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'099'",
        ),
        line: 436,
        column: 24,
        span: 12993..12998,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 436,
        column: 25,
        span: 12998..12999,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 436,
        column: 27,
        span: 12999..13001,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 436,
        column: 28,
        span: 13001..13002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 436,
        column: 29,
        span: 13002..13003,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 436,
        column: 32,
        span: 13004..13006,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 436,
        column: 36,
        span: 13007..13010,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 436,
        column: 37,
        span: 13010..13011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 437,
        column: 7,
        span: 13012..13018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 437,
        column: 8,
        span: 13018..13019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 437,
        column: 9,
        span: 13019..13020,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 437,
        column: 10,
        span: 13020..13021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 437,
        column: 18,
        span: 13021..13029,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 437,
        column: 19,
        span: 13029..13030,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1\\0'",
        ),
        line: 437,
        column: 24,
        span: 13030..13035,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 437,
        column: 25,
        span: 13035..13036,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 437,
        column: 27,
        span: 13036..13038,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 437,
        column: 28,
        span: 13038..13039,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 437,
        column: 29,
        span: 13039..13040,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 437,
        column: 32,
        span: 13041..13043,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 437,
        column: 36,
        span: 13044..13047,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 437,
        column: 37,
        span: 13047..13048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 438,
        column: 7,
        span: 13049..13055,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 438,
        column: 8,
        span: 13055..13056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 438,
        column: 9,
        span: 13056..13057,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 438,
        column: 10,
        span: 13057..13058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 438,
        column: 18,
        span: 13058..13066,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 438,
        column: 19,
        span: 13066..13067,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 438,
        column: 21,
        span: 13067..13069,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 438,
        column: 22,
        span: 13069..13070,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 438,
        column: 24,
        span: 13070..13072,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 438,
        column: 25,
        span: 13072..13073,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 438,
        column: 26,
        span: 13073..13074,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 438,
        column: 29,
        span: 13075..13077,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 438,
        column: 33,
        span: 13078..13081,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 438,
        column: 34,
        span: 13081..13082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 439,
        column: 7,
        span: 13083..13089,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 439,
        column: 8,
        span: 13089..13090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 439,
        column: 9,
        span: 13090..13091,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 439,
        column: 10,
        span: 13091..13092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 439,
        column: 18,
        span: 13092..13100,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 439,
        column: 19,
        span: 13100..13101,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  '",
        ),
        line: 439,
        column: 23,
        span: 13101..13105,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 439,
        column: 24,
        span: 13105..13106,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 439,
        column: 26,
        span: 13106..13108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 439,
        column: 27,
        span: 13108..13109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 439,
        column: 28,
        span: 13109..13110,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 439,
        column: 31,
        span: 13111..13113,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 439,
        column: 35,
        span: 13114..13117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 439,
        column: 36,
        span: 13117..13118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 440,
        column: 7,
        span: 13119..13125,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 440,
        column: 8,
        span: 13125..13126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 440,
        column: 9,
        span: 13126..13127,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 440,
        column: 10,
        span: 13127..13128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 440,
        column: 18,
        span: 13128..13136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 440,
        column: 19,
        span: 13136..13137,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  '",
        ),
        line: 440,
        column: 23,
        span: 13137..13141,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 440,
        column: 24,
        span: 13141..13142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 440,
        column: 26,
        span: 13142..13144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 440,
        column: 27,
        span: 13144..13145,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 440,
        column: 28,
        span: 13145..13146,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 440,
        column: 31,
        span: 13147..13149,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 440,
        column: 35,
        span: 13150..13153,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 440,
        column: 36,
        span: 13153..13154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 441,
        column: 7,
        span: 13155..13161,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 441,
        column: 8,
        span: 13161..13162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 441,
        column: 9,
        span: 13162..13163,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 441,
        column: 10,
        span: 13163..13164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 441,
        column: 18,
        span: 13164..13172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 441,
        column: 19,
        span: 13172..13173,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0xf'",
        ),
        line: 441,
        column: 24,
        span: 13173..13178,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 441,
        column: 25,
        span: 13178..13179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 441,
        column: 28,
        span: 13179..13182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 441,
        column: 29,
        span: 13182..13183,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 441,
        column: 30,
        span: 13183..13184,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 441,
        column: 33,
        span: 13185..13187,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 441,
        column: 37,
        span: 13188..13191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 441,
        column: 38,
        span: 13191..13192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 443,
        column: 7,
        span: 13194..13200,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 443,
        column: 8,
        span: 13200..13201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 443,
        column: 9,
        span: 13201..13202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 443,
        column: 10,
        span: 13202..13203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 443,
        column: 18,
        span: 13203..13211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 443,
        column: 19,
        span: 13211..13212,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'inf'",
        ),
        line: 443,
        column: 24,
        span: 13212..13217,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 443,
        column: 25,
        span: 13217..13218,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 443,
        column: 26,
        span: 13218..13219,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 443,
        column: 29,
        span: 13220..13222,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 443,
        column: 33,
        span: 13223..13226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 443,
        column: 34,
        span: 13226..13227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 444,
        column: 7,
        span: 13228..13234,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 444,
        column: 8,
        span: 13234..13235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 444,
        column: 9,
        span: 13235..13236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 444,
        column: 10,
        span: 13236..13237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 444,
        column: 18,
        span: 13237..13245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 444,
        column: 19,
        span: 13245..13246,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' INF '",
        ),
        line: 444,
        column: 26,
        span: 13246..13253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 444,
        column: 27,
        span: 13253..13254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 444,
        column: 28,
        span: 13254..13255,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 444,
        column: 31,
        span: 13256..13258,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 444,
        column: 35,
        span: 13259..13262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 444,
        column: 36,
        span: 13262..13263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 445,
        column: 7,
        span: 13264..13270,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 445,
        column: 8,
        span: 13270..13271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 445,
        column: 9,
        span: 13271..13272,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 445,
        column: 10,
        span: 13272..13273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 445,
        column: 18,
        span: 13273..13281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 445,
        column: 19,
        span: 13281..13282,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'Nan'",
        ),
        line: 445,
        column: 24,
        span: 13282..13287,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 445,
        column: 25,
        span: 13287..13288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 445,
        column: 26,
        span: 13288..13289,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 445,
        column: 29,
        span: 13290..13292,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 445,
        column: 33,
        span: 13293..13296,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 445,
        column: 34,
        span: 13296..13297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 446,
        column: 7,
        span: 13298..13304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 446,
        column: 8,
        span: 13304..13305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 446,
        column: 9,
        span: 13305..13306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 446,
        column: 10,
        span: 13306..13307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 446,
        column: 18,
        span: 13307..13315,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 446,
        column: 19,
        span: 13315..13316,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'nan'",
        ),
        line: 446,
        column: 24,
        span: 13316..13321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 446,
        column: 25,
        span: 13321..13322,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 446,
        column: 26,
        span: 13322..13323,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 446,
        column: 29,
        span: 13324..13326,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 446,
        column: 33,
        span: 13327..13330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 446,
        column: 34,
        span: 13330..13331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 448,
        column: 7,
        span: 13333..13339,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 448,
        column: 8,
        span: 13339..13340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 448,
        column: 9,
        span: 13340..13341,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 448,
        column: 10,
        span: 13341..13342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 448,
        column: 18,
        span: 13342..13350,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 448,
        column: 19,
        span: 13350..13351,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  '",
        ),
        line: 448,
        column: 23,
        span: 13351..13355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 448,
        column: 24,
        span: 13355..13356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 448,
        column: 25,
        span: 13356..13357,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 448,
        column: 28,
        span: 13358..13360,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 448,
        column: 32,
        span: 13361..13364,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 448,
        column: 33,
        span: 13364..13365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 449,
        column: 7,
        span: 13366..13372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 449,
        column: 8,
        span: 13372..13373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 449,
        column: 9,
        span: 13373..13374,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 449,
        column: 10,
        span: 13374..13375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 449,
        column: 18,
        span: 13375..13383,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 449,
        column: 19,
        span: 13383..13384,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 449,
        column: 21,
        span: 13384..13386,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 449,
        column: 22,
        span: 13386..13387,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 449,
        column: 23,
        span: 13387..13388,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 449,
        column: 26,
        span: 13389..13391,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 449,
        column: 30,
        span: 13392..13395,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 449,
        column: 31,
        span: 13395..13396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 450,
        column: 7,
        span: 13397..13403,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 8,
        span: 13403..13404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 450,
        column: 9,
        span: 13404..13405,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 10,
        span: 13405..13406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 450,
        column: 18,
        span: 13406..13414,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 19,
        span: 13414..13415,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1  a'",
        ),
        line: 450,
        column: 25,
        span: 13415..13421,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
        column: 26,
        span: 13421..13422,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
        column: 27,
        span: 13422..13423,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 450,
        column: 30,
        span: 13424..13426,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 450,
        column: 34,
        span: 13427..13430,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
        column: 35,
        span: 13430..13431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 451,
        column: 7,
        span: 13432..13438,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 8,
        span: 13438..13439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 451,
        column: 9,
        span: 13439..13440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 10,
        span: 13440..13441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 451,
        column: 18,
        span: 13441..13449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 19,
        span: 13449..13450,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1  a'",
        ),
        line: 451,
        column: 25,
        span: 13450..13456,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 451,
        column: 26,
        span: 13456..13457,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 451,
        column: 28,
        span: 13457..13459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 29,
        span: 13459..13460,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 30,
        span: 13460..13461,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 451,
        column: 33,
        span: 13462..13464,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 451,
        column: 37,
        span: 13465..13468,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 38,
        span: 13468..13469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 452,
        column: 7,
        span: 13470..13476,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 452,
        column: 8,
        span: 13476..13477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 452,
        column: 9,
        span: 13477..13478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 452,
        column: 10,
        span: 13478..13479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 452,
        column: 18,
        span: 13479..13487,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 452,
        column: 19,
        span: 13487..13488,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1\\0'",
        ),
        line: 452,
        column: 24,
        span: 13488..13493,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 452,
        column: 25,
        span: 13493..13494,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 452,
        column: 26,
        span: 13494..13495,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 452,
        column: 29,
        span: 13496..13498,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 452,
        column: 33,
        span: 13499..13502,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 452,
        column: 34,
        span: 13502..13503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 453,
        column: 7,
        span: 13504..13510,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 453,
        column: 8,
        span: 13510..13511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 453,
        column: 9,
        span: 13511..13512,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 453,
        column: 10,
        span: 13512..13513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 453,
        column: 18,
        span: 13513..13521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 453,
        column: 19,
        span: 13521..13522,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1 \\0'",
        ),
        line: 453,
        column: 25,
        span: 13522..13528,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 453,
        column: 26,
        span: 13528..13529,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 453,
        column: 27,
        span: 13529..13530,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 453,
        column: 30,
        span: 13531..13533,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 453,
        column: 34,
        span: 13534..13537,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 453,
        column: 35,
        span: 13537..13538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 454,
        column: 7,
        span: 13539..13545,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 454,
        column: 8,
        span: 13545..13546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 454,
        column: 9,
        span: 13546..13547,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 454,
        column: 10,
        span: 13547..13548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 454,
        column: 18,
        span: 13548..13556,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 454,
        column: 19,
        span: 13556..13557,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1\\0 '",
        ),
        line: 454,
        column: 25,
        span: 13557..13563,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 454,
        column: 26,
        span: 13563..13564,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 454,
        column: 27,
        span: 13564..13565,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 454,
        column: 30,
        span: 13566..13568,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 454,
        column: 34,
        span: 13569..13572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 454,
        column: 35,
        span: 13572..13573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 455,
        column: 7,
        span: 13574..13580,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 455,
        column: 8,
        span: 13580..13581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 455,
        column: 9,
        span: 13581..13582,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 455,
        column: 10,
        span: 13582..13583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 455,
        column: 18,
        span: 13583..13591,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 455,
        column: 19,
        span: 13591..13592,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'e1'",
        ),
        line: 455,
        column: 23,
        span: 13592..13596,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 455,
        column: 24,
        span: 13596..13597,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 455,
        column: 25,
        span: 13597..13598,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 455,
        column: 28,
        span: 13599..13601,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 455,
        column: 32,
        span: 13602..13605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 455,
        column: 33,
        span: 13605..13606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 456,
        column: 7,
        span: 13607..13613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
        column: 8,
        span: 13613..13614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 456,
        column: 9,
        span: 13614..13615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
        column: 10,
        span: 13615..13616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 456,
        column: 18,
        span: 13616..13624,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
        column: 19,
        span: 13624..13625,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'e  1'",
        ),
        line: 456,
        column: 25,
        span: 13625..13631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
        column: 26,
        span: 13631..13632,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
        column: 27,
        span: 13632..13633,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 456,
        column: 30,
        span: 13634..13636,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 456,
        column: 34,
        span: 13637..13640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
        column: 35,
        span: 13640..13641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 457,
        column: 7,
        span: 13642..13648,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
        column: 8,
        span: 13648..13649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 457,
        column: 9,
        span: 13649..13650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
        column: 10,
        span: 13650..13651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 457,
        column: 18,
        span: 13651..13659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
        column: 19,
        span: 13659..13660,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' 3.4.5 '",
        ),
        line: 457,
        column: 28,
        span: 13660..13669,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 457,
        column: 29,
        span: 13669..13670,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 457,
        column: 30,
        span: 13670..13671,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 457,
        column: 33,
        span: 13672..13674,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 457,
        column: 37,
        span: 13675..13678,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 457,
        column: 38,
        span: 13678..13679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 462,
        column: 7,
        span: 13737..13743,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 462,
        column: 8,
        span: 13743..13744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 462,
        column: 16,
        span: 13744..13752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 462,
        column: 17,
        span: 13752..13753,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x'",
        ),
        line: 462,
        column: 21,
        span: 13753..13757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 462,
        column: 22,
        span: 13757..13758,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 462,
        column: 25,
        span: 13759..13761,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 462,
        column: 29,
        span: 13762..13765,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 462,
        column: 30,
        span: 13765..13766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 463,
        column: 7,
        span: 13767..13773,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 463,
        column: 8,
        span: 13773..13774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 463,
        column: 16,
        span: 13774..13782,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 463,
        column: 17,
        span: 13782..13783,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 463,
        column: 20,
        span: 13783..13786,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 463,
        column: 21,
        span: 13786..13787,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 463,
        column: 24,
        span: 13788..13790,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 463,
        column: 28,
        span: 13791..13794,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 463,
        column: 29,
        span: 13794..13795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 464,
        column: 7,
        span: 13796..13802,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 464,
        column: 8,
        span: 13802..13803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 464,
        column: 16,
        span: 13803..13811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 464,
        column: 17,
        span: 13811..13812,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x3'",
        ),
        line: 464,
        column: 21,
        span: 13812..13816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
        column: 22,
        span: 13816..13817,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 464,
        column: 25,
        span: 13818..13820,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 464,
        column: 29,
        span: 13821..13824,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
        column: 30,
        span: 13824..13825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 465,
        column: 7,
        span: 13826..13832,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 465,
        column: 8,
        span: 13832..13833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 465,
        column: 16,
        span: 13833..13841,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 465,
        column: 17,
        span: 13841..13842,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x3.3.3'",
        ),
        line: 465,
        column: 26,
        span: 13842..13851,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 465,
        column: 27,
        span: 13851..13852,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 465,
        column: 30,
        span: 13853..13855,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 465,
        column: 34,
        span: 13856..13859,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 465,
        column: 35,
        span: 13859..13860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 466,
        column: 7,
        span: 13883..13889,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 466,
        column: 8,
        span: 13889..13890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 466,
        column: 16,
        span: 13890..13898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 466,
        column: 17,
        span: 13898..13899,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'00x2'",
        ),
        line: 466,
        column: 23,
        span: 13899..13905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
        column: 24,
        span: 13905..13906,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 466,
        column: 27,
        span: 13907..13909,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 466,
        column: 31,
        span: 13910..13913,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
        column: 32,
        span: 13913..13914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 467,
        column: 7,
        span: 13915..13921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 467,
        column: 8,
        span: 13921..13922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 467,
        column: 16,
        span: 13922..13930,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 467,
        column: 17,
        span: 13930..13931,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x 2'",
        ),
        line: 467,
        column: 23,
        span: 13931..13937,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 467,
        column: 24,
        span: 13937..13938,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 467,
        column: 27,
        span: 13939..13941,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 467,
        column: 31,
        span: 13942..13945,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 467,
        column: 32,
        span: 13945..13946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 468,
        column: 7,
        span: 13947..13953,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 468,
        column: 8,
        span: 13953..13954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 468,
        column: 16,
        span: 13954..13962,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 468,
        column: 17,
        span: 13962..13963,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0 x2'",
        ),
        line: 468,
        column: 23,
        span: 13963..13969,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 468,
        column: 24,
        span: 13969..13970,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 468,
        column: 27,
        span: 13971..13973,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 468,
        column: 31,
        span: 13974..13977,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 468,
        column: 32,
        span: 13977..13978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 469,
        column: 7,
        span: 13979..13985,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 469,
        column: 8,
        span: 13985..13986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 469,
        column: 16,
        span: 13986..13994,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 469,
        column: 17,
        span: 13994..13995,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'23x'",
        ),
        line: 469,
        column: 22,
        span: 13995..14000,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 469,
        column: 23,
        span: 14000..14001,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 469,
        column: 26,
        span: 14002..14004,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 469,
        column: 30,
        span: 14005..14008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 469,
        column: 31,
        span: 14008..14009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 470,
        column: 7,
        span: 14010..14016,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
        column: 8,
        span: 14016..14017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 470,
        column: 16,
        span: 14017..14025,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
        column: 17,
        span: 14025..14026,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'- 0xaa'",
        ),
        line: 470,
        column: 25,
        span: 14026..14034,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
        column: 26,
        span: 14034..14035,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 470,
        column: 29,
        span: 14036..14038,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 470,
        column: 33,
        span: 14039..14042,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
        column: 34,
        span: 14042..14043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 471,
        column: 7,
        span: 14044..14050,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 471,
        column: 8,
        span: 14050..14051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 471,
        column: 16,
        span: 14051..14059,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 471,
        column: 17,
        span: 14059..14060,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-0xaaP '",
        ),
        line: 471,
        column: 26,
        span: 14060..14069,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 471,
        column: 27,
        span: 14069..14070,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 471,
        column: 30,
        span: 14071..14073,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 471,
        column: 34,
        span: 14074..14077,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 471,
        column: 35,
        span: 14077..14078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 472,
        column: 7,
        span: 14094..14100,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 472,
        column: 8,
        span: 14100..14101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 472,
        column: 16,
        span: 14101..14109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 472,
        column: 17,
        span: 14109..14110,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x0.51p'",
        ),
        line: 472,
        column: 26,
        span: 14110..14119,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 472,
        column: 27,
        span: 14119..14120,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 472,
        column: 30,
        span: 14121..14123,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 472,
        column: 34,
        span: 14124..14127,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 472,
        column: 35,
        span: 14127..14128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 473,
        column: 7,
        span: 14129..14135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 473,
        column: 8,
        span: 14135..14136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 473,
        column: 16,
        span: 14136..14144,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 473,
        column: 17,
        span: 14144..14145,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x5p+-2'",
        ),
        line: 473,
        column: 26,
        span: 14145..14154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 473,
        column: 27,
        span: 14154..14155,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 473,
        column: 30,
        span: 14156..14158,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 473,
        column: 34,
        span: 14159..14162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 473,
        column: 35,
        span: 14162..14163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 478,
        column: 7,
        span: 14199..14205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 478,
        column: 8,
        span: 14205..14206,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x10",
            ),
        ),
        line: 478,
        column: 12,
        span: 14205..14210,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 478,
        column: 15,
        span: 14211..14213,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 478,
        column: 18,
        span: 14213..14216,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 478,
        column: 22,
        span: 14217..14220,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xfff",
            ),
        ),
        line: 478,
        column: 28,
        span: 14220..14226,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 478,
        column: 31,
        span: 14227..14229,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 478,
        column: 33,
        span: 14229..14231,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 478,
        column: 35,
        span: 14232..14233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 478,
        column: 38,
        span: 14233..14236,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 478,
        column: 40,
        span: 14237..14238,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 478,
        column: 42,
        span: 14238..14240,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 478,
        column: 46,
        span: 14241..14244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0XFB",
            ),
        ),
        line: 478,
        column: 51,
        span: 14244..14249,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 478,
        column: 54,
        span: 14250..14252,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "251",
                    after_decimal: "",
                },
            ),
        ),
        line: 478,
        column: 58,
        span: 14252..14256,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 478,
        column: 59,
        span: 14256..14257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 479,
        column: 7,
        span: 14258..14264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 479,
        column: 8,
        span: 14264..14265,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "00",
                    after_decimal: "",
                },
                exponent: "12",
            },
        ),
        line: 479,
        column: 14,
        span: 14264..14271,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 479,
        column: 17,
        span: 14272..14274,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 479,
        column: 19,
        span: 14274..14276,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 479,
        column: 23,
        span: 14277..14280,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
                exponent: "-3",
            },
        ),
        line: 479,
        column: 31,
        span: 14280..14288,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 479,
        column: 34,
        span: 14289..14291,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 479,
        column: 36,
        span: 14291..14293,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 479,
        column: 37,
        span: 14293..14294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 480,
        column: 7,
        span: 14295..14301,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 480,
        column: 8,
        span: 14301..14302,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 480,
        column: 18,
        span: 14301..14312,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 480,
        column: 21,
        span: 14313..14315,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 480,
        column: 23,
        span: 14316..14317,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 480,
        column: 24,
        span: 14316..14318,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 480,
        column: 27,
        span: 14319..14321,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 480,
        column: 30,
        span: 14321..14324,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 480,
        column: 31,
        span: 14324..14325,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 480,
        column: 33,
        span: 14326..14327,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 480,
        column: 35,
        span: 14327..14329,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 480,
        column: 36,
        span: 14329..14330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 481,
        column: 7,
        span: 14331..14337,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 481,
        column: 8,
        span: 14337..14338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 481,
        column: 16,
        span: 14338..14346,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 481,
        column: 17,
        span: 14346..14347,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+0x2'",
        ),
        line: 481,
        column: 23,
        span: 14347..14353,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 481,
        column: 24,
        span: 14353..14354,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 481,
        column: 27,
        span: 14355..14357,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 481,
        column: 29,
        span: 14357..14359,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 481,
        column: 30,
        span: 14359..14360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 482,
        column: 7,
        span: 14361..14367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 482,
        column: 8,
        span: 14367..14368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 482,
        column: 16,
        span: 14368..14376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 482,
        column: 17,
        span: 14376..14377,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-0xaA'",
        ),
        line: 482,
        column: 24,
        span: 14377..14384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 482,
        column: 25,
        span: 14384..14385,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 482,
        column: 28,
        span: 14386..14388,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 482,
        column: 30,
        span: 14389..14390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "170",
                    after_decimal: "",
                },
            ),
        ),
        line: 482,
        column: 33,
        span: 14389..14393,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 482,
        column: 34,
        span: 14393..14394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 483,
        column: 7,
        span: 14395..14401,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 483,
        column: 8,
        span: 14401..14402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 483,
        column: 16,
        span: 14402..14410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 483,
        column: 17,
        span: 14410..14411,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-0xffFFFfff'",
        ),
        line: 483,
        column: 30,
        span: 14411..14424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 483,
        column: 31,
        span: 14424..14425,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 483,
        column: 34,
        span: 14426..14428,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 483,
        column: 36,
        span: 14429..14430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 483,
        column: 37,
        span: 14430..14431,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 483,
        column: 38,
        span: 14430..14432,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 483,
        column: 41,
        span: 14433..14435,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 483,
        column: 44,
        span: 14435..14438,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 483,
        column: 45,
        span: 14438..14439,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 483,
        column: 47,
        span: 14440..14441,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 483,
        column: 49,
        span: 14441..14443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 483,
        column: 50,
        span: 14443..14444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 486,
        column: 7,
        span: 14490..14496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 486,
        column: 8,
        span: 14496..14497,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
                exponent: "+1",
            },
        ),
        line: 486,
        column: 12,
        span: 14496..14501,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 486,
        column: 15,
        span: 14502..14504,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 486,
        column: 17,
        span: 14504..14506,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 486,
        column: 21,
        span: 14507..14510,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xE",
            ),
        ),
        line: 486,
        column: 25,
        span: 14510..14514,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 486,
        column: 27,
        span: 14515..14516,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 486,
        column: 29,
        span: 14516..14518,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 486,
        column: 32,
        span: 14519..14521,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 486,
        column: 35,
        span: 14521..14524,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 486,
        column: 39,
        span: 14525..14528,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xe",
            ),
        ),
        line: 486,
        column: 43,
        span: 14528..14532,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 486,
        column: 45,
        span: 14533..14534,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 486,
        column: 47,
        span: 14534..14536,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 486,
        column: 50,
        span: 14537..14539,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 486,
        column: 53,
        span: 14539..14542,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 486,
        column: 54,
        span: 14542..14543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 491,
        column: 7,
        span: 14565..14571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 491,
        column: 8,
        span: 14571..14572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 491,
        column: 16,
        span: 14572..14580,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 491,
        column: 17,
        span: 14580..14581,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  0x2.5  '",
        ),
        line: 491,
        column: 28,
        span: 14581..14592,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 491,
        column: 29,
        span: 14592..14593,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 491,
        column: 32,
        span: 14594..14596,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x25",
            ),
        ),
        line: 491,
        column: 37,
        span: 14596..14601,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 491,
        column: 39,
        span: 14602..14603,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 491,
        column: 42,
        span: 14603..14606,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 491,
        column: 43,
        span: 14606..14607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 492,
        column: 7,
        span: 14608..14614,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 492,
        column: 8,
        span: 14614..14615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 492,
        column: 16,
        span: 14615..14623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 492,
        column: 17,
        span: 14623..14624,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  -0x2.5  '",
        ),
        line: 492,
        column: 29,
        span: 14624..14636,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 492,
        column: 30,
        span: 14636..14637,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 492,
        column: 33,
        span: 14638..14640,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 492,
        column: 35,
        span: 14641..14642,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x25",
            ),
        ),
        line: 492,
        column: 39,
        span: 14641..14646,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 492,
        column: 41,
        span: 14647..14648,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 492,
        column: 44,
        span: 14648..14651,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 492,
        column: 45,
        span: 14651..14652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 493,
        column: 7,
        span: 14653..14659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 493,
        column: 8,
        span: 14659..14660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 493,
        column: 16,
        span: 14660..14668,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 493,
        column: 17,
        span: 14668..14669,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  +0x0.51p+8  '",
        ),
        line: 493,
        column: 33,
        span: 14669..14685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 493,
        column: 34,
        span: 14685..14686,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 493,
        column: 37,
        span: 14687..14689,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x51",
            ),
        ),
        line: 493,
        column: 42,
        span: 14689..14694,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 493,
        column: 43,
        span: 14694..14695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 494,
        column: 7,
        span: 14696..14702,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 494,
        column: 8,
        span: 14702..14703,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "",
                    after_decimal: ".FfffFFFF",
                },
            ),
        ),
        line: 494,
        column: 19,
        span: 14702..14714,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 494,
        column: 22,
        span: 14715..14717,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 494,
        column: 24,
        span: 14717..14719,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 494,
        column: 26,
        span: 14720..14721,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x.00000001'",
        ),
        line: 494,
        column: 40,
        span: 14722..14735,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 494,
        column: 41,
        span: 14735..14736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 495,
        column: 7,
        span: 14737..14743,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 495,
        column: 8,
        span: 14743..14744,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0xA.a'",
        ),
        line: 495,
        column: 15,
        span: 14744..14751,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 495,
        column: 17,
        span: 14752..14753,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 495,
        column: 19,
        span: 14753..14755,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 495,
        column: 22,
        span: 14756..14758,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 495,
        column: 25,
        span: 14758..14761,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 495,
        column: 27,
        span: 14762..14763,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 495,
        column: 30,
        span: 14763..14766,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 495,
        column: 32,
        span: 14767..14768,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 495,
        column: 35,
        span: 14768..14771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 495,
        column: 36,
        span: 14771..14772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 496,
        column: 7,
        span: 14773..14779,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 496,
        column: 8,
        span: 14779..14780,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "0a",
                    after_decimal: ".a",
                },
                exponent: "4",
            },
        ),
        line: 496,
        column: 15,
        span: 14779..14787,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 496,
        column: 18,
        span: 14788..14790,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0XAA",
            ),
        ),
        line: 496,
        column: 23,
        span: 14790..14795,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 496,
        column: 24,
        span: 14795..14796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 497,
        column: 7,
        span: 14797..14803,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 497,
        column: 8,
        span: 14803..14804,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "04",
                    after_decimal: "",
                },
                exponent: "-2",
            },
        ),
        line: 497,
        column: 14,
        span: 14803..14810,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 497,
        column: 17,
        span: 14811..14813,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 497,
        column: 19,
        span: 14813..14815,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 497,
        column: 20,
        span: 14815..14816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 498,
        column: 7,
        span: 14817..14823,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 498,
        column: 8,
        span: 14823..14824,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 498,
        column: 13,
        span: 14823..14829,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 498,
        column: 16,
        span: 14830..14832,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x1.'",
        ),
        line: 498,
        column: 23,
        span: 14833..14839,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 498,
        column: 25,
        span: 14840..14841,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+0x.1'",
        ),
        line: 498,
        column: 33,
        span: 14842..14849,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 498,
        column: 34,
        span: 14849..14850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 499,
        column: 7,
        span: 14851..14857,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 499,
        column: 8,
        span: 14857..14858,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "abcdf",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 499,
        column: 18,
        span: 14857..14868,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 499,
        column: 21,
        span: 14869..14871,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "0",
                    after_decimal: ".ABCDF",
                },
                exponent: "+24",
            },
        ),
        line: 499,
        column: 35,
        span: 14871..14885,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 499,
        column: 36,
        span: 14885..14886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 502,
        column: 7,
        span: 14889..14895,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 502,
        column: 8,
        span: 14895..14896,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 502,
        column: 11,
        span: 14895..14899,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 502,
        column: 14,
        span: 14900..14902,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 502,
        column: 17,
        span: 14902..14905,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 502,
        column: 19,
        span: 14906..14907,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 502,
        column: 23,
        span: 14907..14910,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 502,
        column: 24,
        span: 14910..14911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 503,
        column: 7,
        span: 14912..14918,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 503,
        column: 8,
        span: 14918..14919,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 503,
        column: 13,
        span: 14918..14924,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 503,
        column: 16,
        span: 14925..14927,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "2",
            },
        ),
        line: 503,
        column: 20,
        span: 14927..14931,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 503,
        column: 24,
        span: 14932..14935,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".01",
                },
            ),
        ),
        line: 503,
        column: 29,
        span: 14935..14939,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 503,
        column: 32,
        span: 14940..14942,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "-2",
            },
        ),
        line: 503,
        column: 37,
        span: 14942..14947,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 503,
        column: 38,
        span: 14947..14948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 504,
        column: 7,
        span: 14949..14955,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 504,
        column: 8,
        span: 14955..14956,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1111111111",
                    after_decimal: "",
                },
            ),
        ),
        line: 504,
        column: 18,
        span: 14955..14966,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 504,
        column: 20,
        span: 14967..14968,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1111111110",
                    after_decimal: "",
                },
            ),
        ),
        line: 504,
        column: 31,
        span: 14968..14979,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 504,
        column: 34,
        span: 14980..14982,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1000",
                    after_decimal: ".00",
                },
                exponent: "-03",
            },
        ),
        line: 504,
        column: 46,
        span: 14982..14994,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 504,
        column: 47,
        span: 14994..14995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 505,
        column: 7,
        span: 14996..15002,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 505,
        column: 8,
        span: 15002..15003,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 505,
        column: 11,
        span: 15002..15006,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 505,
        column: 14,
        span: 15007..15009,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1.'",
        ),
        line: 505,
        column: 19,
        span: 15010..15014,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 505,
        column: 21,
        span: 15015..15016,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.1'",
        ),
        line: 505,
        column: 26,
        span: 15017..15021,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 505,
        column: 27,
        span: 15021..15022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 506,
        column: 7,
        span: 15023..15029,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 506,
        column: 8,
        span: 15029..15030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 506,
        column: 16,
        span: 15030..15038,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1111111111'",
        ),
        line: 506,
        column: 29,
        span: 15039..15051,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 506,
        column: 31,
        span: 15052..15053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 506,
        column: 40,
        span: 15054..15062,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1111111110'",
        ),
        line: 506,
        column: 53,
        span: 15063..15075,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 506,
        column: 56,
        span: 15076..15078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 507,
        column: 11,
        span: 15081..15089,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  +0.001e+3 \\n\\t\"",
        ),
        line: 507,
        column: 30,
        span: 15090..15108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 507,
        column: 31,
        span: 15108..15109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 509,
        column: 7,
        span: 15111..15117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 509,
        column: 8,
        span: 15117..15118,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
                exponent: "-30",
            },
        ),
        line: 509,
        column: 15,
        span: 15117..15125,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 509,
        column: 17,
        span: 15126..15127,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
                exponent: "-31",
            },
        ),
        line: 509,
        column: 25,
        span: 15127..15135,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 509,
        column: 29,
        span: 15136..15139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
                exponent: "30",
            },
        ),
        line: 509,
        column: 36,
        span: 15139..15146,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 509,
        column: 38,
        span: 15147..15148,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
                exponent: "31",
            },
        ),
        line: 509,
        column: 45,
        span: 15148..15155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 509,
        column: 46,
        span: 15155..15156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 511,
        column: 7,
        span: 15158..15164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 511,
        column: 8,
        span: 15164..15165,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".123456",
                },
            ),
        ),
        line: 511,
        column: 16,
        span: 15164..15173,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 511,
        column: 18,
        span: 15174..15175,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".123455",
                },
            ),
        ),
        line: 511,
        column: 27,
        span: 15175..15184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 511,
        column: 28,
        span: 15184..15185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 513,
        column: 7,
        span: 15187..15193,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 513,
        column: 8,
        span: 15193..15194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 513,
        column: 16,
        span: 15194..15202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 513,
        column: 17,
        span: 15202..15203,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+1.23E18'",
        ),
        line: 513,
        column: 27,
        span: 15203..15213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 513,
        column: 28,
        span: 15213..15214,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 513,
        column: 31,
        span: 15215..15217,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".23",
                },
            ),
        ),
        line: 513,
        column: 36,
        span: 15217..15222,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 513,
        column: 38,
        span: 15223..15224,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 513,
        column: 43,
        span: 15224..15229,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 513,
        column: 45,
        span: 15230..15231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "18",
                    after_decimal: "",
                },
            ),
        ),
        line: 513,
        column: 48,
        span: 15231..15234,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 513,
        column: 49,
        span: 15234..15235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 516,
        column: 7,
        span: 15264..15270,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 516,
        column: 8,
        span: 15270..15271,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 516,
        column: 11,
        span: 15271..15274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 516,
        column: 13,
        span: 15275..15276,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 516,
        column: 14,
        span: 15275..15277,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 516,
        column: 16,
        span: 15278..15279,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 516,
        column: 18,
        span: 15279..15281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 516,
        column: 19,
        span: 15281..15282,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 516,
        column: 23,
        span: 15283..15286,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 516,
        column: 25,
        span: 15287..15288,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 516,
        column: 26,
        span: 15287..15289,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 516,
        column: 28,
        span: 15290..15291,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 516,
        column: 30,
        span: 15291..15293,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 516,
        column: 31,
        span: 15293..15294,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 516,
        column: 35,
        span: 15295..15298,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 516,
        column: 39,
        span: 15299..15302,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 516,
        column: 41,
        span: 15303..15304,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 516,
        column: 42,
        span: 15303..15305,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 516,
        column: 44,
        span: 15306..15307,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 516,
        column: 46,
        span: 15307..15309,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 516,
        column: 47,
        span: 15309..15310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 516,
        column: 48,
        span: 15310..15311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 517,
        column: 7,
        span: 15312..15318,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 517,
        column: 8,
        span: 15318..15319,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 517,
        column: 11,
        span: 15319..15322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 517,
        column: 13,
        span: 15323..15324,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 517,
        column: 16,
        span: 15324..15327,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 517,
        column: 18,
        span: 15328..15329,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 517,
        column: 22,
        span: 15330..15333,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 517,
        column: 23,
        span: 15333..15334,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 517,
        column: 27,
        span: 15335..15338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 517,
        column: 29,
        span: 15339..15340,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 517,
        column: 32,
        span: 15340..15343,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 517,
        column: 34,
        span: 15344..15345,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 517,
        column: 38,
        span: 15346..15349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 517,
        column: 39,
        span: 15349..15350,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 517,
        column: 43,
        span: 15351..15354,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 517,
        column: 47,
        span: 15355..15358,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 517,
        column: 49,
        span: 15359..15360,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 517,
        column: 52,
        span: 15360..15363,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 517,
        column: 54,
        span: 15364..15365,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 517,
        column: 58,
        span: 15366..15369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 517,
        column: 59,
        span: 15369..15370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 517,
        column: 60,
        span: 15370..15371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 518,
        column: 7,
        span: 15372..15378,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 518,
        column: 8,
        span: 15378..15379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 518,
        column: 9,
        span: 15379..15380,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 518,
        column: 10,
        span: 15379..15381,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 518,
        column: 13,
        span: 15382..15384,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 518,
        column: 15,
        span: 15384..15386,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 518,
        column: 16,
        span: 15386..15387,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 518,
        column: 20,
        span: 15388..15391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 518,
        column: 22,
        span: 15392..15393,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 518,
        column: 23,
        span: 15392..15394,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 518,
        column: 26,
        span: 15395..15397,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 518,
        column: 28,
        span: 15397..15399,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 518,
        column: 29,
        span: 15399..15400,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 518,
        column: 33,
        span: 15401..15404,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 518,
        column: 37,
        span: 15405..15408,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 518,
        column: 39,
        span: 15409..15410,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 518,
        column: 40,
        span: 15409..15411,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 518,
        column: 43,
        span: 15412..15414,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 518,
        column: 45,
        span: 15414..15416,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 518,
        column: 46,
        span: 15416..15417,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 518,
        column: 47,
        span: 15417..15418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 519,
        column: 7,
        span: 15419..15425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 519,
        column: 8,
        span: 15425..15426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 519,
        column: 9,
        span: 15426..15427,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 519,
        column: 12,
        span: 15427..15430,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 519,
        column: 15,
        span: 15431..15433,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 519,
        column: 19,
        span: 15434..15437,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 519,
        column: 20,
        span: 15437..15438,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 519,
        column: 24,
        span: 15439..15442,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 519,
        column: 26,
        span: 15443..15444,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 519,
        column: 29,
        span: 15444..15447,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 519,
        column: 32,
        span: 15448..15450,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 519,
        column: 36,
        span: 15451..15454,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 519,
        column: 37,
        span: 15454..15455,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 519,
        column: 41,
        span: 15456..15459,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 519,
        column: 45,
        span: 15460..15463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 519,
        column: 47,
        span: 15464..15465,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 519,
        column: 50,
        span: 15465..15468,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 519,
        column: 53,
        span: 15469..15471,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 519,
        column: 57,
        span: 15472..15475,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 519,
        column: 58,
        span: 15475..15476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 519,
        column: 59,
        span: 15476..15477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 520,
        column: 7,
        span: 15478..15484,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 520,
        column: 8,
        span: 15484..15485,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 520,
        column: 11,
        span: 15485..15488,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 520,
        column: 13,
        span: 15489..15490,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 520,
        column: 14,
        span: 15489..15491,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 520,
        column: 16,
        span: 15492..15493,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 520,
        column: 18,
        span: 15493..15495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 520,
        column: 19,
        span: 15495..15496,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 520,
        column: 23,
        span: 15497..15500,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 520,
        column: 27,
        span: 15501..15504,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 520,
        column: 29,
        span: 15505..15506,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 520,
        column: 30,
        span: 15505..15507,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 520,
        column: 32,
        span: 15508..15509,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 520,
        column: 34,
        span: 15509..15511,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 520,
        column: 35,
        span: 15511..15512,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 520,
        column: 39,
        span: 15513..15516,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 520,
        column: 41,
        span: 15517..15518,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 520,
        column: 42,
        span: 15517..15519,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 520,
        column: 44,
        span: 15520..15521,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 520,
        column: 46,
        span: 15521..15523,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 520,
        column: 47,
        span: 15523..15524,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 520,
        column: 48,
        span: 15524..15525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 521,
        column: 7,
        span: 15526..15532,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 521,
        column: 8,
        span: 15532..15533,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 521,
        column: 11,
        span: 15533..15536,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 521,
        column: 13,
        span: 15537..15538,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 521,
        column: 16,
        span: 15538..15541,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 521,
        column: 18,
        span: 15542..15543,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 521,
        column: 22,
        span: 15544..15547,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 521,
        column: 23,
        span: 15547..15548,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 521,
        column: 27,
        span: 15549..15552,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 521,
        column: 31,
        span: 15553..15556,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 521,
        column: 33,
        span: 15557..15558,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 521,
        column: 36,
        span: 15558..15561,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 521,
        column: 38,
        span: 15562..15563,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 521,
        column: 42,
        span: 15564..15567,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 521,
        column: 43,
        span: 15567..15568,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 521,
        column: 47,
        span: 15569..15572,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 521,
        column: 49,
        span: 15573..15574,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 521,
        column: 52,
        span: 15574..15577,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 521,
        column: 54,
        span: 15578..15579,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 521,
        column: 58,
        span: 15580..15583,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 521,
        column: 59,
        span: 15583..15584,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 521,
        column: 60,
        span: 15584..15585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 522,
        column: 7,
        span: 15586..15592,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 522,
        column: 8,
        span: 15592..15593,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 522,
        column: 9,
        span: 15593..15594,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 522,
        column: 10,
        span: 15593..15595,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 522,
        column: 13,
        span: 15596..15598,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 522,
        column: 15,
        span: 15598..15600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 522,
        column: 16,
        span: 15600..15601,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 522,
        column: 20,
        span: 15602..15605,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 522,
        column: 24,
        span: 15606..15609,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 522,
        column: 26,
        span: 15610..15611,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 522,
        column: 27,
        span: 15610..15612,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 522,
        column: 30,
        span: 15613..15615,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 522,
        column: 32,
        span: 15615..15617,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 522,
        column: 33,
        span: 15617..15618,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 522,
        column: 37,
        span: 15619..15622,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 522,
        column: 39,
        span: 15623..15624,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 522,
        column: 40,
        span: 15623..15625,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 522,
        column: 43,
        span: 15626..15628,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 522,
        column: 45,
        span: 15628..15630,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 522,
        column: 46,
        span: 15630..15631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 522,
        column: 47,
        span: 15631..15632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 523,
        column: 7,
        span: 15633..15639,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 523,
        column: 8,
        span: 15639..15640,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 523,
        column: 9,
        span: 15640..15641,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 523,
        column: 12,
        span: 15641..15644,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 523,
        column: 15,
        span: 15645..15647,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 523,
        column: 19,
        span: 15648..15651,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 523,
        column: 20,
        span: 15651..15652,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 523,
        column: 24,
        span: 15653..15656,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 523,
        column: 28,
        span: 15657..15660,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 523,
        column: 30,
        span: 15661..15662,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 523,
        column: 33,
        span: 15662..15665,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 523,
        column: 36,
        span: 15666..15668,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 523,
        column: 40,
        span: 15669..15672,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 523,
        column: 41,
        span: 15672..15673,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 523,
        column: 45,
        span: 15674..15677,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 523,
        column: 47,
        span: 15678..15679,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 523,
        column: 50,
        span: 15679..15682,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 523,
        column: 53,
        span: 15683..15685,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 523,
        column: 57,
        span: 15686..15689,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 523,
        column: 58,
        span: 15689..15690,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 523,
        column: 59,
        span: 15690..15691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 524,
        column: 7,
        span: 15692..15698,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 524,
        column: 8,
        span: 15698..15699,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 524,
        column: 11,
        span: 15698..15702,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 524,
        column: 13,
        span: 15703..15704,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 524,
        column: 17,
        span: 15704..15708,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 524,
        column: 21,
        span: 15709..15712,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 524,
        column: 25,
        span: 15712..15716,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 524,
        column: 28,
        span: 15717..15719,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 524,
        column: 32,
        span: 15719..15723,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 524,
        column: 36,
        span: 15724..15727,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 524,
        column: 40,
        span: 15728..15731,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 524,
        column: 42,
        span: 15732..15733,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 524,
        column: 45,
        span: 15732..15736,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 524,
        column: 47,
        span: 15737..15738,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 524,
        column: 51,
        span: 15738..15742,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 524,
        column: 52,
        span: 15742..15743,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 524,
        column: 56,
        span: 15744..15747,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 524,
        column: 60,
        span: 15747..15751,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 524,
        column: 63,
        span: 15752..15754,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 524,
        column: 67,
        span: 15754..15758,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 524,
        column: 68,
        span: 15758..15759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 527,
        column: 7,
        span: 15785..15791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 527,
        column: 8,
        span: 15791..15792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 527,
        column: 11,
        span: 15792..15795,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 527,
        column: 12,
        span: 15795..15796,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 527,
        column: 13,
        span: 15796..15797,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 527,
        column: 14,
        span: 15796..15798,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 527,
        column: 16,
        span: 15799..15800,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 527,
        column: 18,
        span: 15800..15802,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 527,
        column: 19,
        span: 15802..15803,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 527,
        column: 21,
        span: 15803..15805,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 527,
        column: 22,
        span: 15805..15806,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 527,
        column: 23,
        span: 15806..15807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 528,
        column: 7,
        span: 15808..15814,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 528,
        column: 8,
        span: 15814..15815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 528,
        column: 11,
        span: 15815..15818,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 528,
        column: 12,
        span: 15818..15819,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 528,
        column: 13,
        span: 15818..15820,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 528,
        column: 15,
        span: 15821..15822,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 528,
        column: 17,
        span: 15823..15824,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 528,
        column: 18,
        span: 15823..15825,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 528,
        column: 19,
        span: 15825..15826,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 528,
        column: 21,
        span: 15827..15828,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 528,
        column: 22,
        span: 15827..15829,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 528,
        column: 23,
        span: 15829..15830,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 528,
        column: 24,
        span: 15830..15831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 529,
        column: 7,
        span: 15832..15838,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
        column: 8,
        span: 15838..15839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 529,
        column: 11,
        span: 15839..15842,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
        column: 12,
        span: 15842..15843,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 529,
        column: 13,
        span: 15843..15844,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 529,
        column: 16,
        span: 15843..15847,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 529,
        column: 18,
        span: 15848..15849,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 529,
        column: 20,
        span: 15849..15851,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 529,
        column: 21,
        span: 15851..15852,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 529,
        column: 25,
        span: 15852..15856,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
        column: 26,
        span: 15856..15857,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
        column: 27,
        span: 15857..15858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 530,
        column: 7,
        span: 15859..15865,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 530,
        column: 8,
        span: 15865..15866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 530,
        column: 11,
        span: 15866..15869,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 530,
        column: 12,
        span: 15869..15870,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 530,
        column: 13,
        span: 15869..15871,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 530,
        column: 15,
        span: 15872..15873,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 530,
        column: 17,
        span: 15874..15875,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 530,
        column: 20,
        span: 15874..15878,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 530,
        column: 21,
        span: 15878..15879,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 530,
        column: 23,
        span: 15880..15881,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 530,
        column: 26,
        span: 15880..15884,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 530,
        column: 27,
        span: 15884..15885,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 530,
        column: 28,
        span: 15885..15886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 531,
        column: 7,
        span: 15887..15893,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 531,
        column: 8,
        span: 15893..15894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 531,
        column: 12,
        span: 15894..15898,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 531,
        column: 13,
        span: 15898..15899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 531,
        column: 15,
        span: 15899..15901,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 531,
        column: 17,
        span: 15902..15903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 531,
        column: 22,
        span: 15904..15908,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 531,
        column: 23,
        span: 15908..15909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 531,
        column: 25,
        span: 15909..15911,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 531,
        column: 27,
        span: 15912..15913,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 531,
        column: 29,
        span: 15913..15915,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 531,
        column: 32,
        span: 15916..15918,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 531,
        column: 34,
        span: 15918..15920,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 531,
        column: 35,
        span: 15920..15921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 532,
        column: 7,
        span: 15922..15928,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
        column: 8,
        span: 15928..15929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 532,
        column: 12,
        span: 15929..15933,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 532,
        column: 13,
        span: 15933..15934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 532,
        column: 15,
        span: 15934..15936,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 532,
        column: 17,
        span: 15937..15938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 532,
        column: 22,
        span: 15939..15943,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 532,
        column: 23,
        span: 15943..15944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 532,
        column: 25,
        span: 15944..15946,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 532,
        column: 27,
        span: 15947..15948,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".001",
                },
            ),
        ),
        line: 532,
        column: 33,
        span: 15948..15954,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 532,
        column: 36,
        span: 15955..15957,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".141",
                },
            ),
        ),
        line: 532,
        column: 42,
        span: 15957..15963,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
        column: 43,
        span: 15963..15964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 534,
        column: 7,
        span: 15966..15972,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 534,
        column: 8,
        span: 15972..15973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 534,
        column: 11,
        span: 15973..15976,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 534,
        column: 12,
        span: 15976..15977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 534,
        column: 18,
        span: 15977..15983,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 534,
        column: 20,
        span: 15984..15985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 534,
        column: 27,
        span: 15986..15992,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 534,
        column: 28,
        span: 15992..15993,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 534,
        column: 30,
        span: 15993..15995,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 534,
        column: 31,
        span: 15995..15996,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 534,
        column: 32,
        span: 15996..15997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 535,
        column: 7,
        span: 15998..16004,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 535,
        column: 8,
        span: 16004..16005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 535,
        column: 11,
        span: 16005..16008,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 535,
        column: 12,
        span: 16008..16009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 535,
        column: 18,
        span: 16009..16015,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 535,
        column: 20,
        span: 16016..16017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 535,
        column: 27,
        span: 16018..16024,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 535,
        column: 28,
        span: 16024..16025,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
        column: 30,
        span: 16025..16027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 535,
        column: 31,
        span: 16027..16028,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 535,
        column: 32,
        span: 16028..16029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 536,
        column: 7,
        span: 16030..16036,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 536,
        column: 8,
        span: 16036..16037,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 536,
        column: 9,
        span: 16037..16038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 536,
        column: 15,
        span: 16038..16044,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 536,
        column: 17,
        span: 16045..16046,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 536,
        column: 19,
        span: 16046..16048,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 536,
        column: 20,
        span: 16048..16049,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 536,
        column: 22,
        span: 16050..16051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 536,
        column: 29,
        span: 16052..16058,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 536,
        column: 32,
        span: 16059..16061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 536,
        column: 39,
        span: 16062..16068,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 536,
        column: 41,
        span: 16069..16070,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 536,
        column: 43,
        span: 16070..16072,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 536,
        column: 44,
        span: 16072..16073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 537,
        column: 7,
        span: 16074..16080,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 537,
        column: 8,
        span: 16080..16081,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 537,
        column: 9,
        span: 16081..16082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 537,
        column: 15,
        span: 16082..16088,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 537,
        column: 17,
        span: 16089..16090,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 537,
        column: 19,
        span: 16090..16092,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 537,
        column: 20,
        span: 16092..16093,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 537,
        column: 22,
        span: 16094..16095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 537,
        column: 29,
        span: 16096..16102,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 537,
        column: 32,
        span: 16103..16105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 537,
        column: 39,
        span: 16106..16112,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 537,
        column: 41,
        span: 16113..16114,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 537,
        column: 43,
        span: 16114..16116,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 537,
        column: 44,
        span: 16116..16117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 538,
        column: 7,
        span: 16118..16124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 538,
        column: 8,
        span: 16124..16125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 538,
        column: 14,
        span: 16125..16131,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 538,
        column: 16,
        span: 16132..16133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 538,
        column: 23,
        span: 16134..16140,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 538,
        column: 26,
        span: 16141..16143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 538,
        column: 33,
        span: 16144..16150,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 538,
        column: 35,
        span: 16151..16152,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 538,
        column: 37,
        span: 16152..16154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 538,
        column: 38,
        span: 16154..16155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 540,
        column: 7,
        span: 16157..16163,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 540,
        column: 8,
        span: 16163..16164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 540,
        column: 14,
        span: 16164..16170,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 540,
        column: 16,
        span: 16171..16172,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 540,
        column: 18,
        span: 16173..16174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 540,
        column: 19,
        span: 16173..16175,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 540,
        column: 22,
        span: 16176..16178,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 540,
        column: 24,
        span: 16178..16180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 540,
        column: 25,
        span: 16180..16181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 541,
        column: 7,
        span: 16182..16188,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 541,
        column: 8,
        span: 16188..16189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 541,
        column: 14,
        span: 16189..16195,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 541,
        column: 16,
        span: 16196..16197,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 541,
        column: 18,
        span: 16198..16199,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 541,
        column: 19,
        span: 16198..16200,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 541,
        column: 22,
        span: 16201..16203,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 541,
        column: 24,
        span: 16203..16205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 541,
        column: 25,
        span: 16205..16206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 542,
        column: 7,
        span: 16207..16213,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 542,
        column: 8,
        span: 16213..16214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 542,
        column: 14,
        span: 16214..16220,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 542,
        column: 16,
        span: 16221..16222,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 542,
        column: 18,
        span: 16223..16224,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 542,
        column: 19,
        span: 16223..16225,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 542,
        column: 22,
        span: 16226..16228,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 542,
        column: 24,
        span: 16229..16230,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 542,
        column: 25,
        span: 16229..16231,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 542,
        column: 26,
        span: 16231..16232,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 546,
        column: 3,
        span: 16324..16326,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 546,
        column: 7,
        span: 16327..16330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 546,
        column: 13,
        span: 16331..16336,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 546,
        column: 0,
        span: 16337..16341,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 547,
        column: 8,
        span: 16344..16349,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 547,
        column: 17,
        span: 16350..16358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anan",
        ),
        line: 547,
        column: 22,
        span: 16359..16363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 547,
        column: 23,
        span: 16363..16364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 547,
        column: 24,
        span: 16364..16365,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 547,
        column: 25,
        span: 16365..16366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 547,
        column: 32,
        span: 16367..16373,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 547,
        column: 33,
        span: 16373..16374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isNaN",
        ),
        line: 547,
        column: 38,
        span: 16374..16379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 547,
        column: 39,
        span: 16379..16380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 547,
        column: 40,
        span: 16380..16381,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 547,
        column: 41,
        span: 16381..16382,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 547,
        column: 42,
        span: 16382..16383,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 547,
        column: 46,
        span: 16384..16387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anan",
        ),
        line: 548,
        column: 7,
        span: 16413..16417,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 548,
        column: 8,
        span: 16417..16418,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 548,
        column: 11,
        span: 16417..16421,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 548,
        column: 13,
        span: 16422..16423,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 548,
        column: 15,
        span: 16423..16425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 548,
        column: 16,
        span: 16425..16426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anan",
        ),
        line: 549,
        column: 7,
        span: 16429..16433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 549,
        column: 8,
        span: 16433..16434,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 549,
        column: 11,
        span: 16433..16437,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 549,
        column: 13,
        span: 16438..16439,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 549,
        column: 15,
        span: 16439..16441,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 549,
        column: 16,
        span: 16441..16442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anan",
        ),
        line: 550,
        column: 7,
        span: 16445..16449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 550,
        column: 8,
        span: 16449..16450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 550,
        column: 12,
        span: 16450..16454,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 550,
        column: 13,
        span: 16454..16455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 550,
        column: 17,
        span: 16455..16459,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 550,
        column: 19,
        span: 16460..16461,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 550,
        column: 21,
        span: 16461..16463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 550,
        column: 22,
        span: 16463..16464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anan",
        ),
        line: 551,
        column: 7,
        span: 16467..16471,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 551,
        column: 8,
        span: 16471..16472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 551,
        column: 12,
        span: 16472..16476,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 551,
        column: 13,
        span: 16476..16477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 551,
        column: 17,
        span: 16477..16481,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 551,
        column: 19,
        span: 16482..16483,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 551,
        column: 24,
        span: 16483..16488,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 551,
        column: 25,
        span: 16488..16489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anan",
        ),
        line: 552,
        column: 7,
        span: 16492..16496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 552,
        column: 8,
        span: 16496..16497,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 552,
        column: 9,
        span: 16497..16498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 552,
        column: 13,
        span: 16498..16502,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 552,
        column: 14,
        span: 16502..16503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 552,
        column: 18,
        span: 16503..16507,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 552,
        column: 20,
        span: 16508..16509,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 552,
        column: 25,
        span: 16509..16514,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 552,
        column: 26,
        span: 16514..16515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anan",
        ),
        line: 553,
        column: 7,
        span: 16518..16522,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 553,
        column: 8,
        span: 16522..16523,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 553,
        column: 9,
        span: 16523..16524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 553,
        column: 13,
        span: 16524..16528,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 553,
        column: 14,
        span: 16528..16529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 553,
        column: 18,
        span: 16529..16533,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 553,
        column: 20,
        span: 16534..16535,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 553,
        column: 22,
        span: 16536..16537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 553,
        column: 26,
        span: 16536..16541,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 553,
        column: 27,
        span: 16541..16542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 554,
        column: 9,
        span: 16545..16551,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 554,
        column: 10,
        span: 16551..16552,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 554,
        column: 11,
        span: 16551..16553,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 554,
        column: 13,
        span: 16554..16555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 554,
        column: 18,
        span: 16556..16560,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 554,
        column: 19,
        span: 16560..16561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 554,
        column: 23,
        span: 16561..16565,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 554,
        column: 26,
        span: 16566..16568,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 554,
        column: 28,
        span: 16568..16570,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 554,
        column: 29,
        span: 16570..16571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 555,
        column: 9,
        span: 16574..16580,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 555,
        column: 10,
        span: 16580..16581,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 555,
        column: 14,
        span: 16580..16585,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 555,
        column: 16,
        span: 16586..16587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 555,
        column: 21,
        span: 16588..16592,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 555,
        column: 22,
        span: 16592..16593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 555,
        column: 26,
        span: 16593..16597,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 555,
        column: 29,
        span: 16598..16600,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 555,
        column: 34,
        span: 16600..16605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 555,
        column: 35,
        span: 16605..16606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 556,
        column: 9,
        span: 16609..16615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 556,
        column: 10,
        span: 16615..16616,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 556,
        column: 14,
        span: 16615..16620,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 556,
        column: 16,
        span: 16621..16622,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 556,
        column: 18,
        span: 16623..16624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 556,
        column: 22,
        span: 16624..16628,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 556,
        column: 23,
        span: 16628..16629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 556,
        column: 27,
        span: 16629..16633,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 556,
        column: 30,
        span: 16634..16636,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 556,
        column: 32,
        span: 16637..16638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 556,
        column: 36,
        span: 16638..16642,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 556,
        column: 37,
        span: 16642..16643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 556,
        column: 41,
        span: 16643..16647,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 556,
        column: 42,
        span: 16647..16648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 557,
        column: 9,
        span: 16651..16657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 557,
        column: 10,
        span: 16657..16658,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 557,
        column: 11,
        span: 16658..16659,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 557,
        column: 12,
        span: 16658..16660,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 557,
        column: 14,
        span: 16661..16662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 557,
        column: 19,
        span: 16663..16667,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 557,
        column: 20,
        span: 16667..16668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 557,
        column: 24,
        span: 16668..16672,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 557,
        column: 27,
        span: 16673..16675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 557,
        column: 32,
        span: 16676..16680,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 557,
        column: 33,
        span: 16680..16681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 557,
        column: 37,
        span: 16681..16685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 557,
        column: 38,
        span: 16685..16686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 558,
        column: 9,
        span: 16689..16695,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 558,
        column: 10,
        span: 16695..16696,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 558,
        column: 11,
        span: 16696..16697,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 558,
        column: 12,
        span: 16696..16698,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 558,
        column: 14,
        span: 16699..16700,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 558,
        column: 16,
        span: 16701..16702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 558,
        column: 20,
        span: 16702..16706,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 558,
        column: 21,
        span: 16706..16707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 558,
        column: 25,
        span: 16707..16711,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 558,
        column: 28,
        span: 16712..16714,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 558,
        column: 30,
        span: 16715..16716,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 558,
        column: 31,
        span: 16715..16717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 558,
        column: 32,
        span: 16717..16718,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 559,
        column: 0,
        span: 16719..16722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 563,
        column: 7,
        span: 16757..16763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 563,
        column: 8,
        span: 16763..16764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 563,
        column: 12,
        span: 16764..16768,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 563,
        column: 13,
        span: 16768..16769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ult",
        ),
        line: 563,
        column: 16,
        span: 16769..16772,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 563,
        column: 17,
        span: 16772..16773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 563,
        column: 18,
        span: 16772..16774,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 563,
        column: 19,
        span: 16774..16775,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 563,
        column: 21,
        span: 16775..16777,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 563,
        column: 22,
        span: 16777..16778,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 563,
        column: 23,
        span: 16778..16779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 564,
        column: 7,
        span: 16780..16786,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 564,
        column: 8,
        span: 16786..16787,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 564,
        column: 11,
        span: 16787..16790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 564,
        column: 16,
        span: 16791..16795,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 564,
        column: 17,
        span: 16795..16796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ult",
        ),
        line: 564,
        column: 20,
        span: 16796..16799,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 564,
        column: 21,
        span: 16799..16800,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 564,
        column: 22,
        span: 16799..16801,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 564,
        column: 23,
        span: 16801..16802,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 564,
        column: 25,
        span: 16802..16804,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 564,
        column: 26,
        span: 16804..16805,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 564,
        column: 27,
        span: 16805..16806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 565,
        column: 7,
        span: 16807..16813,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 565,
        column: 8,
        span: 16813..16814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 565,
        column: 12,
        span: 16814..16818,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 565,
        column: 13,
        span: 16818..16819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ult",
        ),
        line: 565,
        column: 16,
        span: 16819..16822,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 565,
        column: 17,
        span: 16822..16823,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 565,
        column: 18,
        span: 16823..16824,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 565,
        column: 19,
        span: 16823..16825,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 565,
        column: 20,
        span: 16825..16826,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 565,
        column: 22,
        span: 16827..16828,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 565,
        column: 23,
        span: 16827..16829,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 565,
        column: 24,
        span: 16829..16830,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 565,
        column: 25,
        span: 16830..16831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 566,
        column: 7,
        span: 16832..16838,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 566,
        column: 8,
        span: 16838..16839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 566,
        column: 12,
        span: 16839..16843,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 566,
        column: 13,
        span: 16843..16844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ult",
        ),
        line: 566,
        column: 16,
        span: 16844..16847,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 566,
        column: 17,
        span: 16847..16848,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 566,
        column: 18,
        span: 16847..16849,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 566,
        column: 19,
        span: 16849..16850,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 566,
        column: 21,
        span: 16851..16852,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 566,
        column: 22,
        span: 16851..16853,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 566,
        column: 23,
        span: 16853..16854,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 566,
        column: 24,
        span: 16854..16855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 567,
        column: 7,
        span: 16856..16862,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 567,
        column: 8,
        span: 16862..16863,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 567,
        column: 11,
        span: 16863..16866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 567,
        column: 16,
        span: 16867..16871,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 567,
        column: 17,
        span: 16871..16872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ult",
        ),
        line: 567,
        column: 20,
        span: 16872..16875,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 567,
        column: 21,
        span: 16875..16876,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 567,
        column: 22,
        span: 16876..16877,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 567,
        column: 23,
        span: 16876..16878,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 567,
        column: 24,
        span: 16878..16879,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 567,
        column: 26,
        span: 16880..16881,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 567,
        column: 27,
        span: 16880..16882,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 567,
        column: 28,
        span: 16882..16883,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 567,
        column: 29,
        span: 16883..16884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 568,
        column: 7,
        span: 16885..16891,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 568,
        column: 8,
        span: 16891..16892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 568,
        column: 12,
        span: 16892..16896,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 568,
        column: 13,
        span: 16896..16897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ult",
        ),
        line: 568,
        column: 16,
        span: 16897..16900,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 568,
        column: 17,
        span: 16900..16901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 568,
        column: 23,
        span: 16901..16907,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 568,
        column: 24,
        span: 16907..16908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 568,
        column: 31,
        span: 16909..16915,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 568,
        column: 32,
        span: 16915..16916,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 568,
        column: 33,
        span: 16916..16917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 569,
        column: 7,
        span: 16918..16924,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 569,
        column: 8,
        span: 16924..16925,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 569,
        column: 11,
        span: 16925..16928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 569,
        column: 16,
        span: 16929..16933,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 569,
        column: 17,
        span: 16933..16934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ult",
        ),
        line: 569,
        column: 20,
        span: 16934..16937,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 569,
        column: 21,
        span: 16937..16938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 569,
        column: 27,
        span: 16938..16944,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 569,
        column: 28,
        span: 16944..16945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 569,
        column: 35,
        span: 16946..16952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 569,
        column: 36,
        span: 16952..16953,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 569,
        column: 37,
        span: 16953..16954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 572,
        column: 7,
        span: 16957..16963,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 572,
        column: 8,
        span: 16963..16964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 572,
        column: 10,
        span: 16964..16966,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 572,
        column: 11,
        span: 16966..16967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 572,
        column: 15,
        span: 16967..16971,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 572,
        column: 16,
        span: 16971..16972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 572,
        column: 19,
        span: 16972..16975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 572,
        column: 20,
        span: 16975..16976,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 572,
        column: 21,
        span: 16976..16977,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: ".8",
                },
            ),
        ),
        line: 572,
        column: 24,
        span: 16976..16980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 572,
        column: 25,
        span: 16980..16981,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 572,
        column: 27,
        span: 16982..16983,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 572,
        column: 29,
        span: 16983..16985,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 572,
        column: 31,
        span: 16986..16987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 572,
        column: 36,
        span: 16988..16992,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 572,
        column: 37,
        span: 16992..16993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cos",
        ),
        line: 572,
        column: 40,
        span: 16993..16996,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 572,
        column: 41,
        span: 16996..16997,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 572,
        column: 42,
        span: 16997..16998,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: ".8",
                },
            ),
        ),
        line: 572,
        column: 45,
        span: 16997..17001,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 572,
        column: 46,
        span: 17001..17002,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 572,
        column: 48,
        span: 17003..17004,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 572,
        column: 50,
        span: 17004..17006,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 572,
        column: 51,
        span: 17006..17007,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 572,
        column: 53,
        span: 17007..17009,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 572,
        column: 54,
        span: 17009..17010,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 572,
        column: 55,
        span: 17010..17011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 573,
        column: 7,
        span: 17012..17018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 573,
        column: 8,
        span: 17018..17019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 573,
        column: 10,
        span: 17019..17021,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 573,
        column: 11,
        span: 17021..17022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 573,
        column: 15,
        span: 17022..17026,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 573,
        column: 16,
        span: 17026..17027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tan",
        ),
        line: 573,
        column: 19,
        span: 17027..17030,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 573,
        column: 20,
        span: 17030..17031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 573,
        column: 24,
        span: 17031..17035,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 573,
        column: 25,
        span: 17035..17036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 573,
        column: 27,
        span: 17036..17038,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 573,
        column: 29,
        span: 17039..17040,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 573,
        column: 31,
        span: 17040..17042,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
        column: 32,
        span: 17042..17043,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 573,
        column: 33,
        span: 17043..17044,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 573,
        column: 35,
        span: 17044..17046,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
        column: 36,
        span: 17046..17047,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
        column: 37,
        span: 17047..17048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 574,
        column: 7,
        span: 17049..17055,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
        column: 8,
        span: 17055..17056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 574,
        column: 10,
        span: 17056..17058,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
        column: 11,
        span: 17058..17059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 574,
        column: 15,
        span: 17059..17063,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 574,
        column: 16,
        span: 17063..17064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 574,
        column: 19,
        span: 17064..17067,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
        column: 20,
        span: 17067..17068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 574,
        column: 24,
        span: 17068..17072,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 574,
        column: 25,
        span: 17072..17073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 574,
        column: 27,
        span: 17073..17075,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 574,
        column: 29,
        span: 17076..17077,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 574,
        column: 31,
        span: 17077..17079,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
        column: 32,
        span: 17079..17080,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 574,
        column: 33,
        span: 17080..17081,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 574,
        column: 35,
        span: 17081..17083,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
        column: 36,
        span: 17083..17084,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 574,
        column: 40,
        span: 17085..17088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 574,
        column: 43,
        span: 17089..17091,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
        column: 44,
        span: 17091..17092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 574,
        column: 48,
        span: 17092..17096,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 574,
        column: 49,
        span: 17096..17097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cos",
        ),
        line: 574,
        column: 52,
        span: 17097..17100,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
        column: 53,
        span: 17100..17101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 574,
        column: 57,
        span: 17101..17105,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 574,
        column: 58,
        span: 17105..17106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 574,
        column: 60,
        span: 17106..17108,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 574,
        column: 62,
        span: 17109..17110,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 574,
        column: 64,
        span: 17110..17112,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
        column: 65,
        span: 17112..17113,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 574,
        column: 66,
        span: 17113..17114,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 574,
        column: 68,
        span: 17114..17116,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
        column: 69,
        span: 17116..17117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
        column: 70,
        span: 17117..17118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 575,
        column: 7,
        span: 17119..17125,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
        column: 8,
        span: 17125..17126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 575,
        column: 10,
        span: 17126..17128,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
        column: 11,
        span: 17128..17129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 575,
        column: 15,
        span: 17129..17133,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 575,
        column: 16,
        span: 17133..17134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "atan",
        ),
        line: 575,
        column: 20,
        span: 17134..17138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
        column: 21,
        span: 17138..17139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 575,
        column: 22,
        span: 17138..17140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
        column: 23,
        span: 17140..17141,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 575,
        column: 24,
        span: 17141..17142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 575,
        column: 29,
        span: 17143..17147,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 575,
        column: 30,
        span: 17147..17148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 575,
        column: 32,
        span: 17148..17150,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 575,
        column: 34,
        span: 17151..17152,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 575,
        column: 36,
        span: 17152..17154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
        column: 37,
        span: 17154..17155,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 575,
        column: 41,
        span: 17156..17159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 575,
        column: 44,
        span: 17160..17162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
        column: 45,
        span: 17162..17163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 575,
        column: 49,
        span: 17163..17167,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 575,
        column: 50,
        span: 17167..17168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "acos",
        ),
        line: 575,
        column: 54,
        span: 17168..17172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
        column: 55,
        span: 17172..17173,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 575,
        column: 56,
        span: 17172..17174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
        column: 57,
        span: 17174..17175,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 575,
        column: 58,
        span: 17175..17176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 575,
        column: 63,
        span: 17177..17181,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 575,
        column: 64,
        span: 17181..17182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 575,
        column: 66,
        span: 17182..17184,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 575,
        column: 68,
        span: 17185..17186,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 575,
        column: 70,
        span: 17186..17188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
        column: 71,
        span: 17188..17189,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 575,
        column: 0,
        span: 17190..17193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 576,
        column: 5,
        span: 17196..17198,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 576,
        column: 6,
        span: 17198..17199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 576,
        column: 10,
        span: 17199..17203,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 576,
        column: 11,
        span: 17203..17204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asin",
        ),
        line: 576,
        column: 15,
        span: 17204..17208,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 576,
        column: 16,
        span: 17208..17209,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 576,
        column: 17,
        span: 17208..17210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 576,
        column: 18,
        span: 17210..17211,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 576,
        column: 19,
        span: 17211..17212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 576,
        column: 24,
        span: 17213..17217,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 576,
        column: 25,
        span: 17217..17218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 576,
        column: 27,
        span: 17218..17220,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 576,
        column: 29,
        span: 17221..17222,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 576,
        column: 31,
        span: 17222..17224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 576,
        column: 32,
        span: 17224..17225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 576,
        column: 33,
        span: 17225..17226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 577,
        column: 7,
        span: 17227..17233,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 577,
        column: 8,
        span: 17233..17234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 577,
        column: 10,
        span: 17234..17236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 577,
        column: 11,
        span: 17236..17237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 577,
        column: 15,
        span: 17237..17241,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 577,
        column: 16,
        span: 17241..17242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deg",
        ),
        line: 577,
        column: 19,
        span: 17242..17245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 577,
        column: 20,
        span: 17245..17246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 577,
        column: 24,
        span: 17246..17250,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 577,
        column: 25,
        span: 17250..17251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 577,
        column: 27,
        span: 17251..17253,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 577,
        column: 29,
        span: 17254..17255,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 577,
        column: 31,
        span: 17255..17257,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 577,
        column: 32,
        span: 17257..17258,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 577,
        column: 33,
        span: 17258..17259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 577,
        column: 36,
        span: 17259..17262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 577,
        column: 37,
        span: 17262..17263,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 577,
        column: 41,
        span: 17264..17267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 577,
        column: 44,
        span: 17268..17270,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 577,
        column: 45,
        span: 17270..17271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 577,
        column: 49,
        span: 17271..17275,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 577,
        column: 50,
        span: 17275..17276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rad",
        ),
        line: 577,
        column: 53,
        span: 17276..17279,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 577,
        column: 54,
        span: 17279..17280,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 577,
        column: 56,
        span: 17279..17282,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 577,
        column: 57,
        span: 17282..17283,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 577,
        column: 58,
        span: 17283..17284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 577,
        column: 63,
        span: 17285..17289,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 577,
        column: 64,
        span: 17289..17290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 577,
        column: 66,
        span: 17290..17292,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 577,
        column: 68,
        span: 17293..17294,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 577,
        column: 70,
        span: 17294..17296,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 577,
        column: 71,
        span: 17296..17297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 577,
        column: 72,
        span: 17297..17298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 578,
        column: 7,
        span: 17299..17305,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 578,
        column: 8,
        span: 17305..17306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 578,
        column: 12,
        span: 17306..17310,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 578,
        column: 13,
        span: 17310..17311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 578,
        column: 16,
        span: 17311..17314,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 578,
        column: 17,
        span: 17314..17315,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 578,
        column: 18,
        span: 17315..17316,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".43",
                },
            ),
        ),
        line: 578,
        column: 23,
        span: 17315..17321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 578,
        column: 24,
        span: 17321..17322,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 578,
        column: 27,
        span: 17323..17325,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".43",
                },
            ),
        ),
        line: 578,
        column: 33,
        span: 17325..17331,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 578,
        column: 34,
        span: 17331..17332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 579,
        column: 7,
        span: 17333..17339,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 579,
        column: 8,
        span: 17339..17340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 579,
        column: 11,
        span: 17340..17343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 579,
        column: 12,
        span: 17343..17344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 579,
        column: 16,
        span: 17344..17348,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 579,
        column: 17,
        span: 17348..17349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 579,
        column: 20,
        span: 17349..17352,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 579,
        column: 21,
        span: 17352..17353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 579,
        column: 27,
        span: 17353..17359,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 579,
        column: 28,
        span: 17359..17360,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 579,
        column: 29,
        span: 17360..17361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 579,
        column: 36,
        span: 17362..17368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 579,
        column: 37,
        span: 17368..17369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 579,
        column: 38,
        span: 17369..17370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 580,
        column: 7,
        span: 17371..17377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 580,
        column: 8,
        span: 17377..17378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 580,
        column: 11,
        span: 17378..17381,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 580,
        column: 12,
        span: 17381..17382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 580,
        column: 16,
        span: 17382..17386,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 580,
        column: 17,
        span: 17386..17387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 580,
        column: 20,
        span: 17387..17390,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 580,
        column: 21,
        span: 17390..17391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 580,
        column: 27,
        span: 17391..17397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 580,
        column: 28,
        span: 17397..17398,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 580,
        column: 29,
        span: 17398..17399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 580,
        column: 36,
        span: 17400..17406,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 580,
        column: 37,
        span: 17406..17407,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 580,
        column: 38,
        span: 17407..17408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 581,
        column: 7,
        span: 17409..17415,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 581,
        column: 8,
        span: 17415..17416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 581,
        column: 11,
        span: 17416..17419,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 581,
        column: 12,
        span: 17419..17420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 581,
        column: 16,
        span: 17420..17424,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 581,
        column: 17,
        span: 17424..17425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 581,
        column: 20,
        span: 17425..17428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 581,
        column: 21,
        span: 17428..17429,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 581,
        column: 22,
        span: 17429..17430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 581,
        column: 28,
        span: 17430..17436,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 581,
        column: 29,
        span: 17436..17437,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 581,
        column: 30,
        span: 17437..17438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 581,
        column: 37,
        span: 17439..17445,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 581,
        column: 38,
        span: 17445..17446,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 581,
        column: 39,
        span: 17446..17447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 582,
        column: 7,
        span: 17448..17454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 582,
        column: 8,
        span: 17454..17455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 582,
        column: 10,
        span: 17455..17457,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 582,
        column: 11,
        span: 17457..17458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 582,
        column: 15,
        span: 17458..17462,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 582,
        column: 16,
        span: 17462..17463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "atan",
        ),
        line: 582,
        column: 20,
        span: 17463..17467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 582,
        column: 21,
        span: 17467..17468,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 582,
        column: 22,
        span: 17467..17469,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 582,
        column: 23,
        span: 17469..17470,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 582,
        column: 25,
        span: 17470..17472,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 582,
        column: 26,
        span: 17472..17473,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 582,
        column: 27,
        span: 17473..17474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 582,
        column: 32,
        span: 17475..17479,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 582,
        column: 33,
        span: 17479..17480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 582,
        column: 35,
        span: 17480..17482,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 582,
        column: 37,
        span: 17483..17484,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 582,
        column: 39,
        span: 17484..17486,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 582,
        column: 40,
        span: 17486..17487,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 582,
        column: 41,
        span: 17487..17488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 583,
        column: 7,
        span: 17489..17495,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 583,
        column: 8,
        span: 17495..17496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 583,
        column: 12,
        span: 17496..17500,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 583,
        column: 13,
        span: 17500..17501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 583,
        column: 17,
        span: 17501..17505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 583,
        column: 18,
        span: 17505..17506,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 583,
        column: 20,
        span: 17505..17508,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 583,
        column: 21,
        span: 17508..17509,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 583,
        column: 23,
        span: 17509..17511,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 583,
        column: 24,
        span: 17511..17512,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 583,
        column: 27,
        span: 17513..17515,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 583,
        column: 29,
        span: 17515..17517,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 583,
        column: 30,
        span: 17517..17518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 584,
        column: 7,
        span: 17519..17525,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 584,
        column: 8,
        span: 17525..17526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 584,
        column: 10,
        span: 17526..17528,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 584,
        column: 11,
        span: 17528..17529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 584,
        column: 15,
        span: 17529..17533,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 584,
        column: 16,
        span: 17533..17534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sqrt",
        ),
        line: 584,
        column: 20,
        span: 17534..17538,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 584,
        column: 21,
        span: 17538..17539,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 584,
        column: 23,
        span: 17538..17541,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 584,
        column: 24,
        span: 17541..17542,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 584,
        column: 26,
        span: 17543..17544,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 584,
        column: 28,
        span: 17544..17546,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 584,
        column: 29,
        span: 17546..17547,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 584,
        column: 32,
        span: 17547..17550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 584,
        column: 33,
        span: 17550..17551,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 584,
        column: 34,
        span: 17551..17552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 585,
        column: 7,
        span: 17553..17559,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 585,
        column: 8,
        span: 17559..17560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 585,
        column: 10,
        span: 17560..17562,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 585,
        column: 11,
        span: 17562..17563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 585,
        column: 15,
        span: 17563..17567,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 585,
        column: 16,
        span: 17567..17568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 585,
        column: 19,
        span: 17568..17571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 585,
        column: 20,
        span: 17571..17572,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 585,
        column: 21,
        span: 17571..17573,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 585,
        column: 22,
        span: 17573..17574,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 585,
        column: 25,
        span: 17574..17577,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 585,
        column: 26,
        span: 17577..17578,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 585,
        column: 27,
        span: 17578..17579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 585,
        column: 32,
        span: 17580..17584,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 585,
        column: 33,
        span: 17584..17585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 585,
        column: 36,
        span: 17585..17588,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 585,
        column: 37,
        span: 17588..17589,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 585,
        column: 38,
        span: 17588..17590,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 585,
        column: 39,
        span: 17590..17591,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 585,
        column: 41,
        span: 17592..17593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 585,
        column: 46,
        span: 17594..17598,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 585,
        column: 47,
        span: 17598..17599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 585,
        column: 50,
        span: 17599..17602,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 585,
        column: 51,
        span: 17602..17603,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 585,
        column: 53,
        span: 17602..17605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 585,
        column: 54,
        span: 17605..17606,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 585,
        column: 55,
        span: 17606..17607,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 585,
        column: 56,
        span: 17607..17608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 586,
        column: 7,
        span: 17609..17615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 586,
        column: 8,
        span: 17615..17616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 586,
        column: 10,
        span: 17616..17618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 586,
        column: 11,
        span: 17618..17619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 586,
        column: 15,
        span: 17619..17623,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 586,
        column: 16,
        span: 17623..17624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 586,
        column: 19,
        span: 17624..17627,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 586,
        column: 20,
        span: 17627..17628,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 586,
        column: 21,
        span: 17627..17629,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 586,
        column: 22,
        span: 17629..17630,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 586,
        column: 24,
        span: 17630..17632,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 586,
        column: 25,
        span: 17632..17633,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 586,
        column: 26,
        span: 17633..17634,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 586,
        column: 28,
        span: 17634..17636,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 586,
        column: 29,
        span: 17636..17637,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 586,
        column: 30,
        span: 17637..17638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 587,
        column: 7,
        span: 17639..17645,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 587,
        column: 8,
        span: 17645..17646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 587,
        column: 10,
        span: 17646..17648,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 587,
        column: 11,
        span: 17648..17649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 587,
        column: 15,
        span: 17649..17653,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 587,
        column: 16,
        span: 17653..17654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 587,
        column: 19,
        span: 17654..17657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 587,
        column: 20,
        span: 17657..17658,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 587,
        column: 21,
        span: 17657..17659,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 587,
        column: 22,
        span: 17659..17660,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 587,
        column: 24,
        span: 17660..17662,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 587,
        column: 25,
        span: 17662..17663,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 587,
        column: 26,
        span: 17663..17664,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 587,
        column: 28,
        span: 17664..17666,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 587,
        column: 29,
        span: 17666..17667,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 587,
        column: 30,
        span: 17667..17668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 588,
        column: 7,
        span: 17669..17675,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 588,
        column: 8,
        span: 17675..17676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 588,
        column: 10,
        span: 17676..17678,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 588,
        column: 11,
        span: 17678..17679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 588,
        column: 15,
        span: 17679..17683,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 588,
        column: 16,
        span: 17683..17684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "exp",
        ),
        line: 588,
        column: 19,
        span: 17684..17687,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 588,
        column: 20,
        span: 17687..17688,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 588,
        column: 21,
        span: 17687..17689,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 588,
        column: 22,
        span: 17689..17690,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 588,
        column: 23,
        span: 17690..17691,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 588,
        column: 25,
        span: 17691..17693,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 588,
        column: 26,
        span: 17693..17694,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 588,
        column: 27,
        span: 17694..17695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 589,
        column: 7,
        span: 17696..17702,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 589,
        column: 8,
        span: 17702..17703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 589,
        column: 10,
        span: 17703..17705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 589,
        column: 11,
        span: 17705..17706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 589,
        column: 15,
        span: 17706..17710,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 589,
        column: 16,
        span: 17710..17711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 589,
        column: 19,
        span: 17711..17714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 589,
        column: 20,
        span: 17714..17715,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 589,
        column: 22,
        span: 17714..17717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 589,
        column: 23,
        span: 17717..17718,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 589,
        column: 24,
        span: 17718..17719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 589,
        column: 29,
        span: 17720..17724,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 589,
        column: 30,
        span: 17724..17725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 589,
        column: 33,
        span: 17725..17728,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 589,
        column: 34,
        span: 17728..17729,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 589,
        column: 36,
        span: 17728..17731,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 589,
        column: 38,
        span: 17732..17733,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 589,
        column: 40,
        span: 17734..17735,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 589,
        column: 41,
        span: 17734..17736,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 589,
        column: 43,
        span: 17737..17738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 589,
        column: 48,
        span: 17739..17743,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 589,
        column: 49,
        span: 17743..17744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 589,
        column: 51,
        span: 17744..17746,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 589,
        column: 52,
        span: 17746..17747,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 589,
        column: 53,
        span: 17747..17748,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 589,
        column: 54,
        span: 17748..17749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 589,
        column: 55,
        span: 17749..17750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 592,
        column: 7,
        span: 17753..17759,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 592,
        column: 8,
        span: 17759..17760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 592,
        column: 16,
        span: 17760..17768,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 592,
        column: 17,
        span: 17768..17769,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' 1.3e-2 '",
        ),
        line: 592,
        column: 27,
        span: 17769..17779,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 592,
        column: 28,
        span: 17779..17780,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 592,
        column: 31,
        span: 17781..17783,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
                exponent: "-2",
            },
        ),
        line: 592,
        column: 38,
        span: 17783..17790,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 592,
        column: 39,
        span: 17790..17791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 593,
        column: 7,
        span: 17792..17798,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 593,
        column: 8,
        span: 17798..17799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 593,
        column: 16,
        span: 17799..17807,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 593,
        column: 17,
        span: 17807..17808,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' -1.00000000000001 '",
        ),
        line: 593,
        column: 38,
        span: 17808..17829,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 593,
        column: 39,
        span: 17829..17830,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 593,
        column: 42,
        span: 17831..17833,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 593,
        column: 44,
        span: 17834..17835,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".00000000000001",
                },
            ),
        ),
        line: 593,
        column: 60,
        span: 17834..17851,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 593,
        column: 61,
        span: 17851..17852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 597,
        column: 7,
        span: 17899..17905,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 597,
        column: 8,
        span: 17905..17906,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388609",
                    after_decimal: "",
                },
            ),
        ),
        line: 597,
        column: 15,
        span: 17905..17913,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 597,
        column: 17,
        span: 17914..17915,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 597,
        column: 19,
        span: 17916..17917,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388609",
                    after_decimal: "",
                },
            ),
        ),
        line: 597,
        column: 26,
        span: 17916..17924,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 597,
        column: 29,
        span: 17925..17927,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 597,
        column: 31,
        span: 17927..17929,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 597,
        column: 32,
        span: 17929..17930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 598,
        column: 7,
        span: 17931..17937,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 598,
        column: 8,
        span: 17937..17938,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388608",
                    after_decimal: "",
                },
            ),
        ),
        line: 598,
        column: 15,
        span: 17937..17945,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 598,
        column: 17,
        span: 17946..17947,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 598,
        column: 19,
        span: 17948..17949,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388608",
                    after_decimal: "",
                },
            ),
        ),
        line: 598,
        column: 26,
        span: 17948..17956,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 598,
        column: 29,
        span: 17957..17959,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 598,
        column: 31,
        span: 17959..17961,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 598,
        column: 32,
        span: 17961..17962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 599,
        column: 7,
        span: 17963..17969,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 599,
        column: 8,
        span: 17969..17970,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388607",
                    after_decimal: "",
                },
            ),
        ),
        line: 599,
        column: 15,
        span: 17969..17977,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 599,
        column: 17,
        span: 17978..17979,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 599,
        column: 19,
        span: 17980..17981,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388607",
                    after_decimal: "",
                },
            ),
        ),
        line: 599,
        column: 26,
        span: 17980..17988,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 599,
        column: 29,
        span: 17989..17991,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 599,
        column: 31,
        span: 17991..17993,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 599,
        column: 32,
        span: 17993..17994,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 603,
        column: 3,
        span: 17998..18000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 604,
        column: 9,
        span: 18027..18033,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 604,
        column: 10,
        span: 18033..18034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 604,
        column: 13,
        span: 18034..18037,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 604,
        column: 14,
        span: 18037..18038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 604,
        column: 18,
        span: 18038..18042,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 604,
        column: 19,
        span: 18042..18043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 604,
        column: 24,
        span: 18043..18048,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 604,
        column: 25,
        span: 18048..18049,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 604,
        column: 28,
        span: 18048..18052,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 604,
        column: 29,
        span: 18052..18053,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 604,
        column: 30,
        span: 18053..18054,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 604,
        column: 32,
        span: 18054..18056,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 604,
        column: 33,
        span: 18056..18057,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 604,
        column: 34,
        span: 18057..18058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 605,
        column: 9,
        span: 18061..18067,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 605,
        column: 10,
        span: 18067..18068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 605,
        column: 13,
        span: 18068..18071,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 605,
        column: 14,
        span: 18071..18072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 605,
        column: 18,
        span: 18072..18076,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 605,
        column: 19,
        span: 18076..18077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 605,
        column: 23,
        span: 18077..18081,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 605,
        column: 24,
        span: 18081..18082,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 605,
        column: 27,
        span: 18081..18085,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 605,
        column: 28,
        span: 18085..18086,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 605,
        column: 29,
        span: 18086..18087,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 605,
        column: 31,
        span: 18087..18089,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 605,
        column: 32,
        span: 18089..18090,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 605,
        column: 33,
        span: 18090..18091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 606,
        column: 9,
        span: 18094..18100,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 606,
        column: 10,
        span: 18100..18101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 606,
        column: 13,
        span: 18101..18104,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 606,
        column: 14,
        span: 18104..18105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 606,
        column: 18,
        span: 18105..18109,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 606,
        column: 19,
        span: 18109..18110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 606,
        column: 24,
        span: 18110..18115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 606,
        column: 25,
        span: 18115..18116,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 606,
        column: 26,
        span: 18116..18117,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 606,
        column: 29,
        span: 18116..18120,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 606,
        column: 30,
        span: 18120..18121,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 606,
        column: 31,
        span: 18121..18122,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 606,
        column: 33,
        span: 18123..18124,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 606,
        column: 34,
        span: 18123..18125,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 606,
        column: 35,
        span: 18125..18126,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 606,
        column: 36,
        span: 18126..18127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 607,
        column: 9,
        span: 18130..18136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 607,
        column: 10,
        span: 18136..18137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 607,
        column: 13,
        span: 18137..18140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 607,
        column: 14,
        span: 18140..18141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 607,
        column: 18,
        span: 18141..18145,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 607,
        column: 19,
        span: 18145..18146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 607,
        column: 23,
        span: 18146..18150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 607,
        column: 24,
        span: 18150..18151,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 607,
        column: 25,
        span: 18151..18152,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 607,
        column: 28,
        span: 18151..18155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 607,
        column: 29,
        span: 18155..18156,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 607,
        column: 30,
        span: 18156..18157,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 607,
        column: 32,
        span: 18158..18159,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 607,
        column: 33,
        span: 18158..18160,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 607,
        column: 34,
        span: 18160..18161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 607,
        column: 35,
        span: 18161..18162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 608,
        column: 9,
        span: 18165..18171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 608,
        column: 10,
        span: 18171..18172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 608,
        column: 13,
        span: 18172..18175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 608,
        column: 14,
        span: 18175..18176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 608,
        column: 18,
        span: 18176..18180,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 608,
        column: 19,
        span: 18180..18181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 608,
        column: 24,
        span: 18181..18186,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 608,
        column: 25,
        span: 18186..18187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 608,
        column: 31,
        span: 18187..18193,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 608,
        column: 32,
        span: 18193..18194,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 608,
        column: 33,
        span: 18194..18195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 608,
        column: 40,
        span: 18196..18202,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 608,
        column: 41,
        span: 18202..18203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 608,
        column: 42,
        span: 18203..18204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 609,
        column: 9,
        span: 18207..18213,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 609,
        column: 10,
        span: 18213..18214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 609,
        column: 13,
        span: 18214..18217,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 609,
        column: 14,
        span: 18217..18218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 609,
        column: 18,
        span: 18218..18222,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 609,
        column: 19,
        span: 18222..18223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 609,
        column: 23,
        span: 18223..18227,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 609,
        column: 24,
        span: 18227..18228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 609,
        column: 30,
        span: 18228..18234,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 609,
        column: 31,
        span: 18234..18235,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 609,
        column: 32,
        span: 18235..18236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 609,
        column: 39,
        span: 18237..18243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 609,
        column: 40,
        span: 18243..18244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 609,
        column: 41,
        span: 18244..18245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 610,
        column: 9,
        span: 18248..18254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 610,
        column: 10,
        span: 18254..18255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 610,
        column: 13,
        span: 18255..18258,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 610,
        column: 14,
        span: 18258..18259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 610,
        column: 18,
        span: 18259..18263,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 610,
        column: 19,
        span: 18263..18264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 610,
        column: 24,
        span: 18264..18269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 610,
        column: 25,
        span: 18269..18270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 610,
        column: 31,
        span: 18270..18276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 610,
        column: 32,
        span: 18276..18277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 610,
        column: 33,
        span: 18277..18278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 610,
        column: 40,
        span: 18279..18285,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 610,
        column: 41,
        span: 18285..18286,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 610,
        column: 42,
        span: 18286..18287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 611,
        column: 9,
        span: 18290..18296,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 611,
        column: 10,
        span: 18296..18297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 611,
        column: 13,
        span: 18297..18300,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 611,
        column: 14,
        span: 18300..18301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 611,
        column: 18,
        span: 18301..18305,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 611,
        column: 19,
        span: 18305..18306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 611,
        column: 24,
        span: 18306..18311,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 611,
        column: 25,
        span: 18311..18312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 611,
        column: 31,
        span: 18312..18318,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 611,
        column: 33,
        span: 18319..18320,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 611,
        column: 37,
        span: 18320..18324,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 611,
        column: 38,
        span: 18324..18325,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 611,
        column: 39,
        span: 18325..18326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 611,
        column: 46,
        span: 18327..18333,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 611,
        column: 47,
        span: 18333..18334,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 611,
        column: 48,
        span: 18334..18335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 612,
        column: 9,
        span: 18338..18344,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 612,
        column: 10,
        span: 18344..18345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 612,
        column: 13,
        span: 18345..18348,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 612,
        column: 14,
        span: 18348..18349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 612,
        column: 18,
        span: 18349..18353,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 612,
        column: 19,
        span: 18353..18354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 612,
        column: 23,
        span: 18354..18358,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 612,
        column: 24,
        span: 18358..18359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 612,
        column: 30,
        span: 18359..18365,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 612,
        column: 31,
        span: 18365..18366,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 612,
        column: 32,
        span: 18366..18367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 612,
        column: 39,
        span: 18368..18374,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 612,
        column: 40,
        span: 18374..18375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 612,
        column: 41,
        span: 18375..18376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 613,
        column: 9,
        span: 18379..18385,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 613,
        column: 10,
        span: 18385..18386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 613,
        column: 13,
        span: 18386..18389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 613,
        column: 14,
        span: 18389..18390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 613,
        column: 18,
        span: 18390..18394,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 613,
        column: 19,
        span: 18394..18395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 613,
        column: 23,
        span: 18395..18399,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 613,
        column: 24,
        span: 18399..18400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 613,
        column: 30,
        span: 18400..18406,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 613,
        column: 32,
        span: 18407..18408,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 613,
        column: 36,
        span: 18408..18412,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 613,
        column: 37,
        span: 18412..18413,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 613,
        column: 38,
        span: 18413..18414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 613,
        column: 45,
        span: 18415..18421,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 613,
        column: 46,
        span: 18421..18422,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 613,
        column: 47,
        span: 18422..18423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 614,
        column: 9,
        span: 18426..18432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 614,
        column: 10,
        span: 18432..18433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 614,
        column: 14,
        span: 18433..18437,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 614,
        column: 15,
        span: 18437..18438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 614,
        column: 20,
        span: 18438..18443,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 614,
        column: 21,
        span: 18443..18444,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 614,
        column: 25,
        span: 18443..18448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 614,
        column: 26,
        span: 18448..18449,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 614,
        column: 29,
        span: 18450..18452,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 614,
        column: 34,
        span: 18452..18457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 614,
        column: 35,
        span: 18457..18458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 615,
        column: 9,
        span: 18461..18467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 615,
        column: 10,
        span: 18467..18468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 615,
        column: 14,
        span: 18468..18472,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 615,
        column: 15,
        span: 18472..18473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 615,
        column: 19,
        span: 18473..18477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 615,
        column: 20,
        span: 18477..18478,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 615,
        column: 24,
        span: 18477..18482,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 615,
        column: 25,
        span: 18482..18483,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 615,
        column: 28,
        span: 18484..18486,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 615,
        column: 33,
        span: 18486..18491,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 615,
        column: 34,
        span: 18491..18492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 616,
        column: 9,
        span: 18495..18501,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 616,
        column: 10,
        span: 18501..18502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 616,
        column: 14,
        span: 18502..18506,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 616,
        column: 15,
        span: 18506..18507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 616,
        column: 20,
        span: 18507..18512,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 616,
        column: 21,
        span: 18512..18513,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 616,
        column: 22,
        span: 18513..18514,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 616,
        column: 26,
        span: 18513..18518,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 616,
        column: 27,
        span: 18518..18519,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 616,
        column: 30,
        span: 18520..18522,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 616,
        column: 32,
        span: 18523..18524,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 616,
        column: 36,
        span: 18523..18528,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 616,
        column: 37,
        span: 18528..18529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 617,
        column: 9,
        span: 18532..18538,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 617,
        column: 10,
        span: 18538..18539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 617,
        column: 14,
        span: 18539..18543,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 617,
        column: 15,
        span: 18543..18544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 617,
        column: 19,
        span: 18544..18548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 617,
        column: 20,
        span: 18548..18549,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 617,
        column: 21,
        span: 18549..18550,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 617,
        column: 25,
        span: 18549..18554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 617,
        column: 26,
        span: 18554..18555,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 617,
        column: 29,
        span: 18556..18558,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 617,
        column: 31,
        span: 18559..18560,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "50",
            },
        ),
        line: 617,
        column: 35,
        span: 18559..18564,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 617,
        column: 36,
        span: 18564..18565,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 618,
        column: 6,
        span: 18568..18571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 618,
        column: 8,
        span: 18572..18573,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 618,
        column: 9,
        span: 18573..18574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 618,
        column: 11,
        span: 18575..18576,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 618,
        column: 14,
        span: 18577..18579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 618,
        column: 20,
        span: 18580..18585,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 618,
        column: 22,
        span: 18586..18587,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 618,
        column: 25,
        span: 18587..18590,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 618,
        column: 26,
        span: 18590..18591,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 618,
        column: 29,
        span: 18591..18594,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 618,
        column: 30,
        span: 18594..18595,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "63",
                    after_decimal: "",
                },
            ),
        ),
        line: 618,
        column: 33,
        span: 18595..18598,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 618,
        column: 34,
        span: 18598..18599,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "64",
                    after_decimal: "",
                },
            ),
        ),
        line: 618,
        column: 37,
        span: 18599..18602,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 618,
        column: 39,
        span: 18603..18604,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 618,
        column: 0,
        span: 18605..18607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 619,
        column: 11,
        span: 18612..18618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 619,
        column: 12,
        span: 18618..18619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 619,
        column: 16,
        span: 18619..18623,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 619,
        column: 17,
        span: 18623..18624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 619,
        column: 22,
        span: 18624..18629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 619,
        column: 23,
        span: 18629..18630,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 619,
        column: 24,
        span: 18629..18631,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 619,
        column: 26,
        span: 18632..18633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 619,
        column: 28,
        span: 18634..18635,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 619,
        column: 29,
        span: 18635..18636,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 619,
        column: 32,
        span: 18637..18639,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 619,
        column: 34,
        span: 18639..18641,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 619,
        column: 36,
        span: 18642..18643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 619,
        column: 38,
        span: 18644..18645,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 619,
        column: 39,
        span: 18645..18646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 620,
        column: 11,
        span: 18651..18657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 620,
        column: 12,
        span: 18657..18658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 620,
        column: 16,
        span: 18658..18662,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 620,
        column: 17,
        span: 18662..18663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 620,
        column: 22,
        span: 18663..18668,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 620,
        column: 23,
        span: 18668..18669,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 620,
        column: 24,
        span: 18668..18670,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 620,
        column: 26,
        span: 18671..18672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 620,
        column: 28,
        span: 18673..18674,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 620,
        column: 30,
        span: 18675..18676,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 620,
        column: 34,
        span: 18676..18680,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 620,
        column: 35,
        span: 18680..18681,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 620,
        column: 38,
        span: 18682..18684,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 620,
        column: 40,
        span: 18684..18686,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 620,
        column: 42,
        span: 18687..18688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 620,
        column: 44,
        span: 18689..18690,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 620,
        column: 45,
        span: 18690..18691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 621,
        column: 11,
        span: 18696..18702,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 621,
        column: 12,
        span: 18702..18703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 621,
        column: 16,
        span: 18703..18707,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 621,
        column: 17,
        span: 18707..18708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 621,
        column: 21,
        span: 18708..18712,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 621,
        column: 22,
        span: 18712..18713,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 621,
        column: 23,
        span: 18712..18714,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 621,
        column: 25,
        span: 18715..18716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 621,
        column: 27,
        span: 18717..18718,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 621,
        column: 28,
        span: 18718..18719,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 621,
        column: 31,
        span: 18720..18722,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 621,
        column: 33,
        span: 18722..18724,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 621,
        column: 35,
        span: 18725..18726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 621,
        column: 37,
        span: 18727..18728,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 621,
        column: 38,
        span: 18728..18729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 622,
        column: 11,
        span: 18734..18740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 622,
        column: 12,
        span: 18740..18741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 622,
        column: 16,
        span: 18741..18745,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 622,
        column: 17,
        span: 18745..18746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 622,
        column: 21,
        span: 18746..18750,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 622,
        column: 22,
        span: 18750..18751,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 622,
        column: 23,
        span: 18750..18752,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 622,
        column: 25,
        span: 18753..18754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 622,
        column: 27,
        span: 18755..18756,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 622,
        column: 29,
        span: 18757..18758,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 622,
        column: 33,
        span: 18758..18762,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 622,
        column: 34,
        span: 18762..18763,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 622,
        column: 37,
        span: 18764..18766,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 622,
        column: 39,
        span: 18766..18768,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 622,
        column: 41,
        span: 18769..18770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 622,
        column: 43,
        span: 18771..18772,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 622,
        column: 44,
        span: 18772..18773,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 623,
        column: 0,
        span: 18776..18779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 624,
        column: 13,
        span: 18782..18792,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 624,
        column: 14,
        span: 18792..18793,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number expected\"",
        ),
        line: 624,
        column: 31,
        span: 18793..18810,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 624,
        column: 32,
        span: 18810..18811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 624,
        column: 37,
        span: 18812..18816,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 624,
        column: 38,
        span: 18816..18817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 624,
        column: 43,
        span: 18817..18822,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 624,
        column: 44,
        span: 18822..18823,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 624,
        column: 46,
        span: 18824..18825,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 624,
        column: 47,
        span: 18825..18826,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 624,
        column: 48,
        span: 18826..18827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 625,
        column: 13,
        span: 18830..18840,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 625,
        column: 14,
        span: 18840..18841,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number expected\"",
        ),
        line: 625,
        column: 31,
        span: 18841..18858,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 625,
        column: 32,
        span: 18858..18859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 625,
        column: 37,
        span: 18860..18864,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 625,
        column: 38,
        span: 18864..18865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 625,
        column: 42,
        span: 18865..18869,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 625,
        column: 43,
        span: 18869..18870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 625,
        column: 49,
        span: 18871..18876,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 625,
        column: 50,
        span: 18876..18877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 626,
        column: 9,
        span: 18880..18886,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 626,
        column: 10,
        span: 18886..18887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 626,
        column: 13,
        span: 18887..18890,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 626,
        column: 14,
        span: 18890..18891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 626,
        column: 18,
        span: 18891..18895,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 626,
        column: 19,
        span: 18895..18896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 626,
        column: 28,
        span: 18896..18905,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 626,
        column: 29,
        span: 18905..18906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 626,
        column: 35,
        span: 18906..18912,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 626,
        column: 36,
        span: 18912..18913,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 626,
        column: 37,
        span: 18913..18914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 626,
        column: 44,
        span: 18915..18921,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 626,
        column: 45,
        span: 18921..18922,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 626,
        column: 46,
        span: 18922..18923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 627,
        column: 9,
        span: 18926..18932,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 627,
        column: 10,
        span: 18932..18933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 627,
        column: 13,
        span: 18933..18936,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 627,
        column: 14,
        span: 18936..18937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 627,
        column: 18,
        span: 18937..18941,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 627,
        column: 19,
        span: 18941..18942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 627,
        column: 28,
        span: 18942..18951,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 627,
        column: 29,
        span: 18951..18952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 627,
        column: 35,
        span: 18952..18958,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 627,
        column: 38,
        span: 18959..18961,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 627,
        column: 41,
        span: 18962..18964,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 627,
        column: 42,
        span: 18964..18965,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 627,
        column: 43,
        span: 18965..18966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 627,
        column: 50,
        span: 18967..18973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 627,
        column: 51,
        span: 18973..18974,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 627,
        column: 52,
        span: 18974..18975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 628,
        column: 9,
        span: 18978..18984,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 628,
        column: 10,
        span: 18984..18985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 628,
        column: 13,
        span: 18985..18988,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 628,
        column: 14,
        span: 18988..18989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 628,
        column: 18,
        span: 18989..18993,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 628,
        column: 19,
        span: 18993..18994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 628,
        column: 28,
        span: 18994..19003,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 628,
        column: 29,
        span: 19003..19004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 628,
        column: 35,
        span: 19004..19010,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 628,
        column: 36,
        span: 19010..19011,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 628,
        column: 37,
        span: 19011..19012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 628,
        column: 44,
        span: 19013..19019,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 628,
        column: 45,
        span: 19019..19020,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 628,
        column: 46,
        span: 19020..19021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 629,
        column: 9,
        span: 19024..19030,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 629,
        column: 10,
        span: 19030..19031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 629,
        column: 13,
        span: 19031..19034,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 629,
        column: 14,
        span: 19034..19035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 629,
        column: 18,
        span: 19035..19039,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 629,
        column: 19,
        span: 19039..19040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 629,
        column: 28,
        span: 19040..19049,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 629,
        column: 29,
        span: 19049..19050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 629,
        column: 35,
        span: 19050..19056,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 629,
        column: 38,
        span: 19057..19059,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 629,
        column: 41,
        span: 19060..19062,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 629,
        column: 42,
        span: 19062..19063,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 629,
        column: 43,
        span: 19063..19064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 629,
        column: 50,
        span: 19065..19071,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 629,
        column: 51,
        span: 19071..19072,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 629,
        column: 52,
        span: 19072..19073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 630,
        column: 9,
        span: 19076..19082,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 630,
        column: 10,
        span: 19082..19083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 630,
        column: 13,
        span: 19083..19086,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 630,
        column: 14,
        span: 19086..19087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 630,
        column: 18,
        span: 19087..19091,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 630,
        column: 19,
        span: 19091..19092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 630,
        column: 28,
        span: 19092..19101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 630,
        column: 29,
        span: 19101..19102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 630,
        column: 35,
        span: 19102..19108,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 630,
        column: 37,
        span: 19109..19110,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 630,
        column: 41,
        span: 19110..19114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 630,
        column: 42,
        span: 19114..19115,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 630,
        column: 43,
        span: 19115..19116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 630,
        column: 50,
        span: 19117..19123,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 630,
        column: 51,
        span: 19123..19124,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 630,
        column: 52,
        span: 19124..19125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 631,
        column: 9,
        span: 19128..19134,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 631,
        column: 10,
        span: 19134..19135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 631,
        column: 14,
        span: 19135..19139,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 631,
        column: 15,
        span: 19139..19140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 631,
        column: 24,
        span: 19140..19149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 631,
        column: 25,
        span: 19149..19150,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 631,
        column: 28,
        span: 19149..19153,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 631,
        column: 30,
        span: 19154..19155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 631,
        column: 37,
        span: 19156..19162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 631,
        column: 38,
        span: 19162..19163,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 631,
        column: 41,
        span: 19164..19166,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 631,
        column: 45,
        span: 19167..19170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 631,
        column: 46,
        span: 19170..19171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 632,
        column: 9,
        span: 19174..19180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 632,
        column: 10,
        span: 19180..19181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 632,
        column: 14,
        span: 19181..19185,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 632,
        column: 15,
        span: 19185..19186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 632,
        column: 24,
        span: 19186..19195,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 632,
        column: 25,
        span: 19195..19196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 632,
        column: 29,
        span: 19196..19200,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 632,
        column: 30,
        span: 19200..19201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 632,
        column: 32,
        span: 19201..19203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 632,
        column: 33,
        span: 19203..19204,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 632,
        column: 36,
        span: 19205..19207,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 632,
        column: 40,
        span: 19208..19211,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 632,
        column: 41,
        span: 19211..19212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 633,
        column: 9,
        span: 19215..19221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 633,
        column: 10,
        span: 19221..19222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 633,
        column: 14,
        span: 19222..19226,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 633,
        column: 15,
        span: 19226..19227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 633,
        column: 24,
        span: 19227..19236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 633,
        column: 25,
        span: 19236..19237,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 633,
        column: 26,
        span: 19237..19238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 633,
        column: 30,
        span: 19238..19242,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 633,
        column: 31,
        span: 19242..19243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 633,
        column: 33,
        span: 19243..19245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 633,
        column: 34,
        span: 19245..19246,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 633,
        column: 37,
        span: 19247..19249,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 633,
        column: 41,
        span: 19250..19253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 633,
        column: 42,
        span: 19253..19254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 634,
        column: 9,
        span: 19257..19263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 634,
        column: 10,
        span: 19263..19264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 634,
        column: 14,
        span: 19264..19268,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 634,
        column: 15,
        span: 19268..19269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 634,
        column: 20,
        span: 19269..19274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 634,
        column: 21,
        span: 19274..19275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 634,
        column: 25,
        span: 19275..19279,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 634,
        column: 26,
        span: 19279..19280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 634,
        column: 30,
        span: 19280..19284,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 634,
        column: 31,
        span: 19284..19285,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 634,
        column: 34,
        span: 19286..19288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 634,
        column: 39,
        span: 19289..19293,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 634,
        column: 40,
        span: 19293..19294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 634,
        column: 44,
        span: 19294..19298,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 634,
        column: 45,
        span: 19298..19299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 635,
        column: 9,
        span: 19302..19308,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 635,
        column: 10,
        span: 19308..19309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 635,
        column: 14,
        span: 19309..19313,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 635,
        column: 15,
        span: 19313..19314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 635,
        column: 19,
        span: 19314..19318,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 635,
        column: 20,
        span: 19318..19319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 635,
        column: 24,
        span: 19319..19323,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 635,
        column: 25,
        span: 19323..19324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 635,
        column: 29,
        span: 19324..19328,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 635,
        column: 30,
        span: 19328..19329,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 635,
        column: 33,
        span: 19330..19332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 635,
        column: 38,
        span: 19333..19337,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 635,
        column: 39,
        span: 19337..19338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 635,
        column: 43,
        span: 19338..19342,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 635,
        column: 44,
        span: 19342..19343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 636,
        column: 9,
        span: 19346..19352,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 636,
        column: 10,
        span: 19352..19353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 636,
        column: 14,
        span: 19353..19357,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 636,
        column: 15,
        span: 19357..19358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 636,
        column: 24,
        span: 19358..19367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 636,
        column: 25,
        span: 19367..19368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 636,
        column: 29,
        span: 19368..19372,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 636,
        column: 30,
        span: 19372..19373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 636,
        column: 34,
        span: 19373..19377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 636,
        column: 35,
        span: 19377..19378,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 636,
        column: 38,
        span: 19379..19381,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 636,
        column: 42,
        span: 19382..19385,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 636,
        column: 43,
        span: 19385..19386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 637,
        column: 9,
        span: 19389..19395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 637,
        column: 10,
        span: 19395..19396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 637,
        column: 14,
        span: 19396..19400,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 637,
        column: 15,
        span: 19400..19401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 637,
        column: 20,
        span: 19401..19406,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 637,
        column: 21,
        span: 19406..19407,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 637,
        column: 22,
        span: 19407..19408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 637,
        column: 26,
        span: 19408..19412,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 637,
        column: 27,
        span: 19412..19413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 637,
        column: 31,
        span: 19413..19417,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 637,
        column: 32,
        span: 19417..19418,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 637,
        column: 35,
        span: 19419..19421,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 637,
        column: 37,
        span: 19422..19423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 637,
        column: 41,
        span: 19423..19427,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 637,
        column: 42,
        span: 19427..19428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 637,
        column: 46,
        span: 19428..19432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 637,
        column: 47,
        span: 19432..19433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 638,
        column: 9,
        span: 19436..19442,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 638,
        column: 10,
        span: 19442..19443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 638,
        column: 14,
        span: 19443..19447,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 638,
        column: 15,
        span: 19447..19448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 638,
        column: 19,
        span: 19448..19452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 638,
        column: 20,
        span: 19452..19453,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 638,
        column: 21,
        span: 19453..19454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 638,
        column: 25,
        span: 19454..19458,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 638,
        column: 26,
        span: 19458..19459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 638,
        column: 30,
        span: 19459..19463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 638,
        column: 31,
        span: 19463..19464,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 638,
        column: 34,
        span: 19465..19467,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 638,
        column: 36,
        span: 19468..19469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 638,
        column: 40,
        span: 19469..19473,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 638,
        column: 41,
        span: 19473..19474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 638,
        column: 45,
        span: 19474..19478,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 638,
        column: 46,
        span: 19478..19479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 639,
        column: 9,
        span: 19482..19488,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 639,
        column: 10,
        span: 19488..19489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 639,
        column: 14,
        span: 19489..19493,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 639,
        column: 15,
        span: 19493..19494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 639,
        column: 24,
        span: 19494..19503,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 639,
        column: 25,
        span: 19503..19504,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 639,
        column: 26,
        span: 19504..19505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 639,
        column: 30,
        span: 19505..19509,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 639,
        column: 31,
        span: 19509..19510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 639,
        column: 35,
        span: 19510..19514,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 639,
        column: 36,
        span: 19514..19515,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 639,
        column: 39,
        span: 19516..19518,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 639,
        column: 43,
        span: 19519..19522,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 639,
        column: 44,
        span: 19522..19523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 640,
        column: 9,
        span: 19526..19532,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 640,
        column: 10,
        span: 19532..19533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 640,
        column: 14,
        span: 19533..19537,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 640,
        column: 15,
        span: 19537..19538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 640,
        column: 24,
        span: 19538..19547,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 640,
        column: 25,
        span: 19547..19548,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"34.0\"",
        ),
        line: 640,
        column: 31,
        span: 19548..19554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 640,
        column: 32,
        span: 19554..19555,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 640,
        column: 35,
        span: 19556..19558,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 640,
        column: 38,
        span: 19558..19561,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 640,
        column: 39,
        span: 19561..19562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 641,
        column: 9,
        span: 19565..19571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 641,
        column: 10,
        span: 19571..19572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 641,
        column: 14,
        span: 19572..19576,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 641,
        column: 15,
        span: 19576..19577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 641,
        column: 24,
        span: 19577..19586,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 641,
        column: 25,
        span: 19586..19587,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"34.3\"",
        ),
        line: 641,
        column: 31,
        span: 19587..19593,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 641,
        column: 32,
        span: 19593..19594,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 641,
        column: 35,
        span: 19595..19597,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 641,
        column: 39,
        span: 19598..19601,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 641,
        column: 40,
        span: 19601..19602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 642,
        column: 9,
        span: 19605..19611,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 642,
        column: 10,
        span: 19611..19612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 642,
        column: 14,
        span: 19612..19616,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 642,
        column: 15,
        span: 19616..19617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 642,
        column: 24,
        span: 19617..19626,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 642,
        column: 25,
        span: 19626..19627,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 642,
        column: 26,
        span: 19627..19628,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 642,
        column: 27,
        span: 19628..19629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 642,
        column: 28,
        span: 19629..19630,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 642,
        column: 31,
        span: 19631..19633,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 642,
        column: 35,
        span: 19634..19637,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 642,
        column: 36,
        span: 19637..19638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 643,
        column: 9,
        span: 19641..19647,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 643,
        column: 10,
        span: 19647..19648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 643,
        column: 14,
        span: 19648..19652,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 643,
        column: 15,
        span: 19652..19653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tointeger",
        ),
        line: 643,
        column: 24,
        span: 19653..19662,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 643,
        column: 25,
        span: 19662..19663,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 643,
        column: 26,
        span: 19662..19664,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 643,
        column: 28,
        span: 19665..19666,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 643,
        column: 30,
        span: 19666..19668,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 643,
        column: 31,
        span: 19668..19669,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 643,
        column: 34,
        span: 19670..19672,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 643,
        column: 38,
        span: 19673..19676,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 643,
        column: 39,
        span: 19676..19677,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 644,
        column: 0,
        span: 19685..19688,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 648,
        column: 4,
        span: 19720..19723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 648,
        column: 6,
        span: 19724..19725,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 648,
        column: 8,
        span: 19726..19727,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 648,
        column: 10,
        span: 19728..19729,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 648,
        column: 11,
        span: 19728..19730,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 648,
        column: 12,
        span: 19730..19731,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 648,
        column: 14,
        span: 19731..19733,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 648,
        column: 0,
        span: 19734..19736,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 649,
        column: 6,
        span: 19739..19742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 649,
        column: 8,
        span: 19743..19744,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 649,
        column: 10,
        span: 19745..19746,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 649,
        column: 12,
        span: 19747..19748,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 649,
        column: 13,
        span: 19747..19749,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 649,
        column: 14,
        span: 19749..19750,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 649,
        column: 16,
        span: 19750..19752,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 649,
        column: 0,
        span: 19753..19755,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 650,
        column: 7,
        span: 19760..19762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 650,
        column: 9,
        span: 19763..19764,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 650,
        column: 12,
        span: 19765..19767,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 650,
        column: 14,
        span: 19767..19769,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 650,
        column: 0,
        span: 19770..19774,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 651,
        column: 12,
        span: 19781..19786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mi",
        ),
        line: 651,
        column: 15,
        span: 19787..19789,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 651,
        column: 17,
        span: 19790..19791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 651,
        column: 22,
        span: 19792..19796,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 651,
        column: 23,
        span: 19796..19797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 651,
        column: 27,
        span: 19797..19801,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 651,
        column: 28,
        span: 19801..19802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 651,
        column: 29,
        span: 19802..19803,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 651,
        column: 30,
        span: 19803..19804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 651,
        column: 32,
        span: 19805..19806,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 651,
        column: 33,
        span: 19806..19807,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 652,
        column: 12,
        span: 19814..19819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 652,
        column: 15,
        span: 19820..19822,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 652,
        column: 17,
        span: 19823..19824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 652,
        column: 22,
        span: 19825..19829,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 652,
        column: 23,
        span: 19829..19830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 652,
        column: 27,
        span: 19830..19834,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 652,
        column: 28,
        span: 19834..19835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 652,
        column: 29,
        span: 19835..19836,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 652,
        column: 31,
        span: 19837..19838,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 652,
        column: 35,
        span: 19838..19842,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 652,
        column: 36,
        span: 19842..19843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 652,
        column: 38,
        span: 19844..19845,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 652,
        column: 39,
        span: 19845..19846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 653,
        column: 13,
        span: 19853..19859,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 653,
        column: 14,
        span: 19859..19860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mi",
        ),
        line: 653,
        column: 16,
        span: 19860..19862,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 653,
        column: 19,
        span: 19863..19865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 653,
        column: 22,
        span: 19866..19868,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 653,
        column: 23,
        span: 19868..19869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 654,
        column: 13,
        span: 19876..19882,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 654,
        column: 14,
        span: 19882..19883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 654,
        column: 18,
        span: 19883..19887,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 654,
        column: 19,
        span: 19887..19888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 654,
        column: 23,
        span: 19888..19892,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 654,
        column: 24,
        span: 19892..19893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mi",
        ),
        line: 654,
        column: 26,
        span: 19893..19895,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 654,
        column: 27,
        span: 19895..19896,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 654,
        column: 30,
        span: 19897..19899,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'integer'",
        ),
        line: 654,
        column: 40,
        span: 19900..19909,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 654,
        column: 44,
        span: 19910..19913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 654,
        column: 49,
        span: 19914..19918,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 654,
        column: 50,
        span: 19918..19919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 654,
        column: 54,
        span: 19919..19923,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 654,
        column: 55,
        span: 19923..19924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mf",
        ),
        line: 654,
        column: 57,
        span: 19924..19926,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 654,
        column: 58,
        span: 19926..19927,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 654,
        column: 61,
        span: 19928..19930,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'float'",
        ),
        line: 654,
        column: 69,
        span: 19931..19938,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 654,
        column: 70,
        span: 19938..19939,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 655,
        column: 9,
        span: 19946..19948,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 655,
        column: 11,
        span: 19949..19950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 655,
        column: 12,
        span: 19950..19951,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 655,
        column: 15,
        span: 19952..19954,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 655,
        column: 17,
        span: 19954..19956,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 655,
        column: 21,
        span: 19957..19960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 655,
        column: 23,
        span: 19961..19962,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 655,
        column: 26,
        span: 19963..19965,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 655,
        column: 28,
        span: 19965..19967,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 655,
        column: 29,
        span: 19967..19968,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 655,
        column: 32,
        span: 19969..19971,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 655,
        column: 34,
        span: 19972..19973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 655,
        column: 35,
        span: 19973..19974,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 655,
        column: 38,
        span: 19975..19977,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 655,
        column: 40,
        span: 19977..19979,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 655,
        column: 44,
        span: 19980..19983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 655,
        column: 46,
        span: 19984..19985,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 655,
        column: 49,
        span: 19986..19988,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 655,
        column: 51,
        span: 19988..19990,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 655,
        column: 52,
        span: 19990..19991,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 655,
        column: 55,
        span: 19992..19994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mi",
        ),
        line: 655,
        column: 58,
        span: 19995..19997,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 655,
        column: 61,
        span: 19998..20000,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 655,
        column: 63,
        span: 20000..20002,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 655,
        column: 0,
        span: 20003..20007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 656,
        column: 15,
        span: 20016..20022,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 656,
        column: 16,
        span: 20022..20023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 656,
        column: 19,
        span: 20023..20026,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 656,
        column: 20,
        span: 20026..20027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mi",
        ),
        line: 656,
        column: 22,
        span: 20027..20029,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 656,
        column: 23,
        span: 20029..20030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 656,
        column: 25,
        span: 20031..20032,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 656,
        column: 27,
        span: 20033..20034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 656,
        column: 29,
        span: 20035..20036,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 656,
        column: 30,
        span: 20036..20037,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 656,
        column: 31,
        span: 20037..20038,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 657,
        column: 0,
        span: 20045..20048,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 658,
        column: 0,
        span: 20053..20056,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 659,
        column: 0,
        span: 20059..20062,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 660,
        column: 0,
        span: 20063..20066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 661,
        column: 7,
        span: 20067..20073,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 661,
        column: 8,
        span: 20073..20074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 661,
        column: 11,
        span: 20074..20077,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 661,
        column: 12,
        span: 20077..20078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 661,
        column: 16,
        span: 20078..20082,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 661,
        column: 17,
        span: 20082..20083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 661,
        column: 21,
        span: 20083..20087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 661,
        column: 22,
        span: 20087..20088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 661,
        column: 28,
        span: 20088..20094,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 661,
        column: 29,
        span: 20094..20095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 661,
        column: 36,
        span: 20096..20102,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 661,
        column: 37,
        span: 20102..20103,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 661,
        column: 38,
        span: 20103..20104,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 661,
        column: 40,
        span: 20104..20106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 661,
        column: 41,
        span: 20106..20107,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 661,
        column: 42,
        span: 20107..20108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 662,
        column: 7,
        span: 20109..20115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 662,
        column: 8,
        span: 20115..20116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 662,
        column: 11,
        span: 20116..20119,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 662,
        column: 12,
        span: 20119..20120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 662,
        column: 16,
        span: 20120..20124,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 662,
        column: 17,
        span: 20124..20125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 662,
        column: 21,
        span: 20125..20129,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 662,
        column: 22,
        span: 20129..20130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 662,
        column: 28,
        span: 20130..20136,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 662,
        column: 29,
        span: 20136..20137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 662,
        column: 36,
        span: 20138..20144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 662,
        column: 37,
        span: 20144..20145,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 662,
        column: 38,
        span: 20145..20146,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 662,
        column: 40,
        span: 20146..20148,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 662,
        column: 41,
        span: 20148..20149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 662,
        column: 42,
        span: 20149..20150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 663,
        column: 7,
        span: 20151..20157,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 663,
        column: 8,
        span: 20157..20158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 663,
        column: 11,
        span: 20158..20161,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 663,
        column: 12,
        span: 20161..20162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 663,
        column: 16,
        span: 20162..20166,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 663,
        column: 17,
        span: 20166..20167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 663,
        column: 21,
        span: 20167..20171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 663,
        column: 22,
        span: 20171..20172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 663,
        column: 28,
        span: 20172..20178,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 663,
        column: 30,
        span: 20179..20180,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 663,
        column: 32,
        span: 20180..20182,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 663,
        column: 33,
        span: 20182..20183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 663,
        column: 40,
        span: 20184..20190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 663,
        column: 41,
        span: 20190..20191,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 663,
        column: 42,
        span: 20191..20192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 663,
        column: 49,
        span: 20193..20199,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 663,
        column: 51,
        span: 20200..20201,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 663,
        column: 53,
        span: 20201..20203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 663,
        column: 54,
        span: 20203..20204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 663,
        column: 55,
        span: 20204..20205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 664,
        column: 7,
        span: 20206..20212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 664,
        column: 8,
        span: 20212..20213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 664,
        column: 11,
        span: 20213..20216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 664,
        column: 12,
        span: 20216..20217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 664,
        column: 16,
        span: 20217..20221,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 664,
        column: 17,
        span: 20221..20222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 664,
        column: 21,
        span: 20222..20226,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 664,
        column: 22,
        span: 20226..20227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 664,
        column: 28,
        span: 20227..20233,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 664,
        column: 30,
        span: 20234..20235,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 664,
        column: 32,
        span: 20235..20237,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 664,
        column: 33,
        span: 20237..20238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 664,
        column: 40,
        span: 20239..20245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 664,
        column: 41,
        span: 20245..20246,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 664,
        column: 42,
        span: 20246..20247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 664,
        column: 49,
        span: 20248..20254,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 664,
        column: 51,
        span: 20255..20256,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 664,
        column: 53,
        span: 20256..20258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 664,
        column: 54,
        span: 20258..20259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 664,
        column: 55,
        span: 20259..20260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 666,
        column: 11,
        span: 20262..20272,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 666,
        column: 12,
        span: 20272..20273,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"zero\"",
        ),
        line: 666,
        column: 18,
        span: 20273..20279,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 666,
        column: 19,
        span: 20279..20280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 666,
        column: 24,
        span: 20281..20285,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 666,
        column: 25,
        span: 20285..20286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 666,
        column: 29,
        span: 20286..20290,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 666,
        column: 30,
        span: 20290..20291,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 666,
        column: 32,
        span: 20291..20293,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 666,
        column: 33,
        span: 20293..20294,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 666,
        column: 35,
        span: 20294..20296,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 666,
        column: 36,
        span: 20296..20297,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 669,
        column: 3,
        span: 20300..20302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 670,
        column: 13,
        span: 20324..20334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 670,
        column: 14,
        span: 20334..20335,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"value expected\"",
        ),
        line: 670,
        column: 30,
        span: 20335..20351,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 670,
        column: 31,
        span: 20351..20352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 670,
        column: 36,
        span: 20353..20357,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 670,
        column: 37,
        span: 20357..20358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 670,
        column: 40,
        span: 20358..20361,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 670,
        column: 41,
        span: 20361..20362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        line: 671,
        column: 13,
        span: 20365..20375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 671,
        column: 14,
        span: 20375..20376,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"value expected\"",
        ),
        line: 671,
        column: 30,
        span: 20376..20392,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 671,
        column: 31,
        span: 20392..20393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 671,
        column: 36,
        span: 20394..20398,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 671,
        column: 37,
        span: 20398..20399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 671,
        column: 40,
        span: 20399..20402,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 671,
        column: 41,
        span: 20402..20403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 672,
        column: 9,
        span: 20406..20412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 672,
        column: 10,
        span: 20412..20413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 672,
        column: 13,
        span: 20413..20416,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 672,
        column: 14,
        span: 20416..20417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 672,
        column: 18,
        span: 20417..20421,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 672,
        column: 19,
        span: 20421..20422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 672,
        column: 22,
        span: 20422..20425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 672,
        column: 23,
        span: 20425..20426,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 672,
        column: 24,
        span: 20425..20427,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 672,
        column: 25,
        span: 20427..20428,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 672,
        column: 26,
        span: 20428..20429,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 672,
        column: 28,
        span: 20429..20431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 672,
        column: 29,
        span: 20431..20432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 672,
        column: 30,
        span: 20432..20433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 673,
        column: 9,
        span: 20436..20442,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 673,
        column: 10,
        span: 20442..20443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 673,
        column: 13,
        span: 20443..20446,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 673,
        column: 14,
        span: 20446..20447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 673,
        column: 18,
        span: 20447..20451,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 673,
        column: 19,
        span: 20451..20452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 673,
        column: 22,
        span: 20452..20455,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 673,
        column: 23,
        span: 20455..20456,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 673,
        column: 24,
        span: 20455..20457,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 673,
        column: 25,
        span: 20457..20458,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 673,
        column: 27,
        span: 20458..20460,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 673,
        column: 28,
        span: 20460..20461,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 673,
        column: 30,
        span: 20461..20463,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 673,
        column: 31,
        span: 20463..20464,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 673,
        column: 33,
        span: 20464..20466,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 673,
        column: 34,
        span: 20466..20467,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 673,
        column: 35,
        span: 20467..20468,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 673,
        column: 37,
        span: 20468..20470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 673,
        column: 38,
        span: 20470..20471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 673,
        column: 39,
        span: 20471..20472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 674,
        column: 9,
        span: 20475..20481,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 674,
        column: 10,
        span: 20481..20482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 674,
        column: 14,
        span: 20482..20486,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 674,
        column: 15,
        span: 20486..20487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 674,
        column: 18,
        span: 20487..20490,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 674,
        column: 19,
        span: 20490..20491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 674,
        column: 25,
        span: 20491..20497,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 674,
        column: 26,
        span: 20497..20498,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "60",
            },
        ),
        line: 674,
        column: 32,
        span: 20498..20504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 674,
        column: 33,
        span: 20504..20505,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 674,
        column: 36,
        span: 20506..20508,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "60",
            },
        ),
        line: 674,
        column: 42,
        span: 20508..20514,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 674,
        column: 43,
        span: 20514..20515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 675,
        column: 9,
        span: 20518..20524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 675,
        column: 10,
        span: 20524..20525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 675,
        column: 13,
        span: 20525..20528,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 675,
        column: 14,
        span: 20528..20529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 675,
        column: 18,
        span: 20529..20533,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 675,
        column: 19,
        span: 20533..20534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 675,
        column: 22,
        span: 20534..20537,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 675,
        column: 23,
        span: 20537..20538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 675,
        column: 29,
        span: 20538..20544,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 675,
        column: 30,
        span: 20544..20545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 675,
        column: 37,
        span: 20546..20552,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 675,
        column: 39,
        span: 20553..20554,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 675,
        column: 41,
        span: 20554..20556,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 675,
        column: 42,
        span: 20556..20557,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 675,
        column: 43,
        span: 20557..20558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 675,
        column: 50,
        span: 20559..20565,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 675,
        column: 52,
        span: 20566..20567,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 675,
        column: 54,
        span: 20567..20569,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 675,
        column: 55,
        span: 20569..20570,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 675,
        column: 56,
        span: 20570..20571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 676,
        column: 9,
        span: 20574..20580,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 676,
        column: 10,
        span: 20580..20581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 676,
        column: 13,
        span: 20581..20584,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 676,
        column: 14,
        span: 20584..20585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 676,
        column: 18,
        span: 20585..20589,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 676,
        column: 19,
        span: 20589..20590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 676,
        column: 22,
        span: 20590..20593,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 676,
        column: 23,
        span: 20593..20594,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 676,
        column: 24,
        span: 20593..20595,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 676,
        column: 25,
        span: 20595..20596,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 676,
        column: 26,
        span: 20596..20597,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 676,
        column: 28,
        span: 20597..20599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 676,
        column: 29,
        span: 20599..20600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 676,
        column: 30,
        span: 20600..20601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 677,
        column: 9,
        span: 20604..20610,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 677,
        column: 10,
        span: 20610..20611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 677,
        column: 13,
        span: 20611..20614,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 677,
        column: 14,
        span: 20614..20615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 677,
        column: 18,
        span: 20615..20619,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 677,
        column: 19,
        span: 20619..20620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 677,
        column: 22,
        span: 20620..20623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 677,
        column: 23,
        span: 20623..20624,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 677,
        column: 24,
        span: 20623..20625,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 677,
        column: 25,
        span: 20625..20626,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 677,
        column: 27,
        span: 20626..20628,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 677,
        column: 28,
        span: 20628..20629,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 677,
        column: 30,
        span: 20629..20631,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 677,
        column: 31,
        span: 20631..20632,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 677,
        column: 33,
        span: 20632..20634,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 677,
        column: 34,
        span: 20634..20635,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 677,
        column: 35,
        span: 20635..20636,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 677,
        column: 37,
        span: 20636..20638,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 677,
        column: 38,
        span: 20638..20639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 677,
        column: 39,
        span: 20639..20640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 678,
        column: 9,
        span: 20643..20649,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 678,
        column: 10,
        span: 20649..20650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 678,
        column: 14,
        span: 20650..20654,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 678,
        column: 15,
        span: 20654..20655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 678,
        column: 18,
        span: 20655..20658,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 678,
        column: 19,
        span: 20658..20659,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".2",
                },
            ),
        ),
        line: 678,
        column: 22,
        span: 20658..20662,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 678,
        column: 23,
        span: 20662..20663,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: ".9",
                },
            ),
        ),
        line: 678,
        column: 27,
        span: 20663..20667,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 678,
        column: 28,
        span: 20667..20668,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 678,
        column: 30,
        span: 20669..20670,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: ".2",
                },
            ),
        ),
        line: 678,
        column: 33,
        span: 20669..20673,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 678,
        column: 34,
        span: 20673..20674,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 678,
        column: 38,
        span: 20674..20678,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 678,
        column: 39,
        span: 20678..20679,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 678,
        column: 42,
        span: 20680..20682,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 678,
        column: 44,
        span: 20683..20684,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: ".2",
                },
            ),
        ),
        line: 678,
        column: 47,
        span: 20683..20687,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 678,
        column: 48,
        span: 20687..20688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 679,
        column: 9,
        span: 20691..20697,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 679,
        column: 10,
        span: 20697..20698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 679,
        column: 14,
        span: 20698..20702,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 679,
        column: 15,
        span: 20702..20703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 679,
        column: 18,
        span: 20703..20706,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 679,
        column: 19,
        span: 20706..20707,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".9",
                },
            ),
        ),
        line: 679,
        column: 22,
        span: 20706..20710,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 679,
        column: 23,
        span: 20710..20711,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".7",
                },
            ),
        ),
        line: 679,
        column: 27,
        span: 20711..20715,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 679,
        column: 28,
        span: 20715..20716,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".72",
                },
            ),
        ),
        line: 679,
        column: 33,
        span: 20716..20721,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 679,
        column: 34,
        span: 20721..20722,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 679,
        column: 37,
        span: 20723..20725,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".7",
                },
            ),
        ),
        line: 679,
        column: 41,
        span: 20725..20729,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 679,
        column: 42,
        span: 20729..20730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 680,
        column: 9,
        span: 20733..20739,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 680,
        column: 10,
        span: 20739..20740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 680,
        column: 14,
        span: 20740..20744,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 680,
        column: 15,
        span: 20744..20745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 680,
        column: 18,
        span: 20745..20748,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 680,
        column: 19,
        span: 20748..20749,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 680,
        column: 20,
        span: 20749..20750,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "60",
            },
        ),
        line: 680,
        column: 25,
        span: 20749..20755,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 680,
        column: 26,
        span: 20755..20756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 680,
        column: 33,
        span: 20757..20763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 680,
        column: 34,
        span: 20763..20764,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 680,
        column: 37,
        span: 20765..20767,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 680,
        column: 39,
        span: 20768..20769,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "60",
            },
        ),
        line: 680,
        column: 44,
        span: 20768..20774,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 680,
        column: 45,
        span: 20774..20775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 681,
        column: 9,
        span: 20778..20784,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 681,
        column: 10,
        span: 20784..20785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 681,
        column: 13,
        span: 20785..20788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 681,
        column: 14,
        span: 20788..20789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 681,
        column: 18,
        span: 20789..20793,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 681,
        column: 19,
        span: 20793..20794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 681,
        column: 22,
        span: 20794..20797,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 681,
        column: 23,
        span: 20797..20798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 681,
        column: 29,
        span: 20798..20804,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 681,
        column: 30,
        span: 20804..20805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 681,
        column: 37,
        span: 20806..20812,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 681,
        column: 39,
        span: 20813..20814,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 681,
        column: 41,
        span: 20814..20816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 681,
        column: 42,
        span: 20816..20817,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 681,
        column: 43,
        span: 20817..20818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 681,
        column: 50,
        span: 20819..20825,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 681,
        column: 52,
        span: 20826..20827,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 681,
        column: 54,
        span: 20827..20829,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 681,
        column: 55,
        span: 20829..20830,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 681,
        column: 56,
        span: 20830..20831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 682,
        column: 9,
        span: 20834..20840,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 682,
        column: 10,
        span: 20840..20841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqT",
        ),
        line: 682,
        column: 13,
        span: 20841..20844,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 682,
        column: 14,
        span: 20844..20845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 682,
        column: 18,
        span: 20845..20849,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 682,
        column: 19,
        span: 20849..20850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 682,
        column: 22,
        span: 20850..20853,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 682,
        column: 23,
        span: 20853..20854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 682,
        column: 29,
        span: 20854..20860,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 682,
        column: 31,
        span: 20861..20862,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 682,
        column: 33,
        span: 20862..20864,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 682,
        column: 34,
        span: 20864..20865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 682,
        column: 41,
        span: 20866..20872,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 682,
        column: 42,
        span: 20872..20873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 682,
        column: 49,
        span: 20874..20880,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 682,
        column: 51,
        span: 20881..20882,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 682,
        column: 53,
        span: 20882..20884,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 682,
        column: 54,
        span: 20884..20885,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 682,
        column: 55,
        span: 20885..20886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 682,
        column: 62,
        span: 20887..20893,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 682,
        column: 64,
        span: 20894..20895,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 682,
        column: 66,
        span: 20895..20897,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 682,
        column: 67,
        span: 20897..20898,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 682,
        column: 68,
        span: 20898..20899,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 683,
        column: 0,
        span: 20900..20903,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 686,
        column: 6,
        span: 20937..20942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 686,
        column: 8,
        span: 20943..20944,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 686,
        column: 9,
        span: 20944..20945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 686,
        column: 11,
        span: 20946..20947,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 686,
        column: 13,
        span: 20948..20949,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'10'",
        ),
        line: 686,
        column: 18,
        span: 20950..20954,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 686,
        column: 19,
        span: 20954..20955,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'20'",
        ),
        line: 686,
        column: 24,
        span: 20956..20960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 687,
        column: 7,
        span: 20961..20967,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 687,
        column: 8,
        span: 20967..20968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 687,
        column: 9,
        span: 20968..20969,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 687,
        column: 11,
        span: 20970..20971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 687,
        column: 13,
        span: 20972..20973,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 687,
        column: 16,
        span: 20974..20976,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 687,
        column: 20,
        span: 20976..20980,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 687,
        column: 24,
        span: 20981..20984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 687,
        column: 26,
        span: 20985..20986,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 687,
        column: 28,
        span: 20987..20988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 687,
        column: 30,
        span: 20989..20990,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 687,
        column: 33,
        span: 20991..20993,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 687,
        column: 36,
        span: 20993..20996,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 687,
        column: 40,
        span: 20997..21000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 687,
        column: 42,
        span: 21001..21002,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 687,
        column: 44,
        span: 21003..21004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 687,
        column: 46,
        span: 21005..21006,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 687,
        column: 49,
        span: 21007..21009,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 687,
        column: 51,
        span: 21010..21011,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 687,
        column: 53,
        span: 21010..21013,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 687,
        column: 57,
        span: 21014..21017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 687,
        column: 59,
        span: 21018..21019,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 687,
        column: 61,
        span: 21020..21021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 687,
        column: 63,
        span: 21022..21023,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 687,
        column: 66,
        span: 21024..21026,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 687,
        column: 70,
        span: 21026..21030,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 687,
        column: 74,
        span: 21031..21034,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 687,
        column: 76,
        span: 21035..21036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 687,
        column: 77,
        span: 21036..21037,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 687,
        column: 80,
        span: 21038..21040,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 687,
        column: 82,
        span: 21041..21042,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 687,
        column: 84,
        span: 21041..21044,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 687,
        column: 85,
        span: 21044..21045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 688,
        column: 7,
        span: 21046..21052,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 688,
        column: 8,
        span: 21052..21053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 688,
        column: 9,
        span: 21053..21054,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 688,
        column: 12,
        span: 21055..21057,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'10'",
        ),
        line: 688,
        column: 17,
        span: 21058..21062,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 688,
        column: 21,
        span: 21063..21066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 688,
        column: 23,
        span: 21067..21068,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 688,
        column: 26,
        span: 21069..21071,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'20'",
        ),
        line: 688,
        column: 31,
        span: 21072..21076,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 688,
        column: 32,
        span: 21076..21077,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 691,
        column: 0,
        span: 21080..21082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 692,
        column: 8,
        span: 21085..21090,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 692,
        column: 9,
        span: 21090..21091,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing -0 and NaN\"",
        ),
        line: 692,
        column: 29,
        span: 21091..21111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 692,
        column: 30,
        span: 21111..21112,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 693,
        column: 8,
        span: 21115..21120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 693,
        column: 11,
        span: 21121..21123,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 693,
        column: 12,
        span: 21123..21124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 693,
        column: 14,
        span: 21125..21126,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 693,
        column: 16,
        span: 21127..21128,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 693,
        column: 18,
        span: 21129..21130,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 693,
        column: 21,
        span: 21129..21133,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 693,
        column: 22,
        span: 21133..21134,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 693,
        column: 0,
        span: 21134..21138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 694,
        column: 9,
        span: 21141..21147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 694,
        column: 10,
        span: 21147..21148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 694,
        column: 12,
        span: 21148..21150,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 694,
        column: 15,
        span: 21151..21153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 694,
        column: 17,
        span: 21154..21155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 694,
        column: 18,
        span: 21155..21156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 695,
        column: 9,
        span: 21159..21165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 695,
        column: 10,
        span: 21165..21166,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 695,
        column: 11,
        span: 21165..21167,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 695,
        column: 13,
        span: 21168..21169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 695,
        column: 16,
        span: 21170..21172,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 695,
        column: 18,
        span: 21173..21174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 695,
        column: 20,
        span: 21174..21176,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 695,
        column: 24,
        span: 21177..21180,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 695,
        column: 26,
        span: 21180..21182,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 695,
        column: 28,
        span: 21183..21184,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 695,
        column: 30,
        span: 21184..21186,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 695,
        column: 32,
        span: 21187..21188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 695,
        column: 34,
        span: 21189..21190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 695,
        column: 35,
        span: 21190..21191,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 696,
        column: 8,
        span: 21194..21199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 696,
        column: 10,
        span: 21200..21201,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 696,
        column: 12,
        span: 21202..21203,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 696,
        column: 14,
        span: 21204..21205,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 696,
        column: 16,
        span: 21206..21207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 696,
        column: 18,
        span: 21207..21209,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 696,
        column: 19,
        span: 21209..21210,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 696,
        column: 21,
        span: 21211..21212,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 696,
        column: 23,
        span: 21212..21214,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 696,
        column: 25,
        span: 21215..21216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 697,
        column: 9,
        span: 21219..21225,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 697,
        column: 10,
        span: 21225..21226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 697,
        column: 11,
        span: 21226..21227,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 697,
        column: 12,
        span: 21227..21228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 697,
        column: 13,
        span: 21228..21229,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 697,
        column: 14,
        span: 21229..21230,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 697,
        column: 17,
        span: 21231..21233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 697,
        column: 19,
        span: 21233..21235,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 697,
        column: 23,
        span: 21236..21239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 697,
        column: 25,
        span: 21240..21241,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 697,
        column: 26,
        span: 21241..21242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 697,
        column: 28,
        span: 21242..21244,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 697,
        column: 29,
        span: 21244..21245,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 697,
        column: 32,
        span: 21246..21248,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 697,
        column: 34,
        span: 21248..21250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 697,
        column: 35,
        span: 21250..21251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 698,
        column: 4,
        span: 21254..21255,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 698,
        column: 5,
        span: 21255..21256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 698,
        column: 6,
        span: 21256..21257,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 698,
        column: 7,
        span: 21257..21258,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 698,
        column: 9,
        span: 21259..21260,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 698,
        column: 0,
        span: 21260..21262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 699,
        column: 9,
        span: 21265..21271,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 699,
        column: 10,
        span: 21271..21272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 699,
        column: 11,
        span: 21272..21273,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 699,
        column: 12,
        span: 21273..21274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 699,
        column: 13,
        span: 21274..21275,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 699,
        column: 14,
        span: 21275..21276,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 699,
        column: 17,
        span: 21277..21279,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 699,
        column: 19,
        span: 21279..21281,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 699,
        column: 23,
        span: 21282..21285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 699,
        column: 25,
        span: 21286..21287,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 699,
        column: 26,
        span: 21287..21288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 699,
        column: 28,
        span: 21288..21290,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 699,
        column: 29,
        span: 21290..21291,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 699,
        column: 32,
        span: 21292..21294,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 699,
        column: 34,
        span: 21294..21296,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 699,
        column: 35,
        span: 21296..21297,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 700,
        column: 8,
        span: 21300..21305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inf",
        ),
        line: 700,
        column: 12,
        span: 21306..21309,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 700,
        column: 14,
        span: 21310..21311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 700,
        column: 19,
        span: 21312..21316,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 700,
        column: 20,
        span: 21316..21317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 700,
        column: 24,
        span: 21317..21321,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 700,
        column: 26,
        span: 21322..21323,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 700,
        column: 28,
        span: 21323..21325,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 700,
        column: 30,
        span: 21326..21327,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 700,
        column: 0,
        span: 21327..21329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 701,
        column: 5,
        span: 21332..21334,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 701,
        column: 6,
        span: 21334..21335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 701,
        column: 8,
        span: 21336..21337,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 701,
        column: 10,
        span: 21338..21339,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 701,
        column: 12,
        span: 21340..21341,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 701,
        column: 13,
        span: 21340..21342,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 701,
        column: 15,
        span: 21343..21344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inf",
        ),
        line: 701,
        column: 19,
        span: 21345..21348,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 701,
        column: 20,
        span: 21348..21349,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 701,
        column: 22,
        span: 21349..21351,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 701,
        column: 24,
        span: 21352..21353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inf",
        ),
        line: 701,
        column: 0,
        span: 21354..21357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 702,
        column: 9,
        span: 21360..21366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 702,
        column: 10,
        span: 21366..21367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 702,
        column: 12,
        span: 21367..21369,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 702,
        column: 15,
        span: 21370..21372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 702,
        column: 17,
        span: 21373..21374,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 702,
        column: 18,
        span: 21374..21375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 703,
        column: 9,
        span: 21378..21384,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 703,
        column: 10,
        span: 21384..21385,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 703,
        column: 11,
        span: 21384..21386,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 703,
        column: 13,
        span: 21387..21388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 703,
        column: 16,
        span: 21389..21391,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 703,
        column: 18,
        span: 21392..21393,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 703,
        column: 20,
        span: 21393..21395,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 703,
        column: 24,
        span: 21396..21399,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 703,
        column: 26,
        span: 21399..21401,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 703,
        column: 28,
        span: 21402..21403,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 703,
        column: 30,
        span: 21403..21405,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 703,
        column: 32,
        span: 21406..21407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 703,
        column: 34,
        span: 21408..21409,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 703,
        column: 35,
        span: 21409..21410,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 704,
        column: 8,
        span: 21413..21418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 704,
        column: 12,
        span: 21419..21422,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 704,
        column: 14,
        span: 21423..21424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inf",
        ),
        line: 704,
        column: 18,
        span: 21425..21428,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 704,
        column: 20,
        span: 21429..21430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inf",
        ),
        line: 704,
        column: 0,
        span: 21431..21434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 705,
        column: 9,
        span: 21437..21443,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 705,
        column: 10,
        span: 21443..21444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 705,
        column: 13,
        span: 21444..21447,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 705,
        column: 16,
        span: 21448..21450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 705,
        column: 20,
        span: 21451..21454,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 705,
        column: 21,
        span: 21454..21455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 706,
        column: 9,
        span: 21458..21464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 706,
        column: 10,
        span: 21464..21465,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 706,
        column: 13,
        span: 21465..21468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 706,
        column: 15,
        span: 21469..21470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 706,
        column: 18,
        span: 21470..21473,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 706,
        column: 20,
        span: 21474..21475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 706,
        column: 24,
        span: 21476..21479,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 706,
        column: 25,
        span: 21479..21480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 706,
        column: 26,
        span: 21480..21481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 707,
        column: 9,
        span: 21484..21490,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 707,
        column: 10,
        span: 21490..21491,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 707,
        column: 13,
        span: 21491..21494,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 707,
        column: 15,
        span: 21495..21496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 707,
        column: 18,
        span: 21496..21499,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 707,
        column: 21,
        span: 21500..21502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 707,
        column: 25,
        span: 21503..21506,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 707,
        column: 26,
        span: 21506..21507,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 707,
        column: 27,
        span: 21507..21508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 708,
        column: 9,
        span: 21511..21517,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 708,
        column: 10,
        span: 21517..21518,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 708,
        column: 13,
        span: 21518..21521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 708,
        column: 15,
        span: 21522..21523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 708,
        column: 18,
        span: 21523..21526,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 708,
        column: 20,
        span: 21527..21528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 708,
        column: 24,
        span: 21529..21532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 708,
        column: 25,
        span: 21532..21533,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 708,
        column: 26,
        span: 21533..21534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 709,
        column: 9,
        span: 21537..21543,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 709,
        column: 10,
        span: 21543..21544,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 709,
        column: 13,
        span: 21544..21547,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 709,
        column: 15,
        span: 21548..21549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 709,
        column: 18,
        span: 21549..21552,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 709,
        column: 21,
        span: 21553..21555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 709,
        column: 25,
        span: 21556..21559,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 709,
        column: 26,
        span: 21559..21560,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 709,
        column: 27,
        span: 21560..21561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 710,
        column: 9,
        span: 21564..21570,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 710,
        column: 10,
        span: 21570..21571,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 710,
        column: 13,
        span: 21571..21574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 710,
        column: 15,
        span: 21575..21576,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 710,
        column: 16,
        span: 21575..21577,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 710,
        column: 18,
        span: 21578..21579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 710,
        column: 22,
        span: 21580..21583,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 710,
        column: 23,
        span: 21583..21584,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 710,
        column: 27,
        span: 21585..21588,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 710,
        column: 31,
        span: 21589..21592,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 710,
        column: 33,
        span: 21593..21594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 710,
        column: 36,
        span: 21594..21597,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 710,
        column: 38,
        span: 21598..21599,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 710,
        column: 40,
        span: 21599..21601,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 710,
        column: 41,
        span: 21601..21602,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 710,
        column: 42,
        span: 21602..21603,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 711,
        column: 8,
        span: 21606..21611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN1",
        ),
        line: 711,
        column: 13,
        span: 21612..21616,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 711,
        column: 15,
        span: 21617..21618,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 711,
        column: 17,
        span: 21618..21620,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 711,
        column: 19,
        span: 21621..21622,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 711,
        column: 0,
        span: 21622..21624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 712,
        column: 9,
        span: 21627..21633,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 712,
        column: 10,
        span: 21633..21634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 712,
        column: 13,
        span: 21634..21637,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 712,
        column: 16,
        span: 21638..21640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN1",
        ),
        line: 712,
        column: 21,
        span: 21641..21645,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 712,
        column: 25,
        span: 21646..21649,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 712,
        column: 29,
        span: 21650..21653,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 712,
        column: 31,
        span: 21654..21655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 712,
        column: 34,
        span: 21655..21658,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 712,
        column: 37,
        span: 21659..21661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN1",
        ),
        line: 712,
        column: 42,
        span: 21662..21666,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 712,
        column: 43,
        span: 21666..21667,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 712,
        column: 47,
        span: 21668..21671,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 712,
        column: 51,
        span: 21672..21675,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 712,
        column: 53,
        span: 21676..21677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN1",
        ),
        line: 712,
        column: 57,
        span: 21677..21681,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 712,
        column: 60,
        span: 21682..21684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 712,
        column: 64,
        span: 21685..21688,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 712,
        column: 65,
        span: 21688..21689,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 712,
        column: 66,
        span: 21689..21690,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 713,
        column: 8,
        span: 21693..21698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 713,
        column: 10,
        span: 21699..21700,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 713,
        column: 12,
        span: 21701..21702,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 713,
        column: 14,
        span: 21703..21704,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 713,
        column: 15,
        span: 21704..21705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 714,
        column: 9,
        span: 21708..21714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 714,
        column: 10,
        span: 21714..21715,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 714,
        column: 13,
        span: 21715..21718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 714,
        column: 19,
        span: 21719..21724,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 714,
        column: 20,
        span: 21724..21725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawset",
        ),
        line: 714,
        column: 26,
        span: 21725..21731,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 714,
        column: 27,
        span: 21731..21732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 714,
        column: 29,
        span: 21733..21734,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 714,
        column: 30,
        span: 21734..21735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 714,
        column: 34,
        span: 21736..21739,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 714,
        column: 35,
        span: 21739..21740,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 714,
        column: 37,
        span: 21740..21742,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 714,
        column: 38,
        span: 21742..21743,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 714,
        column: 39,
        span: 21743..21744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 715,
        column: 9,
        span: 21747..21753,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 715,
        column: 10,
        span: 21753..21754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 715,
        column: 11,
        span: 21754..21755,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 715,
        column: 12,
        span: 21755..21756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 715,
        column: 15,
        span: 21756..21759,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 715,
        column: 16,
        span: 21759..21760,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 715,
        column: 19,
        span: 21761..21763,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 715,
        column: 23,
        span: 21764..21767,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 715,
        column: 24,
        span: 21767..21768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 716,
        column: 4,
        span: 21771..21772,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 716,
        column: 5,
        span: 21772..21773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 716,
        column: 6,
        span: 21772..21774,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 716,
        column: 7,
        span: 21774..21775,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 716,
        column: 9,
        span: 21776..21777,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 716,
        column: 0,
        span: 21777..21779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 717,
        column: 9,
        span: 21782..21788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 717,
        column: 10,
        span: 21788..21789,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 717,
        column: 13,
        span: 21789..21792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 717,
        column: 19,
        span: 21793..21798,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 717,
        column: 20,
        span: 21798..21799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawset",
        ),
        line: 717,
        column: 26,
        span: 21799..21805,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 717,
        column: 27,
        span: 21805..21806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 717,
        column: 29,
        span: 21807..21808,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 717,
        column: 30,
        span: 21808..21809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 717,
        column: 34,
        span: 21810..21813,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 717,
        column: 35,
        span: 21813..21814,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 717,
        column: 37,
        span: 21814..21816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 717,
        column: 38,
        span: 21816..21817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 717,
        column: 39,
        span: 21817..21818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 718,
        column: 9,
        span: 21821..21827,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 718,
        column: 10,
        span: 21827..21828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 718,
        column: 11,
        span: 21828..21829,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 718,
        column: 12,
        span: 21829..21830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 718,
        column: 15,
        span: 21830..21833,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 718,
        column: 16,
        span: 21833..21834,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 718,
        column: 19,
        span: 21835..21837,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 718,
        column: 23,
        span: 21838..21841,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 718,
        column: 24,
        span: 21841..21842,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 721,
        column: 8,
        span: 21972..21977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 721,
        column: 11,
        span: 21978..21980,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 721,
        column: 12,
        span: 21980..21981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a2",
        ),
        line: 721,
        column: 15,
        span: 21982..21984,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 721,
        column: 16,
        span: 21984..21985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        line: 721,
        column: 19,
        span: 21986..21988,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 721,
        column: 20,
        span: 21988..21989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        line: 721,
        column: 23,
        span: 21990..21992,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 721,
        column: 24,
        span: 21992..21993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a5",
        ),
        line: 721,
        column: 27,
        span: 21994..21996,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 721,
        column: 29,
        span: 21997..21998,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 721,
        column: 31,
        span: 21998..22000,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 721,
        column: 32,
        span: 22000..22001,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 721,
        column: 34,
        span: 22001..22003,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 721,
        column: 35,
        span: 22003..22004,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\\0\\0\\0\\0\\0\"",
        ),
        line: 721,
        column: 54,
        span: 22005..22023,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 721,
        column: 55,
        span: 22023..22024,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 721,
        column: 57,
        span: 22024..22026,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 721,
        column: 58,
        span: 22026..22027,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\\0\\0\\0\\0\\0\"",
        ),
        line: 721,
        column: 77,
        span: 22028..22046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 722,
        column: 9,
        span: 22049..22055,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 722,
        column: 10,
        span: 22055..22056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 722,
        column: 12,
        span: 22056..22058,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 722,
        column: 15,
        span: 22059..22061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a2",
        ),
        line: 722,
        column: 18,
        span: 22062..22064,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 722,
        column: 22,
        span: 22065..22068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a2",
        ),
        line: 722,
        column: 25,
        span: 22069..22071,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 722,
        column: 28,
        span: 22072..22074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        line: 722,
        column: 31,
        span: 22075..22077,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 722,
        column: 35,
        span: 22078..22081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 722,
        column: 38,
        span: 22082..22084,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 722,
        column: 41,
        span: 22085..22087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        line: 722,
        column: 44,
        span: 22088..22090,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 722,
        column: 45,
        span: 22090..22091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 723,
        column: 9,
        span: 22094..22100,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 723,
        column: 10,
        span: 22100..22101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        line: 723,
        column: 12,
        span: 22101..22103,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 723,
        column: 15,
        span: 22104..22106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a5",
        ),
        line: 723,
        column: 18,
        span: 22107..22109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 723,
        column: 19,
        span: 22109..22110,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 724,
        column: 0,
        span: 22111..22114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 727,
        column: 6,
        span: 22117..22122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 727,
        column: 7,
        span: 22122..22123,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing 'math.random'\"",
        ),
        line: 727,
        column: 30,
        span: 22123..22146,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 727,
        column: 31,
        span: 22146..22147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 728,
        column: 5,
        span: 22148..22152,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 728,
        column: 6,
        span: 22152..22153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randomseed",
        ),
        line: 728,
        column: 16,
        span: 22153..22163,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 728,
        column: 17,
        span: 22163..22164,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 728,
        column: 18,
        span: 22163..22165,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 728,
        column: 19,
        span: 22165..22166,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 730,
        column: 3,
        span: 22168..22170,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 731,
        column: 8,
        span: 22199..22204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 731,
        column: 12,
        span: 22205..22208,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 731,
        column: 14,
        span: 22209..22210,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 731,
        column: 16,
        span: 22211..22212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 731,
        column: 20,
        span: 22212..22216,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 731,
        column: 21,
        span: 22216..22217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 731,
        column: 0,
        span: 22217..22221,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 732,
        column: 8,
        span: 22224..22229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 732,
        column: 12,
        span: 22230..22233,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 732,
        column: 14,
        span: 22234..22235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 732,
        column: 19,
        span: 22236..22240,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 732,
        column: 20,
        span: 22240..22241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 732,
        column: 0,
        span: 22241..22245,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 733,
        column: 6,
        span: 22248..22251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 733,
        column: 8,
        span: 22252..22253,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 733,
        column: 10,
        span: 22254..22255,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 733,
        column: 12,
        span: 22255..22257,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 733,
        column: 13,
        span: 22257..22258,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20000",
                    after_decimal: "",
                },
            ),
        ),
        line: 733,
        column: 19,
        span: 22258..22264,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 733,
        column: 0,
        span: 22265..22267,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 734,
        column: 10,
        span: 22272..22277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 734,
        column: 12,
        span: 22278..22279,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 734,
        column: 14,
        span: 22280..22281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 734,
        column: 19,
        span: 22282..22286,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 734,
        column: 20,
        span: 22286..22287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 734,
        column: 26,
        span: 22287..22293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 734,
        column: 27,
        span: 22293..22294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 734,
        column: 28,
        span: 22294..22295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 735,
        column: 11,
        span: 22300..22306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 735,
        column: 12,
        span: 22306..22307,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 735,
        column: 13,
        span: 22306..22308,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 735,
        column: 16,
        span: 22309..22311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 735,
        column: 18,
        span: 22312..22313,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 735,
        column: 22,
        span: 22314..22317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 735,
        column: 24,
        span: 22318..22319,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 735,
        column: 26,
        span: 22320..22321,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 735,
        column: 28,
        span: 22321..22323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 735,
        column: 29,
        span: 22323..22324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 736,
        column: 8,
        span: 22329..22332,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 736,
        column: 10,
        span: 22333..22334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 736,
        column: 15,
        span: 22335..22339,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 736,
        column: 16,
        span: 22339..22340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 736,
        column: 19,
        span: 22340..22343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 736,
        column: 20,
        span: 22343..22344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 736,
        column: 23,
        span: 22344..22347,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 736,
        column: 24,
        span: 22347..22348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 736,
        column: 26,
        span: 22349..22350,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 736,
        column: 27,
        span: 22350..22351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 737,
        column: 8,
        span: 22356..22359,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 737,
        column: 10,
        span: 22360..22361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 737,
        column: 15,
        span: 22362..22366,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 737,
        column: 16,
        span: 22366..22367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 737,
        column: 19,
        span: 22367..22370,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 737,
        column: 20,
        span: 22370..22371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 737,
        column: 23,
        span: 22371..22374,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 737,
        column: 24,
        span: 22374..22375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 737,
        column: 26,
        span: 22376..22377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 737,
        column: 27,
        span: 22377..22378,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 738,
        column: 7,
        span: 22383..22385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 738,
        column: 10,
        span: 22386..22388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 738,
        column: 11,
        span: 22388..22389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 738,
        column: 14,
        span: 22389..22392,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 738,
        column: 15,
        span: 22392..22393,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 738,
        column: 17,
        span: 22393..22395,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 738,
        column: 18,
        span: 22395..22396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".001",
                },
            ),
        ),
        line: 738,
        column: 24,
        span: 22396..22402,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 738,
        column: 25,
        span: 22402..22403,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 738,
        column: 29,
        span: 22404..22407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 738,
        column: 32,
        span: 22408..22410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 738,
        column: 33,
        span: 22410..22411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 738,
        column: 36,
        span: 22411..22414,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 738,
        column: 37,
        span: 22414..22415,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 738,
        column: 39,
        span: 22415..22417,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 738,
        column: 40,
        span: 22417..22418,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".001",
                },
            ),
        ),
        line: 738,
        column: 46,
        span: 22418..22424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 738,
        column: 47,
        span: 22424..22425,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 738,
        column: 0,
        span: 22426..22430,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 740,
        column: 0,
        span: 22436..22439,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 741,
        column: 0,
        span: 22442..22445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 743,
        column: 9,
        span: 22492..22498,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 743,
        column: 10,
        span: 22498..22499,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 743,
        column: 15,
        span: 22499..22504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 743,
        column: 16,
        span: 22504..22505,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 744,
        column: 0,
        span: 22506..22509,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 746,
        column: 0,
        span: 22511..22513,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 747,
        column: 8,
        span: 22516..22521,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 747,
        column: 17,
        span: 22522..22530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 747,
        column: 21,
        span: 22531..22534,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 747,
        column: 22,
        span: 22534..22535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 747,
        column: 23,
        span: 22535..22536,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 747,
        column: 24,
        span: 22536..22537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 747,
        column: 28,
        span: 22538..22541,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 747,
        column: 29,
        span: 22541..22542,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 748,
        column: 10,
        span: 22582..22587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 748,
        column: 13,
        span: 22588..22590,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 748,
        column: 14,
        span: 22590..22591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x2",
        ),
        line: 748,
        column: 0,
        span: 22592..22594,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 749,
        column: 7,
        span: 22599..22601,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 749,
        column: 9,
        span: 22602..22603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 749,
        column: 10,
        span: 22603..22604,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 749,
        column: 13,
        span: 22605..22607,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 749,
        column: 15,
        span: 22607..22609,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 749,
        column: 0,
        span: 22610..22614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 750,
        column: 9,
        span: 22621..22623,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 750,
        column: 11,
        span: 22624..22625,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 750,
        column: 13,
        span: 22625..22627,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 750,
        column: 14,
        span: 22627..22628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x2",
        ),
        line: 750,
        column: 17,
        span: 22629..22631,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 750,
        column: 19,
        span: 22632..22633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 750,
        column: 21,
        span: 22634..22635,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 750,
        column: 22,
        span: 22635..22636,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 750,
        column: 23,
        span: 22635..22637,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 750,
        column: 24,
        span: 22637..22638,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 751,
        column: 0,
        span: 22643..22647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 752,
        column: 9,
        span: 22654..22656,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 752,
        column: 11,
        span: 22657..22658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 752,
        column: 13,
        span: 22659..22660,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 752,
        column: 14,
        span: 22660..22661,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 752,
        column: 15,
        span: 22660..22662,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 752,
        column: 16,
        span: 22662..22663,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 752,
        column: 17,
        span: 22663..22664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x2",
        ),
        line: 752,
        column: 20,
        span: 22665..22667,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 752,
        column: 22,
        span: 22668..22669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 752,
        column: 24,
        span: 22670..22671,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 752,
        column: 25,
        span: 22671..22672,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 752,
        column: 26,
        span: 22671..22673,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 752,
        column: 27,
        span: 22673..22674,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 753,
        column: 0,
        span: 22679..22682,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 754,
        column: 10,
        span: 22687..22692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mark",
        ),
        line: 754,
        column: 15,
        span: 22693..22697,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 754,
        column: 17,
        span: 22698..22699,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 754,
        column: 19,
        span: 22700..22701,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 754,
        column: 20,
        span: 22701..22702,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 754,
        column: 21,
        span: 22702..22703,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 754,
        column: 27,
        span: 22704..22709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 754,
        column: 33,
        span: 22710..22715,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 754,
        column: 35,
        span: 22716..22717,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 754,
        column: 37,
        span: 22717..22719,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 755,
        column: 8,
        span: 22761..22764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 755,
        column: 10,
        span: 22765..22766,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 755,
        column: 12,
        span: 22767..22768,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 755,
        column: 14,
        span: 22768..22770,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 755,
        column: 15,
        span: 22770..22771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 755,
        column: 19,
        span: 22772..22775,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 755,
        column: 22,
        span: 22776..22778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 755,
        column: 27,
        span: 22778..22783,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 755,
        column: 0,
        span: 22784..22786,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 756,
        column: 12,
        span: 22793..22798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 756,
        column: 14,
        span: 22799..22800,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 756,
        column: 16,
        span: 22801..22802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 756,
        column: 21,
        span: 22803..22807,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 756,
        column: 22,
        span: 22807..22808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 756,
        column: 28,
        span: 22808..22814,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 756,
        column: 29,
        span: 22814..22815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 756,
        column: 34,
        span: 22815..22820,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 756,
        column: 35,
        span: 22820..22821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 756,
        column: 41,
        span: 22821..22827,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 756,
        column: 42,
        span: 22827..22828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 756,
        column: 43,
        span: 22828..22829,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 756,
        column: 44,
        span: 22829..22830,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 756,
        column: 45,
        span: 22830..22831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 757,
        column: 13,
        span: 22838..22844,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 757,
        column: 14,
        span: 22844..22845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 757,
        column: 16,
        span: 22845..22847,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 757,
        column: 19,
        span: 22848..22850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 757,
        column: 21,
        span: 22851..22852,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 757,
        column: 25,
        span: 22853..22856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 757,
        column: 27,
        span: 22857..22858,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 757,
        column: 30,
        span: 22859..22861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x2",
        ),
        line: 757,
        column: 33,
        span: 22862..22864,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 757,
        column: 34,
        span: 22864..22865,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 758,
        column: 9,
        span: 22872..22874,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 758,
        column: 13,
        span: 22875..22878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mark",
        ),
        line: 758,
        column: 18,
        span: 22879..22883,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 758,
        column: 19,
        span: 22883..22884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 758,
        column: 20,
        span: 22884..22885,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 758,
        column: 21,
        span: 22885..22886,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 758,
        column: 26,
        span: 22887..22891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mark",
        ),
        line: 759,
        column: 13,
        span: 22913..22917,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 759,
        column: 14,
        span: 22917..22918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 759,
        column: 15,
        span: 22918..22919,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 759,
        column: 16,
        span: 22919..22920,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 759,
        column: 18,
        span: 22921..22922,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 759,
        column: 0,
        span: 22923..22927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 760,
        column: 14,
        span: 22936..22941,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 760,
        column: 16,
        span: 22942..22943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 760,
        column: 22,
        span: 22944..22949,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 760,
        column: 24,
        span: 22950..22951,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 760,
        column: 0,
        span: 22951..22953,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 761,
        column: 0,
        span: 22960..22963,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 762,
        column: 9,
        span: 22970..22972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 762,
        column: 15,
        span: 22973..22978,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 762,
        column: 18,
        span: 22979..22981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x2",
        ),
        line: 762,
        column: 21,
        span: 22982..22984,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 762,
        column: 23,
        span: 22985..22986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 762,
        column: 26,
        span: 22987..22989,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 762,
        column: 28,
        span: 22990..22991,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 762,
        column: 30,
        span: 22991..22993,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 762,
        column: 35,
        span: 22994..22998,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 764,
        column: 0,
        span: 23033..23036,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 765,
        column: 0,
        span: 23041..23044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 767,
        column: 11,
        span: 23095..23101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 767,
        column: 12,
        span: 23101..23102,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 767,
        column: 17,
        span: 23102..23107,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 767,
        column: 18,
        span: 23107..23108,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 768,
        column: 0,
        span: 23111..23114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 770,
        column: 6,
        span: 23118..23121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 770,
        column: 7,
        span: 23121..23122,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 770,
        column: 8,
        span: 23122..23123,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 770,
        column: 10,
        span: 23124..23125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 770,
        column: 12,
        span: 23124..23127,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 770,
        column: 13,
        span: 23127..23128,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 770,
        column: 15,
        span: 23128..23130,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 770,
        column: 17,
        span: 23131..23132,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 770,
        column: 18,
        span: 23132..23133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 771,
        column: 6,
        span: 23136..23139,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 771,
        column: 7,
        span: 23139..23140,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 771,
        column: 8,
        span: 23140..23141,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 771,
        column: 10,
        span: 23141..23143,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 771,
        column: 12,
        span: 23144..23145,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 771,
        column: 13,
        span: 23145..23146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 772,
        column: 6,
        span: 23149..23152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 772,
        column: 7,
        span: 23152..23153,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 772,
        column: 8,
        span: 23153..23154,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 772,
        column: 10,
        span: 23155..23156,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 772,
        column: 12,
        span: 23155..23158,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 772,
        column: 13,
        span: 23158..23159,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 772,
        column: 16,
        span: 23159..23162,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 772,
        column: 18,
        span: 23163..23164,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 772,
        column: 19,
        span: 23164..23165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 773,
        column: 6,
        span: 23168..23171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 773,
        column: 7,
        span: 23171..23172,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 773,
        column: 8,
        span: 23172..23173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 773,
        column: 15,
        span: 23174..23180,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 773,
        column: 16,
        span: 23180..23181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 773,
        column: 23,
        span: 23182..23188,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 773,
        column: 25,
        span: 23189..23190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 773,
        column: 26,
        span: 23190..23191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 774,
        column: 6,
        span: 23194..23197,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 774,
        column: 7,
        span: 23197..23198,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 774,
        column: 8,
        span: 23198..23199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 774,
        column: 15,
        span: 23200..23206,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 774,
        column: 16,
        span: 23206..23207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 774,
        column: 23,
        span: 23208..23214,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 774,
        column: 25,
        span: 23215..23216,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 774,
        column: 26,
        span: 23216..23217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 775,
        column: 6,
        span: 23220..23223,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 775,
        column: 7,
        span: 23223..23224,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 775,
        column: 8,
        span: 23224..23225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 775,
        column: 15,
        span: 23226..23232,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 775,
        column: 16,
        span: 23232..23233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 775,
        column: 23,
        span: 23234..23240,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 775,
        column: 25,
        span: 23241..23242,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 775,
        column: 27,
        span: 23242..23244,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 775,
        column: 29,
        span: 23245..23246,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 775,
        column: 30,
        span: 23246..23247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 776,
        column: 6,
        span: 23250..23253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 776,
        column: 7,
        span: 23253..23254,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 776,
        column: 8,
        span: 23254..23255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 776,
        column: 15,
        span: 23256..23262,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 776,
        column: 17,
        span: 23263..23264,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 776,
        column: 19,
        span: 23264..23266,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 776,
        column: 20,
        span: 23266..23267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 776,
        column: 27,
        span: 23268..23274,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 776,
        column: 29,
        span: 23275..23276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 776,
        column: 30,
        span: 23276..23277,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 777,
        column: 0,
        span: 23278..23281,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 779,
        column: 0,
        span: 23283..23285,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 780,
        column: 8,
        span: 23288..23293,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 780,
        column: 17,
        span: 23294..23302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 780,
        column: 21,
        span: 23303..23306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 780,
        column: 22,
        span: 23306..23307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p1",
        ),
        line: 780,
        column: 24,
        span: 23307..23309,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 780,
        column: 25,
        span: 23309..23310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p2",
        ),
        line: 780,
        column: 28,
        span: 23311..23313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 780,
        column: 29,
        span: 23313..23314,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 781,
        column: 10,
        span: 23354..23359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 781,
        column: 14,
        span: 23360..23363,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 781,
        column: 16,
        span: 23364..23365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 781,
        column: 0,
        span: 23366..23372,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 782,
        column: 10,
        span: 23377..23382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 782,
        column: 14,
        span: 23383..23386,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 782,
        column: 16,
        span: 23387..23388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 782,
        column: 0,
        span: 23389..23395,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 783,
        column: 10,
        span: 23400..23405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 783,
        column: 12,
        span: 23406..23407,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 783,
        column: 14,
        span: 23408..23409,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 783,
        column: 0,
        span: 23409..23413,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 784,
        column: 10,
        span: 23418..23423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mark",
        ),
        line: 784,
        column: 15,
        span: 23424..23428,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 784,
        column: 17,
        span: 23429..23430,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 784,
        column: 19,
        span: 23431..23432,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 784,
        column: 20,
        span: 23432..23433,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 784,
        column: 21,
        span: 23433..23434,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 784,
        column: 27,
        span: 23435..23440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 784,
        column: 33,
        span: 23441..23446,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 784,
        column: 35,
        span: 23447..23448,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 784,
        column: 37,
        span: 23448..23450,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 785,
        column: 8,
        span: 23493..23496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 785,
        column: 10,
        span: 23497..23498,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 785,
        column: 12,
        span: 23499..23500,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 785,
        column: 14,
        span: 23500..23502,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 785,
        column: 15,
        span: 23502..23503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 785,
        column: 17,
        span: 23504..23505,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 785,
        column: 0,
        span: 23506..23508,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 786,
        column: 12,
        span: 23515..23520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 786,
        column: 14,
        span: 23521..23522,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 786,
        column: 16,
        span: 23523..23524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 786,
        column: 21,
        span: 23525..23529,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 786,
        column: 22,
        span: 23529..23530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 786,
        column: 28,
        span: 23530..23536,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 786,
        column: 29,
        span: 23536..23537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p1",
        ),
        line: 786,
        column: 31,
        span: 23537..23539,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 786,
        column: 32,
        span: 23539..23540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p2",
        ),
        line: 786,
        column: 35,
        span: 23541..23543,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 786,
        column: 36,
        span: 23543..23544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 787,
        column: 10,
        span: 23551..23554,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 787,
        column: 12,
        span: 23555..23556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 787,
        column: 17,
        span: 23557..23561,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 787,
        column: 18,
        span: 23561..23562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 787,
        column: 21,
        span: 23562..23565,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 787,
        column: 22,
        span: 23565..23566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 787,
        column: 25,
        span: 23566..23569,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 787,
        column: 26,
        span: 23569..23570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 787,
        column: 28,
        span: 23571..23572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 787,
        column: 29,
        span: 23572..23573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 788,
        column: 10,
        span: 23580..23583,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 788,
        column: 12,
        span: 23584..23585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 788,
        column: 17,
        span: 23586..23590,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 788,
        column: 18,
        span: 23590..23591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 788,
        column: 21,
        span: 23591..23594,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 788,
        column: 22,
        span: 23594..23595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 788,
        column: 25,
        span: 23595..23598,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 788,
        column: 26,
        span: 23598..23599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 788,
        column: 28,
        span: 23600..23601,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 788,
        column: 29,
        span: 23601..23602,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 789,
        column: 9,
        span: 23609..23611,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 789,
        column: 13,
        span: 23612..23615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mark",
        ),
        line: 789,
        column: 18,
        span: 23616..23620,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 789,
        column: 19,
        span: 23620..23621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 789,
        column: 20,
        span: 23621..23622,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 789,
        column: 21,
        span: 23622..23623,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 789,
        column: 26,
        span: 23624..23628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mark",
        ),
        line: 790,
        column: 13,
        span: 23650..23654,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 790,
        column: 14,
        span: 23654..23655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 790,
        column: 15,
        span: 23655..23656,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 790,
        column: 16,
        span: 23656..23657,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 790,
        column: 18,
        span: 23658..23659,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 790,
        column: 0,
        span: 23660..23664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 791,
        column: 14,
        span: 23673..23678,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 791,
        column: 16,
        span: 23679..23680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 791,
        column: 22,
        span: 23681..23686,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 791,
        column: 24,
        span: 23687..23688,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 791,
        column: 0,
        span: 23688..23690,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 792,
        column: 0,
        span: 23697..23700,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 793,
        column: 0,
        span: 23705..23708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 795,
        column: 11,
        span: 23757..23763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 795,
        column: 12,
        span: 23763..23764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 795,
        column: 17,
        span: 23764..23769,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 795,
        column: 20,
        span: 23770..23772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 795,
        column: 22,
        span: 23773..23774,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 795,
        column: 24,
        span: 23775..23776,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".8",
                },
            ),
        ),
        line: 795,
        column: 28,
        span: 23776..23780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 795,
        column: 29,
        span: 23780..23781,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 797,
        column: 10,
        span: 23841..23846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 797,
        column: 15,
        span: 23847..23851,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 797,
        column: 17,
        span: 23852..23853,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 797,
        column: 19,
        span: 23854..23855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p2",
        ),
        line: 797,
        column: 21,
        span: 23855..23857,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 797,
        column: 23,
        span: 23858..23859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p1",
        ),
        line: 797,
        column: 26,
        span: 23860..23862,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 797,
        column: 27,
        span: 23862..23863,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 797,
        column: 30,
        span: 23864..23866,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 797,
        column: 0,
        span: 23866..23868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 798,
        column: 11,
        span: 23873..23879,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 798,
        column: 12,
        span: 23879..23880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 798,
        column: 15,
        span: 23880..23883,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 798,
        column: 17,
        span: 23884..23885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p1",
        ),
        line: 798,
        column: 20,
        span: 23886..23888,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 798,
        column: 22,
        span: 23889..23890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 798,
        column: 27,
        span: 23891..23895,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 798,
        column: 31,
        span: 23896..23899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 798,
        column: 35,
        span: 23900..23903,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 798,
        column: 37,
        span: 23904..23905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p2",
        ),
        line: 798,
        column: 40,
        span: 23906..23908,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 798,
        column: 42,
        span: 23909..23910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 798,
        column: 47,
        span: 23911..23915,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 798,
        column: 48,
        span: 23915..23916,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 799,
        column: 0,
        span: 23919..23922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 800,
        column: 6,
        span: 23925..23928,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 800,
        column: 7,
        span: 23928..23929,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 800,
        column: 8,
        span: 23928..23930,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 800,
        column: 9,
        span: 23930..23931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 800,
        column: 16,
        span: 23932..23938,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 800,
        column: 17,
        span: 23938..23939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 801,
        column: 6,
        span: 23942..23945,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 801,
        column: 7,
        span: 23945..23946,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 801,
        column: 8,
        span: 23945..23947,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 801,
        column: 9,
        span: 23947..23948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 801,
        column: 16,
        span: 23949..23955,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 801,
        column: 17,
        span: 23955..23956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 802,
        column: 6,
        span: 23959..23962,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 802,
        column: 7,
        span: 23962..23963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 802,
        column: 13,
        span: 23963..23969,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 802,
        column: 14,
        span: 23969..23970,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 802,
        column: 16,
        span: 23971..23972,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 802,
        column: 17,
        span: 23971..23973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 802,
        column: 18,
        span: 23973..23974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 803,
        column: 6,
        span: 23977..23980,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 803,
        column: 7,
        span: 23980..23981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 803,
        column: 13,
        span: 23981..23987,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 803,
        column: 16,
        span: 23988..23990,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 803,
        column: 18,
        span: 23990..23992,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 803,
        column: 19,
        span: 23992..23993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 803,
        column: 26,
        span: 23994..24000,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 803,
        column: 29,
        span: 24001..24003,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 803,
        column: 31,
        span: 24003..24005,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 803,
        column: 32,
        span: 24005..24006,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 804,
        column: 0,
        span: 24007..24010,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 806,
        column: 4,
        span: 24012..24015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 806,
        column: 6,
        span: 24016..24017,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 806,
        column: 8,
        span: 24018..24019,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 806,
        column: 10,
        span: 24019..24021,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 806,
        column: 11,
        span: 24021..24022,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 806,
        column: 15,
        span: 24022..24026,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 806,
        column: 0,
        span: 24027..24029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 807,
        column: 9,
        span: 24032..24038,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 807,
        column: 10,
        span: 24038..24039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 807,
        column: 14,
        span: 24039..24043,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 807,
        column: 15,
        span: 24043..24044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 807,
        column: 21,
        span: 24044..24050,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 807,
        column: 22,
        span: 24050..24051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 807,
        column: 28,
        span: 24051..24057,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 807,
        column: 29,
        span: 24057..24058,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 807,
        column: 31,
        span: 24059..24060,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 807,
        column: 33,
        span: 24060..24062,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 807,
        column: 34,
        span: 24062..24063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 808,
        column: 9,
        span: 24066..24072,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 808,
        column: 10,
        span: 24072..24073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 808,
        column: 14,
        span: 24073..24077,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 808,
        column: 15,
        span: 24077..24078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 808,
        column: 21,
        span: 24078..24084,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 808,
        column: 22,
        span: 24084..24085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 808,
        column: 28,
        span: 24085..24091,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 808,
        column: 29,
        span: 24091..24092,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 808,
        column: 31,
        span: 24093..24094,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 808,
        column: 32,
        span: 24093..24095,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 808,
        column: 33,
        span: 24095..24096,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 808,
        column: 35,
        span: 24097..24098,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 808,
        column: 37,
        span: 24098..24100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 808,
        column: 38,
        span: 24100..24101,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 809,
        column: 0,
        span: 24102..24105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 811,
        column: 7,
        span: 24107..24113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 811,
        column: 8,
        span: 24113..24114,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 811,
        column: 11,
        span: 24114..24117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 811,
        column: 17,
        span: 24118..24123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 811,
        column: 18,
        span: 24123..24124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 811,
        column: 22,
        span: 24124..24128,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 811,
        column: 23,
        span: 24128..24129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 811,
        column: 29,
        span: 24129..24135,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 811,
        column: 30,
        span: 24135..24136,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 811,
        column: 32,
        span: 24136..24138,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 811,
        column: 33,
        span: 24138..24139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 811,
        column: 35,
        span: 24139..24141,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 811,
        column: 36,
        span: 24141..24142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 811,
        column: 38,
        span: 24142..24144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 811,
        column: 39,
        span: 24144..24145,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 811,
        column: 40,
        span: 24145..24146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 814,
        column: 7,
        span: 24188..24194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 814,
        column: 8,
        span: 24194..24195,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 814,
        column: 11,
        span: 24195..24198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 814,
        column: 17,
        span: 24199..24204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 814,
        column: 18,
        span: 24204..24205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 814,
        column: 22,
        span: 24205..24209,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 814,
        column: 23,
        span: 24209..24210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 814,
        column: 29,
        span: 24210..24216,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 814,
        column: 30,
        span: 24216..24217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 814,
        column: 37,
        span: 24218..24224,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 814,
        column: 39,
        span: 24225..24226,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 814,
        column: 41,
        span: 24226..24228,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 814,
        column: 42,
        span: 24228..24229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 814,
        column: 49,
        span: 24230..24236,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 814,
        column: 50,
        span: 24236..24237,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 814,
        column: 51,
        span: 24237..24238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 815,
        column: 7,
        span: 24239..24245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 815,
        column: 8,
        span: 24245..24246,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 815,
        column: 11,
        span: 24246..24249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 815,
        column: 17,
        span: 24250..24255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 815,
        column: 18,
        span: 24255..24256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 815,
        column: 22,
        span: 24256..24260,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 815,
        column: 23,
        span: 24260..24261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 815,
        column: 29,
        span: 24261..24267,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 815,
        column: 30,
        span: 24267..24268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 815,
        column: 37,
        span: 24269..24275,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 815,
        column: 38,
        span: 24275..24276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 815,
        column: 45,
        span: 24277..24283,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 815,
        column: 47,
        span: 24284..24285,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 815,
        column: 49,
        span: 24285..24287,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 815,
        column: 50,
        span: 24287..24288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 815,
        column: 51,
        span: 24288..24289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 816,
        column: 7,
        span: 24290..24296,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 816,
        column: 8,
        span: 24296..24297,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 816,
        column: 11,
        span: 24297..24300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 816,
        column: 17,
        span: 24301..24306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 816,
        column: 18,
        span: 24306..24307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 816,
        column: 22,
        span: 24307..24311,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 816,
        column: 23,
        span: 24311..24312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 816,
        column: 29,
        span: 24312..24318,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 816,
        column: 30,
        span: 24318..24319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 816,
        column: 37,
        span: 24320..24326,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 816,
        column: 38,
        span: 24326..24327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 816,
        column: 45,
        span: 24328..24334,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 816,
        column: 46,
        span: 24334..24335,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 816,
        column: 47,
        span: 24335..24336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 819,
        column: 7,
        span: 24360..24366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 819,
        column: 8,
        span: 24366..24367,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 819,
        column: 11,
        span: 24367..24370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 819,
        column: 17,
        span: 24371..24376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 819,
        column: 18,
        span: 24376..24377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 819,
        column: 22,
        span: 24377..24381,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 819,
        column: 23,
        span: 24381..24382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 819,
        column: 29,
        span: 24382..24388,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 819,
        column: 30,
        span: 24388..24389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 819,
        column: 37,
        span: 24390..24396,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 819,
        column: 38,
        span: 24396..24397,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 819,
        column: 40,
        span: 24397..24399,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 819,
        column: 41,
        span: 24399..24400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 819,
        column: 42,
        span: 24400..24401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 820,
        column: 7,
        span: 24402..24408,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 820,
        column: 8,
        span: 24408..24409,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 820,
        column: 11,
        span: 24409..24412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 820,
        column: 17,
        span: 24413..24418,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 820,
        column: 18,
        span: 24418..24419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 820,
        column: 22,
        span: 24419..24423,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 820,
        column: 23,
        span: 24423..24424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 820,
        column: 29,
        span: 24424..24430,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 820,
        column: 30,
        span: 24430..24431,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 820,
        column: 32,
        span: 24432..24433,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 820,
        column: 33,
        span: 24432..24434,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 820,
        column: 34,
        span: 24434..24435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 820,
        column: 41,
        span: 24436..24442,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 820,
        column: 42,
        span: 24442..24443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 820,
        column: 43,
        span: 24443..24444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 821,
        column: 7,
        span: 24445..24451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 821,
        column: 8,
        span: 24451..24452,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 821,
        column: 11,
        span: 24452..24455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 821,
        column: 17,
        span: 24456..24461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 821,
        column: 18,
        span: 24461..24462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 821,
        column: 22,
        span: 24462..24466,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 821,
        column: 23,
        span: 24466..24467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 821,
        column: 29,
        span: 24467..24473,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 821,
        column: 30,
        span: 24473..24474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "minint",
        ),
        line: 821,
        column: 37,
        span: 24475..24481,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 821,
        column: 40,
        span: 24482..24484,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 821,
        column: 42,
        span: 24484..24486,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 821,
        column: 43,
        span: 24486..24487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 821,
        column: 50,
        span: 24488..24494,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 821,
        column: 53,
        span: 24495..24497,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 821,
        column: 55,
        span: 24497..24499,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 821,
        column: 57,
        span: 24500..24501,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 821,
        column: 59,
        span: 24501..24503,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 821,
        column: 60,
        span: 24503..24504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 821,
        column: 61,
        span: 24504..24505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 824,
        column: 6,
        span: 24508..24513,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 824,
        column: 7,
        span: 24513..24514,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 824,
        column: 11,
        span: 24514..24518,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 824,
        column: 12,
        span: 24518..24519,
    },
]
