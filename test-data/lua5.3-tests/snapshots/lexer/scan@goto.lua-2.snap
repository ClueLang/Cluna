---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/goto.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 4,
        column: 15,
        span: 99..113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
        column: 16,
        span: 113..114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
        column: 17,
        span: 114..115,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 6,
        span: 117..122,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 6,
        column: 15,
        span: 123..131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 6,
        column: 22,
        span: 132..138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 23,
        span: 138..139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        line: 6,
        column: 27,
        span: 139..143,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 6,
        column: 28,
        span: 143..144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 6,
        column: 30,
        span: 145..146,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 31,
        span: 146..147,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 7,
        column: 8,
        span: 150..155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 7,
        column: 11,
        span: 156..158,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 7,
        column: 12,
        span: 158..159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 7,
        column: 16,
        span: 160..163,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 7,
        column: 18,
        span: 164..165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 7,
        column: 23,
        span: 166..170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 7,
        column: 24,
        span: 170..171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        line: 7,
        column: 28,
        span: 171..175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 7,
        column: 29,
        span: 175..176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 8,
        column: 9,
        span: 179..185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 10,
        span: 185..186,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 8,
        column: 13,
        span: 186..189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 8,
        column: 16,
        span: 190..192,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 8,
        column: 20,
        span: 193..196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 8,
        column: 27,
        span: 197..203,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 8,
        column: 28,
        span: 203..204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 8,
        column: 32,
        span: 204..208,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 33,
        span: 208..209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 8,
        column: 36,
        span: 209..212,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 8,
        column: 37,
        span: 212..213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 8,
        column: 39,
        span: 214..215,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 40,
        span: 215..216,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 41,
        span: 216..217,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 9,
        column: 0,
        span: 218..221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 12,
        column: 7,
        span: 256..262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 8,
        span: 262..263,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ goto l1; do ::l1:: end ]]",
        ),
        line: 12,
        column: 36,
        span: 263..291,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 12,
        column: 37,
        span: 291..292,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"label 'l1'\"",
        ),
        line: 12,
        column: 50,
        span: 293..305,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 51,
        span: 305..306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 13,
        column: 7,
        span: 307..313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 8,
        span: 313..314,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ do ::l1:: end goto l1; ]]",
        ),
        line: 13,
        column: 36,
        span: 314..342,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 13,
        column: 37,
        span: 342..343,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"label 'l1'\"",
        ),
        line: 13,
        column: 50,
        span: 344..356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 51,
        span: 356..357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 16,
        column: 7,
        span: 377..383,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 8,
        span: 383..384,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ ::l1:: ::l1:: ]]",
        ),
        line: 16,
        column: 27,
        span: 384..403,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 16,
        column: 28,
        span: 403..404,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"label 'l1'\"",
        ),
        line: 16,
        column: 41,
        span: 405..417,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 42,
        span: 417..418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 20,
        column: 7,
        span: 440..446,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 8,
        span: 446..447,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ goto l1; local aa ::l1:: ::l2:: print(3) ]]",
        ),
        line: 20,
        column: 54,
        span: 447..493,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 55,
        span: 493..494,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'aa'\"",
        ),
        line: 20,
        column: 68,
        span: 495..507,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 69,
        span: 507..508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 23,
        column: 7,
        span: 546..552,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 8,
        span: 552..553,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\ndo local bb, cc;  end\nlocal aa\n print(3)\n]]",
        ),
        line: 27,
        column: 3,
        span: 553..599,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
        column: 4,
        span: 599..600,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'aa'\"",
        ),
        line: 27,
        column: 17,
        span: 601..613,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 18,
        span: 613..614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 30,
        column: 7,
        span: 640..646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 8,
        span: 646..647,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ do ::l1:: end goto l1 ]]",
        ),
        line: 30,
        column: 35,
        span: 647..674,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
        column: 36,
        span: 674..675,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"label 'l1'\"",
        ),
        line: 30,
        column: 49,
        span: 676..688,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 50,
        span: 688..689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 31,
        column: 7,
        span: 690..696,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 8,
        span: 696..697,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ goto l1 do ::l1:: end ]]",
        ),
        line: 31,
        column: 35,
        span: 697..724,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
        column: 36,
        span: 724..725,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"label 'l1'\"",
        ),
        line: 31,
        column: 49,
        span: 726..738,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 50,
        span: 738..739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 34,
        column: 7,
        span: 790..796,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 8,
        span: 796..797,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  repeat\n    if x then  end\n    local xuxu = 10\n\n  until xuxu < x\n]]",
        ),
        line: 40,
        column: 3,
        span: 797..868,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 4,
        span: 868..869,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'xuxu'\"",
        ),
        line: 40,
        column: 19,
        span: 870..884,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 20,
        span: 884..885,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 43,
        column: 6,
        span: 903..908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 43,
        column: 0,
        span: 909..910,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 44,
        column: 0,
        span: 911..913,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 45,
        column: 8,
        span: 916..921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 45,
        column: 10,
        span: 922..923,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 45,
        column: 12,
        span: 924..925,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
        column: 0,
        span: 925..928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 48,
        column: 4,
        span: 933..934,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 48,
        column: 6,
        span: 935..936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 48,
        column: 8,
        span: 937..938,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 48,
        column: 10,
        span: 939..940,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 48,
        column: 12,
        span: 940..942,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 48,
        column: 13,
        span: 942..943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 50,
        column: 4,
        span: 947..948,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 50,
        column: 6,
        span: 949..950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 50,
        column: 8,
        span: 951..952,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 50,
        column: 9,
        span: 952..953,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 51,
        column: 0,
        span: 954..957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 54,
        column: 7,
        span: 960..966,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 8,
        span: 966..967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 54,
        column: 9,
        span: 967..968,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 54,
        column: 12,
        span: 969..971,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 54,
        column: 15,
        span: 971..974,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 16,
        span: 974..975,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 58,
        column: 0,
        span: 993..995,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 59,
        column: 8,
        span: 998..1003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 59,
        column: 13,
        span: 1004..1008,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 59,
        column: 15,
        span: 1009..1010,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  do\n    local a = 1\n     a = a + 1\n    a = a + 10\n     a = a + 2\n    a = a + 20\n    return a\n  end\n  ]]",
        ),
        line: 68,
        column: 5,
        span: 1011..1118,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 69,
        column: 8,
        span: 1121..1126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "label",
        ),
        line: 69,
        column: 14,
        span: 1127..1132,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 69,
        column: 16,
        span: 1133..1134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 69,
        column: 23,
        span: 1135..1141,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 69,
        column: 24,
        span: 1141..1142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 69,
        column: 27,
        span: 1142..1145,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 28,
        span: 1145..1146,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0123456789\"",
        ),
        line: 69,
        column: 40,
        span: 1146..1158,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 41,
        span: 1158..1159,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 44,
        span: 1159..1162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 45,
        span: 1162..1163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 70,
        column: 7,
        span: 1166..1170,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 70,
        column: 9,
        span: 1171..1172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 70,
        column: 16,
        span: 1173..1179,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 70,
        column: 17,
        span: 1179..1180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 70,
        column: 23,
        span: 1180..1186,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 24,
        span: 1186..1187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 70,
        column: 28,
        span: 1187..1191,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
        column: 29,
        span: 1191..1192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "label",
        ),
        line: 70,
        column: 35,
        span: 1193..1198,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
        column: 36,
        span: 1198..1199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "label",
        ),
        line: 70,
        column: 42,
        span: 1200..1205,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
        column: 43,
        span: 1205..1206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "label",
        ),
        line: 70,
        column: 49,
        span: 1207..1212,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
        column: 50,
        span: 1212..1213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "label",
        ),
        line: 70,
        column: 56,
        span: 1214..1219,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 57,
        span: 1219..1220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 71,
        column: 9,
        span: 1223..1229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 10,
        span: 1229..1230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 71,
        column: 16,
        span: 1230..1236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 17,
        span: 1236..1237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 71,
        column: 21,
        span: 1237..1241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 22,
        span: 1241..1242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 71,
        column: 26,
        span: 1242..1246,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 27,
        span: 1246..1247,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 28,
        span: 1247..1248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 29,
        span: 1248..1249,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 30,
        span: 1249..1250,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 33,
        span: 1251..1253,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 36,
        span: 1253..1256,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 37,
        span: 1256..1257,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 72,
        column: 0,
        span: 1258..1261,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 75,
        column: 3,
        span: 1293..1295,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 75,
        column: 7,
        span: 1296..1299,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 78,
        column: 0,
        span: 1396..1398,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 79,
        column: 8,
        span: 1401..1406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 79,
        column: 10,
        span: 1407..1408,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
        column: 12,
        span: 1409..1410,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 79,
        column: 0,
        span: 1410..1413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 80,
        column: 4,
        span: 1416..1417,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 80,
        column: 6,
        span: 1418..1419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 80,
        column: 0,
        span: 1420..1421,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 82,
        column: 4,
        span: 1425..1426,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 83,
        column: 0,
        span: 1427..1430,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 85,
        column: 6,
        span: 1432..1437,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 85,
        column: 11,
        span: 1438..1442,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 85,
        column: 0,
        span: 1443..1445,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 88,
        column: 8,
        span: 1529..1534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 88,
        column: 10,
        span: 1535..1536,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 88,
        column: 12,
        span: 1537..1538,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 88,
        column: 0,
        span: 1538..1541,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 90,
        column: 4,
        span: 1545..1546,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 90,
        column: 5,
        span: 1546..1547,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 90,
        column: 6,
        span: 1547..1548,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 91,
        column: 0,
        span: 1549..1552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 93,
        column: 7,
        span: 1554..1560,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 8,
        span: 1560..1561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 93,
        column: 9,
        span: 1561..1562,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 93,
        column: 12,
        span: 1563..1565,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 93,
        column: 15,
        span: 1565..1568,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 16,
        span: 1568..1569,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 95,
        column: 3,
        span: 1571..1573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 95,
        column: 9,
        span: 1574..1579,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 95,
        column: 0,
        span: 1580..1584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 97,
        column: 8,
        span: 1635..1640,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 9,
        span: 1640..1641,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"should not be here\"",
        ),
        line: 97,
        column: 29,
        span: 1641..1661,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 30,
        span: 1661..1662,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 99,
        column: 8,
        span: 1713..1718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 99,
        column: 0,
        span: 1719..1720,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 101,
        column: 4,
        span: 1724..1725,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 102,
        column: 4,
        span: 1728..1729,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 102,
        column: 5,
        span: 1729..1730,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 103,
        column: 0,
        span: 1731..1735,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 104,
        column: 0,
        span: 1736..1739,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 107,
        column: 6,
        span: 1792..1797,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 107,
        column: 15,
        span: 1798..1806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 107,
        column: 19,
        span: 1807..1810,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 20,
        span: 1810..1811,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 21,
        span: 1811..1812,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 108,
        column: 8,
        span: 1815..1820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 108,
        column: 10,
        span: 1821..1822,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 108,
        column: 12,
        span: 1823..1824,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 108,
        column: 14,
        span: 1825..1826,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 108,
        column: 15,
        span: 1826..1827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 111,
        column: 4,
        span: 1832..1833,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 111,
        column: 5,
        span: 1833..1834,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 111,
        column: 6,
        span: 1834..1835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 111,
        column: 7,
        span: 1835..1836,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 111,
        column: 9,
        span: 1837..1838,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 11,
        span: 1838..1840,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 111,
        column: 12,
        span: 1840..1841,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 111,
        column: 14,
        span: 1842..1843,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 16,
        span: 1843..1845,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 111,
        column: 17,
        span: 1845..1846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 113,
        column: 4,
        span: 1850..1851,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 113,
        column: 5,
        span: 1851..1852,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 113,
        column: 6,
        span: 1852..1853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 113,
        column: 7,
        span: 1853..1854,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 113,
        column: 9,
        span: 1855..1856,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 113,
        column: 11,
        span: 1856..1858,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 113,
        column: 12,
        span: 1858..1859,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 113,
        column: 14,
        span: 1860..1861,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 113,
        column: 16,
        span: 1861..1863,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 113,
        column: 17,
        span: 1863..1864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 116,
        column: 4,
        span: 1869..1870,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 116,
        column: 5,
        span: 1870..1871,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 116,
        column: 6,
        span: 1871..1872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 116,
        column: 7,
        span: 1872..1873,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 116,
        column: 9,
        span: 1874..1875,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 116,
        column: 11,
        span: 1875..1877,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 116,
        column: 12,
        span: 1877..1878,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 116,
        column: 14,
        span: 1879..1880,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 116,
        column: 16,
        span: 1880..1882,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 116,
        column: 17,
        span: 1882..1883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 118,
        column: 4,
        span: 1887..1888,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 118,
        column: 5,
        span: 1888..1889,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 118,
        column: 6,
        span: 1889..1890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 118,
        column: 7,
        span: 1890..1891,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 118,
        column: 9,
        span: 1892..1893,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 11,
        span: 1893..1895,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 118,
        column: 12,
        span: 1895..1896,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 118,
        column: 14,
        span: 1897..1898,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 16,
        span: 1898..1900,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 118,
        column: 17,
        span: 1900..1901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 120,
        column: 4,
        span: 1905..1906,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 120,
        column: 5,
        span: 1906..1907,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 120,
        column: 6,
        span: 1907..1908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 120,
        column: 7,
        span: 1908..1909,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 120,
        column: 9,
        span: 1910..1911,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 11,
        span: 1911..1913,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 120,
        column: 12,
        span: 1913..1914,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 120,
        column: 14,
        span: 1915..1916,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 16,
        span: 1916..1918,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 120,
        column: 17,
        span: 1918..1919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 122,
        column: 9,
        span: 1923..1929,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 10,
        span: 1929..1930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 122,
        column: 11,
        span: 1930..1931,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 122,
        column: 12,
        span: 1931..1932,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 13,
        span: 1931..1933,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 122,
        column: 14,
        span: 1933..1934,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 122,
        column: 17,
        span: 1935..1937,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 19,
        span: 1937..1939,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 122,
        column: 23,
        span: 1940..1943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 122,
        column: 25,
        span: 1944..1945,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 122,
        column: 26,
        span: 1945..1946,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 27,
        span: 1945..1947,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 122,
        column: 28,
        span: 1947..1948,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 122,
        column: 31,
        span: 1949..1951,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 33,
        span: 1951..1953,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 122,
        column: 37,
        span: 1954..1957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 122,
        column: 39,
        span: 1958..1959,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 122,
        column: 40,
        span: 1959..1960,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 41,
        span: 1959..1961,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 122,
        column: 42,
        span: 1961..1962,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 122,
        column: 45,
        span: 1963..1965,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 47,
        span: 1965..1967,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 122,
        column: 0,
        span: 1968..1971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 123,
        column: 6,
        span: 1976..1977,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 123,
        column: 7,
        span: 1977..1978,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 123,
        column: 8,
        span: 1977..1979,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 123,
        column: 9,
        span: 1979..1980,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 123,
        column: 12,
        span: 1981..1983,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 123,
        column: 14,
        span: 1983..1985,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 123,
        column: 18,
        span: 1986..1989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 123,
        column: 20,
        span: 1990..1991,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 123,
        column: 21,
        span: 1991..1992,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 123,
        column: 22,
        span: 1991..1993,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 123,
        column: 23,
        span: 1993..1994,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 123,
        column: 26,
        span: 1995..1997,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 123,
        column: 28,
        span: 1997..1999,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 29,
        span: 1999..2000,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 124,
        column: 5,
        span: 2003..2005,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 124,
        column: 9,
        span: 2006..2009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 124,
        column: 11,
        span: 2010..2011,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 124,
        column: 12,
        span: 2011..2012,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 13,
        span: 2011..2013,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 124,
        column: 14,
        span: 2013..2014,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 124,
        column: 19,
        span: 2015..2019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 124,
        column: 21,
        span: 2020..2021,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 124,
        column: 22,
        span: 2021..2022,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 23,
        span: 2021..2023,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 124,
        column: 24,
        span: 2023..2024,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 124,
        column: 26,
        span: 2025..2026,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 124,
        column: 31,
        span: 2027..2031,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 124,
        column: 32,
        span: 2031..2032,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 124,
        column: 36,
        span: 2033..2036,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 125,
        column: 0,
        span: 2052..2055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 128,
        column: 4,
        span: 2058..2061,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 5,
        span: 2061..2062,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 6,
        span: 2062..2063,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 131,
        column: 3,
        span: 2066..2068,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 132,
        column: 8,
        span: 2094..2099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 132,
        column: 0,
        span: 2100..2101,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 134,
        column: 8,
        span: 2105..2110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 134,
        column: 10,
        span: 2111..2112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 135,
        column: 9,
        span: 2160..2166,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 10,
        span: 2166..2167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 135,
        column: 11,
        span: 2167..2168,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 135,
        column: 14,
        span: 2169..2171,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 135,
        column: 18,
        span: 2172..2175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 19,
        span: 2175..2176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 136,
        column: 4,
        span: 2179..2180,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 136,
        column: 6,
        span: 2181..2182,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 136,
        column: 0,
        span: 2183..2187,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 137,
        column: 5,
        span: 2190..2192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 137,
        column: 7,
        span: 2193..2194,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 137,
        column: 10,
        span: 2195..2197,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 137,
        column: 14,
        span: 2198..2201,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 137,
        column: 0,
        span: 2202..2206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 138,
        column: 6,
        span: 2211..2212,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 138,
        column: 8,
        span: 2213..2214,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 0,
        span: 2214..2216,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 139,
        column: 0,
        span: 2219..2223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 140,
        column: 6,
        span: 2228..2229,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 140,
        column: 8,
        span: 2230..2231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 140,
        column: 10,
        span: 2232..2233,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 140,
        column: 12,
        span: 2234..2235,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 0,
        span: 2235..2237,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 141,
        column: 0,
        span: 2240..2243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 142,
        column: 9,
        span: 2246..2252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 10,
        span: 2252..2253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 142,
        column: 11,
        span: 2253..2254,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 142,
        column: 14,
        span: 2255..2257,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
        column: 16,
        span: 2257..2259,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 142,
        column: 20,
        span: 2260..2263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 142,
        column: 22,
        span: 2264..2265,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 142,
        column: 25,
        span: 2266..2268,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 142,
        column: 30,
        span: 2269..2273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 31,
        span: 2273..2274,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 143,
        column: 0,
        span: 2275..2278,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 148,
        column: 6,
        span: 2393..2398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 148,
        column: 12,
        span: 2399..2404,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 148,
        column: 14,
        span: 2405..2406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 148,
        column: 22,
        span: 2407..2414,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'debug'",
        ),
        line: 148,
        column: 30,
        span: 2415..2422,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 150,
        column: 6,
        span: 2424..2429,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 150,
        column: 15,
        span: 2430..2438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 150,
        column: 19,
        span: 2439..2442,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 20,
        span: 2442..2443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 21,
        span: 2443..2444,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 151,
        column: 8,
        span: 2447..2452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 151,
        column: 10,
        span: 2453..2454,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 151,
        column: 12,
        span: 2455..2456,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 151,
        column: 14,
        span: 2457..2458,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 151,
        column: 15,
        span: 2458..2459,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 152,
        column: 0,
        span: 2462..2464,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 153,
        column: 10,
        span: 2469..2474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 153,
        column: 12,
        span: 2475..2476,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 153,
        column: 14,
        span: 2477..2478,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 0,
        span: 2478..2480,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 154,
        column: 10,
        span: 2485..2490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 154,
        column: 12,
        span: 2491..2492,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 13,
        span: 2492..2493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 154,
        column: 15,
        span: 2494..2495,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 16,
        span: 2495..2496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 154,
        column: 18,
        span: 2497..2498,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 19,
        span: 2498..2499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 154,
        column: 0,
        span: 2500..2501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 155,
        column: 6,
        span: 2506..2507,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 155,
        column: 7,
        span: 2507..2508,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 8,
        span: 2507..2509,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 155,
        column: 9,
        span: 2509..2510,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 155,
        column: 11,
        span: 2511..2512,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 155,
        column: 20,
        span: 2513..2521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 21,
        span: 2521..2522,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 22,
        span: 2522..2523,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 155,
        column: 29,
        span: 2524..2530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 155,
        column: 31,
        span: 2531..2532,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 32,
        span: 2532..2533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 155,
        column: 34,
        span: 2534..2535,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 35,
        span: 2535..2536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 155,
        column: 37,
        span: 2537..2538,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 38,
        span: 2538..2539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 155,
        column: 40,
        span: 2540..2541,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 155,
        column: 0,
        span: 2542..2545,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 157,
        column: 10,
        span: 2551..2556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 157,
        column: 0,
        span: 2557..2558,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 158,
        column: 0,
        span: 2563..2565,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 159,
        column: 12,
        span: 2572..2577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 159,
        column: 0,
        span: 2578..2579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 160,
        column: 8,
        span: 2586..2587,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 160,
        column: 9,
        span: 2587..2588,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 160,
        column: 10,
        span: 2588..2589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 160,
        column: 11,
        span: 2589..2590,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 160,
        column: 13,
        span: 2591..2592,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 160,
        column: 15,
        span: 2592..2594,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 160,
        column: 16,
        span: 2594..2595,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 160,
        column: 18,
        span: 2596..2597,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 160,
        column: 27,
        span: 2598..2606,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 28,
        span: 2606..2607,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 29,
        span: 2607..2608,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 160,
        column: 36,
        span: 2609..2615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 160,
        column: 38,
        span: 2616..2617,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 160,
        column: 39,
        span: 2617..2618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 160,
        column: 41,
        span: 2619..2620,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 160,
        column: 42,
        span: 2620..2621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 160,
        column: 44,
        span: 2622..2623,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 160,
        column: 45,
        span: 2623..2624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 160,
        column: 47,
        span: 2625..2626,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 160,
        column: 51,
        span: 2627..2630,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 161,
        column: 9,
        span: 2657..2659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 161,
        column: 11,
        span: 2660..2661,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 161,
        column: 13,
        span: 2662..2663,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
        column: 15,
        span: 2663..2665,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 161,
        column: 20,
        span: 2666..2670,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 161,
        column: 0,
        span: 2671..2674,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 162,
        column: 0,
        span: 2681..2683,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 163,
        column: 14,
        span: 2692..2697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 163,
        column: 0,
        span: 2698..2699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 164,
        column: 10,
        span: 2708..2709,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 164,
        column: 11,
        span: 2709..2710,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 164,
        column: 12,
        span: 2710..2711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 164,
        column: 13,
        span: 2711..2712,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 164,
        column: 15,
        span: 2713..2714,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 17,
        span: 2714..2716,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 164,
        column: 18,
        span: 2716..2717,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 164,
        column: 20,
        span: 2718..2719,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 164,
        column: 29,
        span: 2720..2728,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 30,
        span: 2728..2729,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 31,
        span: 2729..2730,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 164,
        column: 38,
        span: 2731..2737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 164,
        column: 40,
        span: 2738..2739,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 164,
        column: 41,
        span: 2739..2740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 164,
        column: 43,
        span: 2741..2742,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 164,
        column: 44,
        span: 2742..2743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 164,
        column: 46,
        span: 2744..2745,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 164,
        column: 47,
        span: 2745..2746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 164,
        column: 49,
        span: 2747..2748,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 164,
        column: 53,
        span: 2749..2752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 165,
        column: 10,
        span: 2775..2776,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 165,
        column: 12,
        span: 2777..2778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 165,
        column: 14,
        span: 2779..2780,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 165,
        column: 16,
        span: 2781..2782,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 0,
        span: 2782..2784,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 166,
        column: 14,
        span: 2793..2798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 166,
        column: 0,
        span: 2799..2800,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 167,
        column: 0,
        span: 2807..2810,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 168,
        column: 0,
        span: 2815..2818,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 169,
        column: 0,
        span: 2821..2824,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 171,
        column: 9,
        span: 2828..2834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 171,
        column: 0,
        span: 2835..2836,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 172,
        column: 0,
        span: 2837..2840,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 174,
        column: 6,
        span: 2842..2847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 174,
        column: 8,
        span: 2848..2849,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 174,
        column: 10,
        span: 2850..2851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 174,
        column: 14,
        span: 2852..2855,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 15,
        span: 2855..2856,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 16,
        span: 2856..2857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 175,
        column: 7,
        span: 2858..2864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 8,
        span: 2864..2865,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 175,
        column: 9,
        span: 2865..2866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 175,
        column: 10,
        span: 2866..2867,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 175,
        column: 13,
        span: 2868..2870,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 15,
        span: 2870..2872,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 16,
        span: 2872..2873,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 178,
        column: 4,
        span: 2907..2910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 178,
        column: 6,
        span: 2911..2912,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 178,
        column: 8,
        span: 2913..2914,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
        column: 10,
        span: 2914..2916,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 178,
        column: 11,
        span: 2916..2917,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
        column: 13,
        span: 2917..2919,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 178,
        column: 0,
        span: 2920..2922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 179,
        column: 9,
        span: 2925..2931,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
        column: 10,
        span: 2931..2932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 179,
        column: 15,
        span: 2932..2937,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 179,
        column: 16,
        span: 2937..2938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 179,
        column: 25,
        span: 2938..2947,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
        column: 26,
        span: 2947..2948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 179,
        column: 27,
        span: 2948..2949,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 179,
        column: 28,
        span: 2949..2950,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
        column: 29,
        span: 2949..2951,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 179,
        column: 30,
        span: 2951..2952,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 31,
        span: 2952..2953,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
        column: 33,
        span: 2953..2955,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
        column: 34,
        span: 2955..2956,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 179,
        column: 37,
        span: 2957..2959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 179,
        column: 43,
        span: 2960..2965,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 179,
        column: 44,
        span: 2965..2966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 179,
        column: 53,
        span: 2966..2975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
        column: 54,
        span: 2975..2976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 179,
        column: 55,
        span: 2976..2977,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 179,
        column: 56,
        span: 2977..2978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 179,
        column: 57,
        span: 2978..2979,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 179,
        column: 58,
        span: 2979..2980,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 59,
        span: 2980..2981,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
        column: 61,
        span: 2981..2983,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
        column: 62,
        span: 2983..2984,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
        column: 63,
        span: 2984..2985,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 180,
        column: 0,
        span: 2986..2989,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 183,
        column: 4,
        span: 3036..3039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 183,
        column: 6,
        span: 3040..3041,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 183,
        column: 8,
        span: 3042..3043,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 10,
        span: 3043..3045,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 183,
        column: 11,
        span: 3045..3046,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 13,
        span: 3046..3048,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 183,
        column: 0,
        span: 3049..3051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 185,
        column: 9,
        span: 3091..3097,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 10,
        span: 3097..3098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 185,
        column: 15,
        span: 3098..3103,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 185,
        column: 16,
        span: 3103..3104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 185,
        column: 25,
        span: 3104..3113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 26,
        span: 3113..3114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 185,
        column: 27,
        span: 3114..3115,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 185,
        column: 28,
        span: 3115..3116,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 29,
        span: 3115..3117,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 185,
        column: 30,
        span: 3117..3118,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 31,
        span: 3118..3119,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 33,
        span: 3119..3121,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 34,
        span: 3121..3122,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 185,
        column: 37,
        span: 3123..3125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 185,
        column: 43,
        span: 3126..3131,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 185,
        column: 44,
        span: 3131..3132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 185,
        column: 53,
        span: 3132..3141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 54,
        span: 3141..3142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 185,
        column: 55,
        span: 3142..3143,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 185,
        column: 56,
        span: 3143..3144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 185,
        column: 57,
        span: 3144..3145,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 185,
        column: 58,
        span: 3145..3146,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 59,
        span: 3146..3147,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 61,
        span: 3147..3149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 62,
        span: 3149..3150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 63,
        span: 3150..3151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 186,
        column: 9,
        span: 3154..3160,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 10,
        span: 3160..3161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 186,
        column: 15,
        span: 3161..3166,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 16,
        span: 3166..3167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 186,
        column: 25,
        span: 3167..3176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 26,
        span: 3176..3177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 186,
        column: 27,
        span: 3177..3178,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 186,
        column: 28,
        span: 3178..3179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 29,
        span: 3178..3180,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 186,
        column: 30,
        span: 3180..3181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 31,
        span: 3181..3182,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 33,
        span: 3182..3184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 34,
        span: 3184..3185,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 186,
        column: 37,
        span: 3186..3188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 186,
        column: 43,
        span: 3189..3194,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 44,
        span: 3194..3195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 186,
        column: 53,
        span: 3195..3204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 54,
        span: 3204..3205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 186,
        column: 55,
        span: 3205..3206,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 186,
        column: 56,
        span: 3206..3207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 186,
        column: 57,
        span: 3207..3208,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 186,
        column: 58,
        span: 3208..3209,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 59,
        span: 3209..3210,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 61,
        span: 3210..3212,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 62,
        span: 3212..3213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 63,
        span: 3213..3214,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 187,
        column: 0,
        span: 3215..3218,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 189,
        column: 4,
        span: 3220..3223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 189,
        column: 6,
        span: 3224..3225,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 189,
        column: 8,
        span: 3226..3227,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
        column: 10,
        span: 3227..3229,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 189,
        column: 11,
        span: 3229..3230,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
        column: 13,
        span: 3230..3232,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 189,
        column: 14,
        span: 3232..3233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
        column: 16,
        span: 3233..3235,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 189,
        column: 0,
        span: 3236..3238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 191,
        column: 9,
        span: 3295..3301,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 10,
        span: 3301..3302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 191,
        column: 15,
        span: 3302..3307,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 191,
        column: 16,
        span: 3307..3308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 191,
        column: 25,
        span: 3308..3317,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 26,
        span: 3317..3318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 191,
        column: 27,
        span: 3318..3319,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 191,
        column: 28,
        span: 3319..3320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 191,
        column: 29,
        span: 3320..3321,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 191,
        column: 30,
        span: 3321..3322,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
        column: 31,
        span: 3322..3323,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 33,
        span: 3323..3325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 34,
        span: 3325..3326,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 191,
        column: 37,
        span: 3327..3329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 191,
        column: 43,
        span: 3330..3335,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 191,
        column: 44,
        span: 3335..3336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 191,
        column: 53,
        span: 3336..3345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 54,
        span: 3345..3346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 191,
        column: 55,
        span: 3346..3347,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 191,
        column: 56,
        span: 3347..3348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 191,
        column: 57,
        span: 3348..3349,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 191,
        column: 59,
        span: 3350..3351,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 61,
        span: 3351..3353,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 191,
        column: 62,
        span: 3353..3354,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
        column: 63,
        span: 3354..3355,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 65,
        span: 3355..3357,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 66,
        span: 3357..3358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 67,
        span: 3358..3359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 192,
        column: 9,
        span: 3362..3368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 10,
        span: 3368..3369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 192,
        column: 15,
        span: 3369..3374,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 192,
        column: 16,
        span: 3374..3375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 192,
        column: 25,
        span: 3375..3384,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 26,
        span: 3384..3385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 192,
        column: 27,
        span: 3385..3386,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 192,
        column: 28,
        span: 3386..3387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 192,
        column: 29,
        span: 3387..3388,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 192,
        column: 30,
        span: 3388..3389,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 31,
        span: 3389..3390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 192,
        column: 33,
        span: 3390..3392,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 34,
        span: 3392..3393,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 192,
        column: 37,
        span: 3394..3396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 192,
        column: 43,
        span: 3397..3402,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 192,
        column: 44,
        span: 3402..3403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 192,
        column: 53,
        span: 3403..3412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 54,
        span: 3412..3413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 192,
        column: 55,
        span: 3413..3414,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 192,
        column: 56,
        span: 3414..3415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 192,
        column: 57,
        span: 3415..3416,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 192,
        column: 59,
        span: 3417..3418,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 192,
        column: 61,
        span: 3418..3420,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 192,
        column: 62,
        span: 3420..3421,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 63,
        span: 3421..3422,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 192,
        column: 65,
        span: 3422..3424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 66,
        span: 3424..3425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 67,
        span: 3425..3426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 194,
        column: 9,
        span: 3457..3463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 10,
        span: 3463..3464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 194,
        column: 15,
        span: 3464..3469,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 194,
        column: 16,
        span: 3469..3470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 194,
        column: 25,
        span: 3470..3479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 26,
        span: 3479..3480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 194,
        column: 27,
        span: 3480..3481,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 194,
        column: 28,
        span: 3481..3482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 194,
        column: 29,
        span: 3482..3483,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 194,
        column: 30,
        span: 3483..3484,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 194,
        column: 31,
        span: 3484..3485,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 194,
        column: 33,
        span: 3485..3487,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 34,
        span: 3487..3488,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 194,
        column: 37,
        span: 3489..3491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 194,
        column: 43,
        span: 3492..3497,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 194,
        column: 44,
        span: 3497..3498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 194,
        column: 53,
        span: 3498..3507,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 54,
        span: 3507..3508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 194,
        column: 55,
        span: 3508..3509,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 194,
        column: 56,
        span: 3509..3510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 194,
        column: 57,
        span: 3510..3511,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 194,
        column: 59,
        span: 3512..3513,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 194,
        column: 61,
        span: 3513..3515,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 194,
        column: 62,
        span: 3515..3516,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 194,
        column: 63,
        span: 3516..3517,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 194,
        column: 65,
        span: 3517..3519,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 66,
        span: 3519..3520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 67,
        span: 3520..3521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 195,
        column: 9,
        span: 3524..3530,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 10,
        span: 3530..3531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 195,
        column: 15,
        span: 3531..3536,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 195,
        column: 16,
        span: 3536..3537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 195,
        column: 25,
        span: 3537..3546,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 26,
        span: 3546..3547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 195,
        column: 27,
        span: 3547..3548,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 195,
        column: 28,
        span: 3548..3549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 195,
        column: 29,
        span: 3549..3550,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 195,
        column: 30,
        span: 3550..3551,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 31,
        span: 3551..3552,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
        column: 33,
        span: 3552..3554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 34,
        span: 3554..3555,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 195,
        column: 37,
        span: 3556..3558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 195,
        column: 43,
        span: 3559..3564,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 195,
        column: 44,
        span: 3564..3565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 195,
        column: 53,
        span: 3565..3574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 54,
        span: 3574..3575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 195,
        column: 55,
        span: 3575..3576,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 195,
        column: 56,
        span: 3576..3577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 195,
        column: 57,
        span: 3577..3578,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 195,
        column: 59,
        span: 3579..3580,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
        column: 61,
        span: 3580..3582,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 195,
        column: 62,
        span: 3582..3583,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 63,
        span: 3583..3584,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
        column: 65,
        span: 3584..3586,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 66,
        span: 3586..3587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 67,
        span: 3587..3588,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 196,
        column: 0,
        span: 3589..3592,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 199,
        column: 4,
        span: 3625..3628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 199,
        column: 6,
        span: 3629..3630,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 199,
        column: 8,
        span: 3631..3632,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 199,
        column: 10,
        span: 3632..3634,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
        column: 11,
        span: 3634..3635,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 199,
        column: 13,
        span: 3635..3637,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
        column: 14,
        span: 3637..3638,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 199,
        column: 16,
        span: 3638..3640,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 199,
        column: 0,
        span: 3641..3643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 200,
        column: 9,
        span: 3646..3652,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 10,
        span: 3652..3653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 200,
        column: 15,
        span: 3653..3658,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 200,
        column: 16,
        span: 3658..3659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 200,
        column: 25,
        span: 3659..3668,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 26,
        span: 3668..3669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 200,
        column: 27,
        span: 3669..3670,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 200,
        column: 28,
        span: 3670..3671,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 200,
        column: 29,
        span: 3670..3672,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 200,
        column: 30,
        span: 3672..3673,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 200,
        column: 31,
        span: 3673..3674,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 200,
        column: 33,
        span: 3674..3676,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 34,
        span: 3676..3677,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 200,
        column: 37,
        span: 3678..3680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 200,
        column: 43,
        span: 3681..3686,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 200,
        column: 44,
        span: 3686..3687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 200,
        column: 53,
        span: 3687..3696,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 54,
        span: 3696..3697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 200,
        column: 55,
        span: 3697..3698,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 200,
        column: 56,
        span: 3698..3699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 200,
        column: 57,
        span: 3699..3700,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 200,
        column: 58,
        span: 3700..3701,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 200,
        column: 59,
        span: 3701..3702,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 200,
        column: 61,
        span: 3702..3704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 62,
        span: 3704..3705,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 63,
        span: 3705..3706,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 201,
        column: 0,
        span: 3707..3710,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 204,
        column: 4,
        span: 3747..3750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 204,
        column: 6,
        span: 3751..3752,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 204,
        column: 8,
        span: 3753..3754,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 10,
        span: 3754..3756,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 11,
        span: 3756..3757,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 13,
        span: 3757..3759,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 14,
        span: 3759..3760,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 16,
        span: 3760..3762,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 204,
        column: 0,
        span: 3763..3765,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 205,
        column: 6,
        span: 3768..3771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 205,
        column: 8,
        span: 3772..3773,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 205,
        column: 10,
        span: 3774..3775,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
        column: 12,
        span: 3775..3777,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
        column: 13,
        span: 3777..3778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
        column: 15,
        span: 3778..3780,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 205,
        column: 0,
        span: 3781..3783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 206,
        column: 11,
        span: 3788..3794,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 12,
        span: 3794..3795,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 13,
        span: 3795..3796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 206,
        column: 18,
        span: 3796..3801,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 206,
        column: 19,
        span: 3801..3802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 206,
        column: 28,
        span: 3802..3811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 29,
        span: 3811..3812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 206,
        column: 30,
        span: 3812..3813,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 206,
        column: 31,
        span: 3813..3814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 206,
        column: 32,
        span: 3814..3815,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 206,
        column: 33,
        span: 3815..3816,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 206,
        column: 34,
        span: 3816..3817,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 206,
        column: 36,
        span: 3817..3819,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 37,
        span: 3819..3820,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 206,
        column: 40,
        span: 3821..3823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 206,
        column: 46,
        span: 3824..3829,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 206,
        column: 47,
        span: 3829..3830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 206,
        column: 56,
        span: 3830..3839,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 57,
        span: 3839..3840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 206,
        column: 58,
        span: 3840..3841,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 206,
        column: 59,
        span: 3841..3842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 206,
        column: 60,
        span: 3842..3843,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 206,
        column: 61,
        span: 3843..3844,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 206,
        column: 62,
        span: 3844..3845,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 206,
        column: 64,
        span: 3845..3847,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 65,
        span: 3847..3848,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 66,
        span: 3848..3849,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 207,
        column: 9,
        span: 3856..3858,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 11,
        span: 3859..3860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 207,
        column: 12,
        span: 3860..3861,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 207,
        column: 15,
        span: 3862..3864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 207,
        column: 17,
        span: 3865..3866,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 18,
        span: 3866..3867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 19,
        span: 3867..3868,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 208,
        column: 0,
        span: 3871..3874,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 209,
        column: 0,
        span: 3875..3878,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 214,
        column: 6,
        span: 3997..4002,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 214,
        column: 15,
        span: 4003..4011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testG",
        ),
        line: 214,
        column: 21,
        span: 4012..4017,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 22,
        span: 4017..4018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 214,
        column: 23,
        span: 4018..4019,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 24,
        span: 4019..4020,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 215,
        column: 5,
        span: 4023..4025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 215,
        column: 7,
        span: 4026..4027,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 215,
        column: 10,
        span: 4028..4030,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
        column: 12,
        span: 4030..4032,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 215,
        column: 0,
        span: 4033..4037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 216,
        column: 10,
        span: 4042..4047,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 11,
        span: 4047..4048,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"should never be here!\"",
        ),
        line: 216,
        column: 34,
        span: 4048..4071,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 35,
        span: 4071..4072,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 217,
        column: 9,
        span: 4075..4081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 217,
        column: 11,
        span: 4082..4083,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 217,
        column: 14,
        span: 4084..4086,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
        column: 16,
        span: 4086..4088,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 217,
        column: 0,
        span: 4089..4093,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 218,
        column: 9,
        span: 4096..4102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 218,
        column: 11,
        span: 4103..4104,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 218,
        column: 14,
        span: 4105..4107,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 218,
        column: 16,
        span: 4107..4109,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 218,
        column: 0,
        span: 4110..4114,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 219,
        column: 9,
        span: 4117..4123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 219,
        column: 11,
        span: 4124..4125,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 219,
        column: 14,
        span: 4126..4128,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 219,
        column: 16,
        span: 4128..4130,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 219,
        column: 0,
        span: 4131..4135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 221,
        column: 10,
        span: 4170..4175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 11,
        span: 4175..4176,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"should never be here!\"",
        ),
        line: 221,
        column: 34,
        span: 4176..4199,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 35,
        span: 4199..4200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 223,
        column: 6,
        span: 4206..4207,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 223,
        column: 8,
        span: 4208..4209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 223,
        column: 10,
        span: 4210..4211,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 223,
        column: 12,
        span: 4212..4213,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 14,
        span: 4213..4215,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 224,
        column: 0,
        span: 4241..4245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 225,
        column: 6,
        span: 4250..4251,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 225,
        column: 8,
        span: 4252..4253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 225,
        column: 10,
        span: 4254..4255,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 225,
        column: 12,
        span: 4256..4257,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 225,
        column: 14,
        span: 4257..4259,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 225,
        column: 15,
        span: 4259..4260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 226,
        column: 10,
        span: 4265..4270,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 11,
        span: 4270..4271,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"should never be here!\"",
        ),
        line: 226,
        column: 34,
        span: 4271..4294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 35,
        span: 4294..4295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 228,
        column: 10,
        span: 4301..4306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 11,
        span: 4306..4307,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"should never be here!\"",
        ),
        line: 228,
        column: 34,
        span: 4307..4330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 35,
        span: 4330..4331,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 229,
        column: 0,
        span: 4334..4337,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 230,
        column: 5,
        span: 4340..4342,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 230,
        column: 12,
        span: 4343..4349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 230,
        column: 14,
        span: 4350..4351,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 230,
        column: 0,
        span: 4352..4355,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 232,
        column: 5,
        span: 4359..4361,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 232,
        column: 12,
        span: 4362..4368,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 232,
        column: 16,
        span: 4369..4372,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 232,
        column: 0,
        span: 4373..4376,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 234,
        column: 5,
        span: 4380..4382,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 234,
        column: 12,
        span: 4383..4389,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\"",
        ),
        line: 234,
        column: 16,
        span: 4390..4393,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 234,
        column: 0,
        span: 4394..4397,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 236,
        column: 9,
        span: 4401..4407,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 236,
        column: 13,
        span: 4408..4411,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 237,
        column: 0,
        span: 4412..4415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 239,
        column: 7,
        span: 4417..4423,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 8,
        span: 4423..4424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testG",
        ),
        line: 239,
        column: 13,
        span: 4424..4429,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 14,
        span: 4429..4430,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
        column: 15,
        span: 4429..4431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 16,
        span: 4431..4432,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 239,
        column: 19,
        span: 4433..4435,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 239,
        column: 23,
        span: 4436..4439,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 24,
        span: 4439..4440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 240,
        column: 7,
        span: 4441..4447,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 8,
        span: 4447..4448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testG",
        ),
        line: 240,
        column: 13,
        span: 4448..4453,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 14,
        span: 4453..4454,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 240,
        column: 15,
        span: 4453..4455,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 16,
        span: 4455..4456,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 240,
        column: 19,
        span: 4457..4459,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 240,
        column: 23,
        span: 4460..4463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 24,
        span: 4463..4464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 241,
        column: 7,
        span: 4465..4471,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 8,
        span: 4471..4472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testG",
        ),
        line: 241,
        column: 13,
        span: 4472..4477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 14,
        span: 4477..4478,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 241,
        column: 15,
        span: 4477..4479,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 16,
        span: 4479..4480,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 241,
        column: 19,
        span: 4481..4483,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\"",
        ),
        line: 241,
        column: 23,
        span: 4484..4487,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 24,
        span: 4487..4488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 242,
        column: 7,
        span: 4489..4495,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 8,
        span: 4495..4496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testG",
        ),
        line: 242,
        column: 13,
        span: 4496..4501,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 14,
        span: 4501..4502,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 242,
        column: 15,
        span: 4501..4503,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 16,
        span: 4503..4504,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 242,
        column: 19,
        span: 4505..4507,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 242,
        column: 21,
        span: 4507..4509,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 22,
        span: 4509..4510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 243,
        column: 7,
        span: 4511..4517,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 8,
        span: 4517..4518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testG",
        ),
        line: 243,
        column: 13,
        span: 4518..4523,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 14,
        span: 4523..4524,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 243,
        column: 15,
        span: 4523..4525,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 16,
        span: 4525..4526,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 243,
        column: 19,
        span: 4527..4529,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 243,
        column: 22,
        span: 4529..4532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 23,
        span: 4532..4533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 247,
        column: 6,
        span: 4617..4622,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 247,
        column: 11,
        span: 4623..4627,
    },
]
